// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Search.Documents.Indexes
{
    /// <summary>
    /// Removes stop words from a token stream. This token filter is implemented using
    /// Apache Lucene.
    /// </summary>
    public partial class StopwordsTokenFilter : TokenFilter
    {
        /// <summary> Initializes a new instance of <see cref="StopwordsTokenFilter"/>. </summary>
        /// <param name="name">
        /// The name of the token filter. It must only contain letters, digits, spaces,
        /// dashes or underscores, can only start and end with alphanumeric characters, and
        /// is limited to 128 characters.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public StopwordsTokenFilter(string name) : base(name)
        {
            Argument.AssertNotNull(name, nameof(name));

            OdataType = "#Microsoft.Azure.Search.StopwordsTokenFilter";
            Stopwords = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="StopwordsTokenFilter"/>. </summary>
        /// <param name="odataType"> The discriminator for derived types. </param>
        /// <param name="name">
        /// The name of the token filter. It must only contain letters, digits, spaces,
        /// dashes or underscores, can only start and end with alphanumeric characters, and
        /// is limited to 128 characters.
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="stopwords">
        /// The list of stopwords. This property and the stopwords list property cannot
        /// both be set.
        /// </param>
        /// <param name="stopwordsList">
        /// A predefined list of stopwords to use. This property and the stopwords property
        /// cannot both be set. Default is English.
        /// </param>
        /// <param name="ignoreCase">
        /// A value indicating whether to ignore case. If true, all words are converted to
        /// lower case first. Default is false.
        /// </param>
        /// <param name="removeTrailing">
        /// A value indicating whether to ignore the last search term if it's a stop word.
        /// Default is true.
        /// </param>
        internal StopwordsTokenFilter(string odataType, string name, IDictionary<string, BinaryData> serializedAdditionalRawData, IList<string> stopwords, StopwordsList? stopwordsList, bool? ignoreCase, bool? removeTrailing) : base(odataType, name, serializedAdditionalRawData)
        {
            Stopwords = stopwords;
            StopwordsList = stopwordsList;
            IgnoreCase = ignoreCase;
            RemoveTrailing = removeTrailing;
        }

        /// <summary> Initializes a new instance of <see cref="StopwordsTokenFilter"/> for deserialization. </summary>
        internal StopwordsTokenFilter()
        {
        }

        /// <summary>
        /// The list of stopwords. This property and the stopwords list property cannot
        /// both be set.
        /// </summary>
        public IList<string> Stopwords { get; }
        /// <summary>
        /// A predefined list of stopwords to use. This property and the stopwords property
        /// cannot both be set. Default is English.
        /// </summary>
        public StopwordsList? StopwordsList { get; set; }
        /// <summary>
        /// A value indicating whether to ignore case. If true, all words are converted to
        /// lower case first. Default is false.
        /// </summary>
        public bool? IgnoreCase { get; set; }
        /// <summary>
        /// A value indicating whether to ignore the last search term if it's a stop word.
        /// Default is true.
        /// </summary>
        public bool? RemoveTrailing { get; set; }
    }
}
