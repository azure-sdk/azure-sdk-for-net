// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Search.Documents.Indexes
{
    /// <summary>
    /// Flexibly separates text into terms via a regular expression pattern. This
    /// analyzer is implemented using Apache Lucene.
    /// </summary>
    public partial class PatternAnalyzer : LexicalAnalyzer
    {
        /// <summary> Initializes a new instance of <see cref="PatternAnalyzer"/>. </summary>
        /// <param name="name">
        /// The name of the analyzer. It must only contain letters, digits, spaces, dashes
        /// or underscores, can only start and end with alphanumeric characters, and is
        /// limited to 128 characters.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public PatternAnalyzer(string name) : base(name)
        {
            Argument.AssertNotNull(name, nameof(name));

            OdataType = "#Microsoft.Azure.Search.PatternAnalyzer";
            Stopwords = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="PatternAnalyzer"/>. </summary>
        /// <param name="odataType"> The discriminator for derived types. </param>
        /// <param name="name">
        /// The name of the analyzer. It must only contain letters, digits, spaces, dashes
        /// or underscores, can only start and end with alphanumeric characters, and is
        /// limited to 128 characters.
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="lowercase"> A value indicating whether terms should be lower-cased. Default is true. </param>
        /// <param name="pattern">
        /// A regular expression pattern to match token separators. Default is an
        /// expression that matches one or more non-word characters.
        /// </param>
        /// <param name="flags"> Regular expression flags. </param>
        /// <param name="stopwords"> A list of stopwords. </param>
        internal PatternAnalyzer(string odataType, string name, IDictionary<string, BinaryData> serializedAdditionalRawData, bool? lowercase, string pattern, RegexFlags? flags, IList<string> stopwords) : base(odataType, name, serializedAdditionalRawData)
        {
            Lowercase = lowercase;
            Pattern = pattern;
            Flags = flags;
            Stopwords = stopwords;
        }

        /// <summary> Initializes a new instance of <see cref="PatternAnalyzer"/> for deserialization. </summary>
        internal PatternAnalyzer()
        {
        }

        /// <summary> A value indicating whether terms should be lower-cased. Default is true. </summary>
        public bool? Lowercase { get; set; }
        /// <summary>
        /// A regular expression pattern to match token separators. Default is an
        /// expression that matches one or more non-word characters.
        /// </summary>
        public string Pattern { get; set; }
        /// <summary> Regular expression flags. </summary>
        public RegexFlags? Flags { get; set; }
        /// <summary> A list of stopwords. </summary>
        public IList<string> Stopwords { get; }
    }
}
