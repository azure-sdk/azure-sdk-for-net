// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Search.Documents.Indexes
{
    /// <summary> The language to use for a Snowball token filter. </summary>
    public readonly partial struct SnowballTokenFilterLanguage : IEquatable<SnowballTokenFilterLanguage>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SnowballTokenFilterLanguage"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SnowballTokenFilterLanguage(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ArmenianValue = "armenian";
        private const string BasqueValue = "basque";
        private const string CatalanValue = "catalan";
        private const string DanishValue = "danish";
        private const string DutchValue = "dutch";
        private const string EnglishValue = "english";
        private const string FinnishValue = "finnish";
        private const string FrenchValue = "french";
        private const string GermanValue = "german";
        private const string German2Value = "german2";
        private const string HungarianValue = "hungarian";
        private const string ItalianValue = "italian";
        private const string KpValue = "kp";
        private const string LovinsValue = "lovins";
        private const string NorwegianValue = "norwegian";
        private const string PorterValue = "porter";
        private const string PortugueseValue = "portuguese";
        private const string RomanianValue = "romanian";
        private const string RussianValue = "russian";
        private const string SpanishValue = "spanish";
        private const string SwedishValue = "swedish";
        private const string TurkishValue = "turkish";

        /// <summary> Selects the Lucene Snowball stemming tokenizer for Armenian. </summary>
        public static SnowballTokenFilterLanguage Armenian { get; } = new SnowballTokenFilterLanguage(ArmenianValue);
        /// <summary> Selects the Lucene Snowball stemming tokenizer for Basque. </summary>
        public static SnowballTokenFilterLanguage Basque { get; } = new SnowballTokenFilterLanguage(BasqueValue);
        /// <summary> Selects the Lucene Snowball stemming tokenizer for Catalan. </summary>
        public static SnowballTokenFilterLanguage Catalan { get; } = new SnowballTokenFilterLanguage(CatalanValue);
        /// <summary> Selects the Lucene Snowball stemming tokenizer for Danish. </summary>
        public static SnowballTokenFilterLanguage Danish { get; } = new SnowballTokenFilterLanguage(DanishValue);
        /// <summary> Selects the Lucene Snowball stemming tokenizer for Dutch. </summary>
        public static SnowballTokenFilterLanguage Dutch { get; } = new SnowballTokenFilterLanguage(DutchValue);
        /// <summary> Selects the Lucene Snowball stemming tokenizer for English. </summary>
        public static SnowballTokenFilterLanguage English { get; } = new SnowballTokenFilterLanguage(EnglishValue);
        /// <summary> Selects the Lucene Snowball stemming tokenizer for Finnish. </summary>
        public static SnowballTokenFilterLanguage Finnish { get; } = new SnowballTokenFilterLanguage(FinnishValue);
        /// <summary> Selects the Lucene Snowball stemming tokenizer for French. </summary>
        public static SnowballTokenFilterLanguage French { get; } = new SnowballTokenFilterLanguage(FrenchValue);
        /// <summary> Selects the Lucene Snowball stemming tokenizer for German. </summary>
        public static SnowballTokenFilterLanguage German { get; } = new SnowballTokenFilterLanguage(GermanValue);
        /// <summary>
        /// Selects the Lucene Snowball stemming tokenizer that uses the German variant
        /// algorithm.
        /// </summary>
        public static SnowballTokenFilterLanguage German2 { get; } = new SnowballTokenFilterLanguage(German2Value);
        /// <summary> Selects the Lucene Snowball stemming tokenizer for Hungarian. </summary>
        public static SnowballTokenFilterLanguage Hungarian { get; } = new SnowballTokenFilterLanguage(HungarianValue);
        /// <summary> Selects the Lucene Snowball stemming tokenizer for Italian. </summary>
        public static SnowballTokenFilterLanguage Italian { get; } = new SnowballTokenFilterLanguage(ItalianValue);
        /// <summary>
        /// Selects the Lucene Snowball stemming tokenizer for Dutch that uses the
        /// Kraaij-Pohlmann stemming algorithm.
        /// </summary>
        public static SnowballTokenFilterLanguage Kp { get; } = new SnowballTokenFilterLanguage(KpValue);
        /// <summary>
        /// Selects the Lucene Snowball stemming tokenizer for English that uses the Lovins
        /// stemming algorithm.
        /// </summary>
        public static SnowballTokenFilterLanguage Lovins { get; } = new SnowballTokenFilterLanguage(LovinsValue);
        /// <summary> Selects the Lucene Snowball stemming tokenizer for Norwegian. </summary>
        public static SnowballTokenFilterLanguage Norwegian { get; } = new SnowballTokenFilterLanguage(NorwegianValue);
        /// <summary>
        /// Selects the Lucene Snowball stemming tokenizer for English that uses the Porter
        /// stemming algorithm.
        /// </summary>
        public static SnowballTokenFilterLanguage Porter { get; } = new SnowballTokenFilterLanguage(PorterValue);
        /// <summary> Selects the Lucene Snowball stemming tokenizer for Portuguese. </summary>
        public static SnowballTokenFilterLanguage Portuguese { get; } = new SnowballTokenFilterLanguage(PortugueseValue);
        /// <summary> Selects the Lucene Snowball stemming tokenizer for Romanian. </summary>
        public static SnowballTokenFilterLanguage Romanian { get; } = new SnowballTokenFilterLanguage(RomanianValue);
        /// <summary> Selects the Lucene Snowball stemming tokenizer for Russian. </summary>
        public static SnowballTokenFilterLanguage Russian { get; } = new SnowballTokenFilterLanguage(RussianValue);
        /// <summary> Selects the Lucene Snowball stemming tokenizer for Spanish. </summary>
        public static SnowballTokenFilterLanguage Spanish { get; } = new SnowballTokenFilterLanguage(SpanishValue);
        /// <summary> Selects the Lucene Snowball stemming tokenizer for Swedish. </summary>
        public static SnowballTokenFilterLanguage Swedish { get; } = new SnowballTokenFilterLanguage(SwedishValue);
        /// <summary> Selects the Lucene Snowball stemming tokenizer for Turkish. </summary>
        public static SnowballTokenFilterLanguage Turkish { get; } = new SnowballTokenFilterLanguage(TurkishValue);
        /// <summary> Determines if two <see cref="SnowballTokenFilterLanguage"/> values are the same. </summary>
        public static bool operator ==(SnowballTokenFilterLanguage left, SnowballTokenFilterLanguage right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SnowballTokenFilterLanguage"/> values are not the same. </summary>
        public static bool operator !=(SnowballTokenFilterLanguage left, SnowballTokenFilterLanguage right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="SnowballTokenFilterLanguage"/>. </summary>
        public static implicit operator SnowballTokenFilterLanguage(string value) => new SnowballTokenFilterLanguage(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SnowballTokenFilterLanguage other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SnowballTokenFilterLanguage other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
