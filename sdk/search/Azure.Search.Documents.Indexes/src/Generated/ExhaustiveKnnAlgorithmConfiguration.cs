// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Search.Documents.Indexes
{
    /// <summary>
    /// Contains configuration options specific to the exhaustive KNN algorithm used
    /// during querying, which will perform brute-force search across the entire vector
    /// index.
    /// </summary>
    public partial class ExhaustiveKnnAlgorithmConfiguration : VectorSearchAlgorithmConfiguration
    {
        /// <summary> Initializes a new instance of <see cref="ExhaustiveKnnAlgorithmConfiguration"/>. </summary>
        /// <param name="name"> The name to associate with this particular configuration. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public ExhaustiveKnnAlgorithmConfiguration(string name) : base(name)
        {
            Argument.AssertNotNull(name, nameof(name));

            Kind = VectorSearchAlgorithmKind.ExhaustiveKnn;
        }

        /// <summary> Initializes a new instance of <see cref="ExhaustiveKnnAlgorithmConfiguration"/>. </summary>
        /// <param name="name"> The name to associate with this particular configuration. </param>
        /// <param name="kind"> Type of VectorSearchAlgorithmConfiguration. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="exhaustiveKnnParameters"> Contains the parameters specific to exhaustive KNN algorithm. </param>
        internal ExhaustiveKnnAlgorithmConfiguration(string name, VectorSearchAlgorithmKind kind, IDictionary<string, BinaryData> serializedAdditionalRawData, ExhaustiveKnnParameters exhaustiveKnnParameters) : base(name, kind, serializedAdditionalRawData)
        {
            ExhaustiveKnnParameters = exhaustiveKnnParameters;
        }

        /// <summary> Initializes a new instance of <see cref="ExhaustiveKnnAlgorithmConfiguration"/> for deserialization. </summary>
        internal ExhaustiveKnnAlgorithmConfiguration()
        {
        }

        /// <summary> Contains the parameters specific to exhaustive KNN algorithm. </summary>
        public ExhaustiveKnnParameters ExhaustiveKnnParameters { get; set; }
    }
}
