// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Search.Documents.Indexes
{
    /// <summary>
    /// Contains configuration options specific to the compression method used during
    /// indexing or querying.
    /// Please note <see cref="VectorSearchCompression"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
    /// The available derived classes include <see cref="BinaryQuantizationCompression"/> and <see cref="ScalarQuantizationCompression"/>.
    /// </summary>
    public abstract partial class VectorSearchCompression
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private protected IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="VectorSearchCompression"/>. </summary>
        /// <param name="name"> The name to associate with this particular configuration. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        protected VectorSearchCompression(string name)
        {
            Argument.AssertNotNull(name, nameof(name));

            Name = name;
        }

        /// <summary> Initializes a new instance of <see cref="VectorSearchCompression"/>. </summary>
        /// <param name="name"> The name to associate with this particular configuration. </param>
        /// <param name="rerankWithOriginalVectors">
        /// If set to true, once the ordered set of results calculated using compressed
        /// vectors are obtained, they will be reranked again by recalculating the
        /// full-precision similarity scores. This will improve recall at the expense of
        /// latency.
        /// </param>
        /// <param name="defaultOversampling">
        /// Default oversampling factor. Oversampling will internally request more
        /// documents (specified by this multiplier) in the initial search. This increases
        /// the set of results that will be reranked using recomputed similarity scores
        /// from full-precision vectors. Minimum value is 1, meaning no oversampling (1x).
        /// This parameter can only be set when rerankWithOriginalVectors is true. Higher
        /// values improve recall at the expense of latency.
        /// </param>
        /// <param name="rescoringOptions"> Contains the options for rescoring. </param>
        /// <param name="truncationDimension">
        /// The number of dimensions to truncate the vectors to. Truncating the vectors
        /// reduces the size of the vectors and the amount of data that needs to be
        /// transferred during search. This can save storage cost and improve search
        /// performance at the expense of recall. It should be only used for embeddings
        /// trained with Matryoshka Representation Learning (MRL) such as OpenAI
        /// text-embedding-3-large (small). The default value is null, which means no
        /// truncation.
        /// </param>
        /// <param name="kind"> Type of VectorSearchCompression. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal VectorSearchCompression(string name, bool? rerankWithOriginalVectors, double? defaultOversampling, RescoringOptions rescoringOptions, int? truncationDimension, VectorSearchCompressionKind kind, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Name = name;
            RerankWithOriginalVectors = rerankWithOriginalVectors;
            DefaultOversampling = defaultOversampling;
            RescoringOptions = rescoringOptions;
            TruncationDimension = truncationDimension;
            Kind = kind;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="VectorSearchCompression"/> for deserialization. </summary>
        internal VectorSearchCompression()
        {
        }

        /// <summary> The name to associate with this particular configuration. </summary>
        public string Name { get; set; }
        /// <summary>
        /// If set to true, once the ordered set of results calculated using compressed
        /// vectors are obtained, they will be reranked again by recalculating the
        /// full-precision similarity scores. This will improve recall at the expense of
        /// latency.
        /// </summary>
        public bool? RerankWithOriginalVectors { get; set; }
        /// <summary>
        /// Default oversampling factor. Oversampling will internally request more
        /// documents (specified by this multiplier) in the initial search. This increases
        /// the set of results that will be reranked using recomputed similarity scores
        /// from full-precision vectors. Minimum value is 1, meaning no oversampling (1x).
        /// This parameter can only be set when rerankWithOriginalVectors is true. Higher
        /// values improve recall at the expense of latency.
        /// </summary>
        public double? DefaultOversampling { get; set; }
        /// <summary> Contains the options for rescoring. </summary>
        public RescoringOptions RescoringOptions { get; set; }
        /// <summary>
        /// The number of dimensions to truncate the vectors to. Truncating the vectors
        /// reduces the size of the vectors and the amount of data that needs to be
        /// transferred during search. This can save storage cost and improve search
        /// performance at the expense of recall. It should be only used for embeddings
        /// trained with Matryoshka Representation Learning (MRL) such as OpenAI
        /// text-embedding-3-large (small). The default value is null, which means no
        /// truncation.
        /// </summary>
        public int? TruncationDimension { get; set; }
        /// <summary> Type of VectorSearchCompression. </summary>
        internal VectorSearchCompressionKind Kind { get; set; }
    }
}
