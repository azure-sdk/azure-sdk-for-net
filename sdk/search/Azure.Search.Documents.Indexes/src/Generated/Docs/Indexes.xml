<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="CreateAsync(SearchIndex,CancellationToken)">
      <example>
This sample shows how to call CreateAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Indexes client = new SearchClient(endpoint, credential).GetIndexesClient();

SearchIndex index = new SearchIndex("hotels", new SearchField[]
{
    new SearchField("hotelId", SearchFieldDataType.String)
    {
        Key = true,
        Searchable = false,
    },
    new SearchField("baseRate", SearchFieldDataType.Double),
    new SearchField("description", SearchFieldDataType.String)
    {
        Filterable = false,
        Sortable = false,
        Facetable = false,
    },
    new SearchField("descriptionEmbedding", new SearchFieldDataType("Collection(Edm.Single)"))
    {
        Key = false,
        Retrievable = true,
        Searchable = true,
        Filterable = false,
        Sortable = false,
        Facetable = false,
        Dimensions = 1536,
        VectorSearchProfile = "myHnswSQProfile",
        SynonymMaps = {},
    },
    new SearchField("descriptionEmbedding_notstored", new SearchFieldDataType("Collection(Edm.Single)"))
    {
        Key = false,
        Retrievable = false,
        Stored = false,
        Searchable = true,
        Filterable = false,
        Sortable = false,
        Facetable = false,
        Dimensions = 1536,
        VectorSearchProfile = "myHnswSQProfile",
        SynonymMaps = {},
    },
    new SearchField("descriptionEmbedding_forBQ", new SearchFieldDataType("Collection(Edm.Single)"))
    {
        Key = false,
        Retrievable = true,
        Searchable = true,
        Filterable = false,
        Sortable = false,
        Facetable = false,
        Dimensions = 1536,
        VectorSearchProfile = "myHnswBQProfile",
        SynonymMaps = {},
    },
    new SearchField("description_fr", SearchFieldDataType.String)
    {
        Filterable = false,
        Sortable = false,
        Facetable = false,
        Analyzer = LexicalAnalyzerName.FrLucene,
    },
    new SearchField("hotelName", SearchFieldDataType.String),
    new SearchField("nameEmbedding", new SearchFieldDataType("Collection(Edm.Half)"))
    {
        Key = false,
        Retrievable = true,
        Searchable = true,
        Filterable = false,
        Sortable = false,
        Facetable = false,
        Dimensions = 1536,
        VectorSearchProfile = "myHnswProfile",
        SynonymMaps = {},
    },
    new SearchField("category", SearchFieldDataType.String),
    new SearchField("tags", new SearchFieldDataType("Collection(Edm.String)"))
    {
        Analyzer = new LexicalAnalyzerName("tagsAnalyzer"),
    },
    new SearchField("parkingIncluded", SearchFieldDataType.Boolean),
    new SearchField("smokingAllowed", SearchFieldDataType.Boolean),
    new SearchField("lastRenovationDate", SearchFieldDataType.DateTimeOffset),
    new SearchField("rating", SearchFieldDataType.Int32),
    new SearchField("location", SearchFieldDataType.GeographyPoint)
})
{
    ScoringProfiles = {new ScoringProfile("geo")
    {
        Text = new TextWeights(new Dictionary<string, double>
        {
            ["hotelName"] = 5
        }),
        Functions = {new DistanceScoringFunction("location", 5, new DistanceScoringParameters("currentLocation", 10))
        {
            Interpolation = ScoringFunctionInterpolation.Logarithmic,
        }},
    }},
    DefaultScoringProfile = "geo",
    CorsOptions = new CorsOptions(new string[] { "tempuri.org" })
    {
        MaxAgeInSeconds = 60L,
    },
    Suggesters = { new SearchSuggester("sg", new string[] { "hotelName" }) },
    Analyzers = {new CustomAnalyzer("tagsAnalyzer", LexicalTokenizerName.Standard)
    {
        CharFilters = {CharFilterName.HtmlStrip},
    }},
    EncryptionKey = new SearchResourceEncryptionKey("myUserManagedEncryptionKey-createdinAzureKeyVault", "myKeyVersion-32charAlphaNumericString", "https://myKeyVault.vault.azure.net")
    {
        AccessCredentials = new AzureActiveDirectoryApplicationCredentials("00000000-0000-0000-0000-000000000000")
        {
            ApplicationSecret = "<applicationSecret>",
        },
    },
    Similarity = new BM25SimilarityAlgorithm
    {
        K1 = 1.3,
        B = 0.5,
    },
    Semantic = new SemanticSearch
    {
        Configurations = {new SemanticConfiguration("semanticHotels", new SemanticPrioritizedFields
        {
            TitleField = new SemanticField("hotelName"),
            PrioritizedContentFields = {new SemanticField("description"), new SemanticField("description_fr")},
            PrioritizedKeywordsFields = {new SemanticField("tags"), new SemanticField("category")},
        })},
    },
    VectorSearch = new VectorSearch
    {
        Profiles = {new VectorSearchProfile("myHnswProfile", "myHnsw"), new VectorSearchProfile("myHnswSQProfile", "myHnsw")
        {
            Compression = "mySQ8",
        }, new VectorSearchProfile("myHnswBQProfile", "myHnsw")
        {
            Compression = "myBQ",
        }, new VectorSearchProfile("myAlgorithm", "myExhaustive")},
        Algorithms = {new HnswAlgorithmConfiguration("myHnsw")
        {
            HnswParameters = new HnswParameters
            {
                M = 4,
                Metric = VectorSearchAlgorithmMetric.Cosine,
            },
        }, new ExhaustiveKnnAlgorithmConfiguration("myExhaustive")
        {
            ExhaustiveKnnParameters = new ExhaustiveKnnParameters
            {
                Metric = VectorSearchAlgorithmMetric.Cosine,
            },
        }},
        Compressions = {new ScalarQuantizationCompression("mySQ8")
        {
            ScalarQuantizationParameters = new ScalarQuantizationParameters
            {
                QuantizedDataType = VectorSearchCompressionTarget.Int8,
            },
            RerankWithOriginalVectors = true,
            DefaultOversampling = 10,
        }, new BinaryQuantizationCompression("myBQ")
        {
            RerankWithOriginalVectors = true,
            DefaultOversampling = 10,
        }},
    },
};
Response<SearchIndex> response = await client.CreateAsync(index);
]]></code></example>
    </member>
    <member name="Create(SearchIndex,CancellationToken)">
      <example>
This sample shows how to call Create.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Indexes client = new SearchClient(endpoint, credential).GetIndexesClient();

SearchIndex index = new SearchIndex("hotels", new SearchField[]
{
    new SearchField("hotelId", SearchFieldDataType.String)
    {
        Key = true,
        Searchable = false,
    },
    new SearchField("baseRate", SearchFieldDataType.Double),
    new SearchField("description", SearchFieldDataType.String)
    {
        Filterable = false,
        Sortable = false,
        Facetable = false,
    },
    new SearchField("descriptionEmbedding", new SearchFieldDataType("Collection(Edm.Single)"))
    {
        Key = false,
        Retrievable = true,
        Searchable = true,
        Filterable = false,
        Sortable = false,
        Facetable = false,
        Dimensions = 1536,
        VectorSearchProfile = "myHnswSQProfile",
        SynonymMaps = {},
    },
    new SearchField("descriptionEmbedding_notstored", new SearchFieldDataType("Collection(Edm.Single)"))
    {
        Key = false,
        Retrievable = false,
        Stored = false,
        Searchable = true,
        Filterable = false,
        Sortable = false,
        Facetable = false,
        Dimensions = 1536,
        VectorSearchProfile = "myHnswSQProfile",
        SynonymMaps = {},
    },
    new SearchField("descriptionEmbedding_forBQ", new SearchFieldDataType("Collection(Edm.Single)"))
    {
        Key = false,
        Retrievable = true,
        Searchable = true,
        Filterable = false,
        Sortable = false,
        Facetable = false,
        Dimensions = 1536,
        VectorSearchProfile = "myHnswBQProfile",
        SynonymMaps = {},
    },
    new SearchField("description_fr", SearchFieldDataType.String)
    {
        Filterable = false,
        Sortable = false,
        Facetable = false,
        Analyzer = LexicalAnalyzerName.FrLucene,
    },
    new SearchField("hotelName", SearchFieldDataType.String),
    new SearchField("nameEmbedding", new SearchFieldDataType("Collection(Edm.Half)"))
    {
        Key = false,
        Retrievable = true,
        Searchable = true,
        Filterable = false,
        Sortable = false,
        Facetable = false,
        Dimensions = 1536,
        VectorSearchProfile = "myHnswProfile",
        SynonymMaps = {},
    },
    new SearchField("category", SearchFieldDataType.String),
    new SearchField("tags", new SearchFieldDataType("Collection(Edm.String)"))
    {
        Analyzer = new LexicalAnalyzerName("tagsAnalyzer"),
    },
    new SearchField("parkingIncluded", SearchFieldDataType.Boolean),
    new SearchField("smokingAllowed", SearchFieldDataType.Boolean),
    new SearchField("lastRenovationDate", SearchFieldDataType.DateTimeOffset),
    new SearchField("rating", SearchFieldDataType.Int32),
    new SearchField("location", SearchFieldDataType.GeographyPoint)
})
{
    ScoringProfiles = {new ScoringProfile("geo")
    {
        Text = new TextWeights(new Dictionary<string, double>
        {
            ["hotelName"] = 5
        }),
        Functions = {new DistanceScoringFunction("location", 5, new DistanceScoringParameters("currentLocation", 10))
        {
            Interpolation = ScoringFunctionInterpolation.Logarithmic,
        }},
    }},
    DefaultScoringProfile = "geo",
    CorsOptions = new CorsOptions(new string[] { "tempuri.org" })
    {
        MaxAgeInSeconds = 60L,
    },
    Suggesters = { new SearchSuggester("sg", new string[] { "hotelName" }) },
    Analyzers = {new CustomAnalyzer("tagsAnalyzer", LexicalTokenizerName.Standard)
    {
        CharFilters = {CharFilterName.HtmlStrip},
    }},
    EncryptionKey = new SearchResourceEncryptionKey("myUserManagedEncryptionKey-createdinAzureKeyVault", "myKeyVersion-32charAlphaNumericString", "https://myKeyVault.vault.azure.net")
    {
        AccessCredentials = new AzureActiveDirectoryApplicationCredentials("00000000-0000-0000-0000-000000000000")
        {
            ApplicationSecret = "<applicationSecret>",
        },
    },
    Similarity = new BM25SimilarityAlgorithm
    {
        K1 = 1.3,
        B = 0.5,
    },
    Semantic = new SemanticSearch
    {
        Configurations = {new SemanticConfiguration("semanticHotels", new SemanticPrioritizedFields
        {
            TitleField = new SemanticField("hotelName"),
            PrioritizedContentFields = {new SemanticField("description"), new SemanticField("description_fr")},
            PrioritizedKeywordsFields = {new SemanticField("tags"), new SemanticField("category")},
        })},
    },
    VectorSearch = new VectorSearch
    {
        Profiles = {new VectorSearchProfile("myHnswProfile", "myHnsw"), new VectorSearchProfile("myHnswSQProfile", "myHnsw")
        {
            Compression = "mySQ8",
        }, new VectorSearchProfile("myHnswBQProfile", "myHnsw")
        {
            Compression = "myBQ",
        }, new VectorSearchProfile("myAlgorithm", "myExhaustive")},
        Algorithms = {new HnswAlgorithmConfiguration("myHnsw")
        {
            HnswParameters = new HnswParameters
            {
                M = 4,
                Metric = VectorSearchAlgorithmMetric.Cosine,
            },
        }, new ExhaustiveKnnAlgorithmConfiguration("myExhaustive")
        {
            ExhaustiveKnnParameters = new ExhaustiveKnnParameters
            {
                Metric = VectorSearchAlgorithmMetric.Cosine,
            },
        }},
        Compressions = {new ScalarQuantizationCompression("mySQ8")
        {
            ScalarQuantizationParameters = new ScalarQuantizationParameters
            {
                QuantizedDataType = VectorSearchCompressionTarget.Int8,
            },
            RerankWithOriginalVectors = true,
            DefaultOversampling = 10,
        }, new BinaryQuantizationCompression("myBQ")
        {
            RerankWithOriginalVectors = true,
            DefaultOversampling = 10,
        }},
    },
};
Response<SearchIndex> response = client.Create(index);
]]></code></example>
    </member>
    <member name="CreateAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Indexes client = new SearchClient(endpoint, credential).GetIndexesClient();

using RequestContent content = RequestContent.Create(new
{
    name = "hotels",
    fields = new object[]
    {
        new
        {
            name = "hotelId",
            type = "Edm.String",
            key = true,
            searchable = false,
        },
        new
        {
            name = "baseRate",
            type = "Edm.Double",
        },
        new
        {
            name = "description",
            type = "Edm.String",
            filterable = false,
            sortable = false,
            facetable = false,
        },
        new
        {
            name = "descriptionEmbedding",
            type = "Collection(Edm.Single)",
            searchable = true,
            filterable = false,
            retrievable = true,
            sortable = false,
            facetable = false,
            key = false,
            synonymMaps = Array.Empty<object>(),
            dimensions = 1536,
            vectorSearchProfile = "myHnswSQProfile",
        },
        new
        {
            name = "descriptionEmbedding_notstored",
            type = "Collection(Edm.Single)",
            searchable = true,
            filterable = false,
            retrievable = false,
            stored = false,
            sortable = false,
            facetable = false,
            key = false,
            synonymMaps = Array.Empty<object>(),
            dimensions = 1536,
            vectorSearchProfile = "myHnswSQProfile",
        },
        new
        {
            name = "descriptionEmbedding_forBQ",
            type = "Collection(Edm.Single)",
            searchable = true,
            filterable = false,
            retrievable = true,
            sortable = false,
            facetable = false,
            key = false,
            synonymMaps = Array.Empty<object>(),
            dimensions = 1536,
            vectorSearchProfile = "myHnswBQProfile",
        },
        new
        {
            name = "description_fr",
            type = "Edm.String",
            filterable = false,
            sortable = false,
            facetable = false,
            analyzer = "fr.lucene",
        },
        new
        {
            name = "hotelName",
            type = "Edm.String",
        },
        new
        {
            name = "nameEmbedding",
            type = "Collection(Edm.Half)",
            searchable = true,
            filterable = false,
            retrievable = true,
            sortable = false,
            facetable = false,
            key = false,
            synonymMaps = Array.Empty<object>(),
            dimensions = 1536,
            vectorSearchProfile = "myHnswProfile",
        },
        new
        {
            name = "category",
            type = "Edm.String",
        },
        new
        {
            name = "tags",
            type = "Collection(Edm.String)",
            analyzer = "tagsAnalyzer",
        },
        new
        {
            name = "parkingIncluded",
            type = "Edm.Boolean",
        },
        new
        {
            name = "smokingAllowed",
            type = "Edm.Boolean",
        },
        new
        {
            name = "lastRenovationDate",
            type = "Edm.DateTimeOffset",
        },
        new
        {
            name = "rating",
            type = "Edm.Int32",
        },
        new
        {
            name = "location",
            type = "Edm.GeographyPoint",
        }
    },
    scoringProfiles = new object[]
    {
        new
        {
            name = "geo",
            text = new
            {
                weights = new
                {
                    hotelName = 5,
                },
            },
            functions = new object[]
            {
                new
                {
                    type = "distance",
                    boost = 5,
                    fieldName = "location",
                    interpolation = "logarithmic",
                    distance = new
                    {
                        referencePointParameter = "currentLocation",
                        boostingDistance = 10,
                    },
                }
            },
        }
    },
    defaultScoringProfile = "geo",
    suggesters = new object[]
    {
        new
        {
            name = "sg",
            searchMode = "analyzingInfixMatching",
            sourceFields = new object[]
            {
                "hotelName"
            },
        }
    },
    analyzers = new object[]
    {
        new Dictionary<string, object>
        {
            ["name"] = "tagsAnalyzer",
            ["@odata.type"] = "#Microsoft.Azure.Search.CustomAnalyzer",
            ["charFilters"] = new object[]
            {
                "html_strip"
            },
            ["tokenizer"] = "standard_v2"
        }
    },
    corsOptions = new
    {
        allowedOrigins = new object[]
        {
            "tempuri.org"
        },
        maxAgeInSeconds = 60L,
    },
    encryptionKey = new
    {
        keyVaultKeyName = "myUserManagedEncryptionKey-createdinAzureKeyVault",
        keyVaultKeyVersion = "myKeyVersion-32charAlphaNumericString",
        keyVaultUri = "https://myKeyVault.vault.azure.net",
        accessCredentials = new
        {
            applicationId = "00000000-0000-0000-0000-000000000000",
            applicationSecret = "<applicationSecret>",
        },
    },
    similarity = new Dictionary<string, object>
    {
        ["@odata.type"] = "#Microsoft.Azure.Search.BM25Similarity",
        ["b"] = 0.5,
        ["k1"] = 1.3
    },
    semantic = new
    {
        configurations = new object[]
        {
            new
            {
                name = "semanticHotels",
                prioritizedFields = new
                {
                    titleField = new
                    {
                        fieldName = "hotelName",
                    },
                    prioritizedContentFields = new object[]
                    {
                        new
                        {
                            fieldName = "description",
                        },
                        new
                        {
                            fieldName = "description_fr",
                        }
                    },
                    prioritizedKeywordsFields = new object[]
                    {
                        new
                        {
                            fieldName = "tags",
                        },
                        new
                        {
                            fieldName = "category",
                        }
                    },
                },
            }
        },
    },
    vectorSearch = new
    {
        profiles = new object[]
        {
            new
            {
                name = "myHnswProfile",
                algorithm = "myHnsw",
            },
            new
            {
                name = "myHnswSQProfile",
                algorithm = "myHnsw",
                compression = "mySQ8",
            },
            new
            {
                name = "myHnswBQProfile",
                algorithm = "myHnsw",
                compression = "myBQ",
            },
            new
            {
                name = "myAlgorithm",
                algorithm = "myExhaustive",
            }
        },
        algorithms = new object[]
        {
            new
            {
                name = "myHnsw",
                kind = "hnsw",
                hnswParameters = new
                {
                    m = 4,
                    metric = "cosine",
                },
            },
            new
            {
                name = "myExhaustive",
                kind = "exhaustiveKnn",
                exhaustiveKnnParameters = new
                {
                    metric = "cosine",
                },
            }
        },
        compressions = new object[]
        {
            new
            {
                name = "mySQ8",
                kind = "scalarQuantization",
                scalarQuantizationParameters = new
                {
                    quantizedDataType = "int8",
                },
                rerankWithOriginalVectors = true,
                defaultOversampling = 10,
            },
            new
            {
                name = "myBQ",
                kind = "binaryQuantization",
                rerankWithOriginalVectors = true,
                defaultOversampling = 10,
            }
        },
    },
});
Response response = await client.CreateAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("fields")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("fields")[0].GetProperty("type").ToString());
]]></code></example>
    </member>
    <member name="Create(RequestContent,RequestContext)">
      <example>
This sample shows how to call Create and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Indexes client = new SearchClient(endpoint, credential).GetIndexesClient();

using RequestContent content = RequestContent.Create(new
{
    name = "hotels",
    fields = new object[]
    {
        new
        {
            name = "hotelId",
            type = "Edm.String",
            key = true,
            searchable = false,
        },
        new
        {
            name = "baseRate",
            type = "Edm.Double",
        },
        new
        {
            name = "description",
            type = "Edm.String",
            filterable = false,
            sortable = false,
            facetable = false,
        },
        new
        {
            name = "descriptionEmbedding",
            type = "Collection(Edm.Single)",
            searchable = true,
            filterable = false,
            retrievable = true,
            sortable = false,
            facetable = false,
            key = false,
            synonymMaps = Array.Empty<object>(),
            dimensions = 1536,
            vectorSearchProfile = "myHnswSQProfile",
        },
        new
        {
            name = "descriptionEmbedding_notstored",
            type = "Collection(Edm.Single)",
            searchable = true,
            filterable = false,
            retrievable = false,
            stored = false,
            sortable = false,
            facetable = false,
            key = false,
            synonymMaps = Array.Empty<object>(),
            dimensions = 1536,
            vectorSearchProfile = "myHnswSQProfile",
        },
        new
        {
            name = "descriptionEmbedding_forBQ",
            type = "Collection(Edm.Single)",
            searchable = true,
            filterable = false,
            retrievable = true,
            sortable = false,
            facetable = false,
            key = false,
            synonymMaps = Array.Empty<object>(),
            dimensions = 1536,
            vectorSearchProfile = "myHnswBQProfile",
        },
        new
        {
            name = "description_fr",
            type = "Edm.String",
            filterable = false,
            sortable = false,
            facetable = false,
            analyzer = "fr.lucene",
        },
        new
        {
            name = "hotelName",
            type = "Edm.String",
        },
        new
        {
            name = "nameEmbedding",
            type = "Collection(Edm.Half)",
            searchable = true,
            filterable = false,
            retrievable = true,
            sortable = false,
            facetable = false,
            key = false,
            synonymMaps = Array.Empty<object>(),
            dimensions = 1536,
            vectorSearchProfile = "myHnswProfile",
        },
        new
        {
            name = "category",
            type = "Edm.String",
        },
        new
        {
            name = "tags",
            type = "Collection(Edm.String)",
            analyzer = "tagsAnalyzer",
        },
        new
        {
            name = "parkingIncluded",
            type = "Edm.Boolean",
        },
        new
        {
            name = "smokingAllowed",
            type = "Edm.Boolean",
        },
        new
        {
            name = "lastRenovationDate",
            type = "Edm.DateTimeOffset",
        },
        new
        {
            name = "rating",
            type = "Edm.Int32",
        },
        new
        {
            name = "location",
            type = "Edm.GeographyPoint",
        }
    },
    scoringProfiles = new object[]
    {
        new
        {
            name = "geo",
            text = new
            {
                weights = new
                {
                    hotelName = 5,
                },
            },
            functions = new object[]
            {
                new
                {
                    type = "distance",
                    boost = 5,
                    fieldName = "location",
                    interpolation = "logarithmic",
                    distance = new
                    {
                        referencePointParameter = "currentLocation",
                        boostingDistance = 10,
                    },
                }
            },
        }
    },
    defaultScoringProfile = "geo",
    suggesters = new object[]
    {
        new
        {
            name = "sg",
            searchMode = "analyzingInfixMatching",
            sourceFields = new object[]
            {
                "hotelName"
            },
        }
    },
    analyzers = new object[]
    {
        new Dictionary<string, object>
        {
            ["name"] = "tagsAnalyzer",
            ["@odata.type"] = "#Microsoft.Azure.Search.CustomAnalyzer",
            ["charFilters"] = new object[]
            {
                "html_strip"
            },
            ["tokenizer"] = "standard_v2"
        }
    },
    corsOptions = new
    {
        allowedOrigins = new object[]
        {
            "tempuri.org"
        },
        maxAgeInSeconds = 60L,
    },
    encryptionKey = new
    {
        keyVaultKeyName = "myUserManagedEncryptionKey-createdinAzureKeyVault",
        keyVaultKeyVersion = "myKeyVersion-32charAlphaNumericString",
        keyVaultUri = "https://myKeyVault.vault.azure.net",
        accessCredentials = new
        {
            applicationId = "00000000-0000-0000-0000-000000000000",
            applicationSecret = "<applicationSecret>",
        },
    },
    similarity = new Dictionary<string, object>
    {
        ["@odata.type"] = "#Microsoft.Azure.Search.BM25Similarity",
        ["b"] = 0.5,
        ["k1"] = 1.3
    },
    semantic = new
    {
        configurations = new object[]
        {
            new
            {
                name = "semanticHotels",
                prioritizedFields = new
                {
                    titleField = new
                    {
                        fieldName = "hotelName",
                    },
                    prioritizedContentFields = new object[]
                    {
                        new
                        {
                            fieldName = "description",
                        },
                        new
                        {
                            fieldName = "description_fr",
                        }
                    },
                    prioritizedKeywordsFields = new object[]
                    {
                        new
                        {
                            fieldName = "tags",
                        },
                        new
                        {
                            fieldName = "category",
                        }
                    },
                },
            }
        },
    },
    vectorSearch = new
    {
        profiles = new object[]
        {
            new
            {
                name = "myHnswProfile",
                algorithm = "myHnsw",
            },
            new
            {
                name = "myHnswSQProfile",
                algorithm = "myHnsw",
                compression = "mySQ8",
            },
            new
            {
                name = "myHnswBQProfile",
                algorithm = "myHnsw",
                compression = "myBQ",
            },
            new
            {
                name = "myAlgorithm",
                algorithm = "myExhaustive",
            }
        },
        algorithms = new object[]
        {
            new
            {
                name = "myHnsw",
                kind = "hnsw",
                hnswParameters = new
                {
                    m = 4,
                    metric = "cosine",
                },
            },
            new
            {
                name = "myExhaustive",
                kind = "exhaustiveKnn",
                exhaustiveKnnParameters = new
                {
                    metric = "cosine",
                },
            }
        },
        compressions = new object[]
        {
            new
            {
                name = "mySQ8",
                kind = "scalarQuantization",
                scalarQuantizationParameters = new
                {
                    quantizedDataType = "int8",
                },
                rerankWithOriginalVectors = true,
                defaultOversampling = 10,
            },
            new
            {
                name = "myBQ",
                kind = "binaryQuantization",
                rerankWithOriginalVectors = true,
                defaultOversampling = 10,
            }
        },
    },
});
Response response = client.Create(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("fields")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("fields")[0].GetProperty("type").ToString());
]]></code></example>
    </member>
    <member name="CreateOrUpdateAsync(string,SearchIndex,bool?,MatchConditions,CancellationToken)">
      <example>
This sample shows how to call CreateOrUpdateAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Indexes client = new SearchClient(endpoint, credential).GetIndexesClient();

SearchIndex index = new SearchIndex("hotels", new SearchField[]
{
    new SearchField("hotelId", SearchFieldDataType.String)
    {
        Key = true,
        Searchable = false,
    },
    new SearchField("baseRate", SearchFieldDataType.Double),
    new SearchField("description", SearchFieldDataType.String)
    {
        Filterable = false,
        Sortable = false,
        Facetable = false,
    },
    new SearchField("descriptionEmbedding", new SearchFieldDataType("Collection(Edm.Single)"))
    {
        Retrievable = true,
        Searchable = true,
        Dimensions = 1536,
        VectorSearchProfile = "myHnswProfile",
    },
    new SearchField("description_fr", SearchFieldDataType.String)
    {
        Filterable = false,
        Sortable = false,
        Facetable = false,
        Analyzer = LexicalAnalyzerName.FrLucene,
    },
    new SearchField("hotelName", SearchFieldDataType.String),
    new SearchField("category", SearchFieldDataType.String),
    new SearchField("tags", new SearchFieldDataType("Collection(Edm.String)"))
    {
        Analyzer = new LexicalAnalyzerName("tagsAnalyzer"),
    },
    new SearchField("parkingIncluded", SearchFieldDataType.Boolean),
    new SearchField("smokingAllowed", SearchFieldDataType.Boolean),
    new SearchField("lastRenovationDate", SearchFieldDataType.DateTimeOffset),
    new SearchField("rating", SearchFieldDataType.Int32),
    new SearchField("location", SearchFieldDataType.GeographyPoint)
})
{
    ScoringProfiles = {new ScoringProfile("geo")
    {
        Text = new TextWeights(new Dictionary<string, double>
        {
            ["hotelName"] = 5
        }),
        Functions = {new DistanceScoringFunction("location", 5, new DistanceScoringParameters("currentLocation", 10))
        {
            Interpolation = ScoringFunctionInterpolation.Logarithmic,
        }},
    }},
    DefaultScoringProfile = "geo",
    CorsOptions = new CorsOptions(new string[] { "tempuri.org" })
    {
        MaxAgeInSeconds = 60L,
    },
    Suggesters = { new SearchSuggester("sg", new string[] { "hotelName" }) },
    Analyzers = {new CustomAnalyzer("tagsAnalyzer", LexicalTokenizerName.Standard)
    {
        CharFilters = {CharFilterName.HtmlStrip},
    }},
    EncryptionKey = new SearchResourceEncryptionKey("myUserManagedEncryptionKey-createdinAzureKeyVault", "myKeyVersion-32charAlphaNumericString", "https://myKeyVault.vault.azure.net"),
    Similarity = new ClassicSimilarityAlgorithm(),
    Semantic = new SemanticSearch
    {
        Configurations = {new SemanticConfiguration("semanticHotels", new SemanticPrioritizedFields
        {
            TitleField = new SemanticField("hotelName"),
            PrioritizedContentFields = {new SemanticField("description"), new SemanticField("description_fr")},
            PrioritizedKeywordsFields = {new SemanticField("tags"), new SemanticField("category")},
        })},
    },
    VectorSearch = new VectorSearch
    {
        Profiles = { new VectorSearchProfile("myHnswProfile", "myHnsw"), new VectorSearchProfile("myAlgorithm", "myExhaustive") },
        Algorithms = {new HnswAlgorithmConfiguration("myHnsw")
        {
            HnswParameters = new HnswParameters
            {
                M = 4,
                Metric = VectorSearchAlgorithmMetric.Cosine,
            },
        }, new ExhaustiveKnnAlgorithmConfiguration("myExhaustive")
        {
            ExhaustiveKnnParameters = new ExhaustiveKnnParameters
            {
                Metric = VectorSearchAlgorithmMetric.Cosine,
            },
        }},
    },
};
Response<SearchIndex> response = await client.CreateOrUpdateAsync("hotels", index);
]]></code></example>
    </member>
    <member name="CreateOrUpdate(string,SearchIndex,bool?,MatchConditions,CancellationToken)">
      <example>
This sample shows how to call CreateOrUpdate.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Indexes client = new SearchClient(endpoint, credential).GetIndexesClient();

SearchIndex index = new SearchIndex("hotels", new SearchField[]
{
    new SearchField("hotelId", SearchFieldDataType.String)
    {
        Key = true,
        Searchable = false,
    },
    new SearchField("baseRate", SearchFieldDataType.Double),
    new SearchField("description", SearchFieldDataType.String)
    {
        Filterable = false,
        Sortable = false,
        Facetable = false,
    },
    new SearchField("descriptionEmbedding", new SearchFieldDataType("Collection(Edm.Single)"))
    {
        Retrievable = true,
        Searchable = true,
        Dimensions = 1536,
        VectorSearchProfile = "myHnswProfile",
    },
    new SearchField("description_fr", SearchFieldDataType.String)
    {
        Filterable = false,
        Sortable = false,
        Facetable = false,
        Analyzer = LexicalAnalyzerName.FrLucene,
    },
    new SearchField("hotelName", SearchFieldDataType.String),
    new SearchField("category", SearchFieldDataType.String),
    new SearchField("tags", new SearchFieldDataType("Collection(Edm.String)"))
    {
        Analyzer = new LexicalAnalyzerName("tagsAnalyzer"),
    },
    new SearchField("parkingIncluded", SearchFieldDataType.Boolean),
    new SearchField("smokingAllowed", SearchFieldDataType.Boolean),
    new SearchField("lastRenovationDate", SearchFieldDataType.DateTimeOffset),
    new SearchField("rating", SearchFieldDataType.Int32),
    new SearchField("location", SearchFieldDataType.GeographyPoint)
})
{
    ScoringProfiles = {new ScoringProfile("geo")
    {
        Text = new TextWeights(new Dictionary<string, double>
        {
            ["hotelName"] = 5
        }),
        Functions = {new DistanceScoringFunction("location", 5, new DistanceScoringParameters("currentLocation", 10))
        {
            Interpolation = ScoringFunctionInterpolation.Logarithmic,
        }},
    }},
    DefaultScoringProfile = "geo",
    CorsOptions = new CorsOptions(new string[] { "tempuri.org" })
    {
        MaxAgeInSeconds = 60L,
    },
    Suggesters = { new SearchSuggester("sg", new string[] { "hotelName" }) },
    Analyzers = {new CustomAnalyzer("tagsAnalyzer", LexicalTokenizerName.Standard)
    {
        CharFilters = {CharFilterName.HtmlStrip},
    }},
    EncryptionKey = new SearchResourceEncryptionKey("myUserManagedEncryptionKey-createdinAzureKeyVault", "myKeyVersion-32charAlphaNumericString", "https://myKeyVault.vault.azure.net"),
    Similarity = new ClassicSimilarityAlgorithm(),
    Semantic = new SemanticSearch
    {
        Configurations = {new SemanticConfiguration("semanticHotels", new SemanticPrioritizedFields
        {
            TitleField = new SemanticField("hotelName"),
            PrioritizedContentFields = {new SemanticField("description"), new SemanticField("description_fr")},
            PrioritizedKeywordsFields = {new SemanticField("tags"), new SemanticField("category")},
        })},
    },
    VectorSearch = new VectorSearch
    {
        Profiles = { new VectorSearchProfile("myHnswProfile", "myHnsw"), new VectorSearchProfile("myAlgorithm", "myExhaustive") },
        Algorithms = {new HnswAlgorithmConfiguration("myHnsw")
        {
            HnswParameters = new HnswParameters
            {
                M = 4,
                Metric = VectorSearchAlgorithmMetric.Cosine,
            },
        }, new ExhaustiveKnnAlgorithmConfiguration("myExhaustive")
        {
            ExhaustiveKnnParameters = new ExhaustiveKnnParameters
            {
                Metric = VectorSearchAlgorithmMetric.Cosine,
            },
        }},
    },
};
Response<SearchIndex> response = client.CreateOrUpdate("hotels", index);
]]></code></example>
    </member>
    <member name="CreateOrUpdateAsync(string,RequestContent,bool?,MatchConditions,RequestContext)">
      <example>
This sample shows how to call CreateOrUpdateAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Indexes client = new SearchClient(endpoint, credential).GetIndexesClient();

using RequestContent content = RequestContent.Create(new
{
    name = "hotels",
    fields = new object[]
    {
        new
        {
            name = "hotelId",
            type = "Edm.String",
            key = true,
            searchable = false,
        },
        new
        {
            name = "baseRate",
            type = "Edm.Double",
        },
        new
        {
            name = "description",
            type = "Edm.String",
            filterable = false,
            sortable = false,
            facetable = false,
        },
        new
        {
            name = "descriptionEmbedding",
            type = "Collection(Edm.Single)",
            dimensions = 1536,
            vectorSearchProfile = "myHnswProfile",
            searchable = true,
            retrievable = true,
        },
        new
        {
            name = "description_fr",
            type = "Edm.String",
            filterable = false,
            sortable = false,
            facetable = false,
            analyzer = "fr.lucene",
        },
        new
        {
            name = "hotelName",
            type = "Edm.String",
        },
        new
        {
            name = "category",
            type = "Edm.String",
        },
        new
        {
            name = "tags",
            type = "Collection(Edm.String)",
            analyzer = "tagsAnalyzer",
        },
        new
        {
            name = "parkingIncluded",
            type = "Edm.Boolean",
        },
        new
        {
            name = "smokingAllowed",
            type = "Edm.Boolean",
        },
        new
        {
            name = "lastRenovationDate",
            type = "Edm.DateTimeOffset",
        },
        new
        {
            name = "rating",
            type = "Edm.Int32",
        },
        new
        {
            name = "location",
            type = "Edm.GeographyPoint",
        }
    },
    scoringProfiles = new object[]
    {
        new
        {
            name = "geo",
            text = new
            {
                weights = new
                {
                    hotelName = 5,
                },
            },
            functions = new object[]
            {
                new
                {
                    type = "distance",
                    boost = 5,
                    fieldName = "location",
                    interpolation = "logarithmic",
                    distance = new
                    {
                        referencePointParameter = "currentLocation",
                        boostingDistance = 10,
                    },
                }
            },
        }
    },
    defaultScoringProfile = "geo",
    suggesters = new object[]
    {
        new
        {
            name = "sg",
            searchMode = "analyzingInfixMatching",
            sourceFields = new object[]
            {
                "hotelName"
            },
        }
    },
    analyzers = new object[]
    {
        new Dictionary<string, object>
        {
            ["name"] = "tagsAnalyzer",
            ["@odata.type"] = "#Microsoft.Azure.Search.CustomAnalyzer",
            ["charFilters"] = new object[]
            {
                "html_strip"
            },
            ["tokenizer"] = "standard_v2"
        }
    },
    corsOptions = new
    {
        allowedOrigins = new object[]
        {
            "tempuri.org"
        },
        maxAgeInSeconds = 60L,
    },
    encryptionKey = new
    {
        keyVaultKeyName = "myUserManagedEncryptionKey-createdinAzureKeyVault",
        keyVaultKeyVersion = "myKeyVersion-32charAlphaNumericString",
        keyVaultUri = "https://myKeyVault.vault.azure.net",
    },
    similarity = new Dictionary<string, object>
    {
        ["@odata.type"] = "#Microsoft.Azure.Search.ClassicSimilarity"
    },
    semantic = new
    {
        configurations = new object[]
        {
            new
            {
                name = "semanticHotels",
                prioritizedFields = new
                {
                    titleField = new
                    {
                        fieldName = "hotelName",
                    },
                    prioritizedContentFields = new object[]
                    {
                        new
                        {
                            fieldName = "description",
                        },
                        new
                        {
                            fieldName = "description_fr",
                        }
                    },
                    prioritizedKeywordsFields = new object[]
                    {
                        new
                        {
                            fieldName = "tags",
                        },
                        new
                        {
                            fieldName = "category",
                        }
                    },
                },
            }
        },
    },
    vectorSearch = new
    {
        profiles = new object[]
        {
            new
            {
                name = "myHnswProfile",
                algorithm = "myHnsw",
            },
            new
            {
                name = "myAlgorithm",
                algorithm = "myExhaustive",
            }
        },
        algorithms = new object[]
        {
            new
            {
                name = "myHnsw",
                kind = "hnsw",
                hnswParameters = new
                {
                    m = 4,
                    metric = "cosine",
                },
            },
            new
            {
                name = "myExhaustive",
                kind = "exhaustiveKnn",
                exhaustiveKnnParameters = new
                {
                    metric = "cosine",
                },
            }
        },
    },
});
Response response = await client.CreateOrUpdateAsync("hotels", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("fields")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("fields")[0].GetProperty("type").ToString());
]]></code></example>
    </member>
    <member name="CreateOrUpdate(string,RequestContent,bool?,MatchConditions,RequestContext)">
      <example>
This sample shows how to call CreateOrUpdate and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Indexes client = new SearchClient(endpoint, credential).GetIndexesClient();

using RequestContent content = RequestContent.Create(new
{
    name = "hotels",
    fields = new object[]
    {
        new
        {
            name = "hotelId",
            type = "Edm.String",
            key = true,
            searchable = false,
        },
        new
        {
            name = "baseRate",
            type = "Edm.Double",
        },
        new
        {
            name = "description",
            type = "Edm.String",
            filterable = false,
            sortable = false,
            facetable = false,
        },
        new
        {
            name = "descriptionEmbedding",
            type = "Collection(Edm.Single)",
            dimensions = 1536,
            vectorSearchProfile = "myHnswProfile",
            searchable = true,
            retrievable = true,
        },
        new
        {
            name = "description_fr",
            type = "Edm.String",
            filterable = false,
            sortable = false,
            facetable = false,
            analyzer = "fr.lucene",
        },
        new
        {
            name = "hotelName",
            type = "Edm.String",
        },
        new
        {
            name = "category",
            type = "Edm.String",
        },
        new
        {
            name = "tags",
            type = "Collection(Edm.String)",
            analyzer = "tagsAnalyzer",
        },
        new
        {
            name = "parkingIncluded",
            type = "Edm.Boolean",
        },
        new
        {
            name = "smokingAllowed",
            type = "Edm.Boolean",
        },
        new
        {
            name = "lastRenovationDate",
            type = "Edm.DateTimeOffset",
        },
        new
        {
            name = "rating",
            type = "Edm.Int32",
        },
        new
        {
            name = "location",
            type = "Edm.GeographyPoint",
        }
    },
    scoringProfiles = new object[]
    {
        new
        {
            name = "geo",
            text = new
            {
                weights = new
                {
                    hotelName = 5,
                },
            },
            functions = new object[]
            {
                new
                {
                    type = "distance",
                    boost = 5,
                    fieldName = "location",
                    interpolation = "logarithmic",
                    distance = new
                    {
                        referencePointParameter = "currentLocation",
                        boostingDistance = 10,
                    },
                }
            },
        }
    },
    defaultScoringProfile = "geo",
    suggesters = new object[]
    {
        new
        {
            name = "sg",
            searchMode = "analyzingInfixMatching",
            sourceFields = new object[]
            {
                "hotelName"
            },
        }
    },
    analyzers = new object[]
    {
        new Dictionary<string, object>
        {
            ["name"] = "tagsAnalyzer",
            ["@odata.type"] = "#Microsoft.Azure.Search.CustomAnalyzer",
            ["charFilters"] = new object[]
            {
                "html_strip"
            },
            ["tokenizer"] = "standard_v2"
        }
    },
    corsOptions = new
    {
        allowedOrigins = new object[]
        {
            "tempuri.org"
        },
        maxAgeInSeconds = 60L,
    },
    encryptionKey = new
    {
        keyVaultKeyName = "myUserManagedEncryptionKey-createdinAzureKeyVault",
        keyVaultKeyVersion = "myKeyVersion-32charAlphaNumericString",
        keyVaultUri = "https://myKeyVault.vault.azure.net",
    },
    similarity = new Dictionary<string, object>
    {
        ["@odata.type"] = "#Microsoft.Azure.Search.ClassicSimilarity"
    },
    semantic = new
    {
        configurations = new object[]
        {
            new
            {
                name = "semanticHotels",
                prioritizedFields = new
                {
                    titleField = new
                    {
                        fieldName = "hotelName",
                    },
                    prioritizedContentFields = new object[]
                    {
                        new
                        {
                            fieldName = "description",
                        },
                        new
                        {
                            fieldName = "description_fr",
                        }
                    },
                    prioritizedKeywordsFields = new object[]
                    {
                        new
                        {
                            fieldName = "tags",
                        },
                        new
                        {
                            fieldName = "category",
                        }
                    },
                },
            }
        },
    },
    vectorSearch = new
    {
        profiles = new object[]
        {
            new
            {
                name = "myHnswProfile",
                algorithm = "myHnsw",
            },
            new
            {
                name = "myAlgorithm",
                algorithm = "myExhaustive",
            }
        },
        algorithms = new object[]
        {
            new
            {
                name = "myHnsw",
                kind = "hnsw",
                hnswParameters = new
                {
                    m = 4,
                    metric = "cosine",
                },
            },
            new
            {
                name = "myExhaustive",
                kind = "exhaustiveKnn",
                exhaustiveKnnParameters = new
                {
                    metric = "cosine",
                },
            }
        },
    },
});
Response response = client.CreateOrUpdate("hotels", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("fields")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("fields")[0].GetProperty("type").ToString());
]]></code></example>
    </member>
    <member name="DeleteAsync(string,MatchConditions,RequestContext)">
      <example>
This sample shows how to call DeleteAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Indexes client = new SearchClient(endpoint, credential).GetIndexesClient();

Response response = await client.DeleteAsync("myindex");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="Delete(string,MatchConditions,RequestContext)">
      <example>
This sample shows how to call Delete.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Indexes client = new SearchClient(endpoint, credential).GetIndexesClient();

Response response = client.Delete("myindex");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetIndexAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetIndexAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Indexes client = new SearchClient(endpoint, credential).GetIndexesClient();

Response<SearchIndex> response = await client.GetIndexAsync("hotels");
]]></code></example>
    </member>
    <member name="GetIndex(string,CancellationToken)">
      <example>
This sample shows how to call GetIndex.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Indexes client = new SearchClient(endpoint, credential).GetIndexesClient();

Response<SearchIndex> response = client.GetIndex("hotels");
]]></code></example>
    </member>
    <member name="GetIndexAsync(string,RequestContext)">
      <example>
This sample shows how to call GetIndexAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Indexes client = new SearchClient(endpoint, credential).GetIndexesClient();

Response response = await client.GetIndexAsync("hotels", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("fields")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("fields")[0].GetProperty("type").ToString());
]]></code></example>
    </member>
    <member name="GetIndex(string,RequestContext)">
      <example>
This sample shows how to call GetIndex and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Indexes client = new SearchClient(endpoint, credential).GetIndexesClient();

Response response = client.GetIndex("hotels", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("fields")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("fields")[0].GetProperty("type").ToString());
]]></code></example>
    </member>
    <member name="GetStatisticsAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetStatisticsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Indexes client = new SearchClient(endpoint, credential).GetIndexesClient();

Response<GetIndexStatisticsResult> response = await client.GetStatisticsAsync("hotels");
]]></code></example>
    </member>
    <member name="GetStatistics(string,CancellationToken)">
      <example>
This sample shows how to call GetStatistics.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Indexes client = new SearchClient(endpoint, credential).GetIndexesClient();

Response<GetIndexStatisticsResult> response = client.GetStatistics("hotels");
]]></code></example>
    </member>
    <member name="GetStatisticsAsync(string,RequestContext)">
      <example>
This sample shows how to call GetStatisticsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Indexes client = new SearchClient(endpoint, credential).GetIndexesClient();

Response response = await client.GetStatisticsAsync("hotels", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("documentCount").ToString());
Console.WriteLine(result.GetProperty("storageSize").ToString());
Console.WriteLine(result.GetProperty("vectorIndexSize").ToString());
]]></code></example>
    </member>
    <member name="GetStatistics(string,RequestContext)">
      <example>
This sample shows how to call GetStatistics and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Indexes client = new SearchClient(endpoint, credential).GetIndexesClient();

Response response = client.GetStatistics("hotels", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("documentCount").ToString());
Console.WriteLine(result.GetProperty("storageSize").ToString());
Console.WriteLine(result.GetProperty("vectorIndexSize").ToString());
]]></code></example>
    </member>
    <member name="AnalyzeAsync(string,AnalyzeRequest,CancellationToken)">
      <example>
This sample shows how to call AnalyzeAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Indexes client = new SearchClient(endpoint, credential).GetIndexesClient();

AnalyzeRequest request = new AnalyzeRequest("Text to analyze")
{
    Analyzer = LexicalAnalyzerName.StandardLucene,
};
Response<AnalyzeResult> response = await client.AnalyzeAsync("hotels", request);
]]></code></example>
    </member>
    <member name="Analyze(string,AnalyzeRequest,CancellationToken)">
      <example>
This sample shows how to call Analyze.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Indexes client = new SearchClient(endpoint, credential).GetIndexesClient();

AnalyzeRequest request = new AnalyzeRequest("Text to analyze")
{
    Analyzer = LexicalAnalyzerName.StandardLucene,
};
Response<AnalyzeResult> response = client.Analyze("hotels", request);
]]></code></example>
    </member>
    <member name="AnalyzeAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call AnalyzeAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Indexes client = new SearchClient(endpoint, credential).GetIndexesClient();

using RequestContent content = RequestContent.Create(new
{
    text = "Text to analyze",
    analyzer = "standard.lucene",
});
Response response = await client.AnalyzeAsync("hotels", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("tokens")[0].GetProperty("token").ToString());
Console.WriteLine(result.GetProperty("tokens")[0].GetProperty("startOffset").ToString());
Console.WriteLine(result.GetProperty("tokens")[0].GetProperty("endOffset").ToString());
Console.WriteLine(result.GetProperty("tokens")[0].GetProperty("position").ToString());
]]></code></example>
    </member>
    <member name="Analyze(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call Analyze and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Indexes client = new SearchClient(endpoint, credential).GetIndexesClient();

using RequestContent content = RequestContent.Create(new
{
    text = "Text to analyze",
    analyzer = "standard.lucene",
});
Response response = client.Analyze("hotels", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("tokens")[0].GetProperty("token").ToString());
Console.WriteLine(result.GetProperty("tokens")[0].GetProperty("startOffset").ToString());
Console.WriteLine(result.GetProperty("tokens")[0].GetProperty("endOffset").ToString());
Console.WriteLine(result.GetProperty("tokens")[0].GetProperty("position").ToString());
]]></code></example>
    </member>
    <member name="GetIndexesAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetIndexesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Indexes client = new SearchClient(endpoint, credential).GetIndexesClient();

await foreach (SearchIndex item in client.GetIndexesAsync())
{
}
]]></code></example>
    </member>
    <member name="GetIndexes(string,CancellationToken)">
      <example>
This sample shows how to call GetIndexes.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Indexes client = new SearchClient(endpoint, credential).GetIndexesClient();

foreach (SearchIndex item in client.GetIndexes())
{
}
]]></code></example>
    </member>
    <member name="GetIndexesAsync(string,RequestContext)">
      <example>
This sample shows how to call GetIndexesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Indexes client = new SearchClient(endpoint, credential).GetIndexesClient();

await foreach (BinaryData item in client.GetIndexesAsync("*", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("fields")[0].GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("fields")[0].GetProperty("type").ToString());
}
]]></code></example>
    </member>
    <member name="GetIndexes(string,RequestContext)">
      <example>
This sample shows how to call GetIndexes and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Indexes client = new SearchClient(endpoint, credential).GetIndexesClient();

foreach (BinaryData item in client.GetIndexes("*", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("fields")[0].GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("fields")[0].GetProperty("type").ToString());
}
]]></code></example>
    </member>
  </members>
</doc>