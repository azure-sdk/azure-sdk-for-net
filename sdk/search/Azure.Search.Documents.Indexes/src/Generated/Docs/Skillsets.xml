<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="CreateOrUpdateAsync(string,SearchIndexerSkillset,MatchConditions,CancellationToken)">
      <example>
This sample shows how to call CreateOrUpdateAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

SearchIndexerSkillset skillset = new SearchIndexerSkillset("demoskillset", new SearchIndexerSkill[]
{
    new EntityRecognitionSkill(new InputFieldMappingEntry[]
    {
        new InputFieldMappingEntry("text")
        {
            Source = "/document/content",
        }
    }, new OutputFieldMappingEntry[]
    {
        new OutputFieldMappingEntry("organizations")
        {
            TargetName = "organizations",
        }
    })
    {
        Categories = {EntityCategory.Organization},
        DefaultLanguageCode = EntityRecognitionSkillLanguage.En,
        MinimumPrecision = 0.7,
    },
    new LanguageDetectionSkill(new InputFieldMappingEntry[]
    {
        new InputFieldMappingEntry("text")
        {
            Source = "/document/content",
        }
    }, new OutputFieldMappingEntry[]
    {
        new OutputFieldMappingEntry("languageCode")
        {
            TargetName = "languageCode",
        }
    }),
    new SplitSkill(new InputFieldMappingEntry[]
    {
        new InputFieldMappingEntry("text")
        {
            Source = "/document/content",
        },
        new InputFieldMappingEntry("languageCode")
        {
            Source = "/document/languageCode",
        }
    }, new OutputFieldMappingEntry[]
    {
        new OutputFieldMappingEntry("textItems")
        {
            TargetName = "pages",
        }
    })
    {
        TextSplitMode = TextSplitMode.Pages,
        MaximumPageLength = 4000,
    },
    new KeyPhraseExtractionSkill(new InputFieldMappingEntry[]
    {
        new InputFieldMappingEntry("text")
        {
            Source = "/document/pages/*",
        },
        new InputFieldMappingEntry("languageCode")
        {
            Source = "/document/languageCode",
        }
    }, new OutputFieldMappingEntry[]
    {
        new OutputFieldMappingEntry("keyPhrases")
        {
            TargetName = "keyPhrases",
        }
    })
    {
        Context = "/document/pages/*",
    },
    new WebApiSkill(new InputFieldMappingEntry[]
    {
        new InputFieldMappingEntry("text")
        {
            Source = "/document/pages/*",
        },
        new InputFieldMappingEntry("languageCode")
        {
            Source = "/document/languageCode",
        }
    }, new OutputFieldMappingEntry[]
    {
        new OutputFieldMappingEntry("customresult")
        {
            TargetName = "result",
        }
    }, "https://contoso.example.org")
    {
        HttpHeaders = {},
        HttpMethod = "POST",
        Timeout = XmlConvert.ToTimeSpan("PT30S"),
        BatchSize = 1,
        Name = "MyCustomWebApiSkill",
    }
})
{
    Description = "Extract entities, detect language and extract key-phrases",
    EncryptionKey = new SearchResourceEncryptionKey("myUserManagedEncryptionKey-createdinAzureKeyVault", "myKeyVersion-32charAlphaNumericString", "https://myKeyVault.vault.azure.net"),
};
Response<SearchIndexerSkillset> response = await client.CreateOrUpdateAsync("demoskillset", skillset);
]]></code></example>
    </member>
    <member name="CreateOrUpdate(string,SearchIndexerSkillset,MatchConditions,CancellationToken)">
      <example>
This sample shows how to call CreateOrUpdate.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

SearchIndexerSkillset skillset = new SearchIndexerSkillset("demoskillset", new SearchIndexerSkill[]
{
    new EntityRecognitionSkill(new InputFieldMappingEntry[]
    {
        new InputFieldMappingEntry("text")
        {
            Source = "/document/content",
        }
    }, new OutputFieldMappingEntry[]
    {
        new OutputFieldMappingEntry("organizations")
        {
            TargetName = "organizations",
        }
    })
    {
        Categories = {EntityCategory.Organization},
        DefaultLanguageCode = EntityRecognitionSkillLanguage.En,
        MinimumPrecision = 0.7,
    },
    new LanguageDetectionSkill(new InputFieldMappingEntry[]
    {
        new InputFieldMappingEntry("text")
        {
            Source = "/document/content",
        }
    }, new OutputFieldMappingEntry[]
    {
        new OutputFieldMappingEntry("languageCode")
        {
            TargetName = "languageCode",
        }
    }),
    new SplitSkill(new InputFieldMappingEntry[]
    {
        new InputFieldMappingEntry("text")
        {
            Source = "/document/content",
        },
        new InputFieldMappingEntry("languageCode")
        {
            Source = "/document/languageCode",
        }
    }, new OutputFieldMappingEntry[]
    {
        new OutputFieldMappingEntry("textItems")
        {
            TargetName = "pages",
        }
    })
    {
        TextSplitMode = TextSplitMode.Pages,
        MaximumPageLength = 4000,
    },
    new KeyPhraseExtractionSkill(new InputFieldMappingEntry[]
    {
        new InputFieldMappingEntry("text")
        {
            Source = "/document/pages/*",
        },
        new InputFieldMappingEntry("languageCode")
        {
            Source = "/document/languageCode",
        }
    }, new OutputFieldMappingEntry[]
    {
        new OutputFieldMappingEntry("keyPhrases")
        {
            TargetName = "keyPhrases",
        }
    })
    {
        Context = "/document/pages/*",
    },
    new WebApiSkill(new InputFieldMappingEntry[]
    {
        new InputFieldMappingEntry("text")
        {
            Source = "/document/pages/*",
        },
        new InputFieldMappingEntry("languageCode")
        {
            Source = "/document/languageCode",
        }
    }, new OutputFieldMappingEntry[]
    {
        new OutputFieldMappingEntry("customresult")
        {
            TargetName = "result",
        }
    }, "https://contoso.example.org")
    {
        HttpHeaders = {},
        HttpMethod = "POST",
        Timeout = XmlConvert.ToTimeSpan("PT30S"),
        BatchSize = 1,
        Name = "MyCustomWebApiSkill",
    }
})
{
    Description = "Extract entities, detect language and extract key-phrases",
    EncryptionKey = new SearchResourceEncryptionKey("myUserManagedEncryptionKey-createdinAzureKeyVault", "myKeyVersion-32charAlphaNumericString", "https://myKeyVault.vault.azure.net"),
};
Response<SearchIndexerSkillset> response = client.CreateOrUpdate("demoskillset", skillset);
]]></code></example>
    </member>
    <member name="CreateOrUpdateAsync(string,RequestContent,MatchConditions,RequestContext)">
      <example>
This sample shows how to call CreateOrUpdateAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

using RequestContent content = RequestContent.Create(new
{
    name = "demoskillset",
    description = "Extract entities, detect language and extract key-phrases",
    skills = new object[]
    {
        new Dictionary<string, object>
        {
            ["@odata.type"] = "#Microsoft.Skills.Text.EntityRecognitionSkill",
            ["categories"] = new object[]
            {
                "organization"
            },
            ["defaultLanguageCode"] = "en",
            ["minimumPrecision"] = 0.7,
            ["inputs"] = new object[]
            {
                new
                {
                    name = "text",
                    source = "/document/content",
                }
            },
            ["outputs"] = new object[]
            {
                new
                {
                    name = "organizations",
                    targetName = "organizations",
                }
            }
        },
        new Dictionary<string, object>
        {
            ["@odata.type"] = "#Microsoft.Skills.Text.LanguageDetectionSkill",
            ["inputs"] = new object[]
            {
                new
                {
                    name = "text",
                    source = "/document/content",
                }
            },
            ["outputs"] = new object[]
            {
                new
                {
                    name = "languageCode",
                    targetName = "languageCode",
                }
            }
        },
        new Dictionary<string, object>
        {
            ["@odata.type"] = "#Microsoft.Skills.Text.SplitSkill",
            ["textSplitMode"] = "pages",
            ["maximumPageLength"] = 4000,
            ["inputs"] = new object[]
            {
                new
                {
                    name = "text",
                    source = "/document/content",
                },
                new
                {
                    name = "languageCode",
                    source = "/document/languageCode",
                }
            },
            ["outputs"] = new object[]
            {
                new
                {
                    name = "textItems",
                    targetName = "pages",
                }
            }
        },
        new Dictionary<string, object>
        {
            ["@odata.type"] = "#Microsoft.Skills.Text.KeyPhraseExtractionSkill",
            ["context"] = "/document/pages/*",
            ["inputs"] = new object[]
            {
                new
                {
                    name = "text",
                    source = "/document/pages/*",
                },
                new
                {
                    name = "languageCode",
                    source = "/document/languageCode",
                }
            },
            ["outputs"] = new object[]
            {
                new
                {
                    name = "keyPhrases",
                    targetName = "keyPhrases",
                }
            }
        },
        new Dictionary<string, object>
        {
            ["@odata.type"] = "#Microsoft.Skills.Custom.WebApiSkill",
            ["name"] = "MyCustomWebApiSkill",
            ["uri"] = "https://contoso.example.org",
            ["httpMethod"] = "POST",
            ["timeout"] = "PT30S",
            ["batchSize"] = 1,
            ["inputs"] = new object[]
            {
                new
                {
                    name = "text",
                    source = "/document/pages/*",
                },
                new
                {
                    name = "languageCode",
                    source = "/document/languageCode",
                }
            },
            ["outputs"] = new object[]
            {
                new
                {
                    name = "customresult",
                    targetName = "result",
                }
            },
            ["httpHeaders"] = new object()
        }
    },
    encryptionKey = new
    {
        keyVaultKeyName = "myUserManagedEncryptionKey-createdinAzureKeyVault",
        keyVaultKeyVersion = "myKeyVersion-32charAlphaNumericString",
        keyVaultUri = "https://myKeyVault.vault.azure.net",
    },
});
Response response = await client.CreateOrUpdateAsync("demoskillset", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("skills")[0].GetProperty("@odata.type").ToString());
Console.WriteLine(result.GetProperty("skills")[0].GetProperty("inputs")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("skills")[0].GetProperty("outputs")[0].GetProperty("name").ToString());
]]></code></example>
    </member>
    <member name="CreateOrUpdate(string,RequestContent,MatchConditions,RequestContext)">
      <example>
This sample shows how to call CreateOrUpdate and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

using RequestContent content = RequestContent.Create(new
{
    name = "demoskillset",
    description = "Extract entities, detect language and extract key-phrases",
    skills = new object[]
    {
        new Dictionary<string, object>
        {
            ["@odata.type"] = "#Microsoft.Skills.Text.EntityRecognitionSkill",
            ["categories"] = new object[]
            {
                "organization"
            },
            ["defaultLanguageCode"] = "en",
            ["minimumPrecision"] = 0.7,
            ["inputs"] = new object[]
            {
                new
                {
                    name = "text",
                    source = "/document/content",
                }
            },
            ["outputs"] = new object[]
            {
                new
                {
                    name = "organizations",
                    targetName = "organizations",
                }
            }
        },
        new Dictionary<string, object>
        {
            ["@odata.type"] = "#Microsoft.Skills.Text.LanguageDetectionSkill",
            ["inputs"] = new object[]
            {
                new
                {
                    name = "text",
                    source = "/document/content",
                }
            },
            ["outputs"] = new object[]
            {
                new
                {
                    name = "languageCode",
                    targetName = "languageCode",
                }
            }
        },
        new Dictionary<string, object>
        {
            ["@odata.type"] = "#Microsoft.Skills.Text.SplitSkill",
            ["textSplitMode"] = "pages",
            ["maximumPageLength"] = 4000,
            ["inputs"] = new object[]
            {
                new
                {
                    name = "text",
                    source = "/document/content",
                },
                new
                {
                    name = "languageCode",
                    source = "/document/languageCode",
                }
            },
            ["outputs"] = new object[]
            {
                new
                {
                    name = "textItems",
                    targetName = "pages",
                }
            }
        },
        new Dictionary<string, object>
        {
            ["@odata.type"] = "#Microsoft.Skills.Text.KeyPhraseExtractionSkill",
            ["context"] = "/document/pages/*",
            ["inputs"] = new object[]
            {
                new
                {
                    name = "text",
                    source = "/document/pages/*",
                },
                new
                {
                    name = "languageCode",
                    source = "/document/languageCode",
                }
            },
            ["outputs"] = new object[]
            {
                new
                {
                    name = "keyPhrases",
                    targetName = "keyPhrases",
                }
            }
        },
        new Dictionary<string, object>
        {
            ["@odata.type"] = "#Microsoft.Skills.Custom.WebApiSkill",
            ["name"] = "MyCustomWebApiSkill",
            ["uri"] = "https://contoso.example.org",
            ["httpMethod"] = "POST",
            ["timeout"] = "PT30S",
            ["batchSize"] = 1,
            ["inputs"] = new object[]
            {
                new
                {
                    name = "text",
                    source = "/document/pages/*",
                },
                new
                {
                    name = "languageCode",
                    source = "/document/languageCode",
                }
            },
            ["outputs"] = new object[]
            {
                new
                {
                    name = "customresult",
                    targetName = "result",
                }
            },
            ["httpHeaders"] = new object()
        }
    },
    encryptionKey = new
    {
        keyVaultKeyName = "myUserManagedEncryptionKey-createdinAzureKeyVault",
        keyVaultKeyVersion = "myKeyVersion-32charAlphaNumericString",
        keyVaultUri = "https://myKeyVault.vault.azure.net",
    },
});
Response response = client.CreateOrUpdate("demoskillset", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("skills")[0].GetProperty("@odata.type").ToString());
Console.WriteLine(result.GetProperty("skills")[0].GetProperty("inputs")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("skills")[0].GetProperty("outputs")[0].GetProperty("name").ToString());
]]></code></example>
    </member>
    <member name="DeleteAsync(string,MatchConditions,RequestContext)">
      <example>
This sample shows how to call DeleteAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

Response response = await client.DeleteAsync("demoskillset");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="Delete(string,MatchConditions,RequestContext)">
      <example>
This sample shows how to call Delete.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

Response response = client.Delete("demoskillset");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetSkillsetAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetSkillsetAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

Response<SearchIndexerSkillset> response = await client.GetSkillsetAsync("demoskillset");
]]></code></example>
    </member>
    <member name="GetSkillset(string,CancellationToken)">
      <example>
This sample shows how to call GetSkillset.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

Response<SearchIndexerSkillset> response = client.GetSkillset("demoskillset");
]]></code></example>
    </member>
    <member name="GetSkillsetAsync(string,RequestContext)">
      <example>
This sample shows how to call GetSkillsetAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

Response response = await client.GetSkillsetAsync("demoskillset", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("skills")[0].GetProperty("@odata.type").ToString());
Console.WriteLine(result.GetProperty("skills")[0].GetProperty("inputs")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("skills")[0].GetProperty("outputs")[0].GetProperty("name").ToString());
]]></code></example>
    </member>
    <member name="GetSkillset(string,RequestContext)">
      <example>
This sample shows how to call GetSkillset and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

Response response = client.GetSkillset("demoskillset", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("skills")[0].GetProperty("@odata.type").ToString());
Console.WriteLine(result.GetProperty("skills")[0].GetProperty("inputs")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("skills")[0].GetProperty("outputs")[0].GetProperty("name").ToString());
]]></code></example>
    </member>
    <member name="GetSkillsetsAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetSkillsetsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

Response<ListSkillsetsResult> response = await client.GetSkillsetsAsync();
]]></code></example>
    </member>
    <member name="GetSkillsets(string,CancellationToken)">
      <example>
This sample shows how to call GetSkillsets.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

Response<ListSkillsetsResult> response = client.GetSkillsets();
]]></code></example>
    </member>
    <member name="GetSkillsetsAsync(string,RequestContext)">
      <example>
This sample shows how to call GetSkillsetsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

Response response = await client.GetSkillsetsAsync("*", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("skills")[0].GetProperty("@odata.type").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("skills")[0].GetProperty("inputs")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("skills")[0].GetProperty("outputs")[0].GetProperty("name").ToString());
]]></code></example>
    </member>
    <member name="GetSkillsets(string,RequestContext)">
      <example>
This sample shows how to call GetSkillsets and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

Response response = client.GetSkillsets("*", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("skills")[0].GetProperty("@odata.type").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("skills")[0].GetProperty("inputs")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("skills")[0].GetProperty("outputs")[0].GetProperty("name").ToString());
]]></code></example>
    </member>
    <member name="CreateAsync(SearchIndexerSkillset,CancellationToken)">
      <example>
This sample shows how to call CreateAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

SearchIndexerSkillset skillset = new SearchIndexerSkillset("demoskillset", new SearchIndexerSkill[]
{
    new EntityRecognitionSkill(new InputFieldMappingEntry[]
    {
        new InputFieldMappingEntry("text")
        {
            Source = "/document/content",
        }
    }, new OutputFieldMappingEntry[]
    {
        new OutputFieldMappingEntry("organizations")
        {
            TargetName = "organizations",
        }
    })
    {
        Categories = {EntityCategory.Organization},
        DefaultLanguageCode = EntityRecognitionSkillLanguage.En,
        MinimumPrecision = 0.7,
    },
    new LanguageDetectionSkill(new InputFieldMappingEntry[]
    {
        new InputFieldMappingEntry("text")
        {
            Source = "/document/content",
        }
    }, new OutputFieldMappingEntry[]
    {
        new OutputFieldMappingEntry("languageCode")
        {
            TargetName = "languageCode",
        }
    }),
    new SplitSkill(new InputFieldMappingEntry[]
    {
        new InputFieldMappingEntry("text")
        {
            Source = "/document/content",
        },
        new InputFieldMappingEntry("languageCode")
        {
            Source = "/document/languageCode",
        }
    }, new OutputFieldMappingEntry[]
    {
        new OutputFieldMappingEntry("textItems")
        {
            TargetName = "pages",
        }
    })
    {
        TextSplitMode = TextSplitMode.Pages,
        MaximumPageLength = 4000,
    },
    new KeyPhraseExtractionSkill(new InputFieldMappingEntry[]
    {
        new InputFieldMappingEntry("text")
        {
            Source = "/document/pages/*",
        },
        new InputFieldMappingEntry("languageCode")
        {
            Source = "/document/languageCode",
        }
    }, new OutputFieldMappingEntry[]
    {
        new OutputFieldMappingEntry("keyPhrases")
        {
            TargetName = "keyPhrases",
        }
    })
    {
        Context = "/document/pages/*",
    },
    new WebApiSkill(new InputFieldMappingEntry[]
    {
        new InputFieldMappingEntry("text")
        {
            Source = "/document/pages/*",
        },
        new InputFieldMappingEntry("languageCode")
        {
            Source = "/document/languageCode",
        }
    }, new OutputFieldMappingEntry[]
    {
        new OutputFieldMappingEntry("customresult")
        {
            TargetName = "result",
        }
    }, "https://contoso.example.org")
    {
        HttpHeaders = {},
        HttpMethod = "POST",
        Timeout = XmlConvert.ToTimeSpan("PT30S"),
        BatchSize = 1,
        Name = "MyCustomWebApiSkill",
    }
})
{
    Description = "Extract entities, detect language and extract key-phrases",
    KnowledgeStore = new SearchIndexerKnowledgeStore("DefaultEndpointsProtocol=https;AccountName=myStorage;AccountKey=myStorageKey;EndpointSuffix=core.windows.net", new SearchIndexerKnowledgeStoreProjection[]
    {
        new SearchIndexerKnowledgeStoreProjection
        {
            Tables = {new SearchIndexerKnowledgeStoreTableProjectionSelector("Reviews")
            {
                GeneratedKeyName = "ReviewId",
                Source = "/document/Review",
                Inputs = {},
            }, new SearchIndexerKnowledgeStoreTableProjectionSelector("Sentences")
            {
                GeneratedKeyName = "SentenceId",
                Source = "/document/Review/Sentences/*",
                Inputs = {},
            }, new SearchIndexerKnowledgeStoreTableProjectionSelector("KeyPhrases")
            {
                GeneratedKeyName = "KeyPhraseId",
                Source = "/document/Review/Sentences/*/KeyPhrases",
                Inputs = {},
            }, new SearchIndexerKnowledgeStoreTableProjectionSelector("Entities")
            {
                GeneratedKeyName = "EntityId",
                Source = "/document/Review/Sentences/*/Entities/*",
                Inputs = {},
            }},
        },
        new SearchIndexerKnowledgeStoreProjection
        {
            Objects = {new SearchIndexerKnowledgeStoreObjectProjectionSelector("Reviews")
            {
                GeneratedKeyName = "/document/Review/Id",
                Source = "/document/Review",
            }},
        }
    }),
    EncryptionKey = new SearchResourceEncryptionKey("myUserManagedEncryptionKey-createdinAzureKeyVault", "myKeyVersion-32charAlphaNumericString", "https://myKeyVault.vault.azure.net")
    {
        AccessCredentials = new AzureActiveDirectoryApplicationCredentials("00000000-0000-0000-0000-000000000000")
        {
            ApplicationSecret = "<applicationSecret>",
        },
    },
};
Response<SearchIndexerSkillset> response = await client.CreateAsync(skillset);
]]></code></example>
    </member>
    <member name="Create(SearchIndexerSkillset,CancellationToken)">
      <example>
This sample shows how to call Create.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

SearchIndexerSkillset skillset = new SearchIndexerSkillset("demoskillset", new SearchIndexerSkill[]
{
    new EntityRecognitionSkill(new InputFieldMappingEntry[]
    {
        new InputFieldMappingEntry("text")
        {
            Source = "/document/content",
        }
    }, new OutputFieldMappingEntry[]
    {
        new OutputFieldMappingEntry("organizations")
        {
            TargetName = "organizations",
        }
    })
    {
        Categories = {EntityCategory.Organization},
        DefaultLanguageCode = EntityRecognitionSkillLanguage.En,
        MinimumPrecision = 0.7,
    },
    new LanguageDetectionSkill(new InputFieldMappingEntry[]
    {
        new InputFieldMappingEntry("text")
        {
            Source = "/document/content",
        }
    }, new OutputFieldMappingEntry[]
    {
        new OutputFieldMappingEntry("languageCode")
        {
            TargetName = "languageCode",
        }
    }),
    new SplitSkill(new InputFieldMappingEntry[]
    {
        new InputFieldMappingEntry("text")
        {
            Source = "/document/content",
        },
        new InputFieldMappingEntry("languageCode")
        {
            Source = "/document/languageCode",
        }
    }, new OutputFieldMappingEntry[]
    {
        new OutputFieldMappingEntry("textItems")
        {
            TargetName = "pages",
        }
    })
    {
        TextSplitMode = TextSplitMode.Pages,
        MaximumPageLength = 4000,
    },
    new KeyPhraseExtractionSkill(new InputFieldMappingEntry[]
    {
        new InputFieldMappingEntry("text")
        {
            Source = "/document/pages/*",
        },
        new InputFieldMappingEntry("languageCode")
        {
            Source = "/document/languageCode",
        }
    }, new OutputFieldMappingEntry[]
    {
        new OutputFieldMappingEntry("keyPhrases")
        {
            TargetName = "keyPhrases",
        }
    })
    {
        Context = "/document/pages/*",
    },
    new WebApiSkill(new InputFieldMappingEntry[]
    {
        new InputFieldMappingEntry("text")
        {
            Source = "/document/pages/*",
        },
        new InputFieldMappingEntry("languageCode")
        {
            Source = "/document/languageCode",
        }
    }, new OutputFieldMappingEntry[]
    {
        new OutputFieldMappingEntry("customresult")
        {
            TargetName = "result",
        }
    }, "https://contoso.example.org")
    {
        HttpHeaders = {},
        HttpMethod = "POST",
        Timeout = XmlConvert.ToTimeSpan("PT30S"),
        BatchSize = 1,
        Name = "MyCustomWebApiSkill",
    }
})
{
    Description = "Extract entities, detect language and extract key-phrases",
    KnowledgeStore = new SearchIndexerKnowledgeStore("DefaultEndpointsProtocol=https;AccountName=myStorage;AccountKey=myStorageKey;EndpointSuffix=core.windows.net", new SearchIndexerKnowledgeStoreProjection[]
    {
        new SearchIndexerKnowledgeStoreProjection
        {
            Tables = {new SearchIndexerKnowledgeStoreTableProjectionSelector("Reviews")
            {
                GeneratedKeyName = "ReviewId",
                Source = "/document/Review",
                Inputs = {},
            }, new SearchIndexerKnowledgeStoreTableProjectionSelector("Sentences")
            {
                GeneratedKeyName = "SentenceId",
                Source = "/document/Review/Sentences/*",
                Inputs = {},
            }, new SearchIndexerKnowledgeStoreTableProjectionSelector("KeyPhrases")
            {
                GeneratedKeyName = "KeyPhraseId",
                Source = "/document/Review/Sentences/*/KeyPhrases",
                Inputs = {},
            }, new SearchIndexerKnowledgeStoreTableProjectionSelector("Entities")
            {
                GeneratedKeyName = "EntityId",
                Source = "/document/Review/Sentences/*/Entities/*",
                Inputs = {},
            }},
        },
        new SearchIndexerKnowledgeStoreProjection
        {
            Objects = {new SearchIndexerKnowledgeStoreObjectProjectionSelector("Reviews")
            {
                GeneratedKeyName = "/document/Review/Id",
                Source = "/document/Review",
            }},
        }
    }),
    EncryptionKey = new SearchResourceEncryptionKey("myUserManagedEncryptionKey-createdinAzureKeyVault", "myKeyVersion-32charAlphaNumericString", "https://myKeyVault.vault.azure.net")
    {
        AccessCredentials = new AzureActiveDirectoryApplicationCredentials("00000000-0000-0000-0000-000000000000")
        {
            ApplicationSecret = "<applicationSecret>",
        },
    },
};
Response<SearchIndexerSkillset> response = client.Create(skillset);
]]></code></example>
    </member>
    <member name="CreateAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

using RequestContent content = RequestContent.Create(new
{
    name = "demoskillset",
    description = "Extract entities, detect language and extract key-phrases",
    skills = new object[]
    {
        new Dictionary<string, object>
        {
            ["@odata.type"] = "#Microsoft.Skills.Text.EntityRecognitionSkill",
            ["categories"] = new object[]
            {
                "organization"
            },
            ["defaultLanguageCode"] = "en",
            ["minimumPrecision"] = 0.7,
            ["inputs"] = new object[]
            {
                new
                {
                    name = "text",
                    source = "/document/content",
                }
            },
            ["outputs"] = new object[]
            {
                new
                {
                    name = "organizations",
                    targetName = "organizations",
                }
            }
        },
        new Dictionary<string, object>
        {
            ["@odata.type"] = "#Microsoft.Skills.Text.LanguageDetectionSkill",
            ["inputs"] = new object[]
            {
                new
                {
                    name = "text",
                    source = "/document/content",
                }
            },
            ["outputs"] = new object[]
            {
                new
                {
                    name = "languageCode",
                    targetName = "languageCode",
                }
            }
        },
        new Dictionary<string, object>
        {
            ["@odata.type"] = "#Microsoft.Skills.Text.SplitSkill",
            ["textSplitMode"] = "pages",
            ["maximumPageLength"] = 4000,
            ["inputs"] = new object[]
            {
                new
                {
                    name = "text",
                    source = "/document/content",
                },
                new
                {
                    name = "languageCode",
                    source = "/document/languageCode",
                }
            },
            ["outputs"] = new object[]
            {
                new
                {
                    name = "textItems",
                    targetName = "pages",
                }
            }
        },
        new Dictionary<string, object>
        {
            ["@odata.type"] = "#Microsoft.Skills.Text.KeyPhraseExtractionSkill",
            ["context"] = "/document/pages/*",
            ["inputs"] = new object[]
            {
                new
                {
                    name = "text",
                    source = "/document/pages/*",
                },
                new
                {
                    name = "languageCode",
                    source = "/document/languageCode",
                }
            },
            ["outputs"] = new object[]
            {
                new
                {
                    name = "keyPhrases",
                    targetName = "keyPhrases",
                }
            }
        },
        new Dictionary<string, object>
        {
            ["@odata.type"] = "#Microsoft.Skills.Custom.WebApiSkill",
            ["name"] = "MyCustomWebApiSkill",
            ["uri"] = "https://contoso.example.org",
            ["httpMethod"] = "POST",
            ["timeout"] = "PT30S",
            ["batchSize"] = 1,
            ["inputs"] = new object[]
            {
                new
                {
                    name = "text",
                    source = "/document/pages/*",
                },
                new
                {
                    name = "languageCode",
                    source = "/document/languageCode",
                }
            },
            ["outputs"] = new object[]
            {
                new
                {
                    name = "customresult",
                    targetName = "result",
                }
            },
            ["httpHeaders"] = new object()
        }
    },
    knowledgeStore = new
    {
        storageConnectionString = "DefaultEndpointsProtocol=https;AccountName=myStorage;AccountKey=myStorageKey;EndpointSuffix=core.windows.net",
        projections = new object[]
        {
            new
            {
                tables = new object[]
                {
                    new
                    {
                        tableName = "Reviews",
                        generatedKeyName = "ReviewId",
                        source = "/document/Review",
                        inputs = Array.Empty<object>(),
                    },
                    new
                    {
                        tableName = "Sentences",
                        generatedKeyName = "SentenceId",
                        source = "/document/Review/Sentences/*",
                        inputs = Array.Empty<object>(),
                    },
                    new
                    {
                        tableName = "KeyPhrases",
                        generatedKeyName = "KeyPhraseId",
                        source = "/document/Review/Sentences/*/KeyPhrases",
                        inputs = Array.Empty<object>(),
                    },
                    new
                    {
                        tableName = "Entities",
                        generatedKeyName = "EntityId",
                        source = "/document/Review/Sentences/*/Entities/*",
                        inputs = Array.Empty<object>(),
                    }
                },
            },
            new
            {
                objects = new object[]
                {
                    new
                    {
                        storageContainer = "Reviews",
                        source = "/document/Review",
                        generatedKeyName = "/document/Review/Id",
                    }
                },
            }
        },
    },
    encryptionKey = new
    {
        keyVaultKeyName = "myUserManagedEncryptionKey-createdinAzureKeyVault",
        keyVaultKeyVersion = "myKeyVersion-32charAlphaNumericString",
        keyVaultUri = "https://myKeyVault.vault.azure.net",
        accessCredentials = new
        {
            applicationId = "00000000-0000-0000-0000-000000000000",
            applicationSecret = "<applicationSecret>",
        },
    },
});
Response response = await client.CreateAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("skills")[0].GetProperty("@odata.type").ToString());
Console.WriteLine(result.GetProperty("skills")[0].GetProperty("inputs")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("skills")[0].GetProperty("outputs")[0].GetProperty("name").ToString());
]]></code></example>
    </member>
    <member name="Create(RequestContent,RequestContext)">
      <example>
This sample shows how to call Create and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

using RequestContent content = RequestContent.Create(new
{
    name = "demoskillset",
    description = "Extract entities, detect language and extract key-phrases",
    skills = new object[]
    {
        new Dictionary<string, object>
        {
            ["@odata.type"] = "#Microsoft.Skills.Text.EntityRecognitionSkill",
            ["categories"] = new object[]
            {
                "organization"
            },
            ["defaultLanguageCode"] = "en",
            ["minimumPrecision"] = 0.7,
            ["inputs"] = new object[]
            {
                new
                {
                    name = "text",
                    source = "/document/content",
                }
            },
            ["outputs"] = new object[]
            {
                new
                {
                    name = "organizations",
                    targetName = "organizations",
                }
            }
        },
        new Dictionary<string, object>
        {
            ["@odata.type"] = "#Microsoft.Skills.Text.LanguageDetectionSkill",
            ["inputs"] = new object[]
            {
                new
                {
                    name = "text",
                    source = "/document/content",
                }
            },
            ["outputs"] = new object[]
            {
                new
                {
                    name = "languageCode",
                    targetName = "languageCode",
                }
            }
        },
        new Dictionary<string, object>
        {
            ["@odata.type"] = "#Microsoft.Skills.Text.SplitSkill",
            ["textSplitMode"] = "pages",
            ["maximumPageLength"] = 4000,
            ["inputs"] = new object[]
            {
                new
                {
                    name = "text",
                    source = "/document/content",
                },
                new
                {
                    name = "languageCode",
                    source = "/document/languageCode",
                }
            },
            ["outputs"] = new object[]
            {
                new
                {
                    name = "textItems",
                    targetName = "pages",
                }
            }
        },
        new Dictionary<string, object>
        {
            ["@odata.type"] = "#Microsoft.Skills.Text.KeyPhraseExtractionSkill",
            ["context"] = "/document/pages/*",
            ["inputs"] = new object[]
            {
                new
                {
                    name = "text",
                    source = "/document/pages/*",
                },
                new
                {
                    name = "languageCode",
                    source = "/document/languageCode",
                }
            },
            ["outputs"] = new object[]
            {
                new
                {
                    name = "keyPhrases",
                    targetName = "keyPhrases",
                }
            }
        },
        new Dictionary<string, object>
        {
            ["@odata.type"] = "#Microsoft.Skills.Custom.WebApiSkill",
            ["name"] = "MyCustomWebApiSkill",
            ["uri"] = "https://contoso.example.org",
            ["httpMethod"] = "POST",
            ["timeout"] = "PT30S",
            ["batchSize"] = 1,
            ["inputs"] = new object[]
            {
                new
                {
                    name = "text",
                    source = "/document/pages/*",
                },
                new
                {
                    name = "languageCode",
                    source = "/document/languageCode",
                }
            },
            ["outputs"] = new object[]
            {
                new
                {
                    name = "customresult",
                    targetName = "result",
                }
            },
            ["httpHeaders"] = new object()
        }
    },
    knowledgeStore = new
    {
        storageConnectionString = "DefaultEndpointsProtocol=https;AccountName=myStorage;AccountKey=myStorageKey;EndpointSuffix=core.windows.net",
        projections = new object[]
        {
            new
            {
                tables = new object[]
                {
                    new
                    {
                        tableName = "Reviews",
                        generatedKeyName = "ReviewId",
                        source = "/document/Review",
                        inputs = Array.Empty<object>(),
                    },
                    new
                    {
                        tableName = "Sentences",
                        generatedKeyName = "SentenceId",
                        source = "/document/Review/Sentences/*",
                        inputs = Array.Empty<object>(),
                    },
                    new
                    {
                        tableName = "KeyPhrases",
                        generatedKeyName = "KeyPhraseId",
                        source = "/document/Review/Sentences/*/KeyPhrases",
                        inputs = Array.Empty<object>(),
                    },
                    new
                    {
                        tableName = "Entities",
                        generatedKeyName = "EntityId",
                        source = "/document/Review/Sentences/*/Entities/*",
                        inputs = Array.Empty<object>(),
                    }
                },
            },
            new
            {
                objects = new object[]
                {
                    new
                    {
                        storageContainer = "Reviews",
                        source = "/document/Review",
                        generatedKeyName = "/document/Review/Id",
                    }
                },
            }
        },
    },
    encryptionKey = new
    {
        keyVaultKeyName = "myUserManagedEncryptionKey-createdinAzureKeyVault",
        keyVaultKeyVersion = "myKeyVersion-32charAlphaNumericString",
        keyVaultUri = "https://myKeyVault.vault.azure.net",
        accessCredentials = new
        {
            applicationId = "00000000-0000-0000-0000-000000000000",
            applicationSecret = "<applicationSecret>",
        },
    },
});
Response response = client.Create(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("skills")[0].GetProperty("@odata.type").ToString());
Console.WriteLine(result.GetProperty("skills")[0].GetProperty("inputs")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("skills")[0].GetProperty("outputs")[0].GetProperty("name").ToString());
]]></code></example>
    </member>
  </members>
</doc>