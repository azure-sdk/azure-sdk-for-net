<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="CreateOrUpdateAsync(string,SearchIndexerDataSource,MatchConditions,CancellationToken)">
      <example>
This sample shows how to call CreateOrUpdateAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
DataSources client = new SearchClient(endpoint, credential).GetDataSourcesClient();

SearchIndexerDataSource dataSource = new SearchIndexerDataSource("mydocdbdatasource", SearchIndexerDataSourceType.CosmosDb, new DataSourceCredentials
{
    ConnectionString = "AccountEndpoint=https://myDocDbEndpoint.documents.azure.com;AccountKey=myDocDbAuthKey;Database=myDocDbDatabaseId",
}, new SearchIndexerDataContainer("myDocDbCollectionId")
{
    Query = "SELECT c.id, c.userId, tag, c._ts FROM c JOIN tag IN c.tags WHERE c._ts >= @HighWaterMark ORDER BY c._ts",
})
{
    Description = "My Cosmos DB data source.",
    DataChangeDetectionPolicy = new HighWaterMarkChangeDetectionPolicy("_ts"),
    DataDeletionDetectionPolicy = new SoftDeleteColumnDeletionDetectionPolicy
    {
        SoftDeleteColumnName = "isDeleted",
        SoftDeleteMarkerValue = "true",
    },
    EncryptionKey = new SearchResourceEncryptionKey("myUserManagedEncryptionKey-createdinAzureKeyVault", "myKeyVersion-32charAlphaNumericString", "https://myKeyVault.vault.azure.net"),
};
Response<SearchIndexerDataSource> response = await client.CreateOrUpdateAsync("mydatasource", dataSource);
]]></code></example>
    </member>
    <member name="CreateOrUpdate(string,SearchIndexerDataSource,MatchConditions,CancellationToken)">
      <example>
This sample shows how to call CreateOrUpdate.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
DataSources client = new SearchClient(endpoint, credential).GetDataSourcesClient();

SearchIndexerDataSource dataSource = new SearchIndexerDataSource("mydocdbdatasource", SearchIndexerDataSourceType.CosmosDb, new DataSourceCredentials
{
    ConnectionString = "AccountEndpoint=https://myDocDbEndpoint.documents.azure.com;AccountKey=myDocDbAuthKey;Database=myDocDbDatabaseId",
}, new SearchIndexerDataContainer("myDocDbCollectionId")
{
    Query = "SELECT c.id, c.userId, tag, c._ts FROM c JOIN tag IN c.tags WHERE c._ts >= @HighWaterMark ORDER BY c._ts",
})
{
    Description = "My Cosmos DB data source.",
    DataChangeDetectionPolicy = new HighWaterMarkChangeDetectionPolicy("_ts"),
    DataDeletionDetectionPolicy = new SoftDeleteColumnDeletionDetectionPolicy
    {
        SoftDeleteColumnName = "isDeleted",
        SoftDeleteMarkerValue = "true",
    },
    EncryptionKey = new SearchResourceEncryptionKey("myUserManagedEncryptionKey-createdinAzureKeyVault", "myKeyVersion-32charAlphaNumericString", "https://myKeyVault.vault.azure.net"),
};
Response<SearchIndexerDataSource> response = client.CreateOrUpdate("mydatasource", dataSource);
]]></code></example>
    </member>
    <member name="CreateOrUpdateAsync(string,RequestContent,MatchConditions,RequestContext)">
      <example>
This sample shows how to call CreateOrUpdateAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
DataSources client = new SearchClient(endpoint, credential).GetDataSourcesClient();

using RequestContent content = RequestContent.Create(new
{
    name = "mydocdbdatasource",
    description = "My Cosmos DB data source.",
    type = "cosmosdb",
    credentials = new
    {
        connectionString = "AccountEndpoint=https://myDocDbEndpoint.documents.azure.com;AccountKey=myDocDbAuthKey;Database=myDocDbDatabaseId",
    },
    container = new
    {
        name = "myDocDbCollectionId",
        query = "SELECT c.id, c.userId, tag, c._ts FROM c JOIN tag IN c.tags WHERE c._ts >= @HighWaterMark ORDER BY c._ts",
    },
    dataChangeDetectionPolicy = new Dictionary<string, object>
    {
        ["@odata.type"] = "#Microsoft.Azure.Search.HighWaterMarkChangeDetectionPolicy",
        ["highWaterMarkColumnName"] = "_ts"
    },
    dataDeletionDetectionPolicy = new Dictionary<string, object>
    {
        ["@odata.type"] = "#Microsoft.Azure.Search.SoftDeleteColumnDeletionDetectionPolicy",
        ["softDeleteColumnName"] = "isDeleted",
        ["softDeleteMarkerValue"] = "true"
    },
    encryptionKey = new
    {
        keyVaultKeyName = "myUserManagedEncryptionKey-createdinAzureKeyVault",
        keyVaultKeyVersion = "myKeyVersion-32charAlphaNumericString",
        keyVaultUri = "https://myKeyVault.vault.azure.net",
    },
});
Response response = await client.CreateOrUpdateAsync("mydatasource", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("credentials").ToString());
Console.WriteLine(result.GetProperty("container").GetProperty("name").ToString());
]]></code></example>
    </member>
    <member name="CreateOrUpdate(string,RequestContent,MatchConditions,RequestContext)">
      <example>
This sample shows how to call CreateOrUpdate and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
DataSources client = new SearchClient(endpoint, credential).GetDataSourcesClient();

using RequestContent content = RequestContent.Create(new
{
    name = "mydocdbdatasource",
    description = "My Cosmos DB data source.",
    type = "cosmosdb",
    credentials = new
    {
        connectionString = "AccountEndpoint=https://myDocDbEndpoint.documents.azure.com;AccountKey=myDocDbAuthKey;Database=myDocDbDatabaseId",
    },
    container = new
    {
        name = "myDocDbCollectionId",
        query = "SELECT c.id, c.userId, tag, c._ts FROM c JOIN tag IN c.tags WHERE c._ts >= @HighWaterMark ORDER BY c._ts",
    },
    dataChangeDetectionPolicy = new Dictionary<string, object>
    {
        ["@odata.type"] = "#Microsoft.Azure.Search.HighWaterMarkChangeDetectionPolicy",
        ["highWaterMarkColumnName"] = "_ts"
    },
    dataDeletionDetectionPolicy = new Dictionary<string, object>
    {
        ["@odata.type"] = "#Microsoft.Azure.Search.SoftDeleteColumnDeletionDetectionPolicy",
        ["softDeleteColumnName"] = "isDeleted",
        ["softDeleteMarkerValue"] = "true"
    },
    encryptionKey = new
    {
        keyVaultKeyName = "myUserManagedEncryptionKey-createdinAzureKeyVault",
        keyVaultKeyVersion = "myKeyVersion-32charAlphaNumericString",
        keyVaultUri = "https://myKeyVault.vault.azure.net",
    },
});
Response response = client.CreateOrUpdate("mydatasource", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("credentials").ToString());
Console.WriteLine(result.GetProperty("container").GetProperty("name").ToString());
]]></code></example>
    </member>
    <member name="DeleteAsync(string,MatchConditions,RequestContext)">
      <example>
This sample shows how to call DeleteAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
DataSources client = new SearchClient(endpoint, credential).GetDataSourcesClient();

Response response = await client.DeleteAsync("mydatasource");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="Delete(string,MatchConditions,RequestContext)">
      <example>
This sample shows how to call Delete.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
DataSources client = new SearchClient(endpoint, credential).GetDataSourcesClient();

Response response = client.Delete("mydatasource");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetDataSourceAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetDataSourceAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
DataSources client = new SearchClient(endpoint, credential).GetDataSourcesClient();

Response<SearchIndexerDataSource> response = await client.GetDataSourceAsync("mydatasource");
]]></code></example>
    </member>
    <member name="GetDataSource(string,CancellationToken)">
      <example>
This sample shows how to call GetDataSource.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
DataSources client = new SearchClient(endpoint, credential).GetDataSourcesClient();

Response<SearchIndexerDataSource> response = client.GetDataSource("mydatasource");
]]></code></example>
    </member>
    <member name="GetDataSourceAsync(string,RequestContext)">
      <example>
This sample shows how to call GetDataSourceAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
DataSources client = new SearchClient(endpoint, credential).GetDataSourcesClient();

Response response = await client.GetDataSourceAsync("mydatasource", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("credentials").ToString());
Console.WriteLine(result.GetProperty("container").GetProperty("name").ToString());
]]></code></example>
    </member>
    <member name="GetDataSource(string,RequestContext)">
      <example>
This sample shows how to call GetDataSource and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
DataSources client = new SearchClient(endpoint, credential).GetDataSourcesClient();

Response response = client.GetDataSource("mydatasource", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("credentials").ToString());
Console.WriteLine(result.GetProperty("container").GetProperty("name").ToString());
]]></code></example>
    </member>
    <member name="GetDataSourcesAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetDataSourcesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
DataSources client = new SearchClient(endpoint, credential).GetDataSourcesClient();

Response<ListDataSourcesResult> response = await client.GetDataSourcesAsync();
]]></code></example>
    </member>
    <member name="GetDataSources(string,CancellationToken)">
      <example>
This sample shows how to call GetDataSources.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
DataSources client = new SearchClient(endpoint, credential).GetDataSourcesClient();

Response<ListDataSourcesResult> response = client.GetDataSources();
]]></code></example>
    </member>
    <member name="GetDataSourcesAsync(string,RequestContext)">
      <example>
This sample shows how to call GetDataSourcesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
DataSources client = new SearchClient(endpoint, credential).GetDataSourcesClient();

Response response = await client.GetDataSourcesAsync("*", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("credentials").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("container").GetProperty("name").ToString());
]]></code></example>
    </member>
    <member name="GetDataSources(string,RequestContext)">
      <example>
This sample shows how to call GetDataSources and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
DataSources client = new SearchClient(endpoint, credential).GetDataSourcesClient();

Response response = client.GetDataSources("*", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("credentials").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("container").GetProperty("name").ToString());
]]></code></example>
    </member>
    <member name="CreateAsync(SearchIndexerDataSource,CancellationToken)">
      <example>
This sample shows how to call CreateAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
DataSources client = new SearchClient(endpoint, credential).GetDataSourcesClient();

SearchIndexerDataSource dataSource = new SearchIndexerDataSource("mydocdbdatasource", SearchIndexerDataSourceType.CosmosDb, new DataSourceCredentials
{
    ConnectionString = "AccountEndpoint=https://myDocDbEndpoint.documents.azure.com;AccountKey=myDocDbAuthKey;Database=myDocDbDatabaseId",
}, new SearchIndexerDataContainer("myDocDbCollectionId")
{
    Query = "SELECT c.id, c.userId, tag, c._ts FROM c JOIN tag IN c.tags WHERE c._ts >= @HighWaterMark ORDER BY c._ts",
})
{
    Description = "My Cosmos DB data source.",
    DataChangeDetectionPolicy = new HighWaterMarkChangeDetectionPolicy("_ts"),
    DataDeletionDetectionPolicy = new SoftDeleteColumnDeletionDetectionPolicy
    {
        SoftDeleteColumnName = "isDeleted",
        SoftDeleteMarkerValue = "true",
    },
    EncryptionKey = new SearchResourceEncryptionKey("myUserManagedEncryptionKey-createdinAzureKeyVault", "myKeyVersion-32charAlphaNumericString", "https://myKeyVault.vault.azure.net")
    {
        AccessCredentials = new AzureActiveDirectoryApplicationCredentials("00000000-0000-0000-0000-000000000000")
        {
            ApplicationSecret = "<applicationSecret>",
        },
    },
};
Response<SearchIndexerDataSource> response = await client.CreateAsync(dataSource);
]]></code></example>
    </member>
    <member name="Create(SearchIndexerDataSource,CancellationToken)">
      <example>
This sample shows how to call Create.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
DataSources client = new SearchClient(endpoint, credential).GetDataSourcesClient();

SearchIndexerDataSource dataSource = new SearchIndexerDataSource("mydocdbdatasource", SearchIndexerDataSourceType.CosmosDb, new DataSourceCredentials
{
    ConnectionString = "AccountEndpoint=https://myDocDbEndpoint.documents.azure.com;AccountKey=myDocDbAuthKey;Database=myDocDbDatabaseId",
}, new SearchIndexerDataContainer("myDocDbCollectionId")
{
    Query = "SELECT c.id, c.userId, tag, c._ts FROM c JOIN tag IN c.tags WHERE c._ts >= @HighWaterMark ORDER BY c._ts",
})
{
    Description = "My Cosmos DB data source.",
    DataChangeDetectionPolicy = new HighWaterMarkChangeDetectionPolicy("_ts"),
    DataDeletionDetectionPolicy = new SoftDeleteColumnDeletionDetectionPolicy
    {
        SoftDeleteColumnName = "isDeleted",
        SoftDeleteMarkerValue = "true",
    },
    EncryptionKey = new SearchResourceEncryptionKey("myUserManagedEncryptionKey-createdinAzureKeyVault", "myKeyVersion-32charAlphaNumericString", "https://myKeyVault.vault.azure.net")
    {
        AccessCredentials = new AzureActiveDirectoryApplicationCredentials("00000000-0000-0000-0000-000000000000")
        {
            ApplicationSecret = "<applicationSecret>",
        },
    },
};
Response<SearchIndexerDataSource> response = client.Create(dataSource);
]]></code></example>
    </member>
    <member name="CreateAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
DataSources client = new SearchClient(endpoint, credential).GetDataSourcesClient();

using RequestContent content = RequestContent.Create(new
{
    name = "mydocdbdatasource",
    description = "My Cosmos DB data source.",
    type = "cosmosdb",
    credentials = new
    {
        connectionString = "AccountEndpoint=https://myDocDbEndpoint.documents.azure.com;AccountKey=myDocDbAuthKey;Database=myDocDbDatabaseId",
    },
    container = new
    {
        name = "myDocDbCollectionId",
        query = "SELECT c.id, c.userId, tag, c._ts FROM c JOIN tag IN c.tags WHERE c._ts >= @HighWaterMark ORDER BY c._ts",
    },
    dataChangeDetectionPolicy = new Dictionary<string, object>
    {
        ["@odata.type"] = "#Microsoft.Azure.Search.HighWaterMarkChangeDetectionPolicy",
        ["highWaterMarkColumnName"] = "_ts"
    },
    dataDeletionDetectionPolicy = new Dictionary<string, object>
    {
        ["@odata.type"] = "#Microsoft.Azure.Search.SoftDeleteColumnDeletionDetectionPolicy",
        ["softDeleteColumnName"] = "isDeleted",
        ["softDeleteMarkerValue"] = "true"
    },
    encryptionKey = new
    {
        keyVaultKeyName = "myUserManagedEncryptionKey-createdinAzureKeyVault",
        keyVaultKeyVersion = "myKeyVersion-32charAlphaNumericString",
        keyVaultUri = "https://myKeyVault.vault.azure.net",
        accessCredentials = new
        {
            applicationId = "00000000-0000-0000-0000-000000000000",
            applicationSecret = "<applicationSecret>",
        },
    },
});
Response response = await client.CreateAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("credentials").ToString());
Console.WriteLine(result.GetProperty("container").GetProperty("name").ToString());
]]></code></example>
    </member>
    <member name="Create(RequestContent,RequestContext)">
      <example>
This sample shows how to call Create and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
DataSources client = new SearchClient(endpoint, credential).GetDataSourcesClient();

using RequestContent content = RequestContent.Create(new
{
    name = "mydocdbdatasource",
    description = "My Cosmos DB data source.",
    type = "cosmosdb",
    credentials = new
    {
        connectionString = "AccountEndpoint=https://myDocDbEndpoint.documents.azure.com;AccountKey=myDocDbAuthKey;Database=myDocDbDatabaseId",
    },
    container = new
    {
        name = "myDocDbCollectionId",
        query = "SELECT c.id, c.userId, tag, c._ts FROM c JOIN tag IN c.tags WHERE c._ts >= @HighWaterMark ORDER BY c._ts",
    },
    dataChangeDetectionPolicy = new Dictionary<string, object>
    {
        ["@odata.type"] = "#Microsoft.Azure.Search.HighWaterMarkChangeDetectionPolicy",
        ["highWaterMarkColumnName"] = "_ts"
    },
    dataDeletionDetectionPolicy = new Dictionary<string, object>
    {
        ["@odata.type"] = "#Microsoft.Azure.Search.SoftDeleteColumnDeletionDetectionPolicy",
        ["softDeleteColumnName"] = "isDeleted",
        ["softDeleteMarkerValue"] = "true"
    },
    encryptionKey = new
    {
        keyVaultKeyName = "myUserManagedEncryptionKey-createdinAzureKeyVault",
        keyVaultKeyVersion = "myKeyVersion-32charAlphaNumericString",
        keyVaultUri = "https://myKeyVault.vault.azure.net",
        accessCredentials = new
        {
            applicationId = "00000000-0000-0000-0000-000000000000",
            applicationSecret = "<applicationSecret>",
        },
    },
});
Response response = client.Create(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("credentials").ToString());
Console.WriteLine(result.GetProperty("container").GetProperty("name").ToString());
]]></code></example>
    </member>
  </members>
</doc>