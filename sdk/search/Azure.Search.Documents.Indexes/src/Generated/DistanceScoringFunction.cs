// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Search.Documents.Indexes
{
    /// <summary>
    /// Defines a function that boosts scores based on distance from a geographic
    /// location.
    /// </summary>
    public partial class DistanceScoringFunction : ScoringFunction
    {
        /// <summary> Initializes a new instance of <see cref="DistanceScoringFunction"/>. </summary>
        /// <param name="fieldName"> The name of the field used as input to the scoring function. </param>
        /// <param name="boost"> A multiplier for the raw score. Must be a positive number not equal to 1.0. </param>
        /// <param name="distance"> Parameter values for the distance scoring function. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="fieldName"/> or <paramref name="distance"/> is null. </exception>
        public DistanceScoringFunction(string fieldName, double boost, DistanceScoringParameters distance) : base(fieldName, boost)
        {
            Argument.AssertNotNull(fieldName, nameof(fieldName));
            Argument.AssertNotNull(distance, nameof(distance));

            Type = "distance";
            Distance = distance;
        }

        /// <summary> Initializes a new instance of <see cref="DistanceScoringFunction"/>. </summary>
        /// <param name="fieldName"> The name of the field used as input to the scoring function. </param>
        /// <param name="boost"> A multiplier for the raw score. Must be a positive number not equal to 1.0. </param>
        /// <param name="interpolation">
        /// A value indicating how boosting will be interpolated across document scores;
        /// defaults to "Linear".
        /// </param>
        /// <param name="type"> Type of ScoringFunction. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="distance"> Parameter values for the distance scoring function. </param>
        internal DistanceScoringFunction(string fieldName, double boost, ScoringFunctionInterpolation? interpolation, string type, IDictionary<string, BinaryData> serializedAdditionalRawData, DistanceScoringParameters distance) : base(fieldName, boost, interpolation, type, serializedAdditionalRawData)
        {
            Distance = distance;
        }

        /// <summary> Initializes a new instance of <see cref="DistanceScoringFunction"/> for deserialization. </summary>
        internal DistanceScoringFunction()
        {
        }

        /// <summary> Parameter values for the distance scoring function. </summary>
        public DistanceScoringParameters Distance { get; set; }
    }
}
