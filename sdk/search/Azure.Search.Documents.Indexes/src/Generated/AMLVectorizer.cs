// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Search.Documents.Indexes
{
    /// <summary>
    /// Specifies an Azure Machine Learning endpoint deployed via the Azure AI Foundry
    /// Model Catalog for generating the vector embedding of a query string.
    /// </summary>
    public partial class AMLVectorizer : VectorSearchVectorizer
    {
        /// <summary> Initializes a new instance of <see cref="AMLVectorizer"/>. </summary>
        /// <param name="name"> The name to associate with this particular vectorization method. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public AMLVectorizer(string name) : base(name)
        {
            Argument.AssertNotNull(name, nameof(name));

            Kind = VectorSearchVectorizerKind.AML;
        }

        /// <summary> Initializes a new instance of <see cref="AMLVectorizer"/>. </summary>
        /// <param name="name"> The name to associate with this particular vectorization method. </param>
        /// <param name="kind"> Type of VectorSearchVectorizer. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="amlParameters"> Specifies the properties of the AML vectorizer. </param>
        internal AMLVectorizer(string name, VectorSearchVectorizerKind kind, IDictionary<string, BinaryData> serializedAdditionalRawData, AMLParameters amlParameters) : base(name, kind, serializedAdditionalRawData)
        {
            AmlParameters = amlParameters;
        }

        /// <summary> Initializes a new instance of <see cref="AMLVectorizer"/> for deserialization. </summary>
        internal AMLVectorizer()
        {
        }

        /// <summary> Specifies the properties of the AML vectorizer. </summary>
        public AMLParameters AmlParameters { get; set; }
    }
}
