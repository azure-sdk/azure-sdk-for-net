// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Search.Documents.Indexes
{
    /// <summary> Represents the overall indexer status. </summary>
    public readonly partial struct IndexerStatus : IEquatable<IndexerStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="IndexerStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public IndexerStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "unknown";
        private const string ErrorValue = "error";
        private const string RunningValue = "running";

        /// <summary> Indicates that the indexer is in an unknown state. </summary>
        public static IndexerStatus Unknown { get; } = new IndexerStatus(UnknownValue);
        /// <summary>
        /// Indicates that the indexer experienced an error that cannot be corrected
        /// without human intervention.
        /// </summary>
        public static IndexerStatus Error { get; } = new IndexerStatus(ErrorValue);
        /// <summary> Indicates that the indexer is running normally. </summary>
        public static IndexerStatus Running { get; } = new IndexerStatus(RunningValue);
        /// <summary> Determines if two <see cref="IndexerStatus"/> values are the same. </summary>
        public static bool operator ==(IndexerStatus left, IndexerStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="IndexerStatus"/> values are not the same. </summary>
        public static bool operator !=(IndexerStatus left, IndexerStatus right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="IndexerStatus"/>. </summary>
        public static implicit operator IndexerStatus(string value) => new IndexerStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is IndexerStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(IndexerStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
