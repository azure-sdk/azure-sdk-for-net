// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Search.Documents.Indexes
{
    /// <summary> Represents service-level resource counters and quotas. </summary>
    public partial class SearchServiceCounters
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="SearchServiceCounters"/>. </summary>
        /// <param name="aliasesCount"> Total number of aliases. </param>
        /// <param name="documentCount"> Total number of documents across all indexes in the service. </param>
        /// <param name="indexesCount"> Total number of indexes. </param>
        /// <param name="indexersCount"> Total number of indexers. </param>
        /// <param name="dataSourcesCount"> Total number of data sources. </param>
        /// <param name="storageSize"> Total size of used storage in bytes. </param>
        /// <param name="synonymMaps"> Total number of synonym maps. </param>
        /// <param name="skillsetCount"> Total number of skillsets. </param>
        /// <param name="vectorIndexSize"> Total memory consumption of all vector indexes within the service, in bytes. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="aliasesCount"/>, <paramref name="documentCount"/>, <paramref name="indexesCount"/>, <paramref name="indexersCount"/>, <paramref name="dataSourcesCount"/>, <paramref name="storageSize"/>, <paramref name="synonymMaps"/>, <paramref name="skillsetCount"/> or <paramref name="vectorIndexSize"/> is null. </exception>
        internal SearchServiceCounters(ResourceCounter aliasesCount, ResourceCounter documentCount, ResourceCounter indexesCount, ResourceCounter indexersCount, ResourceCounter dataSourcesCount, ResourceCounter storageSize, ResourceCounter synonymMaps, ResourceCounter skillsetCount, ResourceCounter vectorIndexSize)
        {
            Argument.AssertNotNull(aliasesCount, nameof(aliasesCount));
            Argument.AssertNotNull(documentCount, nameof(documentCount));
            Argument.AssertNotNull(indexesCount, nameof(indexesCount));
            Argument.AssertNotNull(indexersCount, nameof(indexersCount));
            Argument.AssertNotNull(dataSourcesCount, nameof(dataSourcesCount));
            Argument.AssertNotNull(storageSize, nameof(storageSize));
            Argument.AssertNotNull(synonymMaps, nameof(synonymMaps));
            Argument.AssertNotNull(skillsetCount, nameof(skillsetCount));
            Argument.AssertNotNull(vectorIndexSize, nameof(vectorIndexSize));

            AliasesCount = aliasesCount;
            DocumentCount = documentCount;
            IndexesCount = indexesCount;
            IndexersCount = indexersCount;
            DataSourcesCount = dataSourcesCount;
            StorageSize = storageSize;
            SynonymMaps = synonymMaps;
            SkillsetCount = skillsetCount;
            VectorIndexSize = vectorIndexSize;
        }

        /// <summary> Initializes a new instance of <see cref="SearchServiceCounters"/>. </summary>
        /// <param name="aliasesCount"> Total number of aliases. </param>
        /// <param name="documentCount"> Total number of documents across all indexes in the service. </param>
        /// <param name="indexesCount"> Total number of indexes. </param>
        /// <param name="indexersCount"> Total number of indexers. </param>
        /// <param name="dataSourcesCount"> Total number of data sources. </param>
        /// <param name="storageSize"> Total size of used storage in bytes. </param>
        /// <param name="synonymMaps"> Total number of synonym maps. </param>
        /// <param name="skillsetCount"> Total number of skillsets. </param>
        /// <param name="vectorIndexSize"> Total memory consumption of all vector indexes within the service, in bytes. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal SearchServiceCounters(ResourceCounter aliasesCount, ResourceCounter documentCount, ResourceCounter indexesCount, ResourceCounter indexersCount, ResourceCounter dataSourcesCount, ResourceCounter storageSize, ResourceCounter synonymMaps, ResourceCounter skillsetCount, ResourceCounter vectorIndexSize, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            AliasesCount = aliasesCount;
            DocumentCount = documentCount;
            IndexesCount = indexesCount;
            IndexersCount = indexersCount;
            DataSourcesCount = dataSourcesCount;
            StorageSize = storageSize;
            SynonymMaps = synonymMaps;
            SkillsetCount = skillsetCount;
            VectorIndexSize = vectorIndexSize;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="SearchServiceCounters"/> for deserialization. </summary>
        internal SearchServiceCounters()
        {
        }

        /// <summary> Total number of aliases. </summary>
        public ResourceCounter AliasesCount { get; }
        /// <summary> Total number of documents across all indexes in the service. </summary>
        public ResourceCounter DocumentCount { get; }
        /// <summary> Total number of indexes. </summary>
        public ResourceCounter IndexesCount { get; }
        /// <summary> Total number of indexers. </summary>
        public ResourceCounter IndexersCount { get; }
        /// <summary> Total number of data sources. </summary>
        public ResourceCounter DataSourcesCount { get; }
        /// <summary> Total size of used storage in bytes. </summary>
        public ResourceCounter StorageSize { get; }
        /// <summary> Total number of synonym maps. </summary>
        public ResourceCounter SynonymMaps { get; }
        /// <summary> Total number of skillsets. </summary>
        public ResourceCounter SkillsetCount { get; }
        /// <summary> Total memory consumption of all vector indexes within the service, in bytes. </summary>
        public ResourceCounter VectorIndexSize { get; }
    }
}
