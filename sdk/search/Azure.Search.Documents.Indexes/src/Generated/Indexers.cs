// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Search.Documents.Indexes
{
    // Data plane generated sub-client.
    /// <summary> The Indexers sub-client. </summary>
    public partial class Indexers
    {
        private const string AuthorizationHeader = "api-key";
        private readonly AzureKeyCredential _keyCredential;
        private static readonly string[] AuthorizationScopes = new string[] { "https://search.azure.com/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of Indexers for mocking. </summary>
        protected Indexers()
        {
        }

        /// <summary> Initializes a new instance of Indexers. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="keyCredential"> The key credential to copy. </param>
        /// <param name="tokenCredential"> The token credential to copy. </param>
        /// <param name="endpoint"> Service host. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        internal Indexers(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, AzureKeyCredential keyCredential, TokenCredential tokenCredential, Uri endpoint, string apiVersion)
        {
            ClientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
            _keyCredential = keyCredential;
            _tokenCredential = tokenCredential;
            _endpoint = endpoint;
            _apiVersion = apiVersion;
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] Resets the change tracking state associated with an indexer.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="indexerName"> The name of the indexer. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="indexerName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="indexerName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Indexers.xml" path="doc/members/member[@name='ResetAsync(string,RequestContext)']/*" />
        public virtual async Task<Response> ResetAsync(string indexerName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(indexerName, nameof(indexerName));

            using var scope = ClientDiagnostics.CreateScope("Indexers.Reset");
            scope.Start();
            try
            {
                using HttpMessage message = CreateResetRequest(indexerName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] Resets the change tracking state associated with an indexer.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="indexerName"> The name of the indexer. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="indexerName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="indexerName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Indexers.xml" path="doc/members/member[@name='Reset(string,RequestContext)']/*" />
        public virtual Response Reset(string indexerName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(indexerName, nameof(indexerName));

            using var scope = ClientDiagnostics.CreateScope("Indexers.Reset");
            scope.Start();
            try
            {
                using HttpMessage message = CreateResetRequest(indexerName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Resets specific documents in the datasource to be selectively re-ingested by
        /// the indexer.
        /// </summary>
        /// <param name="indexerName"> The name of the indexer. </param>
        /// <param name="keysOrIds">
        /// The keys or ids of the documents to be re-ingested. If keys are provided, the
        /// document key field must be specified in the indexer configuration. If ids are
        /// provided, the document key field is ignored.
        /// </param>
        /// <param name="overwrite">
        /// If false, keys or ids will be appended to existing ones. If true, only the keys
        /// or ids in this payload will be queued to be re-ingested.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="indexerName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="indexerName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/Indexers.xml" path="doc/members/member[@name='ResetDocsAsync(string,DocumentKeysOrIds,bool?,CancellationToken)']/*" />
        public virtual async Task<Response> ResetDocsAsync(string indexerName, DocumentKeysOrIds keysOrIds = null, bool? overwrite = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(indexerName, nameof(indexerName));

            using RequestContent content = keysOrIds?.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await ResetDocsAsync(indexerName, content, overwrite, context).ConfigureAwait(false);
            return response;
        }

        /// <summary>
        /// Resets specific documents in the datasource to be selectively re-ingested by
        /// the indexer.
        /// </summary>
        /// <param name="indexerName"> The name of the indexer. </param>
        /// <param name="keysOrIds">
        /// The keys or ids of the documents to be re-ingested. If keys are provided, the
        /// document key field must be specified in the indexer configuration. If ids are
        /// provided, the document key field is ignored.
        /// </param>
        /// <param name="overwrite">
        /// If false, keys or ids will be appended to existing ones. If true, only the keys
        /// or ids in this payload will be queued to be re-ingested.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="indexerName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="indexerName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/Indexers.xml" path="doc/members/member[@name='ResetDocs(string,DocumentKeysOrIds,bool?,CancellationToken)']/*" />
        public virtual Response ResetDocs(string indexerName, DocumentKeysOrIds keysOrIds = null, bool? overwrite = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(indexerName, nameof(indexerName));

            using RequestContent content = keysOrIds?.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = ResetDocs(indexerName, content, overwrite, context);
            return response;
        }

        /// <summary>
        /// [Protocol Method] Resets specific documents in the datasource to be selectively re-ingested by
        /// the indexer.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="ResetDocsAsync(string,DocumentKeysOrIds,bool?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="indexerName"> The name of the indexer. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="overwrite">
        /// If false, keys or ids will be appended to existing ones. If true, only the keys
        /// or ids in this payload will be queued to be re-ingested.
        /// </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="indexerName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="indexerName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Indexers.xml" path="doc/members/member[@name='ResetDocsAsync(string,RequestContent,bool?,RequestContext)']/*" />
        public virtual async Task<Response> ResetDocsAsync(string indexerName, RequestContent content, bool? overwrite = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(indexerName, nameof(indexerName));

            using var scope = ClientDiagnostics.CreateScope("Indexers.ResetDocs");
            scope.Start();
            try
            {
                using HttpMessage message = CreateResetDocsRequest(indexerName, content, overwrite, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Resets specific documents in the datasource to be selectively re-ingested by
        /// the indexer.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="ResetDocs(string,DocumentKeysOrIds,bool?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="indexerName"> The name of the indexer. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="overwrite">
        /// If false, keys or ids will be appended to existing ones. If true, only the keys
        /// or ids in this payload will be queued to be re-ingested.
        /// </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="indexerName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="indexerName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Indexers.xml" path="doc/members/member[@name='ResetDocs(string,RequestContent,bool?,RequestContext)']/*" />
        public virtual Response ResetDocs(string indexerName, RequestContent content, bool? overwrite = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(indexerName, nameof(indexerName));

            using var scope = ClientDiagnostics.CreateScope("Indexers.ResetDocs");
            scope.Start();
            try
            {
                using HttpMessage message = CreateResetDocsRequest(indexerName, content, overwrite, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] Runs an indexer on-demand.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="indexerName"> The name of the indexer. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="indexerName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="indexerName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Indexers.xml" path="doc/members/member[@name='RunAsync(string,RequestContext)']/*" />
        public virtual async Task<Response> RunAsync(string indexerName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(indexerName, nameof(indexerName));

            using var scope = ClientDiagnostics.CreateScope("Indexers.Run");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRunRequest(indexerName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] Runs an indexer on-demand.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="indexerName"> The name of the indexer. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="indexerName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="indexerName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Indexers.xml" path="doc/members/member[@name='Run(string,RequestContext)']/*" />
        public virtual Response Run(string indexerName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(indexerName, nameof(indexerName));

            using var scope = ClientDiagnostics.CreateScope("Indexers.Run");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRunRequest(indexerName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a new indexer or updates an indexer if it already exists. </summary>
        /// <param name="indexerName"> The name of the indexer. </param>
        /// <param name="indexer"> The definition of the indexer to create or update. </param>
        /// <param name="skipIndexerResetRequirementForCache"> Ignores cache reset requirements. </param>
        /// <param name="disableCacheReprocessingChangeDetection"> Disables cache reprocessing change detection. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="indexerName"/> or <paramref name="indexer"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="indexerName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/Indexers.xml" path="doc/members/member[@name='CreateOrUpdateAsync(string,SearchIndexer,bool?,bool?,MatchConditions,CancellationToken)']/*" />
        public virtual async Task<Response<SearchIndexer>> CreateOrUpdateAsync(string indexerName, SearchIndexer indexer, bool? skipIndexerResetRequirementForCache = null, bool? disableCacheReprocessingChangeDetection = null, MatchConditions matchConditions = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(indexerName, nameof(indexerName));
            Argument.AssertNotNull(indexer, nameof(indexer));

            using RequestContent content = indexer.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await CreateOrUpdateAsync(indexerName, content, skipIndexerResetRequirementForCache, disableCacheReprocessingChangeDetection, matchConditions, context).ConfigureAwait(false);
            return Response.FromValue(SearchIndexer.FromResponse(response), response);
        }

        /// <summary> Creates a new indexer or updates an indexer if it already exists. </summary>
        /// <param name="indexerName"> The name of the indexer. </param>
        /// <param name="indexer"> The definition of the indexer to create or update. </param>
        /// <param name="skipIndexerResetRequirementForCache"> Ignores cache reset requirements. </param>
        /// <param name="disableCacheReprocessingChangeDetection"> Disables cache reprocessing change detection. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="indexerName"/> or <paramref name="indexer"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="indexerName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/Indexers.xml" path="doc/members/member[@name='CreateOrUpdate(string,SearchIndexer,bool?,bool?,MatchConditions,CancellationToken)']/*" />
        public virtual Response<SearchIndexer> CreateOrUpdate(string indexerName, SearchIndexer indexer, bool? skipIndexerResetRequirementForCache = null, bool? disableCacheReprocessingChangeDetection = null, MatchConditions matchConditions = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(indexerName, nameof(indexerName));
            Argument.AssertNotNull(indexer, nameof(indexer));

            using RequestContent content = indexer.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = CreateOrUpdate(indexerName, content, skipIndexerResetRequirementForCache, disableCacheReprocessingChangeDetection, matchConditions, context);
            return Response.FromValue(SearchIndexer.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Creates a new indexer or updates an indexer if it already exists.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateOrUpdateAsync(string,SearchIndexer,bool?,bool?,MatchConditions,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="indexerName"> The name of the indexer. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="skipIndexerResetRequirementForCache"> Ignores cache reset requirements. </param>
        /// <param name="disableCacheReprocessingChangeDetection"> Disables cache reprocessing change detection. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="indexerName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="indexerName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Indexers.xml" path="doc/members/member[@name='CreateOrUpdateAsync(string,RequestContent,bool?,bool?,MatchConditions,RequestContext)']/*" />
        public virtual async Task<Response> CreateOrUpdateAsync(string indexerName, RequestContent content, bool? skipIndexerResetRequirementForCache = null, bool? disableCacheReprocessingChangeDetection = null, MatchConditions matchConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(indexerName, nameof(indexerName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Indexers.CreateOrUpdate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateRequest(indexerName, content, skipIndexerResetRequirementForCache, disableCacheReprocessingChangeDetection, matchConditions, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Creates a new indexer or updates an indexer if it already exists.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateOrUpdate(string,SearchIndexer,bool?,bool?,MatchConditions,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="indexerName"> The name of the indexer. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="skipIndexerResetRequirementForCache"> Ignores cache reset requirements. </param>
        /// <param name="disableCacheReprocessingChangeDetection"> Disables cache reprocessing change detection. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="indexerName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="indexerName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Indexers.xml" path="doc/members/member[@name='CreateOrUpdate(string,RequestContent,bool?,bool?,MatchConditions,RequestContext)']/*" />
        public virtual Response CreateOrUpdate(string indexerName, RequestContent content, bool? skipIndexerResetRequirementForCache = null, bool? disableCacheReprocessingChangeDetection = null, MatchConditions matchConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(indexerName, nameof(indexerName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Indexers.CreateOrUpdate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateRequest(indexerName, content, skipIndexerResetRequirementForCache, disableCacheReprocessingChangeDetection, matchConditions, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] Deletes an indexer.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="indexerName"> The name of the indexer. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="indexerName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="indexerName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Indexers.xml" path="doc/members/member[@name='DeleteAsync(string,MatchConditions,RequestContext)']/*" />
        public virtual async Task<Response> DeleteAsync(string indexerName, MatchConditions matchConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(indexerName, nameof(indexerName));

            using var scope = ClientDiagnostics.CreateScope("Indexers.Delete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRequest(indexerName, matchConditions, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] Deletes an indexer.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="indexerName"> The name of the indexer. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="indexerName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="indexerName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Indexers.xml" path="doc/members/member[@name='Delete(string,MatchConditions,RequestContext)']/*" />
        public virtual Response Delete(string indexerName, MatchConditions matchConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(indexerName, nameof(indexerName));

            using var scope = ClientDiagnostics.CreateScope("Indexers.Delete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRequest(indexerName, matchConditions, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Retrieves an indexer definition. </summary>
        /// <param name="indexerName"> The name of the indexer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="indexerName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="indexerName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/Indexers.xml" path="doc/members/member[@name='GetIndexerAsync(string,CancellationToken)']/*" />
        public virtual async Task<Response<SearchIndexer>> GetIndexerAsync(string indexerName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(indexerName, nameof(indexerName));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetIndexerAsync(indexerName, context).ConfigureAwait(false);
            return Response.FromValue(SearchIndexer.FromResponse(response), response);
        }

        /// <summary> Retrieves an indexer definition. </summary>
        /// <param name="indexerName"> The name of the indexer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="indexerName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="indexerName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/Indexers.xml" path="doc/members/member[@name='GetIndexer(string,CancellationToken)']/*" />
        public virtual Response<SearchIndexer> GetIndexer(string indexerName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(indexerName, nameof(indexerName));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetIndexer(indexerName, context);
            return Response.FromValue(SearchIndexer.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Retrieves an indexer definition.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetIndexerAsync(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="indexerName"> The name of the indexer. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="indexerName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="indexerName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Indexers.xml" path="doc/members/member[@name='GetIndexerAsync(string,RequestContext)']/*" />
        public virtual async Task<Response> GetIndexerAsync(string indexerName, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(indexerName, nameof(indexerName));

            using var scope = ClientDiagnostics.CreateScope("Indexers.GetIndexer");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetIndexerRequest(indexerName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Retrieves an indexer definition.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetIndexer(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="indexerName"> The name of the indexer. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="indexerName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="indexerName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Indexers.xml" path="doc/members/member[@name='GetIndexer(string,RequestContext)']/*" />
        public virtual Response GetIndexer(string indexerName, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(indexerName, nameof(indexerName));

            using var scope = ClientDiagnostics.CreateScope("Indexers.GetIndexer");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetIndexerRequest(indexerName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists all indexers available for a search service. </summary>
        /// <param name="select">
        /// Selects which top-level properties to retrieve.
        /// Specified as a comma-separated list of JSON property names,
        /// or '*' for all properties. The default is all properties.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/Indexers.xml" path="doc/members/member[@name='GetIndexersAsync(string,CancellationToken)']/*" />
        public virtual async Task<Response<ListIndexersResult>> GetIndexersAsync(string select = null, CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetIndexersAsync(select, context).ConfigureAwait(false);
            return Response.FromValue(ListIndexersResult.FromResponse(response), response);
        }

        /// <summary> Lists all indexers available for a search service. </summary>
        /// <param name="select">
        /// Selects which top-level properties to retrieve.
        /// Specified as a comma-separated list of JSON property names,
        /// or '*' for all properties. The default is all properties.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/Indexers.xml" path="doc/members/member[@name='GetIndexers(string,CancellationToken)']/*" />
        public virtual Response<ListIndexersResult> GetIndexers(string select = null, CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetIndexers(select, context);
            return Response.FromValue(ListIndexersResult.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Lists all indexers available for a search service.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetIndexersAsync(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="select">
        /// Selects which top-level properties to retrieve.
        /// Specified as a comma-separated list of JSON property names,
        /// or '*' for all properties. The default is all properties.
        /// </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Indexers.xml" path="doc/members/member[@name='GetIndexersAsync(string,RequestContext)']/*" />
        public virtual async Task<Response> GetIndexersAsync(string select, RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("Indexers.GetIndexers");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetIndexersRequest(select, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Lists all indexers available for a search service.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetIndexers(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="select">
        /// Selects which top-level properties to retrieve.
        /// Specified as a comma-separated list of JSON property names,
        /// or '*' for all properties. The default is all properties.
        /// </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Indexers.xml" path="doc/members/member[@name='GetIndexers(string,RequestContext)']/*" />
        public virtual Response GetIndexers(string select, RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("Indexers.GetIndexers");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetIndexersRequest(select, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a new indexer. </summary>
        /// <param name="indexer"> The definition of the indexer to create. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="indexer"/> is null. </exception>
        /// <include file="Docs/Indexers.xml" path="doc/members/member[@name='CreateAsync(SearchIndexer,CancellationToken)']/*" />
        public virtual async Task<Response<SearchIndexer>> CreateAsync(SearchIndexer indexer, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(indexer, nameof(indexer));

            using RequestContent content = indexer.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await CreateAsync(content, context).ConfigureAwait(false);
            return Response.FromValue(SearchIndexer.FromResponse(response), response);
        }

        /// <summary> Creates a new indexer. </summary>
        /// <param name="indexer"> The definition of the indexer to create. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="indexer"/> is null. </exception>
        /// <include file="Docs/Indexers.xml" path="doc/members/member[@name='Create(SearchIndexer,CancellationToken)']/*" />
        public virtual Response<SearchIndexer> Create(SearchIndexer indexer, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(indexer, nameof(indexer));

            using RequestContent content = indexer.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = Create(content, context);
            return Response.FromValue(SearchIndexer.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Creates a new indexer.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateAsync(SearchIndexer,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Indexers.xml" path="doc/members/member[@name='CreateAsync(RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> CreateAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Indexers.Create");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Creates a new indexer.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="Create(SearchIndexer,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Indexers.xml" path="doc/members/member[@name='Create(RequestContent,RequestContext)']/*" />
        public virtual Response Create(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Indexers.Create");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the current status and execution history of an indexer. </summary>
        /// <param name="indexerName"> The name of the indexer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="indexerName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="indexerName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/Indexers.xml" path="doc/members/member[@name='GetStatusAsync(string,CancellationToken)']/*" />
        public virtual async Task<Response<SearchIndexerStatus>> GetStatusAsync(string indexerName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(indexerName, nameof(indexerName));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetStatusAsync(indexerName, context).ConfigureAwait(false);
            return Response.FromValue(SearchIndexerStatus.FromResponse(response), response);
        }

        /// <summary> Returns the current status and execution history of an indexer. </summary>
        /// <param name="indexerName"> The name of the indexer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="indexerName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="indexerName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/Indexers.xml" path="doc/members/member[@name='GetStatus(string,CancellationToken)']/*" />
        public virtual Response<SearchIndexerStatus> GetStatus(string indexerName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(indexerName, nameof(indexerName));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetStatus(indexerName, context);
            return Response.FromValue(SearchIndexerStatus.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Returns the current status and execution history of an indexer.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetStatusAsync(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="indexerName"> The name of the indexer. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="indexerName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="indexerName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Indexers.xml" path="doc/members/member[@name='GetStatusAsync(string,RequestContext)']/*" />
        public virtual async Task<Response> GetStatusAsync(string indexerName, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(indexerName, nameof(indexerName));

            using var scope = ClientDiagnostics.CreateScope("Indexers.GetStatus");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetStatusRequest(indexerName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Returns the current status and execution history of an indexer.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetStatus(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="indexerName"> The name of the indexer. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="indexerName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="indexerName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Indexers.xml" path="doc/members/member[@name='GetStatus(string,RequestContext)']/*" />
        public virtual Response GetStatus(string indexerName, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(indexerName, nameof(indexerName));

            using var scope = ClientDiagnostics.CreateScope("Indexers.GetStatus");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetStatusRequest(indexerName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateResetRequest(string indexerName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/indexers('", false);
            uri.AppendPath(indexerName, true);
            uri.AppendPath("')/search.reset", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateResetDocsRequest(string indexerName, RequestContent content, bool? overwrite, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/indexers('", false);
            uri.AppendPath(indexerName, true);
            uri.AppendPath("')/search.resetdocs", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (overwrite != null)
            {
                uri.AppendQuery("overwrite", overwrite.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateRunRequest(string indexerName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/indexers('", false);
            uri.AppendPath(indexerName, true);
            uri.AppendPath("')/search.run", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCreateOrUpdateRequest(string indexerName, RequestContent content, bool? skipIndexerResetRequirementForCache, bool? disableCacheReprocessingChangeDetection, MatchConditions matchConditions, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200201);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/indexers('", false);
            uri.AppendPath(indexerName, true);
            uri.AppendPath("')", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (skipIndexerResetRequirementForCache != null)
            {
                uri.AppendQuery("ignoreResetRequirements", skipIndexerResetRequirementForCache.Value, true);
            }
            if (disableCacheReprocessingChangeDetection != null)
            {
                uri.AppendQuery("disableCacheReprocessingChangeDetection", disableCacheReprocessingChangeDetection.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Prefer", "return=representation");
            request.Headers.Add("Accept", "application/json");
            if (matchConditions != null)
            {
                request.Headers.Add(matchConditions);
            }
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteRequest(string indexerName, MatchConditions matchConditions, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204404);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/indexers('", false);
            uri.AppendPath(indexerName, true);
            uri.AppendPath("')", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (matchConditions != null)
            {
                request.Headers.Add(matchConditions);
            }
            return message;
        }

        internal HttpMessage CreateGetIndexerRequest(string indexerName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/indexers('", false);
            uri.AppendPath(indexerName, true);
            uri.AppendPath("')", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetIndexersRequest(string select, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/indexers", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (select != null)
            {
                uri.AppendQuery("$select", select, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCreateRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier201);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/indexers", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetStatusRequest(string indexerName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/indexers('", false);
            uri.AppendPath(indexerName, true);
            uri.AppendPath("')/search.status", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier204;
        private static ResponseClassifier ResponseClassifier204 => _responseClassifier204 ??= new StatusCodeClassifier(stackalloc ushort[] { 204 });
        private static ResponseClassifier _responseClassifier202;
        private static ResponseClassifier ResponseClassifier202 => _responseClassifier202 ??= new StatusCodeClassifier(stackalloc ushort[] { 202 });
        private static ResponseClassifier _responseClassifier200201;
        private static ResponseClassifier ResponseClassifier200201 => _responseClassifier200201 ??= new StatusCodeClassifier(stackalloc ushort[] { 200, 201 });
        private static ResponseClassifier _responseClassifier204404;
        private static ResponseClassifier ResponseClassifier204404 => _responseClassifier204404 ??= new StatusCodeClassifier(stackalloc ushort[] { 204, 404 });
        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier201;
        private static ResponseClassifier ResponseClassifier201 => _responseClassifier201 ??= new StatusCodeClassifier(stackalloc ushort[] { 201 });
    }
}
