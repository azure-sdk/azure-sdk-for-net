// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Search.Documents.Indexes
{
    /// <summary> Represents the status of an individual indexer execution. </summary>
    public readonly partial struct IndexerExecutionStatus : IEquatable<IndexerExecutionStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="IndexerExecutionStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public IndexerExecutionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string TransientFailureValue = "transientFailure";
        private const string SuccessValue = "success";
        private const string InProgressValue = "inProgress";
        private const string ResetValue = "reset";

        /// <summary>
        /// An indexer invocation has failed, but the failure may be transient. Indexer
        /// invocations will continue per schedule.
        /// </summary>
        public static IndexerExecutionStatus TransientFailure { get; } = new IndexerExecutionStatus(TransientFailureValue);
        /// <summary> Indexer execution completed successfully. </summary>
        public static IndexerExecutionStatus Success { get; } = new IndexerExecutionStatus(SuccessValue);
        /// <summary> Indexer execution is in progress. </summary>
        public static IndexerExecutionStatus InProgress { get; } = new IndexerExecutionStatus(InProgressValue);
        /// <summary> Indexer has been reset. </summary>
        public static IndexerExecutionStatus Reset { get; } = new IndexerExecutionStatus(ResetValue);
        /// <summary> Determines if two <see cref="IndexerExecutionStatus"/> values are the same. </summary>
        public static bool operator ==(IndexerExecutionStatus left, IndexerExecutionStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="IndexerExecutionStatus"/> values are not the same. </summary>
        public static bool operator !=(IndexerExecutionStatus left, IndexerExecutionStatus right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="IndexerExecutionStatus"/>. </summary>
        public static implicit operator IndexerExecutionStatus(string value) => new IndexerExecutionStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is IndexerExecutionStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(IndexerExecutionStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
