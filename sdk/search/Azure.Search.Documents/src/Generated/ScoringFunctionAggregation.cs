// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Search.Documents
{
    /// <summary>
    /// Defines the aggregation function used to combine the results of all the scoring
    /// functions in a scoring profile.
    /// </summary>
    public readonly partial struct ScoringFunctionAggregation : IEquatable<ScoringFunctionAggregation>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ScoringFunctionAggregation"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ScoringFunctionAggregation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SumValue = "sum";
        private const string AverageValue = "average";
        private const string MinimumValue = "minimum";
        private const string MaximumValue = "maximum";
        private const string FirstMatchingValue = "firstMatching";

        /// <summary> Boost scores by the sum of all scoring function results. </summary>
        public static ScoringFunctionAggregation Sum { get; } = new ScoringFunctionAggregation(SumValue);
        /// <summary> Boost scores by the average of all scoring function results. </summary>
        public static ScoringFunctionAggregation Average { get; } = new ScoringFunctionAggregation(AverageValue);
        /// <summary> Boost scores by the minimum of all scoring function results. </summary>
        public static ScoringFunctionAggregation Minimum { get; } = new ScoringFunctionAggregation(MinimumValue);
        /// <summary> Boost scores by the maximum of all scoring function results. </summary>
        public static ScoringFunctionAggregation Maximum { get; } = new ScoringFunctionAggregation(MaximumValue);
        /// <summary> Boost scores using the first applicable scoring function in the scoring profile. </summary>
        public static ScoringFunctionAggregation FirstMatching { get; } = new ScoringFunctionAggregation(FirstMatchingValue);
        /// <summary> Determines if two <see cref="ScoringFunctionAggregation"/> values are the same. </summary>
        public static bool operator ==(ScoringFunctionAggregation left, ScoringFunctionAggregation right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ScoringFunctionAggregation"/> values are not the same. </summary>
        public static bool operator !=(ScoringFunctionAggregation left, ScoringFunctionAggregation right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ScoringFunctionAggregation"/>. </summary>
        public static implicit operator ScoringFunctionAggregation(string value) => new ScoringFunctionAggregation(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ScoringFunctionAggregation other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ScoringFunctionAggregation other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
