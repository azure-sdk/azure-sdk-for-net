// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Search.Documents
{
    public partial class CustomEntityLookupSkill : IUtf8JsonSerializable, IJsonModel<CustomEntityLookupSkill>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<CustomEntityLookupSkill>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<CustomEntityLookupSkill>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CustomEntityLookupSkill>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(CustomEntityLookupSkill)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            if (Optional.IsDefined(DefaultLanguageCode))
            {
                writer.WritePropertyName("defaultLanguageCode"u8);
                writer.WriteStringValue(DefaultLanguageCode.Value.ToString());
            }
            if (Optional.IsDefined(EntitiesDefinitionUri))
            {
                writer.WritePropertyName("entitiesDefinitionUri"u8);
                writer.WriteStringValue(EntitiesDefinitionUri);
            }
            if (Optional.IsCollectionDefined(InlineEntitiesDefinition))
            {
                writer.WritePropertyName("inlineEntitiesDefinition"u8);
                writer.WriteStartArray();
                foreach (var item in InlineEntitiesDefinition)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(GlobalDefaultCaseSensitive))
            {
                writer.WritePropertyName("globalDefaultCaseSensitive"u8);
                writer.WriteBooleanValue(GlobalDefaultCaseSensitive.Value);
            }
            if (Optional.IsDefined(GlobalDefaultAccentSensitive))
            {
                writer.WritePropertyName("globalDefaultAccentSensitive"u8);
                writer.WriteBooleanValue(GlobalDefaultAccentSensitive.Value);
            }
            if (Optional.IsDefined(GlobalDefaultFuzzyEditDistance))
            {
                writer.WritePropertyName("globalDefaultFuzzyEditDistance"u8);
                writer.WriteNumberValue(GlobalDefaultFuzzyEditDistance.Value);
            }
        }

        CustomEntityLookupSkill IJsonModel<CustomEntityLookupSkill>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CustomEntityLookupSkill>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(CustomEntityLookupSkill)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeCustomEntityLookupSkill(document.RootElement, options);
        }

        internal static CustomEntityLookupSkill DeserializeCustomEntityLookupSkill(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            CustomEntityLookupSkillLanguage? defaultLanguageCode = default;
            string entitiesDefinitionUri = default;
            IList<CustomEntity> inlineEntitiesDefinition = default;
            bool? globalDefaultCaseSensitive = default;
            bool? globalDefaultAccentSensitive = default;
            int? globalDefaultFuzzyEditDistance = default;
            string odataType = default;
            string name = default;
            string description = default;
            string context = default;
            IList<InputFieldMappingEntry> inputs = default;
            IList<OutputFieldMappingEntry> outputs = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("defaultLanguageCode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    defaultLanguageCode = new CustomEntityLookupSkillLanguage(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("entitiesDefinitionUri"u8))
                {
                    entitiesDefinitionUri = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("inlineEntitiesDefinition"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<CustomEntity> array = new List<CustomEntity>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CustomEntity.DeserializeCustomEntity(item, options));
                    }
                    inlineEntitiesDefinition = array;
                    continue;
                }
                if (property.NameEquals("globalDefaultCaseSensitive"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    globalDefaultCaseSensitive = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("globalDefaultAccentSensitive"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    globalDefaultAccentSensitive = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("globalDefaultFuzzyEditDistance"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    globalDefaultFuzzyEditDistance = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("@odata.type"u8))
                {
                    odataType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("context"u8))
                {
                    context = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("inputs"u8))
                {
                    List<InputFieldMappingEntry> array = new List<InputFieldMappingEntry>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(InputFieldMappingEntry.DeserializeInputFieldMappingEntry(item, options));
                    }
                    inputs = array;
                    continue;
                }
                if (property.NameEquals("outputs"u8))
                {
                    List<OutputFieldMappingEntry> array = new List<OutputFieldMappingEntry>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(OutputFieldMappingEntry.DeserializeOutputFieldMappingEntry(item, options));
                    }
                    outputs = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new CustomEntityLookupSkill(
                odataType,
                name,
                description,
                context,
                inputs,
                outputs,
                serializedAdditionalRawData,
                defaultLanguageCode,
                entitiesDefinitionUri,
                inlineEntitiesDefinition ?? new ChangeTrackingList<CustomEntity>(),
                globalDefaultCaseSensitive,
                globalDefaultAccentSensitive,
                globalDefaultFuzzyEditDistance);
        }

        BinaryData IPersistableModel<CustomEntityLookupSkill>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CustomEntityLookupSkill>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(CustomEntityLookupSkill)} does not support writing '{options.Format}' format.");
            }
        }

        CustomEntityLookupSkill IPersistableModel<CustomEntityLookupSkill>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CustomEntityLookupSkill>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeCustomEntityLookupSkill(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(CustomEntityLookupSkill)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<CustomEntityLookupSkill>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static new CustomEntityLookupSkill FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeCustomEntityLookupSkill(document.RootElement);
        }

        /// <summary> Convert into a <see cref="RequestContent"/>. </summary>
        internal override RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this, ModelSerializationExtensions.WireOptions);
            return content;
        }
    }
}
