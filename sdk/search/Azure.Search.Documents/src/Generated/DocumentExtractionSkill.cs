// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Search.Documents
{
    /// <summary> A skill that extracts content from a file within the enrichment pipeline. </summary>
    public partial class DocumentExtractionSkill : SearchIndexerSkill
    {
        /// <summary> Initializes a new instance of <see cref="DocumentExtractionSkill"/>. </summary>
        /// <param name="inputs">
        /// Inputs of the skills could be a column in the source data set, or the output of
        /// an upstream skill.
        /// </param>
        /// <param name="outputs">
        /// The output of a skill is either a field in a search index, or a value that can
        /// be consumed as an input by another skill.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="inputs"/> or <paramref name="outputs"/> is null. </exception>
        public DocumentExtractionSkill(IEnumerable<InputFieldMappingEntry> inputs, IEnumerable<OutputFieldMappingEntry> outputs) : base(inputs, outputs)
        {
            Argument.AssertNotNull(inputs, nameof(inputs));
            Argument.AssertNotNull(outputs, nameof(outputs));

            OdataType = "#Microsoft.Skills.Util.DocumentExtractionSkill";
            Configuration = new ChangeTrackingDictionary<string, BinaryData>();
        }

        /// <summary> Initializes a new instance of <see cref="DocumentExtractionSkill"/>. </summary>
        /// <param name="odataType"> The discriminator for derived types. </param>
        /// <param name="name">
        /// The name of the skill which uniquely identifies it within the skillset. A skill
        /// with no name defined will be given a default name of its 1-based index in the
        /// skills array, prefixed with the character '#'.
        /// </param>
        /// <param name="description">
        /// The description of the skill which describes the inputs, outputs, and usage of
        /// the skill.
        /// </param>
        /// <param name="context">
        /// Represents the level at which operations take place, such as the document root
        /// or document content (for example, /document or /document/content). The default
        /// is /document.
        /// </param>
        /// <param name="inputs">
        /// Inputs of the skills could be a column in the source data set, or the output of
        /// an upstream skill.
        /// </param>
        /// <param name="outputs">
        /// The output of a skill is either a field in a search index, or a value that can
        /// be consumed as an input by another skill.
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="parsingMode"> The parsingMode for the skill. Will be set to 'default' if not defined. </param>
        /// <param name="dataToExtract"> The type of data to be extracted for the skill. Will be set to 'contentAndMetadata' if not defined. </param>
        /// <param name="configuration"> A dictionary of configurations for the skill. </param>
        internal DocumentExtractionSkill(string odataType, string name, string description, string context, IList<InputFieldMappingEntry> inputs, IList<OutputFieldMappingEntry> outputs, IDictionary<string, BinaryData> serializedAdditionalRawData, string parsingMode, string dataToExtract, IDictionary<string, BinaryData> configuration) : base(odataType, name, description, context, inputs, outputs, serializedAdditionalRawData)
        {
            ParsingMode = parsingMode;
            DataToExtract = dataToExtract;
            Configuration = configuration;
        }

        /// <summary> Initializes a new instance of <see cref="DocumentExtractionSkill"/> for deserialization. </summary>
        internal DocumentExtractionSkill()
        {
        }

        /// <summary> The parsingMode for the skill. Will be set to 'default' if not defined. </summary>
        public string ParsingMode { get; set; }
        /// <summary> The type of data to be extracted for the skill. Will be set to 'contentAndMetadata' if not defined. </summary>
        public string DataToExtract { get; set; }
        /// <summary>
        /// A dictionary of configurations for the skill.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IDictionary<string, BinaryData> Configuration { get; }
    }
}
