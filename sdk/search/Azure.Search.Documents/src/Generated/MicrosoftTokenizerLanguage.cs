// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Search.Documents
{
    /// <summary> Lists the languages supported by the Microsoft language tokenizer. </summary>
    public readonly partial struct MicrosoftTokenizerLanguage : IEquatable<MicrosoftTokenizerLanguage>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="MicrosoftTokenizerLanguage"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public MicrosoftTokenizerLanguage(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string BanglaValue = "bangla";
        private const string BulgarianValue = "bulgarian";
        private const string CatalanValue = "catalan";
        private const string ChineseSimplifiedValue = "chineseSimplified";
        private const string ChineseTraditionalValue = "chineseTraditional";
        private const string CroatianValue = "croatian";
        private const string CzechValue = "czech";
        private const string DanishValue = "danish";
        private const string DutchValue = "dutch";
        private const string EnglishValue = "english";
        private const string FrenchValue = "french";
        private const string GermanValue = "german";
        private const string GreekValue = "greek";
        private const string GujaratiValue = "gujarati";
        private const string HindiValue = "hindi";
        private const string IcelandicValue = "icelandic";
        private const string IndonesianValue = "indonesian";
        private const string ItalianValue = "italian";
        private const string JapaneseValue = "japanese";
        private const string KannadaValue = "kannada";
        private const string KoreanValue = "korean";
        private const string MalayValue = "malay";
        private const string MalayalamValue = "malayalam";
        private const string MarathiValue = "marathi";
        private const string NorwegianBokmaalValue = "norwegianBokmaal";
        private const string PolishValue = "polish";
        private const string PortugueseValue = "portuguese";
        private const string PortugueseBrazilianValue = "portugueseBrazilian";
        private const string PunjabiValue = "punjabi";
        private const string RomanianValue = "romanian";
        private const string RussianValue = "russian";
        private const string SerbianCyrillicValue = "serbianCyrillic";
        private const string SerbianLatinValue = "serbianLatin";
        private const string SlovenianValue = "slovenian";
        private const string SpanishValue = "spanish";
        private const string SwedishValue = "swedish";
        private const string TamilValue = "tamil";
        private const string TeluguValue = "telugu";
        private const string ThaiValue = "thai";
        private const string UkrainianValue = "ukrainian";
        private const string UrduValue = "urdu";
        private const string VietnameseValue = "vietnamese";

        /// <summary> Selects the Microsoft tokenizer for Bangla. </summary>
        public static MicrosoftTokenizerLanguage Bangla { get; } = new MicrosoftTokenizerLanguage(BanglaValue);
        /// <summary> Selects the Microsoft tokenizer for Bulgarian. </summary>
        public static MicrosoftTokenizerLanguage Bulgarian { get; } = new MicrosoftTokenizerLanguage(BulgarianValue);
        /// <summary> Selects the Microsoft tokenizer for Catalan. </summary>
        public static MicrosoftTokenizerLanguage Catalan { get; } = new MicrosoftTokenizerLanguage(CatalanValue);
        /// <summary> Selects the Microsoft tokenizer for Chinese (Simplified). </summary>
        public static MicrosoftTokenizerLanguage ChineseSimplified { get; } = new MicrosoftTokenizerLanguage(ChineseSimplifiedValue);
        /// <summary> Selects the Microsoft tokenizer for Chinese (Traditional). </summary>
        public static MicrosoftTokenizerLanguage ChineseTraditional { get; } = new MicrosoftTokenizerLanguage(ChineseTraditionalValue);
        /// <summary> Selects the Microsoft tokenizer for Croatian. </summary>
        public static MicrosoftTokenizerLanguage Croatian { get; } = new MicrosoftTokenizerLanguage(CroatianValue);
        /// <summary> Selects the Microsoft tokenizer for Czech. </summary>
        public static MicrosoftTokenizerLanguage Czech { get; } = new MicrosoftTokenizerLanguage(CzechValue);
        /// <summary> Selects the Microsoft tokenizer for Danish. </summary>
        public static MicrosoftTokenizerLanguage Danish { get; } = new MicrosoftTokenizerLanguage(DanishValue);
        /// <summary> Selects the Microsoft tokenizer for Dutch. </summary>
        public static MicrosoftTokenizerLanguage Dutch { get; } = new MicrosoftTokenizerLanguage(DutchValue);
        /// <summary> Selects the Microsoft tokenizer for English. </summary>
        public static MicrosoftTokenizerLanguage English { get; } = new MicrosoftTokenizerLanguage(EnglishValue);
        /// <summary> Selects the Microsoft tokenizer for French. </summary>
        public static MicrosoftTokenizerLanguage French { get; } = new MicrosoftTokenizerLanguage(FrenchValue);
        /// <summary> Selects the Microsoft tokenizer for German. </summary>
        public static MicrosoftTokenizerLanguage German { get; } = new MicrosoftTokenizerLanguage(GermanValue);
        /// <summary> Selects the Microsoft tokenizer for Greek. </summary>
        public static MicrosoftTokenizerLanguage Greek { get; } = new MicrosoftTokenizerLanguage(GreekValue);
        /// <summary> Selects the Microsoft tokenizer for Gujarati. </summary>
        public static MicrosoftTokenizerLanguage Gujarati { get; } = new MicrosoftTokenizerLanguage(GujaratiValue);
        /// <summary> Selects the Microsoft tokenizer for Hindi. </summary>
        public static MicrosoftTokenizerLanguage Hindi { get; } = new MicrosoftTokenizerLanguage(HindiValue);
        /// <summary> Selects the Microsoft tokenizer for Icelandic. </summary>
        public static MicrosoftTokenizerLanguage Icelandic { get; } = new MicrosoftTokenizerLanguage(IcelandicValue);
        /// <summary> Selects the Microsoft tokenizer for Indonesian. </summary>
        public static MicrosoftTokenizerLanguage Indonesian { get; } = new MicrosoftTokenizerLanguage(IndonesianValue);
        /// <summary> Selects the Microsoft tokenizer for Italian. </summary>
        public static MicrosoftTokenizerLanguage Italian { get; } = new MicrosoftTokenizerLanguage(ItalianValue);
        /// <summary> Selects the Microsoft tokenizer for Japanese. </summary>
        public static MicrosoftTokenizerLanguage Japanese { get; } = new MicrosoftTokenizerLanguage(JapaneseValue);
        /// <summary> Selects the Microsoft tokenizer for Kannada. </summary>
        public static MicrosoftTokenizerLanguage Kannada { get; } = new MicrosoftTokenizerLanguage(KannadaValue);
        /// <summary> Selects the Microsoft tokenizer for Korean. </summary>
        public static MicrosoftTokenizerLanguage Korean { get; } = new MicrosoftTokenizerLanguage(KoreanValue);
        /// <summary> Selects the Microsoft tokenizer for Malay. </summary>
        public static MicrosoftTokenizerLanguage Malay { get; } = new MicrosoftTokenizerLanguage(MalayValue);
        /// <summary> Selects the Microsoft tokenizer for Malayalam. </summary>
        public static MicrosoftTokenizerLanguage Malayalam { get; } = new MicrosoftTokenizerLanguage(MalayalamValue);
        /// <summary> Selects the Microsoft tokenizer for Marathi. </summary>
        public static MicrosoftTokenizerLanguage Marathi { get; } = new MicrosoftTokenizerLanguage(MarathiValue);
        /// <summary> Selects the Microsoft tokenizer for Norwegian (Bokm√•l). </summary>
        public static MicrosoftTokenizerLanguage NorwegianBokmaal { get; } = new MicrosoftTokenizerLanguage(NorwegianBokmaalValue);
        /// <summary> Selects the Microsoft tokenizer for Polish. </summary>
        public static MicrosoftTokenizerLanguage Polish { get; } = new MicrosoftTokenizerLanguage(PolishValue);
        /// <summary> Selects the Microsoft tokenizer for Portuguese. </summary>
        public static MicrosoftTokenizerLanguage Portuguese { get; } = new MicrosoftTokenizerLanguage(PortugueseValue);
        /// <summary> Selects the Microsoft tokenizer for Portuguese (Brazil). </summary>
        public static MicrosoftTokenizerLanguage PortugueseBrazilian { get; } = new MicrosoftTokenizerLanguage(PortugueseBrazilianValue);
        /// <summary> Selects the Microsoft tokenizer for Punjabi. </summary>
        public static MicrosoftTokenizerLanguage Punjabi { get; } = new MicrosoftTokenizerLanguage(PunjabiValue);
        /// <summary> Selects the Microsoft tokenizer for Romanian. </summary>
        public static MicrosoftTokenizerLanguage Romanian { get; } = new MicrosoftTokenizerLanguage(RomanianValue);
        /// <summary> Selects the Microsoft tokenizer for Russian. </summary>
        public static MicrosoftTokenizerLanguage Russian { get; } = new MicrosoftTokenizerLanguage(RussianValue);
        /// <summary> Selects the Microsoft tokenizer for Serbian (Cyrillic). </summary>
        public static MicrosoftTokenizerLanguage SerbianCyrillic { get; } = new MicrosoftTokenizerLanguage(SerbianCyrillicValue);
        /// <summary> Selects the Microsoft tokenizer for Serbian (Latin). </summary>
        public static MicrosoftTokenizerLanguage SerbianLatin { get; } = new MicrosoftTokenizerLanguage(SerbianLatinValue);
        /// <summary> Selects the Microsoft tokenizer for Slovenian. </summary>
        public static MicrosoftTokenizerLanguage Slovenian { get; } = new MicrosoftTokenizerLanguage(SlovenianValue);
        /// <summary> Selects the Microsoft tokenizer for Spanish. </summary>
        public static MicrosoftTokenizerLanguage Spanish { get; } = new MicrosoftTokenizerLanguage(SpanishValue);
        /// <summary> Selects the Microsoft tokenizer for Swedish. </summary>
        public static MicrosoftTokenizerLanguage Swedish { get; } = new MicrosoftTokenizerLanguage(SwedishValue);
        /// <summary> Selects the Microsoft tokenizer for Tamil. </summary>
        public static MicrosoftTokenizerLanguage Tamil { get; } = new MicrosoftTokenizerLanguage(TamilValue);
        /// <summary> Selects the Microsoft tokenizer for Telugu. </summary>
        public static MicrosoftTokenizerLanguage Telugu { get; } = new MicrosoftTokenizerLanguage(TeluguValue);
        /// <summary> Selects the Microsoft tokenizer for Thai. </summary>
        public static MicrosoftTokenizerLanguage Thai { get; } = new MicrosoftTokenizerLanguage(ThaiValue);
        /// <summary> Selects the Microsoft tokenizer for Ukrainian. </summary>
        public static MicrosoftTokenizerLanguage Ukrainian { get; } = new MicrosoftTokenizerLanguage(UkrainianValue);
        /// <summary> Selects the Microsoft tokenizer for Urdu. </summary>
        public static MicrosoftTokenizerLanguage Urdu { get; } = new MicrosoftTokenizerLanguage(UrduValue);
        /// <summary> Selects the Microsoft tokenizer for Vietnamese. </summary>
        public static MicrosoftTokenizerLanguage Vietnamese { get; } = new MicrosoftTokenizerLanguage(VietnameseValue);
        /// <summary> Determines if two <see cref="MicrosoftTokenizerLanguage"/> values are the same. </summary>
        public static bool operator ==(MicrosoftTokenizerLanguage left, MicrosoftTokenizerLanguage right) => left.Equals(right);
        /// <summary> Determines if two <see cref="MicrosoftTokenizerLanguage"/> values are not the same. </summary>
        public static bool operator !=(MicrosoftTokenizerLanguage left, MicrosoftTokenizerLanguage right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="MicrosoftTokenizerLanguage"/>. </summary>
        public static implicit operator MicrosoftTokenizerLanguage(string value) => new MicrosoftTokenizerLanguage(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is MicrosoftTokenizerLanguage other && Equals(other);
        /// <inheritdoc />
        public bool Equals(MicrosoftTokenizerLanguage other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
