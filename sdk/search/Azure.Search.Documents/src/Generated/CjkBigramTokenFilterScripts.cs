// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Search.Documents
{
    /// <summary> Scripts that can be ignored by CjkBigramTokenFilter. </summary>
    public readonly partial struct CjkBigramTokenFilterScripts : IEquatable<CjkBigramTokenFilterScripts>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="CjkBigramTokenFilterScripts"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public CjkBigramTokenFilterScripts(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string HanValue = "han";
        private const string HiraganaValue = "hiragana";
        private const string KatakanaValue = "katakana";
        private const string HangulValue = "hangul";

        /// <summary> Ignore Han script when forming bigrams of CJK terms. </summary>
        public static CjkBigramTokenFilterScripts Han { get; } = new CjkBigramTokenFilterScripts(HanValue);
        /// <summary> Ignore Hiragana script when forming bigrams of CJK terms. </summary>
        public static CjkBigramTokenFilterScripts Hiragana { get; } = new CjkBigramTokenFilterScripts(HiraganaValue);
        /// <summary> Ignore Katakana script when forming bigrams of CJK terms. </summary>
        public static CjkBigramTokenFilterScripts Katakana { get; } = new CjkBigramTokenFilterScripts(KatakanaValue);
        /// <summary> Ignore Hangul script when forming bigrams of CJK terms. </summary>
        public static CjkBigramTokenFilterScripts Hangul { get; } = new CjkBigramTokenFilterScripts(HangulValue);
        /// <summary> Determines if two <see cref="CjkBigramTokenFilterScripts"/> values are the same. </summary>
        public static bool operator ==(CjkBigramTokenFilterScripts left, CjkBigramTokenFilterScripts right) => left.Equals(right);
        /// <summary> Determines if two <see cref="CjkBigramTokenFilterScripts"/> values are not the same. </summary>
        public static bool operator !=(CjkBigramTokenFilterScripts left, CjkBigramTokenFilterScripts right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="CjkBigramTokenFilterScripts"/>. </summary>
        public static implicit operator CjkBigramTokenFilterScripts(string value) => new CjkBigramTokenFilterScripts(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is CjkBigramTokenFilterScripts other && Equals(other);
        /// <inheritdoc />
        public bool Equals(CjkBigramTokenFilterScripts other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
