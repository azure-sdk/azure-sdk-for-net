// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Search.Documents
{
    // Data plane generated client.
    /// <summary>
    /// Client that can be used to manage and query indexes and documents, as well as
    /// manage other resources, on a search service.
    /// </summary>
    public partial class SearchClient
    {
        private const string AuthorizationHeader = "api-key";
        private readonly AzureKeyCredential _keyCredential;
        private static readonly string[] AuthorizationScopes = new string[] { "https://search.azure.com/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> Initializes a new instance of SearchClient. </summary>
        /// <param name="endpoint"> Service host. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public SearchClient(Uri endpoint, AzureKeyCredential credential) : this(endpoint, credential, new SearchClientOptions())
        {
        }

        /// <summary> Initializes a new instance of SearchClient. </summary>
        /// <param name="endpoint"> Service host. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public SearchClient(Uri endpoint, TokenCredential credential) : this(endpoint, credential, new SearchClientOptions())
        {
        }

        /// <summary> Initializes a new instance of SearchClient. </summary>
        /// <param name="endpoint"> Service host. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public SearchClient(Uri endpoint, AzureKeyCredential credential, SearchClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(credential, nameof(credential));
            options ??= new SearchClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _keyCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new AzureKeyCredentialPolicy(_keyCredential, AuthorizationHeader) }, new ResponseClassifier());
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Initializes a new instance of SearchClient. </summary>
        /// <param name="endpoint"> Service host. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public SearchClient(Uri endpoint, TokenCredential credential, SearchClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(credential, nameof(credential));
            options ??= new SearchClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) }, new ResponseClassifier());
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Gets service level statistics for a search service. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/SearchClient.xml" path="doc/members/member[@name='GetServiceStatisticsAsync(CancellationToken)']/*" />
        public virtual async Task<Response<SearchServiceStatistics>> GetServiceStatisticsAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetServiceStatisticsAsync(context).ConfigureAwait(false);
            return Response.FromValue(SearchServiceStatistics.FromResponse(response), response);
        }

        /// <summary> Gets service level statistics for a search service. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/SearchClient.xml" path="doc/members/member[@name='GetServiceStatistics(CancellationToken)']/*" />
        public virtual Response<SearchServiceStatistics> GetServiceStatistics(CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetServiceStatistics(context);
            return Response.FromValue(SearchServiceStatistics.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Gets service level statistics for a search service.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetServiceStatisticsAsync(CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SearchClient.xml" path="doc/members/member[@name='GetServiceStatisticsAsync(RequestContext)']/*" />
        public virtual async Task<Response> GetServiceStatisticsAsync(RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("SearchClient.GetServiceStatistics");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetServiceStatisticsRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets service level statistics for a search service.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetServiceStatistics(CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SearchClient.xml" path="doc/members/member[@name='GetServiceStatistics(RequestContext)']/*" />
        public virtual Response GetServiceStatistics(RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("SearchClient.GetServiceStatistics");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetServiceStatisticsRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Retrieves a summary of statistics for all indexes in the search service. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/SearchClient.xml" path="doc/members/member[@name='GetIndexStatsSummaryAsync(CancellationToken)']/*" />
        public virtual AsyncPageable<IndexStatisticsSummary> GetIndexStatsSummaryAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetIndexStatsSummaryRequest(context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, null, e => IndexStatisticsSummary.DeserializeIndexStatisticsSummary(e), ClientDiagnostics, _pipeline, "SearchClient.GetIndexStatsSummary", "value", null, context);
        }

        /// <summary> Retrieves a summary of statistics for all indexes in the search service. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/SearchClient.xml" path="doc/members/member[@name='GetIndexStatsSummary(CancellationToken)']/*" />
        public virtual Pageable<IndexStatisticsSummary> GetIndexStatsSummary(CancellationToken cancellationToken = default)
        {
            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetIndexStatsSummaryRequest(context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, null, e => IndexStatisticsSummary.DeserializeIndexStatisticsSummary(e), ClientDiagnostics, _pipeline, "SearchClient.GetIndexStatsSummary", "value", null, context);
        }

        /// <summary>
        /// [Protocol Method] Retrieves a summary of statistics for all indexes in the search service.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetIndexStatsSummaryAsync(CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/SearchClient.xml" path="doc/members/member[@name='GetIndexStatsSummaryAsync(RequestContext)']/*" />
        public virtual AsyncPageable<BinaryData> GetIndexStatsSummaryAsync(RequestContext context)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetIndexStatsSummaryRequest(context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, null, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "SearchClient.GetIndexStatsSummary", "value", null, context);
        }

        /// <summary>
        /// [Protocol Method] Retrieves a summary of statistics for all indexes in the search service.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetIndexStatsSummary(CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/SearchClient.xml" path="doc/members/member[@name='GetIndexStatsSummary(RequestContext)']/*" />
        public virtual Pageable<BinaryData> GetIndexStatsSummary(RequestContext context)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetIndexStatsSummaryRequest(context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, null, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "SearchClient.GetIndexStatsSummary", "value", null, context);
        }

        private DataSources _cachedDataSources;
        private Indexers _cachedIndexers;
        private Skillsets _cachedSkillsets;
        private SynonymMaps _cachedSynonymMaps;
        private Search.Documents.Indexes _cachedIndexes;
        private Aliases _cachedAliases;
        private Documents _cachedDocuments;

        /// <summary> Initializes a new instance of DataSources. </summary>
        public virtual DataSources GetDataSourcesClient()
        {
            return Volatile.Read(ref _cachedDataSources) ?? Interlocked.CompareExchange(ref _cachedDataSources, new DataSources(ClientDiagnostics, _pipeline, _keyCredential, _tokenCredential, _endpoint, _apiVersion), null) ?? _cachedDataSources;
        }

        /// <summary> Initializes a new instance of Indexers. </summary>
        public virtual Indexers GetIndexersClient()
        {
            return Volatile.Read(ref _cachedIndexers) ?? Interlocked.CompareExchange(ref _cachedIndexers, new Indexers(ClientDiagnostics, _pipeline, _keyCredential, _tokenCredential, _endpoint, _apiVersion), null) ?? _cachedIndexers;
        }

        /// <summary> Initializes a new instance of Skillsets. </summary>
        public virtual Skillsets GetSkillsetsClient()
        {
            return Volatile.Read(ref _cachedSkillsets) ?? Interlocked.CompareExchange(ref _cachedSkillsets, new Skillsets(ClientDiagnostics, _pipeline, _keyCredential, _tokenCredential, _endpoint, _apiVersion), null) ?? _cachedSkillsets;
        }

        /// <summary> Initializes a new instance of SynonymMaps. </summary>
        public virtual SynonymMaps GetSynonymMapsClient()
        {
            return Volatile.Read(ref _cachedSynonymMaps) ?? Interlocked.CompareExchange(ref _cachedSynonymMaps, new SynonymMaps(ClientDiagnostics, _pipeline, _keyCredential, _tokenCredential, _endpoint, _apiVersion), null) ?? _cachedSynonymMaps;
        }

        /// <summary> Initializes a new instance of Indexes. </summary>
        public virtual Search.Documents.Indexes GetIndexesClient()
        {
            return Volatile.Read(ref _cachedIndexes) ?? Interlocked.CompareExchange(ref _cachedIndexes, new Search.Documents.Indexes(ClientDiagnostics, _pipeline, _keyCredential, _tokenCredential, _endpoint, _apiVersion), null) ?? _cachedIndexes;
        }

        /// <summary> Initializes a new instance of Aliases. </summary>
        public virtual Aliases GetAliasesClient()
        {
            return Volatile.Read(ref _cachedAliases) ?? Interlocked.CompareExchange(ref _cachedAliases, new Aliases(ClientDiagnostics, _pipeline, _keyCredential, _tokenCredential, _endpoint, _apiVersion), null) ?? _cachedAliases;
        }

        /// <summary> Initializes a new instance of Documents. </summary>
        public virtual Documents GetDocumentsClient()
        {
            return Volatile.Read(ref _cachedDocuments) ?? Interlocked.CompareExchange(ref _cachedDocuments, new Documents(ClientDiagnostics, _pipeline, _keyCredential, _tokenCredential, _endpoint, _apiVersion), null) ?? _cachedDocuments;
        }

        internal HttpMessage CreateGetServiceStatisticsRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/servicestats", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetIndexStatsSummaryRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/indexstats", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
    }
}
