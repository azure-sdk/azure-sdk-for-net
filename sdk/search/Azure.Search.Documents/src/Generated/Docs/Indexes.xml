<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="CreateAsync(SearchIndex,CancellationToken)">
      <example>
This sample shows how to call CreateAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Search.Documents.Indexes client = new SearchClient(endpoint, credential).GetIndexesClient();

SearchIndex index = new SearchIndex("temp-preview-test", new SearchField[]
{
    new SearchField("id", SearchFieldDataType.String)
    {
        Key = true,
        Sortable = true,
    },
    new SearchField("vector1", default)
    {
        Retrievable = true,
        Searchable = true,
        VectorSearchDimensions = 20,
        VectorSearchProfileName = "config1",
    },
    new SearchField("vector1b", default)
    {
        Retrievable = true,
        Searchable = true,
        VectorSearchDimensions = 10,
        VectorSearchProfileName = "config2",
    },
    new SearchField("vector2", default)
    {
        Retrievable = true,
        Searchable = true,
        VectorSearchDimensions = 5,
        VectorSearchProfileName = "config3",
    },
    new SearchField("vector3", default)
    {
        Retrievable = true,
        Searchable = true,
        VectorSearchDimensions = 5,
        VectorSearchProfileName = "config3",
    },
    new SearchField("vector22", default)
    {
        Retrievable = true,
        Searchable = true,
        VectorSearchDimensions = 10,
        VectorSearchProfileName = "config2",
    },
    new SearchField("name", SearchFieldDataType.String)
    {
        Retrievable = true,
        Searchable = true,
        Filterable = true,
        Sortable = true,
        Facetable = true,
        Analyzer = LexicalAnalyzerName.EnLucene,
    },
    new SearchField("description", SearchFieldDataType.String)
    {
        Retrievable = true,
        Searchable = true,
        Filterable = true,
        Sortable = true,
        Facetable = true,
        Analyzer = LexicalAnalyzerName.StandardLucene,
    },
    new SearchField("category", SearchFieldDataType.String)
    {
        Retrievable = true,
        Searchable = true,
        Filterable = true,
        Sortable = true,
        Facetable = true,
        Analyzer = LexicalAnalyzerName.EnLucene,
    },
    new SearchField("ownerId", SearchFieldDataType.String)
    {
        Retrievable = true,
        Searchable = true,
        Filterable = true,
        Sortable = true,
        Facetable = true,
        Analyzer = LexicalAnalyzerName.EnLucene,
    }
})
{
    ScoringProfiles = {new ScoringProfile("stringFieldBoost")
    {
        TextWeights = new TextWeights(new Dictionary<string, double>
        {
            ["name"] = 3,
            ["description"] = 1,
            ["category"] = 2,
            ["ownerId"] = 1
        }),
        Functions = {new TagScoringFunction("category", 2, new TagScoringParameters("categoryTag"))},
    }},
    Suggesters = { new SearchSuggester("sg", new string[] { "category", "ownerId" }) },
    Analyzers = { },
    Tokenizers = { },
    TokenFilters = { },
    CharFilters = { },
    Normalizers = { },
    SemanticSearch = new SemanticSearch(),
    VectorSearch = new VectorSearch
    {
        Profiles = {new VectorSearchProfile("config1", "cosine")
        {
            VectorizerName = "openai",
            CompressionName = "mySQ8",
        }, new VectorSearchProfile("config2", "euclidean")
        {
            VectorizerName = "custom-web-api",
            CompressionName = "mySQ8",
        }, new VectorSearchProfile("config3", "dotProduct")
        {
            VectorizerName = "custom-web-api",
            CompressionName = "myBQC",
        }},
        Algorithms = {new HnswAlgorithmConfiguration("cosine")
        {
            Parameters = new HnswParameters
            {
                Metric = VectorSearchAlgorithmMetric.Cosine,
            },
        }, new HnswAlgorithmConfiguration("euclidean")
        {
            Parameters = new HnswParameters
            {
                Metric = VectorSearchAlgorithmMetric.Euclidean,
            },
        }, new HnswAlgorithmConfiguration("dotProduct")
        {
            Parameters = new HnswParameters
            {
                Metric = VectorSearchAlgorithmMetric.DotProduct,
            },
        }},
        Vectorizers = {new AzureOpenAIVectorizer("openai")
        {
            Parameters = new AzureOpenAIVectorizerParameters
            {
                ResourceUrl = new Uri("https://test-sample.openai.azure.com/"),
                DeploymentName = "model",
                ApiKey = "api-key",
                ModelName = AzureOpenAIModelName.TextEmbedding3Large,
            },
        }, new WebApiVectorizer("custom-web-api")
        {
            WebApiParameters = new WebApiVectorizerParameters
            {
                Url = new Uri("https://my-custom-endpoint.org/"),
                HttpHeaders =
                {
                    ["header1"] = "value1",
                    ["header2"] = "value2"
                },
                HttpMethod = "POST",
                Timeout = XmlConvert.ToTimeSpan("PT1M"),
                AuthResourceId = "api://f89d1c93-58a7-4b07-9a5b-5f89048b927b",
            },
        }, new AzureMachineLearningVectorizer("aml")
        {
            AMLParameters = new AzureMachineLearningParameters(new Uri("https://my-custom-endpoint.org/"))
            {
                ResourceId = "aml resource id",
                Timeout = XmlConvert.ToTimeSpan("PT1M"),
                Region = "aml region",
                ModelName = AIStudioModelCatalogName.OpenAICLIPImageTextEmbeddingsVitBasePatch32,
            },
        }},
        Compressions = {new ScalarQuantizationCompression("mySQ8")
        {
            Parameters = new ScalarQuantizationParameters
            {
                QuantizedDataType = VectorSearchCompressionTarget.Int8,
            },
            RescoringOptions = new RescoringOptions
            {
                EnableRescoring = true,
                DefaultOversampling = 10,
                RescoreStorageMethod = VectorSearchCompressionRescoreStorageMethod.PreserveOriginals,
            },
            TruncationDimension = 2,
        }, new BinaryQuantizationCompression("myBQC")
        {
            RescoringOptions = new RescoringOptions
            {
                EnableRescoring = true,
                DefaultOversampling = 10,
                RescoreStorageMethod = VectorSearchCompressionRescoreStorageMethod.PreserveOriginals,
            },
            TruncationDimension = 2,
        }},
    },
};
Response<SearchIndex> response = await client.CreateAsync(index);
]]></code></example>
    </member>
    <member name="Create(SearchIndex,CancellationToken)">
      <example>
This sample shows how to call Create.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Search.Documents.Indexes client = new SearchClient(endpoint, credential).GetIndexesClient();

SearchIndex index = new SearchIndex("temp-preview-test", new SearchField[]
{
    new SearchField("id", SearchFieldDataType.String)
    {
        Key = true,
        Sortable = true,
    },
    new SearchField("vector1", default)
    {
        Retrievable = true,
        Searchable = true,
        VectorSearchDimensions = 20,
        VectorSearchProfileName = "config1",
    },
    new SearchField("vector1b", default)
    {
        Retrievable = true,
        Searchable = true,
        VectorSearchDimensions = 10,
        VectorSearchProfileName = "config2",
    },
    new SearchField("vector2", default)
    {
        Retrievable = true,
        Searchable = true,
        VectorSearchDimensions = 5,
        VectorSearchProfileName = "config3",
    },
    new SearchField("vector3", default)
    {
        Retrievable = true,
        Searchable = true,
        VectorSearchDimensions = 5,
        VectorSearchProfileName = "config3",
    },
    new SearchField("vector22", default)
    {
        Retrievable = true,
        Searchable = true,
        VectorSearchDimensions = 10,
        VectorSearchProfileName = "config2",
    },
    new SearchField("name", SearchFieldDataType.String)
    {
        Retrievable = true,
        Searchable = true,
        Filterable = true,
        Sortable = true,
        Facetable = true,
        Analyzer = LexicalAnalyzerName.EnLucene,
    },
    new SearchField("description", SearchFieldDataType.String)
    {
        Retrievable = true,
        Searchable = true,
        Filterable = true,
        Sortable = true,
        Facetable = true,
        Analyzer = LexicalAnalyzerName.StandardLucene,
    },
    new SearchField("category", SearchFieldDataType.String)
    {
        Retrievable = true,
        Searchable = true,
        Filterable = true,
        Sortable = true,
        Facetable = true,
        Analyzer = LexicalAnalyzerName.EnLucene,
    },
    new SearchField("ownerId", SearchFieldDataType.String)
    {
        Retrievable = true,
        Searchable = true,
        Filterable = true,
        Sortable = true,
        Facetable = true,
        Analyzer = LexicalAnalyzerName.EnLucene,
    }
})
{
    ScoringProfiles = {new ScoringProfile("stringFieldBoost")
    {
        TextWeights = new TextWeights(new Dictionary<string, double>
        {
            ["name"] = 3,
            ["description"] = 1,
            ["category"] = 2,
            ["ownerId"] = 1
        }),
        Functions = {new TagScoringFunction("category", 2, new TagScoringParameters("categoryTag"))},
    }},
    Suggesters = { new SearchSuggester("sg", new string[] { "category", "ownerId" }) },
    Analyzers = { },
    Tokenizers = { },
    TokenFilters = { },
    CharFilters = { },
    Normalizers = { },
    SemanticSearch = new SemanticSearch(),
    VectorSearch = new VectorSearch
    {
        Profiles = {new VectorSearchProfile("config1", "cosine")
        {
            VectorizerName = "openai",
            CompressionName = "mySQ8",
        }, new VectorSearchProfile("config2", "euclidean")
        {
            VectorizerName = "custom-web-api",
            CompressionName = "mySQ8",
        }, new VectorSearchProfile("config3", "dotProduct")
        {
            VectorizerName = "custom-web-api",
            CompressionName = "myBQC",
        }},
        Algorithms = {new HnswAlgorithmConfiguration("cosine")
        {
            Parameters = new HnswParameters
            {
                Metric = VectorSearchAlgorithmMetric.Cosine,
            },
        }, new HnswAlgorithmConfiguration("euclidean")
        {
            Parameters = new HnswParameters
            {
                Metric = VectorSearchAlgorithmMetric.Euclidean,
            },
        }, new HnswAlgorithmConfiguration("dotProduct")
        {
            Parameters = new HnswParameters
            {
                Metric = VectorSearchAlgorithmMetric.DotProduct,
            },
        }},
        Vectorizers = {new AzureOpenAIVectorizer("openai")
        {
            Parameters = new AzureOpenAIVectorizerParameters
            {
                ResourceUrl = new Uri("https://test-sample.openai.azure.com/"),
                DeploymentName = "model",
                ApiKey = "api-key",
                ModelName = AzureOpenAIModelName.TextEmbedding3Large,
            },
        }, new WebApiVectorizer("custom-web-api")
        {
            WebApiParameters = new WebApiVectorizerParameters
            {
                Url = new Uri("https://my-custom-endpoint.org/"),
                HttpHeaders =
                {
                    ["header1"] = "value1",
                    ["header2"] = "value2"
                },
                HttpMethod = "POST",
                Timeout = XmlConvert.ToTimeSpan("PT1M"),
                AuthResourceId = "api://f89d1c93-58a7-4b07-9a5b-5f89048b927b",
            },
        }, new AzureMachineLearningVectorizer("aml")
        {
            AMLParameters = new AzureMachineLearningParameters(new Uri("https://my-custom-endpoint.org/"))
            {
                ResourceId = "aml resource id",
                Timeout = XmlConvert.ToTimeSpan("PT1M"),
                Region = "aml region",
                ModelName = AIStudioModelCatalogName.OpenAICLIPImageTextEmbeddingsVitBasePatch32,
            },
        }},
        Compressions = {new ScalarQuantizationCompression("mySQ8")
        {
            Parameters = new ScalarQuantizationParameters
            {
                QuantizedDataType = VectorSearchCompressionTarget.Int8,
            },
            RescoringOptions = new RescoringOptions
            {
                EnableRescoring = true,
                DefaultOversampling = 10,
                RescoreStorageMethod = VectorSearchCompressionRescoreStorageMethod.PreserveOriginals,
            },
            TruncationDimension = 2,
        }, new BinaryQuantizationCompression("myBQC")
        {
            RescoringOptions = new RescoringOptions
            {
                EnableRescoring = true,
                DefaultOversampling = 10,
                RescoreStorageMethod = VectorSearchCompressionRescoreStorageMethod.PreserveOriginals,
            },
            TruncationDimension = 2,
        }},
    },
};
Response<SearchIndex> response = client.Create(index);
]]></code></example>
    </member>
    <member name="CreateAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Search.Documents.Indexes client = new SearchClient(endpoint, credential).GetIndexesClient();

using RequestContent content = RequestContent.Create(new
{
    name = "temp-preview-test",
    fields = new object[]
    {
        new
        {
            name = "id",
            type = "Edm.String",
            key = true,
            sortable = true,
        },
        new
        {
            name = "vector1",
            retrievable = true,
            searchable = true,
            dimensions = 20,
            vectorSearchProfile = "config1",
        },
        new
        {
            name = "vector1b",
            retrievable = true,
            searchable = true,
            dimensions = 10,
            vectorSearchProfile = "config2",
        },
        new
        {
            name = "vector2",
            retrievable = true,
            searchable = true,
            dimensions = 5,
            vectorSearchProfile = "config3",
        },
        new
        {
            name = "vector3",
            retrievable = true,
            searchable = true,
            dimensions = 5,
            vectorSearchProfile = "config3",
        },
        new
        {
            name = "vector22",
            retrievable = true,
            searchable = true,
            dimensions = 10,
            vectorSearchProfile = "config2",
        },
        new
        {
            name = "name",
            type = "Edm.String",
            retrievable = true,
            searchable = true,
            filterable = true,
            sortable = true,
            facetable = true,
            analyzer = "en.lucene",
        },
        new
        {
            name = "description",
            type = "Edm.String",
            retrievable = true,
            searchable = true,
            filterable = true,
            sortable = true,
            facetable = true,
            analyzer = "standard.lucene",
        },
        new
        {
            name = "category",
            type = "Edm.String",
            retrievable = true,
            searchable = true,
            filterable = true,
            sortable = true,
            facetable = true,
            analyzer = "en.lucene",
        },
        new
        {
            name = "ownerId",
            type = "Edm.String",
            retrievable = true,
            searchable = true,
            filterable = true,
            sortable = true,
            facetable = true,
            analyzer = "en.lucene",
        }
    },
    scoringProfiles = new object[]
    {
        new
        {
            name = "stringFieldBoost",
            text = new
            {
                weights = new
                {
                    name = 3,
                    description = 1,
                    category = 2,
                    ownerId = 1,
                },
            },
            functions = new object[]
            {
                new
                {
                    tag = new
                    {
                        tagsParameter = "categoryTag",
                    },
                    type = "tag",
                    fieldName = "category",
                    boost = 2,
                }
            },
        }
    },
    suggesters = new object[]
    {
        new
        {
            name = "sg",
            searchMode = "analyzingInfixMatching",
            sourceFields = new object[]
            {
                "category",
                "ownerId"
            },
        }
    },
    analyzers = Array.Empty<object>(),
    tokenizers = Array.Empty<object>(),
    tokenFilters = Array.Empty<object>(),
    charFilters = Array.Empty<object>(),
    normalizers = Array.Empty<object>(),
    semantic = new object(),
    vectorSearch = new
    {
        profiles = new object[]
        {
            new
            {
                name = "config1",
                algorithm = "cosine",
                vectorizer = "openai",
                compression = "mySQ8",
            },
            new
            {
                name = "config2",
                algorithm = "euclidean",
                vectorizer = "custom-web-api",
                compression = "mySQ8",
            },
            new
            {
                name = "config3",
                algorithm = "dotProduct",
                vectorizer = "custom-web-api",
                compression = "myBQC",
            }
        },
        algorithms = new object[]
        {
            new
            {
                hnswParameters = new
                {
                    metric = "cosine",
                },
                name = "cosine",
                kind = "hnsw",
            },
            new
            {
                hnswParameters = new
                {
                    metric = "euclidean",
                },
                name = "euclidean",
                kind = "hnsw",
            },
            new
            {
                hnswParameters = new
                {
                    metric = "dotProduct",
                },
                name = "dotProduct",
                kind = "hnsw",
            }
        },
        vectorizers = new object[]
        {
            new
            {
                azureOpenAIParameters = new
                {
                    resourceUri = "https://test-sample.openai.azure.com/",
                    deploymentId = "model",
                    apiKey = "api-key",
                    modelName = "text-embedding-3-large",
                },
                name = "openai",
                kind = "azureOpenAI",
            },
            new
            {
                customWebApiParameters = new
                {
                    uri = "https://my-custom-endpoint.org/",
                    httpHeaders = new
                    {
                        header1 = "value1",
                        header2 = "value2",
                    },
                    httpMethod = "POST",
                    timeout = "PT1M",
                    authResourceId = "api://f89d1c93-58a7-4b07-9a5b-5f89048b927b",
                },
                name = "custom-web-api",
                kind = "customWebApi",
            },
            new
            {
                amlParameters = new
                {
                    uri = "https://my-custom-endpoint.org/",
                    resourceId = "aml resource id",
                    timeout = "PT1M",
                    region = "aml region",
                    modelName = "OpenAI-CLIP-Image-Text-Embeddings-vit-base-patch32",
                },
                name = "aml",
                kind = "aml",
            }
        },
        compressions = new object[]
        {
            new
            {
                scalarQuantizationParameters = new
                {
                    quantizedDataType = "int8",
                },
                name = "mySQ8",
                kind = "scalarQuantization",
                rescoringOptions = new
                {
                    enableRescoring = true,
                    defaultOversampling = 10,
                    rescoreStorageMethod = "preserveOriginals",
                },
                truncationDimension = 2,
            },
            new
            {
                name = "myBQC",
                kind = "binaryQuantization",
                rescoringOptions = new
                {
                    enableRescoring = true,
                    defaultOversampling = 10,
                    rescoreStorageMethod = "preserveOriginals",
                },
                truncationDimension = 2,
            }
        },
    },
});
Response response = await client.CreateAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("fields")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("fields")[0].GetProperty("type").ToString());
]]></code></example>
    </member>
    <member name="Create(RequestContent,RequestContext)">
      <example>
This sample shows how to call Create and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Search.Documents.Indexes client = new SearchClient(endpoint, credential).GetIndexesClient();

using RequestContent content = RequestContent.Create(new
{
    name = "temp-preview-test",
    fields = new object[]
    {
        new
        {
            name = "id",
            type = "Edm.String",
            key = true,
            sortable = true,
        },
        new
        {
            name = "vector1",
            retrievable = true,
            searchable = true,
            dimensions = 20,
            vectorSearchProfile = "config1",
        },
        new
        {
            name = "vector1b",
            retrievable = true,
            searchable = true,
            dimensions = 10,
            vectorSearchProfile = "config2",
        },
        new
        {
            name = "vector2",
            retrievable = true,
            searchable = true,
            dimensions = 5,
            vectorSearchProfile = "config3",
        },
        new
        {
            name = "vector3",
            retrievable = true,
            searchable = true,
            dimensions = 5,
            vectorSearchProfile = "config3",
        },
        new
        {
            name = "vector22",
            retrievable = true,
            searchable = true,
            dimensions = 10,
            vectorSearchProfile = "config2",
        },
        new
        {
            name = "name",
            type = "Edm.String",
            retrievable = true,
            searchable = true,
            filterable = true,
            sortable = true,
            facetable = true,
            analyzer = "en.lucene",
        },
        new
        {
            name = "description",
            type = "Edm.String",
            retrievable = true,
            searchable = true,
            filterable = true,
            sortable = true,
            facetable = true,
            analyzer = "standard.lucene",
        },
        new
        {
            name = "category",
            type = "Edm.String",
            retrievable = true,
            searchable = true,
            filterable = true,
            sortable = true,
            facetable = true,
            analyzer = "en.lucene",
        },
        new
        {
            name = "ownerId",
            type = "Edm.String",
            retrievable = true,
            searchable = true,
            filterable = true,
            sortable = true,
            facetable = true,
            analyzer = "en.lucene",
        }
    },
    scoringProfiles = new object[]
    {
        new
        {
            name = "stringFieldBoost",
            text = new
            {
                weights = new
                {
                    name = 3,
                    description = 1,
                    category = 2,
                    ownerId = 1,
                },
            },
            functions = new object[]
            {
                new
                {
                    tag = new
                    {
                        tagsParameter = "categoryTag",
                    },
                    type = "tag",
                    fieldName = "category",
                    boost = 2,
                }
            },
        }
    },
    suggesters = new object[]
    {
        new
        {
            name = "sg",
            searchMode = "analyzingInfixMatching",
            sourceFields = new object[]
            {
                "category",
                "ownerId"
            },
        }
    },
    analyzers = Array.Empty<object>(),
    tokenizers = Array.Empty<object>(),
    tokenFilters = Array.Empty<object>(),
    charFilters = Array.Empty<object>(),
    normalizers = Array.Empty<object>(),
    semantic = new object(),
    vectorSearch = new
    {
        profiles = new object[]
        {
            new
            {
                name = "config1",
                algorithm = "cosine",
                vectorizer = "openai",
                compression = "mySQ8",
            },
            new
            {
                name = "config2",
                algorithm = "euclidean",
                vectorizer = "custom-web-api",
                compression = "mySQ8",
            },
            new
            {
                name = "config3",
                algorithm = "dotProduct",
                vectorizer = "custom-web-api",
                compression = "myBQC",
            }
        },
        algorithms = new object[]
        {
            new
            {
                hnswParameters = new
                {
                    metric = "cosine",
                },
                name = "cosine",
                kind = "hnsw",
            },
            new
            {
                hnswParameters = new
                {
                    metric = "euclidean",
                },
                name = "euclidean",
                kind = "hnsw",
            },
            new
            {
                hnswParameters = new
                {
                    metric = "dotProduct",
                },
                name = "dotProduct",
                kind = "hnsw",
            }
        },
        vectorizers = new object[]
        {
            new
            {
                azureOpenAIParameters = new
                {
                    resourceUri = "https://test-sample.openai.azure.com/",
                    deploymentId = "model",
                    apiKey = "api-key",
                    modelName = "text-embedding-3-large",
                },
                name = "openai",
                kind = "azureOpenAI",
            },
            new
            {
                customWebApiParameters = new
                {
                    uri = "https://my-custom-endpoint.org/",
                    httpHeaders = new
                    {
                        header1 = "value1",
                        header2 = "value2",
                    },
                    httpMethod = "POST",
                    timeout = "PT1M",
                    authResourceId = "api://f89d1c93-58a7-4b07-9a5b-5f89048b927b",
                },
                name = "custom-web-api",
                kind = "customWebApi",
            },
            new
            {
                amlParameters = new
                {
                    uri = "https://my-custom-endpoint.org/",
                    resourceId = "aml resource id",
                    timeout = "PT1M",
                    region = "aml region",
                    modelName = "OpenAI-CLIP-Image-Text-Embeddings-vit-base-patch32",
                },
                name = "aml",
                kind = "aml",
            }
        },
        compressions = new object[]
        {
            new
            {
                scalarQuantizationParameters = new
                {
                    quantizedDataType = "int8",
                },
                name = "mySQ8",
                kind = "scalarQuantization",
                rescoringOptions = new
                {
                    enableRescoring = true,
                    defaultOversampling = 10,
                    rescoreStorageMethod = "preserveOriginals",
                },
                truncationDimension = 2,
            },
            new
            {
                name = "myBQC",
                kind = "binaryQuantization",
                rescoringOptions = new
                {
                    enableRescoring = true,
                    defaultOversampling = 10,
                    rescoreStorageMethod = "preserveOriginals",
                },
                truncationDimension = 2,
            }
        },
    },
});
Response response = client.Create(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("fields")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("fields")[0].GetProperty("type").ToString());
]]></code></example>
    </member>
    <member name="CreateOrUpdateAsync(string,SearchIndex,bool?,MatchConditions,CancellationToken)">
      <example>
This sample shows how to call CreateOrUpdateAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Search.Documents.Indexes client = new SearchClient(endpoint, credential).GetIndexesClient();

SearchIndex index = new SearchIndex("temp-preview-test", new SearchField[]
{
    new SearchField("id", SearchFieldDataType.String)
    {
        Key = true,
        Sortable = true,
    },
    new SearchField("vector1", default)
    {
        Retrievable = true,
        Searchable = true,
        VectorSearchDimensions = 20,
        VectorSearchProfileName = "config1",
    },
    new SearchField("vector1b", default)
    {
        Retrievable = true,
        Searchable = true,
        VectorSearchDimensions = 10,
        VectorSearchProfileName = "config2",
    },
    new SearchField("vector2", default)
    {
        Retrievable = true,
        Searchable = true,
        VectorSearchDimensions = 5,
        VectorSearchProfileName = "config3",
    },
    new SearchField("vector3", default)
    {
        Retrievable = true,
        Searchable = true,
        VectorSearchDimensions = 5,
        VectorSearchProfileName = "config3",
    },
    new SearchField("vector22", default)
    {
        Retrievable = true,
        Searchable = true,
        VectorSearchDimensions = 10,
        VectorSearchProfileName = "config2",
    },
    new SearchField("name", SearchFieldDataType.String)
    {
        Retrievable = true,
        Searchable = true,
        Filterable = true,
        Sortable = true,
        Facetable = true,
        Analyzer = LexicalAnalyzerName.EnLucene,
    },
    new SearchField("description", SearchFieldDataType.String)
    {
        Retrievable = true,
        Searchable = true,
        Filterable = true,
        Sortable = true,
        Facetable = true,
        Analyzer = LexicalAnalyzerName.StandardLucene,
    },
    new SearchField("category", SearchFieldDataType.String)
    {
        Retrievable = true,
        Searchable = true,
        Filterable = true,
        Sortable = true,
        Facetable = true,
        Analyzer = LexicalAnalyzerName.EnLucene,
    },
    new SearchField("ownerId", SearchFieldDataType.String)
    {
        Retrievable = true,
        Searchable = true,
        Filterable = true,
        Sortable = true,
        Facetable = true,
        Analyzer = LexicalAnalyzerName.EnLucene,
    }
})
{
    ScoringProfiles = {new ScoringProfile("stringFieldBoost")
    {
        TextWeights = new TextWeights(new Dictionary<string, double>
        {
            ["name"] = 3,
            ["description"] = 1,
            ["category"] = 2,
            ["ownerId"] = 1
        }),
        Functions = {new TagScoringFunction("category", 2, new TagScoringParameters("categoryTag"))},
    }},
    Suggesters = { new SearchSuggester("sg", new string[] { "category", "ownerId" }) },
    Analyzers = { },
    Tokenizers = { },
    TokenFilters = { },
    CharFilters = { },
    Normalizers = { },
    SemanticSearch = new SemanticSearch(),
    VectorSearch = new VectorSearch
    {
        Profiles = {new VectorSearchProfile("config1", "cosine")
        {
            VectorizerName = "openai",
            CompressionName = "mySQ8",
        }, new VectorSearchProfile("config2", "euclidean")
        {
            VectorizerName = "custom-web-api",
            CompressionName = "mySQ8",
        }, new VectorSearchProfile("config3", "dotProduct")
        {
            VectorizerName = "custom-web-api",
            CompressionName = "myBQC",
        }},
        Algorithms = {new HnswAlgorithmConfiguration("cosine")
        {
            Parameters = new HnswParameters
            {
                Metric = VectorSearchAlgorithmMetric.Cosine,
            },
        }, new HnswAlgorithmConfiguration("euclidean")
        {
            Parameters = new HnswParameters
            {
                Metric = VectorSearchAlgorithmMetric.Euclidean,
            },
        }, new HnswAlgorithmConfiguration("dotProduct")
        {
            Parameters = new HnswParameters
            {
                Metric = VectorSearchAlgorithmMetric.DotProduct,
            },
        }},
        Vectorizers = {new AzureOpenAIVectorizer("openai")
        {
            Parameters = new AzureOpenAIVectorizerParameters
            {
                ResourceUrl = new Uri("https://test-sample.openai.azure.com/"),
                DeploymentName = "model",
                ApiKey = "api-key",
                ModelName = AzureOpenAIModelName.TextEmbedding3Large,
            },
        }, new WebApiVectorizer("custom-web-api")
        {
            WebApiParameters = new WebApiVectorizerParameters
            {
                Url = new Uri("https://my-custom-endpoint.org/"),
                HttpHeaders =
                {
                    ["header1"] = "value1",
                    ["header2"] = "value2"
                },
                HttpMethod = "POST",
                Timeout = XmlConvert.ToTimeSpan("PT1M"),
                AuthResourceId = "api://f89d1c93-58a7-4b07-9a5b-5f89048b927b",
            },
        }, new AzureMachineLearningVectorizer("aml")
        {
            AMLParameters = new AzureMachineLearningParameters(new Uri("https://my-custom-endpoint.org/"))
            {
                ResourceId = "aml resource id",
                Timeout = XmlConvert.ToTimeSpan("PT1M"),
                Region = "aml region",
                ModelName = AIStudioModelCatalogName.OpenAICLIPImageTextEmbeddingsVitBasePatch32,
            },
        }},
        Compressions = {new ScalarQuantizationCompression("mySQ8")
        {
            Parameters = new ScalarQuantizationParameters
            {
                QuantizedDataType = VectorSearchCompressionTarget.Int8,
            },
            RescoringOptions = new RescoringOptions
            {
                EnableRescoring = true,
                DefaultOversampling = 10,
                RescoreStorageMethod = VectorSearchCompressionRescoreStorageMethod.PreserveOriginals,
            },
            TruncationDimension = 2,
        }, new BinaryQuantizationCompression("myBQC")
        {
            RescoringOptions = new RescoringOptions
            {
                EnableRescoring = true,
                DefaultOversampling = 10,
                RescoreStorageMethod = VectorSearchCompressionRescoreStorageMethod.PreserveOriginals,
            },
            TruncationDimension = 2,
        }},
    },
};
Response<SearchIndex> response = await client.CreateOrUpdateAsync("temp-preview-test", index);
]]></code></example>
    </member>
    <member name="CreateOrUpdate(string,SearchIndex,bool?,MatchConditions,CancellationToken)">
      <example>
This sample shows how to call CreateOrUpdate.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Search.Documents.Indexes client = new SearchClient(endpoint, credential).GetIndexesClient();

SearchIndex index = new SearchIndex("temp-preview-test", new SearchField[]
{
    new SearchField("id", SearchFieldDataType.String)
    {
        Key = true,
        Sortable = true,
    },
    new SearchField("vector1", default)
    {
        Retrievable = true,
        Searchable = true,
        VectorSearchDimensions = 20,
        VectorSearchProfileName = "config1",
    },
    new SearchField("vector1b", default)
    {
        Retrievable = true,
        Searchable = true,
        VectorSearchDimensions = 10,
        VectorSearchProfileName = "config2",
    },
    new SearchField("vector2", default)
    {
        Retrievable = true,
        Searchable = true,
        VectorSearchDimensions = 5,
        VectorSearchProfileName = "config3",
    },
    new SearchField("vector3", default)
    {
        Retrievable = true,
        Searchable = true,
        VectorSearchDimensions = 5,
        VectorSearchProfileName = "config3",
    },
    new SearchField("vector22", default)
    {
        Retrievable = true,
        Searchable = true,
        VectorSearchDimensions = 10,
        VectorSearchProfileName = "config2",
    },
    new SearchField("name", SearchFieldDataType.String)
    {
        Retrievable = true,
        Searchable = true,
        Filterable = true,
        Sortable = true,
        Facetable = true,
        Analyzer = LexicalAnalyzerName.EnLucene,
    },
    new SearchField("description", SearchFieldDataType.String)
    {
        Retrievable = true,
        Searchable = true,
        Filterable = true,
        Sortable = true,
        Facetable = true,
        Analyzer = LexicalAnalyzerName.StandardLucene,
    },
    new SearchField("category", SearchFieldDataType.String)
    {
        Retrievable = true,
        Searchable = true,
        Filterable = true,
        Sortable = true,
        Facetable = true,
        Analyzer = LexicalAnalyzerName.EnLucene,
    },
    new SearchField("ownerId", SearchFieldDataType.String)
    {
        Retrievable = true,
        Searchable = true,
        Filterable = true,
        Sortable = true,
        Facetable = true,
        Analyzer = LexicalAnalyzerName.EnLucene,
    }
})
{
    ScoringProfiles = {new ScoringProfile("stringFieldBoost")
    {
        TextWeights = new TextWeights(new Dictionary<string, double>
        {
            ["name"] = 3,
            ["description"] = 1,
            ["category"] = 2,
            ["ownerId"] = 1
        }),
        Functions = {new TagScoringFunction("category", 2, new TagScoringParameters("categoryTag"))},
    }},
    Suggesters = { new SearchSuggester("sg", new string[] { "category", "ownerId" }) },
    Analyzers = { },
    Tokenizers = { },
    TokenFilters = { },
    CharFilters = { },
    Normalizers = { },
    SemanticSearch = new SemanticSearch(),
    VectorSearch = new VectorSearch
    {
        Profiles = {new VectorSearchProfile("config1", "cosine")
        {
            VectorizerName = "openai",
            CompressionName = "mySQ8",
        }, new VectorSearchProfile("config2", "euclidean")
        {
            VectorizerName = "custom-web-api",
            CompressionName = "mySQ8",
        }, new VectorSearchProfile("config3", "dotProduct")
        {
            VectorizerName = "custom-web-api",
            CompressionName = "myBQC",
        }},
        Algorithms = {new HnswAlgorithmConfiguration("cosine")
        {
            Parameters = new HnswParameters
            {
                Metric = VectorSearchAlgorithmMetric.Cosine,
            },
        }, new HnswAlgorithmConfiguration("euclidean")
        {
            Parameters = new HnswParameters
            {
                Metric = VectorSearchAlgorithmMetric.Euclidean,
            },
        }, new HnswAlgorithmConfiguration("dotProduct")
        {
            Parameters = new HnswParameters
            {
                Metric = VectorSearchAlgorithmMetric.DotProduct,
            },
        }},
        Vectorizers = {new AzureOpenAIVectorizer("openai")
        {
            Parameters = new AzureOpenAIVectorizerParameters
            {
                ResourceUrl = new Uri("https://test-sample.openai.azure.com/"),
                DeploymentName = "model",
                ApiKey = "api-key",
                ModelName = AzureOpenAIModelName.TextEmbedding3Large,
            },
        }, new WebApiVectorizer("custom-web-api")
        {
            WebApiParameters = new WebApiVectorizerParameters
            {
                Url = new Uri("https://my-custom-endpoint.org/"),
                HttpHeaders =
                {
                    ["header1"] = "value1",
                    ["header2"] = "value2"
                },
                HttpMethod = "POST",
                Timeout = XmlConvert.ToTimeSpan("PT1M"),
                AuthResourceId = "api://f89d1c93-58a7-4b07-9a5b-5f89048b927b",
            },
        }, new AzureMachineLearningVectorizer("aml")
        {
            AMLParameters = new AzureMachineLearningParameters(new Uri("https://my-custom-endpoint.org/"))
            {
                ResourceId = "aml resource id",
                Timeout = XmlConvert.ToTimeSpan("PT1M"),
                Region = "aml region",
                ModelName = AIStudioModelCatalogName.OpenAICLIPImageTextEmbeddingsVitBasePatch32,
            },
        }},
        Compressions = {new ScalarQuantizationCompression("mySQ8")
        {
            Parameters = new ScalarQuantizationParameters
            {
                QuantizedDataType = VectorSearchCompressionTarget.Int8,
            },
            RescoringOptions = new RescoringOptions
            {
                EnableRescoring = true,
                DefaultOversampling = 10,
                RescoreStorageMethod = VectorSearchCompressionRescoreStorageMethod.PreserveOriginals,
            },
            TruncationDimension = 2,
        }, new BinaryQuantizationCompression("myBQC")
        {
            RescoringOptions = new RescoringOptions
            {
                EnableRescoring = true,
                DefaultOversampling = 10,
                RescoreStorageMethod = VectorSearchCompressionRescoreStorageMethod.PreserveOriginals,
            },
            TruncationDimension = 2,
        }},
    },
};
Response<SearchIndex> response = client.CreateOrUpdate("temp-preview-test", index);
]]></code></example>
    </member>
    <member name="CreateOrUpdateAsync(string,RequestContent,bool?,MatchConditions,RequestContext)">
      <example>
This sample shows how to call CreateOrUpdateAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Search.Documents.Indexes client = new SearchClient(endpoint, credential).GetIndexesClient();

using RequestContent content = RequestContent.Create(new
{
    name = "temp-preview-test",
    fields = new object[]
    {
        new
        {
            name = "id",
            type = "Edm.String",
            key = true,
            sortable = true,
        },
        new
        {
            name = "vector1",
            retrievable = true,
            searchable = true,
            dimensions = 20,
            vectorSearchProfile = "config1",
        },
        new
        {
            name = "vector1b",
            retrievable = true,
            searchable = true,
            dimensions = 10,
            vectorSearchProfile = "config2",
        },
        new
        {
            name = "vector2",
            retrievable = true,
            searchable = true,
            dimensions = 5,
            vectorSearchProfile = "config3",
        },
        new
        {
            name = "vector3",
            retrievable = true,
            searchable = true,
            dimensions = 5,
            vectorSearchProfile = "config3",
        },
        new
        {
            name = "vector22",
            retrievable = true,
            searchable = true,
            dimensions = 10,
            vectorSearchProfile = "config2",
        },
        new
        {
            name = "name",
            type = "Edm.String",
            retrievable = true,
            searchable = true,
            filterable = true,
            sortable = true,
            facetable = true,
            analyzer = "en.lucene",
        },
        new
        {
            name = "description",
            type = "Edm.String",
            retrievable = true,
            searchable = true,
            filterable = true,
            sortable = true,
            facetable = true,
            analyzer = "standard.lucene",
        },
        new
        {
            name = "category",
            type = "Edm.String",
            retrievable = true,
            searchable = true,
            filterable = true,
            sortable = true,
            facetable = true,
            analyzer = "en.lucene",
        },
        new
        {
            name = "ownerId",
            type = "Edm.String",
            retrievable = true,
            searchable = true,
            filterable = true,
            sortable = true,
            facetable = true,
            analyzer = "en.lucene",
        }
    },
    scoringProfiles = new object[]
    {
        new
        {
            name = "stringFieldBoost",
            text = new
            {
                weights = new
                {
                    name = 3,
                    description = 1,
                    category = 2,
                    ownerId = 1,
                },
            },
            functions = new object[]
            {
                new
                {
                    tag = new
                    {
                        tagsParameter = "categoryTag",
                    },
                    type = "tag",
                    fieldName = "category",
                    boost = 2,
                }
            },
        }
    },
    suggesters = new object[]
    {
        new
        {
            name = "sg",
            searchMode = "analyzingInfixMatching",
            sourceFields = new object[]
            {
                "category",
                "ownerId"
            },
        }
    },
    analyzers = Array.Empty<object>(),
    tokenizers = Array.Empty<object>(),
    tokenFilters = Array.Empty<object>(),
    charFilters = Array.Empty<object>(),
    normalizers = Array.Empty<object>(),
    semantic = new object(),
    vectorSearch = new
    {
        profiles = new object[]
        {
            new
            {
                name = "config1",
                algorithm = "cosine",
                vectorizer = "openai",
                compression = "mySQ8",
            },
            new
            {
                name = "config2",
                algorithm = "euclidean",
                vectorizer = "custom-web-api",
                compression = "mySQ8",
            },
            new
            {
                name = "config3",
                algorithm = "dotProduct",
                vectorizer = "custom-web-api",
                compression = "myBQC",
            }
        },
        algorithms = new object[]
        {
            new
            {
                hnswParameters = new
                {
                    metric = "cosine",
                },
                name = "cosine",
                kind = "hnsw",
            },
            new
            {
                hnswParameters = new
                {
                    metric = "euclidean",
                },
                name = "euclidean",
                kind = "hnsw",
            },
            new
            {
                hnswParameters = new
                {
                    metric = "dotProduct",
                },
                name = "dotProduct",
                kind = "hnsw",
            }
        },
        vectorizers = new object[]
        {
            new
            {
                azureOpenAIParameters = new
                {
                    resourceUri = "https://test-sample.openai.azure.com/",
                    deploymentId = "model",
                    apiKey = "api-key",
                    modelName = "text-embedding-3-large",
                },
                name = "openai",
                kind = "azureOpenAI",
            },
            new
            {
                customWebApiParameters = new
                {
                    uri = "https://my-custom-endpoint.org/",
                    httpHeaders = new
                    {
                        header1 = "value1",
                        header2 = "value2",
                    },
                    httpMethod = "POST",
                    timeout = "PT1M",
                    authResourceId = "api://f89d1c93-58a7-4b07-9a5b-5f89048b927b",
                },
                name = "custom-web-api",
                kind = "customWebApi",
            },
            new
            {
                amlParameters = new
                {
                    uri = "https://my-custom-endpoint.org/",
                    resourceId = "aml resource id",
                    timeout = "PT1M",
                    region = "aml region",
                    modelName = "OpenAI-CLIP-Image-Text-Embeddings-vit-base-patch32",
                },
                name = "aml",
                kind = "aml",
            }
        },
        compressions = new object[]
        {
            new
            {
                scalarQuantizationParameters = new
                {
                    quantizedDataType = "int8",
                },
                name = "mySQ8",
                kind = "scalarQuantization",
                rescoringOptions = new
                {
                    enableRescoring = true,
                    defaultOversampling = 10,
                    rescoreStorageMethod = "preserveOriginals",
                },
                truncationDimension = 2,
            },
            new
            {
                name = "myBQC",
                kind = "binaryQuantization",
                rescoringOptions = new
                {
                    enableRescoring = true,
                    defaultOversampling = 10,
                    rescoreStorageMethod = "preserveOriginals",
                },
                truncationDimension = 2,
            }
        },
    },
});
Response response = await client.CreateOrUpdateAsync("temp-preview-test", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("fields")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("fields")[0].GetProperty("type").ToString());
]]></code></example>
    </member>
    <member name="CreateOrUpdate(string,RequestContent,bool?,MatchConditions,RequestContext)">
      <example>
This sample shows how to call CreateOrUpdate and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Search.Documents.Indexes client = new SearchClient(endpoint, credential).GetIndexesClient();

using RequestContent content = RequestContent.Create(new
{
    name = "temp-preview-test",
    fields = new object[]
    {
        new
        {
            name = "id",
            type = "Edm.String",
            key = true,
            sortable = true,
        },
        new
        {
            name = "vector1",
            retrievable = true,
            searchable = true,
            dimensions = 20,
            vectorSearchProfile = "config1",
        },
        new
        {
            name = "vector1b",
            retrievable = true,
            searchable = true,
            dimensions = 10,
            vectorSearchProfile = "config2",
        },
        new
        {
            name = "vector2",
            retrievable = true,
            searchable = true,
            dimensions = 5,
            vectorSearchProfile = "config3",
        },
        new
        {
            name = "vector3",
            retrievable = true,
            searchable = true,
            dimensions = 5,
            vectorSearchProfile = "config3",
        },
        new
        {
            name = "vector22",
            retrievable = true,
            searchable = true,
            dimensions = 10,
            vectorSearchProfile = "config2",
        },
        new
        {
            name = "name",
            type = "Edm.String",
            retrievable = true,
            searchable = true,
            filterable = true,
            sortable = true,
            facetable = true,
            analyzer = "en.lucene",
        },
        new
        {
            name = "description",
            type = "Edm.String",
            retrievable = true,
            searchable = true,
            filterable = true,
            sortable = true,
            facetable = true,
            analyzer = "standard.lucene",
        },
        new
        {
            name = "category",
            type = "Edm.String",
            retrievable = true,
            searchable = true,
            filterable = true,
            sortable = true,
            facetable = true,
            analyzer = "en.lucene",
        },
        new
        {
            name = "ownerId",
            type = "Edm.String",
            retrievable = true,
            searchable = true,
            filterable = true,
            sortable = true,
            facetable = true,
            analyzer = "en.lucene",
        }
    },
    scoringProfiles = new object[]
    {
        new
        {
            name = "stringFieldBoost",
            text = new
            {
                weights = new
                {
                    name = 3,
                    description = 1,
                    category = 2,
                    ownerId = 1,
                },
            },
            functions = new object[]
            {
                new
                {
                    tag = new
                    {
                        tagsParameter = "categoryTag",
                    },
                    type = "tag",
                    fieldName = "category",
                    boost = 2,
                }
            },
        }
    },
    suggesters = new object[]
    {
        new
        {
            name = "sg",
            searchMode = "analyzingInfixMatching",
            sourceFields = new object[]
            {
                "category",
                "ownerId"
            },
        }
    },
    analyzers = Array.Empty<object>(),
    tokenizers = Array.Empty<object>(),
    tokenFilters = Array.Empty<object>(),
    charFilters = Array.Empty<object>(),
    normalizers = Array.Empty<object>(),
    semantic = new object(),
    vectorSearch = new
    {
        profiles = new object[]
        {
            new
            {
                name = "config1",
                algorithm = "cosine",
                vectorizer = "openai",
                compression = "mySQ8",
            },
            new
            {
                name = "config2",
                algorithm = "euclidean",
                vectorizer = "custom-web-api",
                compression = "mySQ8",
            },
            new
            {
                name = "config3",
                algorithm = "dotProduct",
                vectorizer = "custom-web-api",
                compression = "myBQC",
            }
        },
        algorithms = new object[]
        {
            new
            {
                hnswParameters = new
                {
                    metric = "cosine",
                },
                name = "cosine",
                kind = "hnsw",
            },
            new
            {
                hnswParameters = new
                {
                    metric = "euclidean",
                },
                name = "euclidean",
                kind = "hnsw",
            },
            new
            {
                hnswParameters = new
                {
                    metric = "dotProduct",
                },
                name = "dotProduct",
                kind = "hnsw",
            }
        },
        vectorizers = new object[]
        {
            new
            {
                azureOpenAIParameters = new
                {
                    resourceUri = "https://test-sample.openai.azure.com/",
                    deploymentId = "model",
                    apiKey = "api-key",
                    modelName = "text-embedding-3-large",
                },
                name = "openai",
                kind = "azureOpenAI",
            },
            new
            {
                customWebApiParameters = new
                {
                    uri = "https://my-custom-endpoint.org/",
                    httpHeaders = new
                    {
                        header1 = "value1",
                        header2 = "value2",
                    },
                    httpMethod = "POST",
                    timeout = "PT1M",
                    authResourceId = "api://f89d1c93-58a7-4b07-9a5b-5f89048b927b",
                },
                name = "custom-web-api",
                kind = "customWebApi",
            },
            new
            {
                amlParameters = new
                {
                    uri = "https://my-custom-endpoint.org/",
                    resourceId = "aml resource id",
                    timeout = "PT1M",
                    region = "aml region",
                    modelName = "OpenAI-CLIP-Image-Text-Embeddings-vit-base-patch32",
                },
                name = "aml",
                kind = "aml",
            }
        },
        compressions = new object[]
        {
            new
            {
                scalarQuantizationParameters = new
                {
                    quantizedDataType = "int8",
                },
                name = "mySQ8",
                kind = "scalarQuantization",
                rescoringOptions = new
                {
                    enableRescoring = true,
                    defaultOversampling = 10,
                    rescoreStorageMethod = "preserveOriginals",
                },
                truncationDimension = 2,
            },
            new
            {
                name = "myBQC",
                kind = "binaryQuantization",
                rescoringOptions = new
                {
                    enableRescoring = true,
                    defaultOversampling = 10,
                    rescoreStorageMethod = "preserveOriginals",
                },
                truncationDimension = 2,
            }
        },
    },
});
Response response = client.CreateOrUpdate("temp-preview-test", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("fields")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("fields")[0].GetProperty("type").ToString());
]]></code></example>
    </member>
    <member name="DeleteAsync(string,MatchConditions,RequestContext)">
      <example>
This sample shows how to call DeleteAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Search.Documents.Indexes client = new SearchClient(endpoint, credential).GetIndexesClient();

Response response = await client.DeleteAsync("temp-preview-test");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="Delete(string,MatchConditions,RequestContext)">
      <example>
This sample shows how to call Delete.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Search.Documents.Indexes client = new SearchClient(endpoint, credential).GetIndexesClient();

Response response = client.Delete("temp-preview-test");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetIndexAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetIndexAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Search.Documents.Indexes client = new SearchClient(endpoint, credential).GetIndexesClient();

Response<SearchIndex> response = await client.GetIndexAsync("preview-test");
]]></code></example>
    </member>
    <member name="GetIndex(string,CancellationToken)">
      <example>
This sample shows how to call GetIndex.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Search.Documents.Indexes client = new SearchClient(endpoint, credential).GetIndexesClient();

Response<SearchIndex> response = client.GetIndex("preview-test");
]]></code></example>
    </member>
    <member name="GetIndexAsync(string,RequestContext)">
      <example>
This sample shows how to call GetIndexAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Search.Documents.Indexes client = new SearchClient(endpoint, credential).GetIndexesClient();

Response response = await client.GetIndexAsync("preview-test", (RequestContext)null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("fields")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("fields")[0].GetProperty("type").ToString());
]]></code></example>
    </member>
    <member name="GetIndex(string,RequestContext)">
      <example>
This sample shows how to call GetIndex and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Search.Documents.Indexes client = new SearchClient(endpoint, credential).GetIndexesClient();

Response response = client.GetIndex("preview-test", (RequestContext)null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("fields")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("fields")[0].GetProperty("type").ToString());
]]></code></example>
    </member>
    <member name="GetStatisticsAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetStatisticsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Search.Documents.Indexes client = new SearchClient(endpoint, credential).GetIndexesClient();

Response<Search.Documents.Indexes.Models.SearchIndexStatistics> response = await client.GetStatisticsAsync("preview-test");
]]></code></example>
    </member>
    <member name="GetStatistics(string,CancellationToken)">
      <example>
This sample shows how to call GetStatistics.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Search.Documents.Indexes client = new SearchClient(endpoint, credential).GetIndexesClient();

Response<Search.Documents.Indexes.Models.SearchIndexStatistics> response = client.GetStatistics("preview-test");
]]></code></example>
    </member>
    <member name="GetStatisticsAsync(string,RequestContext)">
      <example>
This sample shows how to call GetStatisticsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Search.Documents.Indexes client = new SearchClient(endpoint, credential).GetIndexesClient();

Response response = await client.GetStatisticsAsync("preview-test", (RequestContext)null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("documentCount").ToString());
Console.WriteLine(result.GetProperty("storageSize").ToString());
Console.WriteLine(result.GetProperty("vectorIndexSize").ToString());
]]></code></example>
    </member>
    <member name="GetStatistics(string,RequestContext)">
      <example>
This sample shows how to call GetStatistics and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Search.Documents.Indexes client = new SearchClient(endpoint, credential).GetIndexesClient();

Response response = client.GetStatistics("preview-test", (RequestContext)null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("documentCount").ToString());
Console.WriteLine(result.GetProperty("storageSize").ToString());
Console.WriteLine(result.GetProperty("vectorIndexSize").ToString());
]]></code></example>
    </member>
    <member name="AnalyzeAsync(string,AnalyzeTextOptions,CancellationToken)">
      <example>
This sample shows how to call AnalyzeAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Search.Documents.Indexes client = new SearchClient(endpoint, credential).GetIndexesClient();

Search.Documents.Indexes.Models.AnalyzeTextOptions request = new Search.Documents.Indexes.Models.AnalyzeTextOptions("Text to analyze");
Response<AnalyzeResult> response = await client.AnalyzeAsync("preview-test", request);
]]></code></example>
    </member>
    <member name="Analyze(string,AnalyzeTextOptions,CancellationToken)">
      <example>
This sample shows how to call Analyze.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Search.Documents.Indexes client = new SearchClient(endpoint, credential).GetIndexesClient();

Search.Documents.Indexes.Models.AnalyzeTextOptions request = new Search.Documents.Indexes.Models.AnalyzeTextOptions("Text to analyze");
Response<AnalyzeResult> response = client.Analyze("preview-test", request);
]]></code></example>
    </member>
    <member name="AnalyzeAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call AnalyzeAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Search.Documents.Indexes client = new SearchClient(endpoint, credential).GetIndexesClient();

using RequestContent content = RequestContent.Create(new
{
    text = "Text to analyze",
    analyzer = "ar.lucene",
});
Response response = await client.AnalyzeAsync("preview-test", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("tokens")[0].GetProperty("token").ToString());
Console.WriteLine(result.GetProperty("tokens")[0].GetProperty("startOffset").ToString());
Console.WriteLine(result.GetProperty("tokens")[0].GetProperty("endOffset").ToString());
Console.WriteLine(result.GetProperty("tokens")[0].GetProperty("position").ToString());
]]></code></example>
    </member>
    <member name="Analyze(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call Analyze and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Search.Documents.Indexes client = new SearchClient(endpoint, credential).GetIndexesClient();

using RequestContent content = RequestContent.Create(new
{
    text = "Text to analyze",
    analyzer = "ar.lucene",
});
Response response = client.Analyze("preview-test", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("tokens")[0].GetProperty("token").ToString());
Console.WriteLine(result.GetProperty("tokens")[0].GetProperty("startOffset").ToString());
Console.WriteLine(result.GetProperty("tokens")[0].GetProperty("endOffset").ToString());
Console.WriteLine(result.GetProperty("tokens")[0].GetProperty("position").ToString());
]]></code></example>
    </member>
    <member name="GetIndexesAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetIndexesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Search.Documents.Indexes client = new SearchClient(endpoint, credential).GetIndexesClient();

await foreach (SearchIndex item in client.GetIndexesAsync())
{
}
]]></code></example>
    </member>
    <member name="GetIndexes(string,CancellationToken)">
      <example>
This sample shows how to call GetIndexes.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Search.Documents.Indexes client = new SearchClient(endpoint, credential).GetIndexesClient();

foreach (SearchIndex item in client.GetIndexes())
{
}
]]></code></example>
    </member>
    <member name="GetIndexesAsync(string,RequestContext)">
      <example>
This sample shows how to call GetIndexesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Search.Documents.Indexes client = new SearchClient(endpoint, credential).GetIndexesClient();

await foreach (BinaryData item in client.GetIndexesAsync((string)null, (RequestContext)null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("fields")[0].GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("fields")[0].GetProperty("type").ToString());
}
]]></code></example>
    </member>
    <member name="GetIndexes(string,RequestContext)">
      <example>
This sample shows how to call GetIndexes and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Search.Documents.Indexes client = new SearchClient(endpoint, credential).GetIndexesClient();

foreach (BinaryData item in client.GetIndexes((string)null, (RequestContext)null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("fields")[0].GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("fields")[0].GetProperty("type").ToString());
}
]]></code></example>
    </member>
  </members>
</doc>