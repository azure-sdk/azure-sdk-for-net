<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="CountAsync(string,CancellationToken)">
      <example>
This sample shows how to call CountAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

Response<int> response = await client.CountAsync("myindex");
]]></code></example>
    </member>
    <member name="Count(string,CancellationToken)">
      <example>
This sample shows how to call Count.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

Response<int> response = client.Count("myindex");
]]></code></example>
    </member>
    <member name="CountAsync(string,RequestContext)">
      <example>
This sample shows how to call CountAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

Response response = await client.CountAsync("myindex", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="Count(string,RequestContext)">
      <example>
This sample shows how to call Count and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

Response response = client.Count("myindex", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="SearchGetAsync(string,string,bool?,IEnumerable{string},string,IEnumerable{string},string,string,double?,IEnumerable{string},SearchQueryType?,IEnumerable{string},string,IEnumerable{string},SearchMode?,ScoringStatistics?,string,IEnumerable{string},int?,int?,string,SemanticErrorMode?,int?,QueryAnswerType?,QueryCaptionType?,string,CancellationToken)">
      <example>
This sample shows how to call SearchGetAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

Response<SearchDocumentsResult> response = await client.SearchGetAsync("myindex");
]]></code>
This sample shows how to call SearchGetAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

Response<SearchDocumentsResult> response = await client.SearchGetAsync("myindex");
]]></code></example>
    </member>
    <member name="SearchGet(string,string,bool?,IEnumerable{string},string,IEnumerable{string},string,string,double?,IEnumerable{string},SearchQueryType?,IEnumerable{string},string,IEnumerable{string},SearchMode?,ScoringStatistics?,string,IEnumerable{string},int?,int?,string,SemanticErrorMode?,int?,QueryAnswerType?,QueryCaptionType?,string,CancellationToken)">
      <example>
This sample shows how to call SearchGet.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

Response<SearchDocumentsResult> response = client.SearchGet("myindex");
]]></code>
This sample shows how to call SearchGet.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

Response<SearchDocumentsResult> response = client.SearchGet("myindex");
]]></code></example>
    </member>
    <member name="SearchGetAsync(string,string,bool?,IEnumerable{string},string,IEnumerable{string},string,string,double?,IEnumerable{string},string,IEnumerable{string},string,IEnumerable{string},string,string,string,IEnumerable{string},int?,int?,string,string,int?,string,string,string,RequestContext)">
      <example>
This sample shows how to call SearchGetAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

Response response = await client.SearchGetAsync("myindex", "nice hotels", true, new string[] { "category,count:10,sort:count" }, "rating gt 10", new string[] { "title" }, "</em>", "<em>", 80, new string[] { "search.score() desc", "rating desc" }, "simple", null, "sp", new string[] { "title", "description" }, "any", "global", "mysessionid", new string[] { "docId", "title", "description" }, 100, 10, null, null, null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.score").ToString());
]]></code>
This sample shows how to call SearchGetAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

Response response = await client.SearchGetAsync("myindex", "how do clouds form", true, null, null, null, "</em>", "<em>", null, null, "semantic", null, null, null, null, null, null, null, null, null, "my-semantic-config", "partial", 780, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.score").ToString());
]]></code></example>
    </member>
    <member name="SearchGet(string,string,bool?,IEnumerable{string},string,IEnumerable{string},string,string,double?,IEnumerable{string},string,IEnumerable{string},string,IEnumerable{string},string,string,string,IEnumerable{string},int?,int?,string,string,int?,string,string,string,RequestContext)">
      <example>
This sample shows how to call SearchGet and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

Response response = client.SearchGet("myindex", "nice hotels", true, new string[] { "category,count:10,sort:count" }, "rating gt 10", new string[] { "title" }, "</em>", "<em>", 80, new string[] { "search.score() desc", "rating desc" }, "simple", null, "sp", new string[] { "title", "description" }, "any", "global", "mysessionid", new string[] { "docId", "title", "description" }, 100, 10, null, null, null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.score").ToString());
]]></code>
This sample shows how to call SearchGet and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

Response response = client.SearchGet("myindex", "how do clouds form", true, null, null, null, "</em>", "<em>", null, null, "semantic", null, null, null, null, null, null, null, null, null, "my-semantic-config", "partial", 780, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.score").ToString());
]]></code></example>
    </member>
    <member name="SearchPostAsync(string,SearchOptions,CancellationToken)">
      <example>
This sample shows how to call SearchPostAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

SearchOptions searchOptions = null;
Response<SearchDocumentsResult> response = await client.SearchPostAsync("myindex", searchOptions);
]]></code>
This sample shows how to call SearchPostAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

SearchOptions searchOptions = null;
Response<SearchDocumentsResult> response = await client.SearchPostAsync("myindex", searchOptions);
]]></code></example>
    </member>
    <member name="SearchPost(string,SearchOptions,CancellationToken)">
      <example>
This sample shows how to call SearchPost.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

SearchOptions searchOptions = null;
Response<SearchDocumentsResult> response = client.SearchPost("myindex", searchOptions);
]]></code>
This sample shows how to call SearchPost.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

SearchOptions searchOptions = null;
Response<SearchDocumentsResult> response = client.SearchPost("myindex", searchOptions);
]]></code></example>
    </member>
    <member name="SearchPostAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call SearchPostAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

using RequestContent content = RequestContent.Create(new
{
    count = true,
    facets = new object[]
    {
        "category,count:10,sort:count"
    },
    filter = "rating gt 4.0",
    highlight = "description",
    highlightPostTag = "</em>",
    highlightPreTag = "<em>",
    orderby = "rating desc",
    queryType = "simple",
    scoringParameters = new object[]
    {
        "currentLocation--122.123,44.77233"
    },
    scoringProfile = "sp",
    search = "nice hotels",
    searchFields = "category,description",
    searchMode = "any",
    sessionId = "mysessionid",
    scoringStatistics = "global",
    select = "hotelId,category,description",
    skip = 0,
    top = 10,
    vectorQueries = new object[]
    {
        new
        {
            kind = "vector",
            vector = new object[]
            {
                0.103F,
                0.0712F,
                0.0852F,
                0.1547F,
                0.1183F
            },
            fields = "descriptionEmbedding",
            k = 5,
            exhaustive = true,
            oversampling = 20,
            weight = 2F,
        }
    },
    vectorFilterMode = "preFilter",
});
Response response = await client.SearchPostAsync("myindex", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.score").ToString());
]]></code>
This sample shows how to call SearchPostAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

using RequestContent content = RequestContent.Create(new
{
    count = true,
    highlightPostTag = "</em>",
    highlightPreTag = "<em>",
    queryType = "semantic",
    search = "how do clouds form",
    semanticConfiguration = "my-semantic-config",
    semanticErrorHandling = "partial",
    semanticMaxWaitInMilliseconds = 780,
});
Response response = await client.SearchPostAsync("myindex", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.score").ToString());
]]></code></example>
    </member>
    <member name="SearchPost(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call SearchPost and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

using RequestContent content = RequestContent.Create(new
{
    count = true,
    facets = new object[]
    {
        "category,count:10,sort:count"
    },
    filter = "rating gt 4.0",
    highlight = "description",
    highlightPostTag = "</em>",
    highlightPreTag = "<em>",
    orderby = "rating desc",
    queryType = "simple",
    scoringParameters = new object[]
    {
        "currentLocation--122.123,44.77233"
    },
    scoringProfile = "sp",
    search = "nice hotels",
    searchFields = "category,description",
    searchMode = "any",
    sessionId = "mysessionid",
    scoringStatistics = "global",
    select = "hotelId,category,description",
    skip = 0,
    top = 10,
    vectorQueries = new object[]
    {
        new
        {
            kind = "vector",
            vector = new object[]
            {
                0.103F,
                0.0712F,
                0.0852F,
                0.1547F,
                0.1183F
            },
            fields = "descriptionEmbedding",
            k = 5,
            exhaustive = true,
            oversampling = 20,
            weight = 2F,
        }
    },
    vectorFilterMode = "preFilter",
});
Response response = client.SearchPost("myindex", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.score").ToString());
]]></code>
This sample shows how to call SearchPost and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

using RequestContent content = RequestContent.Create(new
{
    count = true,
    highlightPostTag = "</em>",
    highlightPreTag = "<em>",
    queryType = "semantic",
    search = "how do clouds form",
    semanticConfiguration = "my-semantic-config",
    semanticErrorHandling = "partial",
    semanticMaxWaitInMilliseconds = 780,
});
Response response = client.SearchPost("myindex", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.score").ToString());
]]></code></example>
    </member>
    <member name="GetDocumentAsync(string,string,IEnumerable{string},CancellationToken)">
      <example>
This sample shows how to call GetDocumentAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

Response<LookupDocument> response = await client.GetDocumentAsync("getdocumentexample", "1");
]]></code></example>
    </member>
    <member name="GetDocument(string,string,IEnumerable{string},CancellationToken)">
      <example>
This sample shows how to call GetDocument.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

Response<LookupDocument> response = client.GetDocument("getdocumentexample", "1");
]]></code></example>
    </member>
    <member name="GetDocumentAsync(string,string,IEnumerable{string},RequestContext)">
      <example>
This sample shows how to call GetDocumentAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

Response response = await client.GetDocumentAsync("getdocumentexample", "1", new string[] { "docId", "title", "description" }, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="GetDocument(string,string,IEnumerable{string},RequestContext)">
      <example>
This sample shows how to call GetDocument and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

Response response = client.GetDocument("getdocumentexample", "1", new string[] { "docId", "title", "description" }, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="SuggestGetAsync(string,string,string,string,bool?,string,string,double?,IEnumerable{string},IEnumerable{string},IEnumerable{string},int?,CancellationToken)">
      <example>
This sample shows how to call SuggestGetAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

Response<SuggestDocumentsResult> response = await client.SuggestGetAsync("myindex", "hote", "sg");
]]></code></example>
    </member>
    <member name="SuggestGet(string,string,string,string,bool?,string,string,double?,IEnumerable{string},IEnumerable{string},IEnumerable{string},int?,CancellationToken)">
      <example>
This sample shows how to call SuggestGet.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

Response<SuggestDocumentsResult> response = client.SuggestGet("myindex", "hote", "sg");
]]></code></example>
    </member>
    <member name="SuggestGetAsync(string,string,string,string,bool?,string,string,double?,IEnumerable{string},IEnumerable{string},IEnumerable{string},int?,RequestContext)">
      <example>
This sample shows how to call SuggestGetAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

Response response = await client.SuggestGetAsync("myindex", "hote", "sg", "rating gt 10", false, "</em>", "<em>", 80, new string[] { "search.score() desc", "rating desc" }, new string[] { "title" }, new string[] { "docId", "title", "description" }, 10, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.text").ToString());
]]></code></example>
    </member>
    <member name="SuggestGet(string,string,string,string,bool?,string,string,double?,IEnumerable{string},IEnumerable{string},IEnumerable{string},int?,RequestContext)">
      <example>
This sample shows how to call SuggestGet and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

Response response = client.SuggestGet("myindex", "hote", "sg", "rating gt 10", false, "</em>", "<em>", 80, new string[] { "search.score() desc", "rating desc" }, new string[] { "title" }, new string[] { "docId", "title", "description" }, 10, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.text").ToString());
]]></code></example>
    </member>
    <member name="SuggestPostAsync(string,SuggestOptions,CancellationToken)">
      <example>
This sample shows how to call SuggestPostAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

SuggestOptions suggestOptions = null;
Response<SuggestDocumentsResult> response = await client.SuggestPostAsync("myindex", suggestOptions);
]]></code></example>
    </member>
    <member name="SuggestPost(string,SuggestOptions,CancellationToken)">
      <example>
This sample shows how to call SuggestPost.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

SuggestOptions suggestOptions = null;
Response<SuggestDocumentsResult> response = client.SuggestPost("myindex", suggestOptions);
]]></code></example>
    </member>
    <member name="SuggestPostAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call SuggestPostAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

using RequestContent content = RequestContent.Create(new
{
    filter = "rating gt 4.0",
    highlightPostTag = "</em>",
    highlightPreTag = "<em>",
    minimumCoverage = 80,
    orderby = "rating desc",
    search = "hote",
    searchFields = "title",
    select = "docId,title,description",
    suggesterName = "sg",
    top = 10,
});
Response response = await client.SuggestPostAsync("myindex", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.text").ToString());
]]></code></example>
    </member>
    <member name="SuggestPost(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call SuggestPost and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

using RequestContent content = RequestContent.Create(new
{
    filter = "rating gt 4.0",
    highlightPostTag = "</em>",
    highlightPreTag = "<em>",
    minimumCoverage = 80,
    orderby = "rating desc",
    search = "hote",
    searchFields = "title",
    select = "docId,title,description",
    suggesterName = "sg",
    top = 10,
});
Response response = client.SuggestPost("myindex", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.text").ToString());
]]></code></example>
    </member>
    <member name="IndexAsync(string,IndexBatch,CancellationToken)">
      <example>
This sample shows how to call IndexAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

IndexBatch batch = new IndexBatch(new IndexAction[]
{
    new IndexAction
    {
        ActionType = IndexActionType.Upload,
    },
    new IndexAction
    {
        ActionType = IndexActionType.Merge,
    },
    new IndexAction
    {
        ActionType = IndexActionType.MergeOrUpload,
    },
    new IndexAction
    {
        ActionType = IndexActionType.Delete,
    }
});
Response<IndexDocumentsResult> response = await client.IndexAsync("indexdocumentsexample", batch);
]]></code></example>
    </member>
    <member name="Index(string,IndexBatch,CancellationToken)">
      <example>
This sample shows how to call Index.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

IndexBatch batch = new IndexBatch(new IndexAction[]
{
    new IndexAction
    {
        ActionType = IndexActionType.Upload,
    },
    new IndexAction
    {
        ActionType = IndexActionType.Merge,
    },
    new IndexAction
    {
        ActionType = IndexActionType.MergeOrUpload,
    },
    new IndexAction
    {
        ActionType = IndexActionType.Delete,
    }
});
Response<IndexDocumentsResult> response = client.Index("indexdocumentsexample", batch);
]]></code></example>
    </member>
    <member name="IndexAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call IndexAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

using RequestContent content = RequestContent.Create(new
{
    value = new object[]
    {
        new Dictionary<string, object>
        {
            ["@search.action"] = "upload"
        },
        new Dictionary<string, object>
        {
            ["@search.action"] = "merge"
        },
        new Dictionary<string, object>
        {
            ["@search.action"] = "mergeOrUpload"
        },
        new Dictionary<string, object>
        {
            ["@search.action"] = "delete"
        }
    },
});
Response response = await client.IndexAsync("indexdocumentsexample", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("key").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("statusCode").ToString());
]]></code></example>
    </member>
    <member name="Index(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call Index and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

using RequestContent content = RequestContent.Create(new
{
    value = new object[]
    {
        new Dictionary<string, object>
        {
            ["@search.action"] = "upload"
        },
        new Dictionary<string, object>
        {
            ["@search.action"] = "merge"
        },
        new Dictionary<string, object>
        {
            ["@search.action"] = "mergeOrUpload"
        },
        new Dictionary<string, object>
        {
            ["@search.action"] = "delete"
        }
    },
});
Response response = client.Index("indexdocumentsexample", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("key").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("statusCode").ToString());
]]></code></example>
    </member>
    <member name="AutocompleteGetAsync(string,string,string,AutocompleteMode?,string,bool?,string,string,double?,IEnumerable{string},int?,CancellationToken)">
      <example>
This sample shows how to call AutocompleteGetAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

Response<AutocompleteResults> response = await client.AutocompleteGetAsync("myindex", "washington medic", "sg");
]]></code></example>
    </member>
    <member name="AutocompleteGet(string,string,string,AutocompleteMode?,string,bool?,string,string,double?,IEnumerable{string},int?,CancellationToken)">
      <example>
This sample shows how to call AutocompleteGet.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

Response<AutocompleteResults> response = client.AutocompleteGet("myindex", "washington medic", "sg");
]]></code></example>
    </member>
    <member name="AutocompleteGetAsync(string,string,string,string,string,bool?,string,string,double?,IEnumerable{string},int?,RequestContext)">
      <example>
This sample shows how to call AutocompleteGetAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

Response response = await client.AutocompleteGetAsync("myindex", "washington medic", "sg", "oneTerm", null, false, "</em>", "<em>", 80, new string[] { "title", "description" }, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("text").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("queryPlusText").ToString());
]]></code></example>
    </member>
    <member name="AutocompleteGet(string,string,string,string,string,bool?,string,string,double?,IEnumerable{string},int?,RequestContext)">
      <example>
This sample shows how to call AutocompleteGet and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

Response response = client.AutocompleteGet("myindex", "washington medic", "sg", "oneTerm", null, false, "</em>", "<em>", 80, new string[] { "title", "description" }, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("text").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("queryPlusText").ToString());
]]></code></example>
    </member>
    <member name="AutocompletePostAsync(string,AutocompleteOptions,CancellationToken)">
      <example>
This sample shows how to call AutocompletePostAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

AutocompleteOptions autocompleteOptions = null;
Response<AutocompleteResults> response = await client.AutocompletePostAsync("myindex", autocompleteOptions);
]]></code></example>
    </member>
    <member name="AutocompletePost(string,AutocompleteOptions,CancellationToken)">
      <example>
This sample shows how to call AutocompletePost.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

AutocompleteOptions autocompleteOptions = null;
Response<AutocompleteResults> response = client.AutocompletePost("myindex", autocompleteOptions);
]]></code></example>
    </member>
    <member name="AutocompletePostAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call AutocompletePostAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

using RequestContent content = RequestContent.Create(new
{
    autocompleteMode = "oneTerm",
    search = "washington medic",
    suggesterName = "sg",
    filter = "search.in(docId,'101,102,105')",
    highlightPostTag = "</em>",
    highlightPreTag = "<em>",
    minimumCoverage = 80,
    searchFields = "title,description",
    top = 10,
});
Response response = await client.AutocompletePostAsync("myindex", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("text").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("queryPlusText").ToString());
]]></code></example>
    </member>
    <member name="AutocompletePost(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call AutocompletePost and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

using RequestContent content = RequestContent.Create(new
{
    autocompleteMode = "oneTerm",
    search = "washington medic",
    suggesterName = "sg",
    filter = "search.in(docId,'101,102,105')",
    highlightPostTag = "</em>",
    highlightPreTag = "<em>",
    minimumCoverage = 80,
    searchFields = "title,description",
    top = 10,
});
Response response = client.AutocompletePost("myindex", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("text").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("queryPlusText").ToString());
]]></code></example>
    </member>
  </members>
</doc>