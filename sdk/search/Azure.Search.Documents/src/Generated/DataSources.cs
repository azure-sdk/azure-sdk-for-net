// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Search.Documents.Indexes.Models;

namespace Azure.Search.Documents
{
    // Data plane generated sub-client.
    /// <summary> The DataSources sub-client. </summary>
    public partial class DataSources
    {
        private const string AuthorizationHeader = "api-key";
        private readonly AzureKeyCredential _keyCredential;
        private static readonly string[] AuthorizationScopes = new string[] { "https://search.azure.com/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of DataSources for mocking. </summary>
        protected DataSources()
        {
        }

        /// <summary> Initializes a new instance of DataSources. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="keyCredential"> The key credential to copy. </param>
        /// <param name="tokenCredential"> The token credential to copy. </param>
        /// <param name="endpoint"> Service host. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        internal DataSources(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, AzureKeyCredential keyCredential, TokenCredential tokenCredential, Uri endpoint, string apiVersion)
        {
            ClientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
            _keyCredential = keyCredential;
            _tokenCredential = tokenCredential;
            _endpoint = endpoint;
            _apiVersion = apiVersion;
        }

        /// <summary> Creates a new datasource or updates a datasource if it already exists. </summary>
        /// <param name="dataSourceName"> The name of the datasource. </param>
        /// <param name="dataSource"> The definition of the datasource to create or update. </param>
        /// <param name="skipIndexerResetRequirementForCache"> Ignores cache reset requirements. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dataSourceName"/> or <paramref name="dataSource"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="dataSourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/DataSources.xml" path="doc/members/member[@name='CreateOrUpdateAsync(string,SearchIndexerDataSourceConnection,bool?,MatchConditions,CancellationToken)']/*" />
        public virtual async Task<Response<Search.Documents.Indexes.Models.SearchIndexerDataSourceConnection>> CreateOrUpdateAsync(string dataSourceName, Search.Documents.Indexes.Models.SearchIndexerDataSourceConnection dataSource, bool? skipIndexerResetRequirementForCache = null, MatchConditions matchConditions = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dataSourceName, nameof(dataSourceName));
            Argument.AssertNotNull(dataSource, nameof(dataSource));

            using RequestContent content = dataSource.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await CreateOrUpdateAsync(dataSourceName, content, skipIndexerResetRequirementForCache, matchConditions, context).ConfigureAwait(false);
            return Response.FromValue(Search.Documents.Indexes.Models.SearchIndexerDataSourceConnection.FromResponse(response), response);
        }

        /// <summary> Creates a new datasource or updates a datasource if it already exists. </summary>
        /// <param name="dataSourceName"> The name of the datasource. </param>
        /// <param name="dataSource"> The definition of the datasource to create or update. </param>
        /// <param name="skipIndexerResetRequirementForCache"> Ignores cache reset requirements. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dataSourceName"/> or <paramref name="dataSource"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="dataSourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/DataSources.xml" path="doc/members/member[@name='CreateOrUpdate(string,SearchIndexerDataSourceConnection,bool?,MatchConditions,CancellationToken)']/*" />
        public virtual Response<Search.Documents.Indexes.Models.SearchIndexerDataSourceConnection> CreateOrUpdate(string dataSourceName, Search.Documents.Indexes.Models.SearchIndexerDataSourceConnection dataSource, bool? skipIndexerResetRequirementForCache = null, MatchConditions matchConditions = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dataSourceName, nameof(dataSourceName));
            Argument.AssertNotNull(dataSource, nameof(dataSource));

            using RequestContent content = dataSource.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = CreateOrUpdate(dataSourceName, content, skipIndexerResetRequirementForCache, matchConditions, context);
            return Response.FromValue(Search.Documents.Indexes.Models.SearchIndexerDataSourceConnection.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Creates a new datasource or updates a datasource if it already exists.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateOrUpdateAsync(string,Documents.Indexes.Models.SearchIndexerDataSourceConnection,bool?,MatchConditions,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dataSourceName"> The name of the datasource. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="skipIndexerResetRequirementForCache"> Ignores cache reset requirements. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dataSourceName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="dataSourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/DataSources.xml" path="doc/members/member[@name='CreateOrUpdateAsync(string,RequestContent,bool?,MatchConditions,RequestContext)']/*" />
        public virtual async Task<Response> CreateOrUpdateAsync(string dataSourceName, RequestContent content, bool? skipIndexerResetRequirementForCache = null, MatchConditions matchConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(dataSourceName, nameof(dataSourceName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("DataSources.CreateOrUpdate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateRequest(dataSourceName, content, skipIndexerResetRequirementForCache, matchConditions, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Creates a new datasource or updates a datasource if it already exists.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateOrUpdate(string,Documents.Indexes.Models.SearchIndexerDataSourceConnection,bool?,MatchConditions,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dataSourceName"> The name of the datasource. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="skipIndexerResetRequirementForCache"> Ignores cache reset requirements. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dataSourceName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="dataSourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/DataSources.xml" path="doc/members/member[@name='CreateOrUpdate(string,RequestContent,bool?,MatchConditions,RequestContext)']/*" />
        public virtual Response CreateOrUpdate(string dataSourceName, RequestContent content, bool? skipIndexerResetRequirementForCache = null, MatchConditions matchConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(dataSourceName, nameof(dataSourceName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("DataSources.CreateOrUpdate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateRequest(dataSourceName, content, skipIndexerResetRequirementForCache, matchConditions, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] Deletes a datasource.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dataSourceName"> The name of the datasource. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dataSourceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="dataSourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/DataSources.xml" path="doc/members/member[@name='DeleteAsync(string,MatchConditions,RequestContext)']/*" />
        public virtual async Task<Response> DeleteAsync(string dataSourceName, MatchConditions matchConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(dataSourceName, nameof(dataSourceName));

            using var scope = ClientDiagnostics.CreateScope("DataSources.Delete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRequest(dataSourceName, matchConditions, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] Deletes a datasource.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dataSourceName"> The name of the datasource. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dataSourceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="dataSourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/DataSources.xml" path="doc/members/member[@name='Delete(string,MatchConditions,RequestContext)']/*" />
        public virtual Response Delete(string dataSourceName, MatchConditions matchConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(dataSourceName, nameof(dataSourceName));

            using var scope = ClientDiagnostics.CreateScope("DataSources.Delete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRequest(dataSourceName, matchConditions, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Retrieves a datasource definition. </summary>
        /// <param name="dataSourceName"> The name of the datasource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dataSourceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="dataSourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/DataSources.xml" path="doc/members/member[@name='GetDataSourceAsync(string,CancellationToken)']/*" />
        public virtual async Task<Response<Search.Documents.Indexes.Models.SearchIndexerDataSourceConnection>> GetDataSourceAsync(string dataSourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dataSourceName, nameof(dataSourceName));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetDataSourceAsync(dataSourceName, context).ConfigureAwait(false);
            return Response.FromValue(Search.Documents.Indexes.Models.SearchIndexerDataSourceConnection.FromResponse(response), response);
        }

        /// <summary> Retrieves a datasource definition. </summary>
        /// <param name="dataSourceName"> The name of the datasource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dataSourceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="dataSourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/DataSources.xml" path="doc/members/member[@name='GetDataSource(string,CancellationToken)']/*" />
        public virtual Response<Search.Documents.Indexes.Models.SearchIndexerDataSourceConnection> GetDataSource(string dataSourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dataSourceName, nameof(dataSourceName));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetDataSource(dataSourceName, context);
            return Response.FromValue(Search.Documents.Indexes.Models.SearchIndexerDataSourceConnection.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Retrieves a datasource definition.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetDataSourceAsync(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dataSourceName"> The name of the datasource. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dataSourceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="dataSourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/DataSources.xml" path="doc/members/member[@name='GetDataSourceAsync(string,RequestContext)']/*" />
        public virtual async Task<Response> GetDataSourceAsync(string dataSourceName, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(dataSourceName, nameof(dataSourceName));

            using var scope = ClientDiagnostics.CreateScope("DataSources.GetDataSource");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetDataSourceRequest(dataSourceName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Retrieves a datasource definition.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetDataSource(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dataSourceName"> The name of the datasource. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dataSourceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="dataSourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/DataSources.xml" path="doc/members/member[@name='GetDataSource(string,RequestContext)']/*" />
        public virtual Response GetDataSource(string dataSourceName, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(dataSourceName, nameof(dataSourceName));

            using var scope = ClientDiagnostics.CreateScope("DataSources.GetDataSource");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetDataSourceRequest(dataSourceName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists all datasources available for a search service. </summary>
        /// <param name="select">
        /// Selects which top-level properties to retrieve.
        /// Specified as a comma-separated list of JSON property names,
        /// or '*' for all properties. The default is all properties.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/DataSources.xml" path="doc/members/member[@name='GetDataSourcesAsync(string,CancellationToken)']/*" />
        public virtual async Task<Response<ListDataSourcesResult>> GetDataSourcesAsync(string select = null, CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetDataSourcesAsync(select, context).ConfigureAwait(false);
            return Response.FromValue(ListDataSourcesResult.FromResponse(response), response);
        }

        /// <summary> Lists all datasources available for a search service. </summary>
        /// <param name="select">
        /// Selects which top-level properties to retrieve.
        /// Specified as a comma-separated list of JSON property names,
        /// or '*' for all properties. The default is all properties.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/DataSources.xml" path="doc/members/member[@name='GetDataSources(string,CancellationToken)']/*" />
        public virtual Response<ListDataSourcesResult> GetDataSources(string select = null, CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetDataSources(select, context);
            return Response.FromValue(ListDataSourcesResult.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Lists all datasources available for a search service.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetDataSourcesAsync(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="select">
        /// Selects which top-level properties to retrieve.
        /// Specified as a comma-separated list of JSON property names,
        /// or '*' for all properties. The default is all properties.
        /// </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/DataSources.xml" path="doc/members/member[@name='GetDataSourcesAsync(string,RequestContext)']/*" />
        public virtual async Task<Response> GetDataSourcesAsync(string select, RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("DataSources.GetDataSources");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetDataSourcesRequest(select, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Lists all datasources available for a search service.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetDataSources(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="select">
        /// Selects which top-level properties to retrieve.
        /// Specified as a comma-separated list of JSON property names,
        /// or '*' for all properties. The default is all properties.
        /// </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/DataSources.xml" path="doc/members/member[@name='GetDataSources(string,RequestContext)']/*" />
        public virtual Response GetDataSources(string select, RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("DataSources.GetDataSources");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetDataSourcesRequest(select, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a new datasource. </summary>
        /// <param name="dataSource"> The definition of the datasource to create. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dataSource"/> is null. </exception>
        /// <include file="Docs/DataSources.xml" path="doc/members/member[@name='CreateAsync(SearchIndexerDataSourceConnection,CancellationToken)']/*" />
        public virtual async Task<Response<Search.Documents.Indexes.Models.SearchIndexerDataSourceConnection>> CreateAsync(Search.Documents.Indexes.Models.SearchIndexerDataSourceConnection dataSource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(dataSource, nameof(dataSource));

            using RequestContent content = dataSource.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await CreateAsync(content, context).ConfigureAwait(false);
            return Response.FromValue(Search.Documents.Indexes.Models.SearchIndexerDataSourceConnection.FromResponse(response), response);
        }

        /// <summary> Creates a new datasource. </summary>
        /// <param name="dataSource"> The definition of the datasource to create. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dataSource"/> is null. </exception>
        /// <include file="Docs/DataSources.xml" path="doc/members/member[@name='Create(SearchIndexerDataSourceConnection,CancellationToken)']/*" />
        public virtual Response<Search.Documents.Indexes.Models.SearchIndexerDataSourceConnection> Create(Search.Documents.Indexes.Models.SearchIndexerDataSourceConnection dataSource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(dataSource, nameof(dataSource));

            using RequestContent content = dataSource.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = Create(content, context);
            return Response.FromValue(Search.Documents.Indexes.Models.SearchIndexerDataSourceConnection.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Creates a new datasource.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateAsync(Documents.Indexes.Models.SearchIndexerDataSourceConnection,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/DataSources.xml" path="doc/members/member[@name='CreateAsync(RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> CreateAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("DataSources.Create");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Creates a new datasource.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="Create(Documents.Indexes.Models.SearchIndexerDataSourceConnection,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/DataSources.xml" path="doc/members/member[@name='Create(RequestContent,RequestContext)']/*" />
        public virtual Response Create(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("DataSources.Create");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateCreateOrUpdateRequest(string dataSourceName, RequestContent content, bool? skipIndexerResetRequirementForCache, MatchConditions matchConditions, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200201);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/datasources('", false);
            uri.AppendPath(dataSourceName, true);
            uri.AppendPath("')", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (skipIndexerResetRequirementForCache != null)
            {
                uri.AppendQuery("ignoreResetRequirements", skipIndexerResetRequirementForCache.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Prefer", "return=representation");
            request.Headers.Add("Accept", "application/json");
            if (matchConditions != null)
            {
                request.Headers.Add(matchConditions);
            }
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteRequest(string dataSourceName, MatchConditions matchConditions, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204404);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/datasources('", false);
            uri.AppendPath(dataSourceName, true);
            uri.AppendPath("')", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (matchConditions != null)
            {
                request.Headers.Add(matchConditions);
            }
            return message;
        }

        internal HttpMessage CreateGetDataSourceRequest(string dataSourceName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/datasources('", false);
            uri.AppendPath(dataSourceName, true);
            uri.AppendPath("')", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetDataSourcesRequest(string select, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/datasources", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (select != null)
            {
                uri.AppendQuery("$select", select, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCreateRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier201);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/datasources", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200201;
        private static ResponseClassifier ResponseClassifier200201 => _responseClassifier200201 ??= new StatusCodeClassifier(stackalloc ushort[] { 200, 201 });
        private static ResponseClassifier _responseClassifier204404;
        private static ResponseClassifier ResponseClassifier204404 => _responseClassifier204404 ??= new StatusCodeClassifier(stackalloc ushort[] { 204, 404 });
        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier201;
        private static ResponseClassifier ResponseClassifier201 => _responseClassifier201 ??= new StatusCodeClassifier(stackalloc ushort[] { 201 });
    }
}
