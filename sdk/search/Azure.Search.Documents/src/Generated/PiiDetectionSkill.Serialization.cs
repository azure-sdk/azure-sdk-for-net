// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Search.Documents.Indexes.Models
{
    public partial class PiiDetectionSkill : IUtf8JsonSerializable, IJsonModel<Search.Documents.Indexes.Models.PiiDetectionSkill>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<Search.Documents.Indexes.Models.PiiDetectionSkill>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<Search.Documents.Indexes.Models.PiiDetectionSkill>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<Search.Documents.Indexes.Models.PiiDetectionSkill>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(Search.Documents.Indexes.Models.PiiDetectionSkill)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            if (Optional.IsDefined(DefaultLanguageCode))
            {
                writer.WritePropertyName("defaultLanguageCode"u8);
                writer.WriteStringValue(DefaultLanguageCode);
            }
            if (Optional.IsDefined(MinimumPrecision))
            {
                writer.WritePropertyName("minimumPrecision"u8);
                writer.WriteNumberValue(MinimumPrecision.Value);
            }
            if (Optional.IsDefined(MaskingMode))
            {
                writer.WritePropertyName("maskingMode"u8);
                writer.WriteStringValue(MaskingMode.Value.ToString());
            }
            if (Optional.IsDefined(Mask))
            {
                writer.WritePropertyName("maskingCharacter"u8);
                writer.WriteStringValue(Mask);
            }
            if (Optional.IsDefined(ModelVersion))
            {
                writer.WritePropertyName("modelVersion"u8);
                writer.WriteStringValue(ModelVersion);
            }
            if (Optional.IsCollectionDefined(PiiCategories))
            {
                writer.WritePropertyName("piiCategories"u8);
                writer.WriteStartArray();
                foreach (var item in PiiCategories)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Domain))
            {
                writer.WritePropertyName("domain"u8);
                writer.WriteStringValue(Domain);
            }
        }

        Search.Documents.Indexes.Models.PiiDetectionSkill IJsonModel<Search.Documents.Indexes.Models.PiiDetectionSkill>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<Search.Documents.Indexes.Models.PiiDetectionSkill>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(Search.Documents.Indexes.Models.PiiDetectionSkill)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return Search.Documents.Indexes.Models.PiiDetectionSkill.DeserializePiiDetectionSkill(document.RootElement, options);
        }

        internal static Search.Documents.Indexes.Models.PiiDetectionSkill DeserializePiiDetectionSkill(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string defaultLanguageCode = default;
            double? minimumPrecision = default;
            Search.Documents.Indexes.Models.PiiDetectionSkillMaskingMode? maskingMode = default;
            string maskingCharacter = default;
            string modelVersion = default;
            IList<string> piiCategories = default;
            string domain = default;
            string odataType = default;
            string name = default;
            string description = default;
            string context = default;
            IList<Search.Documents.InputFieldMappingEntry> inputs = default;
            IList<OutputFieldMappingEntry> outputs = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("defaultLanguageCode"u8))
                {
                    defaultLanguageCode = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("minimumPrecision"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    minimumPrecision = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("maskingMode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maskingMode = new Search.Documents.Indexes.Models.PiiDetectionSkillMaskingMode(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("maskingCharacter"u8))
                {
                    maskingCharacter = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("modelVersion"u8))
                {
                    modelVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("piiCategories"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    piiCategories = array;
                    continue;
                }
                if (property.NameEquals("domain"u8))
                {
                    domain = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("@odata.type"u8))
                {
                    odataType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("context"u8))
                {
                    context = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("inputs"u8))
                {
                    List<Search.Documents.InputFieldMappingEntry> array = new List<Search.Documents.InputFieldMappingEntry>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Search.Documents.InputFieldMappingEntry.DeserializeInputFieldMappingEntry(item, options));
                    }
                    inputs = array;
                    continue;
                }
                if (property.NameEquals("outputs"u8))
                {
                    List<OutputFieldMappingEntry> array = new List<OutputFieldMappingEntry>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(OutputFieldMappingEntry.DeserializeOutputFieldMappingEntry(item, options));
                    }
                    outputs = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new Search.Documents.Indexes.Models.PiiDetectionSkill(
                odataType,
                name,
                description,
                context,
                inputs,
                outputs,
                serializedAdditionalRawData,
                defaultLanguageCode,
                minimumPrecision,
                maskingMode,
                maskingCharacter,
                modelVersion,
                piiCategories ?? new ChangeTrackingList<string>(),
                domain);
        }

        BinaryData IPersistableModel<Search.Documents.Indexes.Models.PiiDetectionSkill>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<Search.Documents.Indexes.Models.PiiDetectionSkill>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(Search.Documents.Indexes.Models.PiiDetectionSkill)} does not support writing '{options.Format}' format.");
            }
        }

        Search.Documents.Indexes.Models.PiiDetectionSkill IPersistableModel<Search.Documents.Indexes.Models.PiiDetectionSkill>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<Search.Documents.Indexes.Models.PiiDetectionSkill>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return Search.Documents.Indexes.Models.PiiDetectionSkill.DeserializePiiDetectionSkill(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(Search.Documents.Indexes.Models.PiiDetectionSkill)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<Search.Documents.Indexes.Models.PiiDetectionSkill>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static new Search.Documents.Indexes.Models.PiiDetectionSkill FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content, ModelSerializationExtensions.JsonDocumentOptions);
            return Search.Documents.Indexes.Models.PiiDetectionSkill.DeserializePiiDetectionSkill(document.RootElement);
        }

        /// <summary> Convert into a <see cref="RequestContent"/>. </summary>
        internal override RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue<Search.Documents.Indexes.Models.PiiDetectionSkill>(this, ModelSerializationExtensions.WireOptions);
            return content;
        }
    }
}
