// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Search.Documents
{
    /// <summary> The language to use for a stemmer token filter. </summary>
    public readonly partial struct StemmerTokenFilterLanguage : IEquatable<StemmerTokenFilterLanguage>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="StemmerTokenFilterLanguage"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public StemmerTokenFilterLanguage(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ArabicValue = "arabic";
        private const string ArmenianValue = "armenian";
        private const string BasqueValue = "basque";
        private const string BrazilianValue = "brazilian";
        private const string BulgarianValue = "bulgarian";
        private const string CatalanValue = "catalan";
        private const string CzechValue = "czech";
        private const string DanishValue = "danish";
        private const string DutchValue = "dutch";
        private const string DutchKpValue = "dutchKp";
        private const string EnglishValue = "english";
        private const string LightEnglishValue = "lightEnglish";
        private const string MinimalEnglishValue = "minimalEnglish";
        private const string PossessiveEnglishValue = "possessiveEnglish";
        private const string Porter2Value = "porter2";
        private const string LovinsValue = "lovins";
        private const string FinnishValue = "finnish";
        private const string LightFinnishValue = "lightFinnish";
        private const string FrenchValue = "french";
        private const string LightFrenchValue = "lightFrench";
        private const string MinimalFrenchValue = "minimalFrench";
        private const string GalicianValue = "galician";
        private const string MinimalGalicianValue = "minimalGalician";
        private const string GermanValue = "german";
        private const string German2Value = "german2";
        private const string LightGermanValue = "lightGerman";
        private const string MinimalGermanValue = "minimalGerman";
        private const string GreekValue = "greek";
        private const string HindiValue = "hindi";
        private const string HungarianValue = "hungarian";
        private const string LightHungarianValue = "lightHungarian";
        private const string IndonesianValue = "indonesian";
        private const string IrishValue = "irish";
        private const string ItalianValue = "italian";
        private const string LightItalianValue = "lightItalian";
        private const string SoraniValue = "sorani";
        private const string LatvianValue = "latvian";
        private const string NorwegianValue = "norwegian";
        private const string LightNorwegianValue = "lightNorwegian";
        private const string MinimalNorwegianValue = "minimalNorwegian";
        private const string LightNynorskValue = "lightNynorsk";
        private const string MinimalNynorskValue = "minimalNynorsk";
        private const string PortugueseValue = "portuguese";
        private const string LightPortugueseValue = "lightPortuguese";
        private const string MinimalPortugueseValue = "minimalPortuguese";
        private const string PortugueseRslpValue = "portugueseRslp";
        private const string RomanianValue = "romanian";
        private const string RussianValue = "russian";
        private const string LightRussianValue = "lightRussian";
        private const string SpanishValue = "spanish";
        private const string LightSpanishValue = "lightSpanish";
        private const string SwedishValue = "swedish";
        private const string LightSwedishValue = "lightSwedish";
        private const string TurkishValue = "turkish";

        /// <summary> Selects the Lucene stemming tokenizer for Arabic. </summary>
        public static StemmerTokenFilterLanguage Arabic { get; } = new StemmerTokenFilterLanguage(ArabicValue);
        /// <summary> Selects the Lucene stemming tokenizer for Armenian. </summary>
        public static StemmerTokenFilterLanguage Armenian { get; } = new StemmerTokenFilterLanguage(ArmenianValue);
        /// <summary> Selects the Lucene stemming tokenizer for Basque. </summary>
        public static StemmerTokenFilterLanguage Basque { get; } = new StemmerTokenFilterLanguage(BasqueValue);
        /// <summary> Selects the Lucene stemming tokenizer for Portuguese (Brazil). </summary>
        public static StemmerTokenFilterLanguage Brazilian { get; } = new StemmerTokenFilterLanguage(BrazilianValue);
        /// <summary> Selects the Lucene stemming tokenizer for Bulgarian. </summary>
        public static StemmerTokenFilterLanguage Bulgarian { get; } = new StemmerTokenFilterLanguage(BulgarianValue);
        /// <summary> Selects the Lucene stemming tokenizer for Catalan. </summary>
        public static StemmerTokenFilterLanguage Catalan { get; } = new StemmerTokenFilterLanguage(CatalanValue);
        /// <summary> Selects the Lucene stemming tokenizer for Czech. </summary>
        public static StemmerTokenFilterLanguage Czech { get; } = new StemmerTokenFilterLanguage(CzechValue);
        /// <summary> Selects the Lucene stemming tokenizer for Danish. </summary>
        public static StemmerTokenFilterLanguage Danish { get; } = new StemmerTokenFilterLanguage(DanishValue);
        /// <summary> Selects the Lucene stemming tokenizer for Dutch. </summary>
        public static StemmerTokenFilterLanguage Dutch { get; } = new StemmerTokenFilterLanguage(DutchValue);
        /// <summary>
        /// Selects the Lucene stemming tokenizer for Dutch that uses the Kraaij-Pohlmann
        /// stemming algorithm.
        /// </summary>
        public static StemmerTokenFilterLanguage DutchKp { get; } = new StemmerTokenFilterLanguage(DutchKpValue);
        /// <summary> Selects the Lucene stemming tokenizer for English. </summary>
        public static StemmerTokenFilterLanguage English { get; } = new StemmerTokenFilterLanguage(EnglishValue);
        /// <summary> Selects the Lucene stemming tokenizer for English that does light stemming. </summary>
        public static StemmerTokenFilterLanguage LightEnglish { get; } = new StemmerTokenFilterLanguage(LightEnglishValue);
        /// <summary> Selects the Lucene stemming tokenizer for English that does minimal stemming. </summary>
        public static StemmerTokenFilterLanguage MinimalEnglish { get; } = new StemmerTokenFilterLanguage(MinimalEnglishValue);
        /// <summary>
        /// Selects the Lucene stemming tokenizer for English that removes trailing
        /// possessives from words.
        /// </summary>
        public static StemmerTokenFilterLanguage PossessiveEnglish { get; } = new StemmerTokenFilterLanguage(PossessiveEnglishValue);
        /// <summary>
        /// Selects the Lucene stemming tokenizer for English that uses the Porter2
        /// stemming algorithm.
        /// </summary>
        public static StemmerTokenFilterLanguage Porter2 { get; } = new StemmerTokenFilterLanguage(Porter2Value);
        /// <summary>
        /// Selects the Lucene stemming tokenizer for English that uses the Lovins stemming
        /// algorithm.
        /// </summary>
        public static StemmerTokenFilterLanguage Lovins { get; } = new StemmerTokenFilterLanguage(LovinsValue);
        /// <summary> Selects the Lucene stemming tokenizer for Finnish. </summary>
        public static StemmerTokenFilterLanguage Finnish { get; } = new StemmerTokenFilterLanguage(FinnishValue);
        /// <summary> Selects the Lucene stemming tokenizer for Finnish that does light stemming. </summary>
        public static StemmerTokenFilterLanguage LightFinnish { get; } = new StemmerTokenFilterLanguage(LightFinnishValue);
        /// <summary> Selects the Lucene stemming tokenizer for French. </summary>
        public static StemmerTokenFilterLanguage French { get; } = new StemmerTokenFilterLanguage(FrenchValue);
        /// <summary> Selects the Lucene stemming tokenizer for French that does light stemming. </summary>
        public static StemmerTokenFilterLanguage LightFrench { get; } = new StemmerTokenFilterLanguage(LightFrenchValue);
        /// <summary> Selects the Lucene stemming tokenizer for French that does minimal stemming. </summary>
        public static StemmerTokenFilterLanguage MinimalFrench { get; } = new StemmerTokenFilterLanguage(MinimalFrenchValue);
        /// <summary> Selects the Lucene stemming tokenizer for Galician. </summary>
        public static StemmerTokenFilterLanguage Galician { get; } = new StemmerTokenFilterLanguage(GalicianValue);
        /// <summary> Selects the Lucene stemming tokenizer for Galician that does minimal stemming. </summary>
        public static StemmerTokenFilterLanguage MinimalGalician { get; } = new StemmerTokenFilterLanguage(MinimalGalicianValue);
        /// <summary> Selects the Lucene stemming tokenizer for German. </summary>
        public static StemmerTokenFilterLanguage German { get; } = new StemmerTokenFilterLanguage(GermanValue);
        /// <summary> Selects the Lucene stemming tokenizer that uses the German variant algorithm. </summary>
        public static StemmerTokenFilterLanguage German2 { get; } = new StemmerTokenFilterLanguage(German2Value);
        /// <summary> Selects the Lucene stemming tokenizer for German that does light stemming. </summary>
        public static StemmerTokenFilterLanguage LightGerman { get; } = new StemmerTokenFilterLanguage(LightGermanValue);
        /// <summary> Selects the Lucene stemming tokenizer for German that does minimal stemming. </summary>
        public static StemmerTokenFilterLanguage MinimalGerman { get; } = new StemmerTokenFilterLanguage(MinimalGermanValue);
        /// <summary> Selects the Lucene stemming tokenizer for Greek. </summary>
        public static StemmerTokenFilterLanguage Greek { get; } = new StemmerTokenFilterLanguage(GreekValue);
        /// <summary> Selects the Lucene stemming tokenizer for Hindi. </summary>
        public static StemmerTokenFilterLanguage Hindi { get; } = new StemmerTokenFilterLanguage(HindiValue);
        /// <summary> Selects the Lucene stemming tokenizer for Hungarian. </summary>
        public static StemmerTokenFilterLanguage Hungarian { get; } = new StemmerTokenFilterLanguage(HungarianValue);
        /// <summary> Selects the Lucene stemming tokenizer for Hungarian that does light stemming. </summary>
        public static StemmerTokenFilterLanguage LightHungarian { get; } = new StemmerTokenFilterLanguage(LightHungarianValue);
        /// <summary> Selects the Lucene stemming tokenizer for Indonesian. </summary>
        public static StemmerTokenFilterLanguage Indonesian { get; } = new StemmerTokenFilterLanguage(IndonesianValue);
        /// <summary> Selects the Lucene stemming tokenizer for Irish. </summary>
        public static StemmerTokenFilterLanguage Irish { get; } = new StemmerTokenFilterLanguage(IrishValue);
        /// <summary> Selects the Lucene stemming tokenizer for Italian. </summary>
        public static StemmerTokenFilterLanguage Italian { get; } = new StemmerTokenFilterLanguage(ItalianValue);
        /// <summary> Selects the Lucene stemming tokenizer for Italian that does light stemming. </summary>
        public static StemmerTokenFilterLanguage LightItalian { get; } = new StemmerTokenFilterLanguage(LightItalianValue);
        /// <summary> Selects the Lucene stemming tokenizer for Sorani. </summary>
        public static StemmerTokenFilterLanguage Sorani { get; } = new StemmerTokenFilterLanguage(SoraniValue);
        /// <summary> Selects the Lucene stemming tokenizer for Latvian. </summary>
        public static StemmerTokenFilterLanguage Latvian { get; } = new StemmerTokenFilterLanguage(LatvianValue);
        /// <summary> Selects the Lucene stemming tokenizer for Norwegian (Bokmål). </summary>
        public static StemmerTokenFilterLanguage Norwegian { get; } = new StemmerTokenFilterLanguage(NorwegianValue);
        /// <summary>
        /// Selects the Lucene stemming tokenizer for Norwegian (Bokmål) that does light
        /// stemming.
        /// </summary>
        public static StemmerTokenFilterLanguage LightNorwegian { get; } = new StemmerTokenFilterLanguage(LightNorwegianValue);
        /// <summary>
        /// Selects the Lucene stemming tokenizer for Norwegian (Bokmål) that does minimal
        /// stemming.
        /// </summary>
        public static StemmerTokenFilterLanguage MinimalNorwegian { get; } = new StemmerTokenFilterLanguage(MinimalNorwegianValue);
        /// <summary>
        /// Selects the Lucene stemming tokenizer for Norwegian (Nynorsk) that does light
        /// stemming.
        /// </summary>
        public static StemmerTokenFilterLanguage LightNynorsk { get; } = new StemmerTokenFilterLanguage(LightNynorskValue);
        /// <summary>
        /// Selects the Lucene stemming tokenizer for Norwegian (Nynorsk) that does minimal
        /// stemming.
        /// </summary>
        public static StemmerTokenFilterLanguage MinimalNynorsk { get; } = new StemmerTokenFilterLanguage(MinimalNynorskValue);
        /// <summary> Selects the Lucene stemming tokenizer for Portuguese. </summary>
        public static StemmerTokenFilterLanguage Portuguese { get; } = new StemmerTokenFilterLanguage(PortugueseValue);
        /// <summary> Selects the Lucene stemming tokenizer for Portuguese that does light stemming. </summary>
        public static StemmerTokenFilterLanguage LightPortuguese { get; } = new StemmerTokenFilterLanguage(LightPortugueseValue);
        /// <summary> Selects the Lucene stemming tokenizer for Portuguese that does minimal stemming. </summary>
        public static StemmerTokenFilterLanguage MinimalPortuguese { get; } = new StemmerTokenFilterLanguage(MinimalPortugueseValue);
        /// <summary>
        /// Selects the Lucene stemming tokenizer for Portuguese that uses the RSLP
        /// stemming algorithm.
        /// </summary>
        public static StemmerTokenFilterLanguage PortugueseRslp { get; } = new StemmerTokenFilterLanguage(PortugueseRslpValue);
        /// <summary> Selects the Lucene stemming tokenizer for Romanian. </summary>
        public static StemmerTokenFilterLanguage Romanian { get; } = new StemmerTokenFilterLanguage(RomanianValue);
        /// <summary> Selects the Lucene stemming tokenizer for Russian. </summary>
        public static StemmerTokenFilterLanguage Russian { get; } = new StemmerTokenFilterLanguage(RussianValue);
        /// <summary> Selects the Lucene stemming tokenizer for Russian that does light stemming. </summary>
        public static StemmerTokenFilterLanguage LightRussian { get; } = new StemmerTokenFilterLanguage(LightRussianValue);
        /// <summary> Selects the Lucene stemming tokenizer for Spanish. </summary>
        public static StemmerTokenFilterLanguage Spanish { get; } = new StemmerTokenFilterLanguage(SpanishValue);
        /// <summary> Selects the Lucene stemming tokenizer for Spanish that does light stemming. </summary>
        public static StemmerTokenFilterLanguage LightSpanish { get; } = new StemmerTokenFilterLanguage(LightSpanishValue);
        /// <summary> Selects the Lucene stemming tokenizer for Swedish. </summary>
        public static StemmerTokenFilterLanguage Swedish { get; } = new StemmerTokenFilterLanguage(SwedishValue);
        /// <summary> Selects the Lucene stemming tokenizer for Swedish that does light stemming. </summary>
        public static StemmerTokenFilterLanguage LightSwedish { get; } = new StemmerTokenFilterLanguage(LightSwedishValue);
        /// <summary> Selects the Lucene stemming tokenizer for Turkish. </summary>
        public static StemmerTokenFilterLanguage Turkish { get; } = new StemmerTokenFilterLanguage(TurkishValue);
        /// <summary> Determines if two <see cref="StemmerTokenFilterLanguage"/> values are the same. </summary>
        public static bool operator ==(StemmerTokenFilterLanguage left, StemmerTokenFilterLanguage right) => left.Equals(right);
        /// <summary> Determines if two <see cref="StemmerTokenFilterLanguage"/> values are not the same. </summary>
        public static bool operator !=(StemmerTokenFilterLanguage left, StemmerTokenFilterLanguage right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="StemmerTokenFilterLanguage"/>. </summary>
        public static implicit operator StemmerTokenFilterLanguage(string value) => new StemmerTokenFilterLanguage(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is StemmerTokenFilterLanguage other && Equals(other);
        /// <inheritdoc />
        public bool Equals(StemmerTokenFilterLanguage other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
