// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Search.Documents
{
    /// <summary> Represents classes of characters on which a token filter can operate. </summary>
    public readonly partial struct TokenCharacterKind : IEquatable<TokenCharacterKind>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="TokenCharacterKind"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TokenCharacterKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string LetterValue = "letter";
        private const string DigitValue = "digit";
        private const string WhitespaceValue = "whitespace";
        private const string PunctuationValue = "punctuation";
        private const string SymbolValue = "symbol";

        /// <summary> Keeps letters in tokens. </summary>
        public static TokenCharacterKind Letter { get; } = new TokenCharacterKind(LetterValue);
        /// <summary> Keeps digits in tokens. </summary>
        public static TokenCharacterKind Digit { get; } = new TokenCharacterKind(DigitValue);
        /// <summary> Keeps whitespace in tokens. </summary>
        public static TokenCharacterKind Whitespace { get; } = new TokenCharacterKind(WhitespaceValue);
        /// <summary> Keeps punctuation in tokens. </summary>
        public static TokenCharacterKind Punctuation { get; } = new TokenCharacterKind(PunctuationValue);
        /// <summary> Keeps symbols in tokens. </summary>
        public static TokenCharacterKind Symbol { get; } = new TokenCharacterKind(SymbolValue);
        /// <summary> Determines if two <see cref="TokenCharacterKind"/> values are the same. </summary>
        public static bool operator ==(TokenCharacterKind left, TokenCharacterKind right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TokenCharacterKind"/> values are not the same. </summary>
        public static bool operator !=(TokenCharacterKind left, TokenCharacterKind right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="TokenCharacterKind"/>. </summary>
        public static implicit operator TokenCharacterKind(string value) => new TokenCharacterKind(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TokenCharacterKind other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TokenCharacterKind other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
