// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Search.Documents.Samples
{
    public partial class Samples_SynonymMaps
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SynonymMaps_CreateOrUpdate_SearchServiceCreateOrUpdateSynonymMap()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SynonymMaps client = new SearchClient(endpoint, credential).GetSynonymMapsClient();

            using RequestContent content = RequestContent.Create(new Dictionary<string, object>
            {
                ["name"] = "mysynonymmap",
                ["format"] = "solr",
                ["synonyms"] = "United States, United States of America, USA\nWashington, Wash. => WA",
                ["encryptionKey"] = new
                {
                    keyVaultKeyName = "myUserManagedEncryptionKey-createdinAzureKeyVault",
                    keyVaultKeyVersion = "myKeyVersion-32charAlphaNumericString",
                    keyVaultUri = "https://myKeyVault.vault.azure.net",
                    accessCredentials = new
                    {
                        applicationId = "00000000-0000-0000-0000-000000000000",
                        applicationSecret = "<applicationSecret>",
                    },
                },
                ["@odata.etag"] = "0x1234568AE7E58A1"
            });
            Response response = client.CreateOrUpdate("mysynonymmap", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("format").ToString());
            Console.WriteLine(result.GetProperty("synonyms").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SynonymMaps_CreateOrUpdate_SearchServiceCreateOrUpdateSynonymMap_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SynonymMaps client = new SearchClient(endpoint, credential).GetSynonymMapsClient();

            using RequestContent content = RequestContent.Create(new Dictionary<string, object>
            {
                ["name"] = "mysynonymmap",
                ["format"] = "solr",
                ["synonyms"] = "United States, United States of America, USA\nWashington, Wash. => WA",
                ["encryptionKey"] = new
                {
                    keyVaultKeyName = "myUserManagedEncryptionKey-createdinAzureKeyVault",
                    keyVaultKeyVersion = "myKeyVersion-32charAlphaNumericString",
                    keyVaultUri = "https://myKeyVault.vault.azure.net",
                    accessCredentials = new
                    {
                        applicationId = "00000000-0000-0000-0000-000000000000",
                        applicationSecret = "<applicationSecret>",
                    },
                },
                ["@odata.etag"] = "0x1234568AE7E58A1"
            });
            Response response = await client.CreateOrUpdateAsync("mysynonymmap", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("format").ToString());
            Console.WriteLine(result.GetProperty("synonyms").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SynonymMaps_CreateOrUpdate_SearchServiceCreateOrUpdateSynonymMap_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SynonymMaps client = new SearchClient(endpoint, credential).GetSynonymMapsClient();

            SynonymMap synonymMap = new SynonymMap("mysynonymmap", "United States, United States of America, USA\nWashington, Wash. => WA")
            {
                EncryptionKey = new SearchResourceEncryptionKey("myUserManagedEncryptionKey-createdinAzureKeyVault", "https://myKeyVault.vault.azure.net")
                {
                    KeyVersion = "myKeyVersion-32charAlphaNumericString",
                    AccessCredentials = new AzureActiveDirectoryApplicationCredentials("00000000-0000-0000-0000-000000000000")
                    {
                        ApplicationSecret = "<applicationSecret>",
                    },
                },
                ETag = "0x1234568AE7E58A1",
            };
            Response<SynonymMap> response = client.CreateOrUpdate("mysynonymmap", synonymMap);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SynonymMaps_CreateOrUpdate_SearchServiceCreateOrUpdateSynonymMap_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SynonymMaps client = new SearchClient(endpoint, credential).GetSynonymMapsClient();

            SynonymMap synonymMap = new SynonymMap("mysynonymmap", "United States, United States of America, USA\nWashington, Wash. => WA")
            {
                EncryptionKey = new SearchResourceEncryptionKey("myUserManagedEncryptionKey-createdinAzureKeyVault", "https://myKeyVault.vault.azure.net")
                {
                    KeyVersion = "myKeyVersion-32charAlphaNumericString",
                    AccessCredentials = new AzureActiveDirectoryApplicationCredentials("00000000-0000-0000-0000-000000000000")
                    {
                        ApplicationSecret = "<applicationSecret>",
                    },
                },
                ETag = "0x1234568AE7E58A1",
            };
            Response<SynonymMap> response = await client.CreateOrUpdateAsync("mysynonymmap", synonymMap);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SynonymMaps_Delete_SearchServiceDeleteSynonymMap()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SynonymMaps client = new SearchClient(endpoint, credential).GetSynonymMapsClient();

            Response response = client.Delete("tempsynonymmap");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SynonymMaps_Delete_SearchServiceDeleteSynonymMap_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SynonymMaps client = new SearchClient(endpoint, credential).GetSynonymMapsClient();

            Response response = await client.DeleteAsync("tempsynonymmap");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SynonymMaps_GetSynonymMap_SearchServiceGetSynonymMap()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SynonymMaps client = new SearchClient(endpoint, credential).GetSynonymMapsClient();

            Response response = client.GetSynonymMap("mysynonymmap", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("format").ToString());
            Console.WriteLine(result.GetProperty("synonyms").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SynonymMaps_GetSynonymMap_SearchServiceGetSynonymMap_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SynonymMaps client = new SearchClient(endpoint, credential).GetSynonymMapsClient();

            Response response = await client.GetSynonymMapAsync("mysynonymmap", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("format").ToString());
            Console.WriteLine(result.GetProperty("synonyms").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SynonymMaps_GetSynonymMap_SearchServiceGetSynonymMap_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SynonymMaps client = new SearchClient(endpoint, credential).GetSynonymMapsClient();

            Response<SynonymMap> response = client.GetSynonymMap("mysynonymmap");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SynonymMaps_GetSynonymMap_SearchServiceGetSynonymMap_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SynonymMaps client = new SearchClient(endpoint, credential).GetSynonymMapsClient();

            Response<SynonymMap> response = await client.GetSynonymMapAsync("mysynonymmap");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SynonymMaps_GetSynonymMaps_SearchServiceListSynonymMaps()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SynonymMaps client = new SearchClient(endpoint, credential).GetSynonymMapsClient();

            Response response = client.GetSynonymMaps(null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("format").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("synonyms").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SynonymMaps_GetSynonymMaps_SearchServiceListSynonymMaps_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SynonymMaps client = new SearchClient(endpoint, credential).GetSynonymMapsClient();

            Response response = await client.GetSynonymMapsAsync(null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("format").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("synonyms").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SynonymMaps_GetSynonymMaps_SearchServiceListSynonymMaps_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SynonymMaps client = new SearchClient(endpoint, credential).GetSynonymMapsClient();

            Response<ListSynonymMapsResult> response = client.GetSynonymMaps();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SynonymMaps_GetSynonymMaps_SearchServiceListSynonymMaps_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SynonymMaps client = new SearchClient(endpoint, credential).GetSynonymMapsClient();

            Response<ListSynonymMapsResult> response = await client.GetSynonymMapsAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SynonymMaps_Create_SearchServiceCreateSynonymMap()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SynonymMaps client = new SearchClient(endpoint, credential).GetSynonymMapsClient();

            using RequestContent content = RequestContent.Create(new Dictionary<string, object>
            {
                ["name"] = "tempsynonymmap",
                ["format"] = "solr",
                ["synonyms"] = "United States, United States of America, USA\nWashington, Wash. => WA",
                ["encryptionKey"] = new
                {
                    keyVaultKeyName = "myUserManagedEncryptionKey-createdinAzureKeyVault",
                    keyVaultKeyVersion = "myKeyVersion-32charAlphaNumericString",
                    keyVaultUri = "https://myKeyVault.vault.azure.net",
                    accessCredentials = new
                    {
                        applicationId = "00000000-0000-0000-0000-000000000000",
                        applicationSecret = "<applicationSecret>",
                    },
                },
                ["@odata.etag"] = "0x1234568AE7E58A1"
            });
            Response response = client.Create(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("format").ToString());
            Console.WriteLine(result.GetProperty("synonyms").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SynonymMaps_Create_SearchServiceCreateSynonymMap_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SynonymMaps client = new SearchClient(endpoint, credential).GetSynonymMapsClient();

            using RequestContent content = RequestContent.Create(new Dictionary<string, object>
            {
                ["name"] = "tempsynonymmap",
                ["format"] = "solr",
                ["synonyms"] = "United States, United States of America, USA\nWashington, Wash. => WA",
                ["encryptionKey"] = new
                {
                    keyVaultKeyName = "myUserManagedEncryptionKey-createdinAzureKeyVault",
                    keyVaultKeyVersion = "myKeyVersion-32charAlphaNumericString",
                    keyVaultUri = "https://myKeyVault.vault.azure.net",
                    accessCredentials = new
                    {
                        applicationId = "00000000-0000-0000-0000-000000000000",
                        applicationSecret = "<applicationSecret>",
                    },
                },
                ["@odata.etag"] = "0x1234568AE7E58A1"
            });
            Response response = await client.CreateAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("format").ToString());
            Console.WriteLine(result.GetProperty("synonyms").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SynonymMaps_Create_SearchServiceCreateSynonymMap_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SynonymMaps client = new SearchClient(endpoint, credential).GetSynonymMapsClient();

            SynonymMap synonymMap = new SynonymMap("tempsynonymmap", "United States, United States of America, USA\nWashington, Wash. => WA")
            {
                EncryptionKey = new SearchResourceEncryptionKey("myUserManagedEncryptionKey-createdinAzureKeyVault", "https://myKeyVault.vault.azure.net")
                {
                    KeyVersion = "myKeyVersion-32charAlphaNumericString",
                    AccessCredentials = new AzureActiveDirectoryApplicationCredentials("00000000-0000-0000-0000-000000000000")
                    {
                        ApplicationSecret = "<applicationSecret>",
                    },
                },
                ETag = "0x1234568AE7E58A1",
            };
            Response<SynonymMap> response = client.Create(synonymMap);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SynonymMaps_Create_SearchServiceCreateSynonymMap_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SynonymMaps client = new SearchClient(endpoint, credential).GetSynonymMapsClient();

            SynonymMap synonymMap = new SynonymMap("tempsynonymmap", "United States, United States of America, USA\nWashington, Wash. => WA")
            {
                EncryptionKey = new SearchResourceEncryptionKey("myUserManagedEncryptionKey-createdinAzureKeyVault", "https://myKeyVault.vault.azure.net")
                {
                    KeyVersion = "myKeyVersion-32charAlphaNumericString",
                    AccessCredentials = new AzureActiveDirectoryApplicationCredentials("00000000-0000-0000-0000-000000000000")
                    {
                        ApplicationSecret = "<applicationSecret>",
                    },
                },
                ETag = "0x1234568AE7E58A1",
            };
            Response<SynonymMap> response = await client.CreateAsync(synonymMap);
        }
    }
}
