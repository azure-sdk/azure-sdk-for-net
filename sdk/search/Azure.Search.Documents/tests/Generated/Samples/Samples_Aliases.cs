// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Search.Documents.Samples
{
    public partial class Samples_Aliases
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Aliases_Create_SearchServiceCreateAlias()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Aliases client = new SearchClient(endpoint, credential).GetAliasesClient();

            using RequestContent content = RequestContent.Create(new Dictionary<string, object>
            {
                ["name"] = "tempalias",
                ["indexes"] = new object[]
            {
"preview-test"
            },
                ["@odata.etag"] = "0x1234568AE7E58A1"
            });
            Response response = client.Create(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("indexes")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Aliases_Create_SearchServiceCreateAlias_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Aliases client = new SearchClient(endpoint, credential).GetAliasesClient();

            using RequestContent content = RequestContent.Create(new Dictionary<string, object>
            {
                ["name"] = "tempalias",
                ["indexes"] = new object[]
            {
"preview-test"
            },
                ["@odata.etag"] = "0x1234568AE7E58A1"
            });
            Response response = await client.CreateAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("indexes")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Aliases_Create_SearchServiceCreateAlias_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Aliases client = new SearchClient(endpoint, credential).GetAliasesClient();

            SearchAlias @alias = new SearchAlias("tempalias", new string[] { "preview-test" })
            {
                ETag = "0x1234568AE7E58A1",
            };
            Response<SearchAlias> response = client.Create(@alias);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Aliases_Create_SearchServiceCreateAlias_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Aliases client = new SearchClient(endpoint, credential).GetAliasesClient();

            SearchAlias @alias = new SearchAlias("tempalias", new string[] { "preview-test" })
            {
                ETag = "0x1234568AE7E58A1",
            };
            Response<SearchAlias> response = await client.CreateAsync(@alias);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Aliases_CreateOrUpdate_SearchServiceCreateOrUpdateAlias()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Aliases client = new SearchClient(endpoint, credential).GetAliasesClient();

            using RequestContent content = RequestContent.Create(new Dictionary<string, object>
            {
                ["name"] = "myalias",
                ["indexes"] = new object[]
            {
"preview-test"
            },
                ["@odata.etag"] = "0x1234568AE7E58A1"
            });
            Response response = client.CreateOrUpdate("myalias", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("indexes")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Aliases_CreateOrUpdate_SearchServiceCreateOrUpdateAlias_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Aliases client = new SearchClient(endpoint, credential).GetAliasesClient();

            using RequestContent content = RequestContent.Create(new Dictionary<string, object>
            {
                ["name"] = "myalias",
                ["indexes"] = new object[]
            {
"preview-test"
            },
                ["@odata.etag"] = "0x1234568AE7E58A1"
            });
            Response response = await client.CreateOrUpdateAsync("myalias", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("indexes")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Aliases_CreateOrUpdate_SearchServiceCreateOrUpdateAlias_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Aliases client = new SearchClient(endpoint, credential).GetAliasesClient();

            SearchAlias @alias = new SearchAlias("myalias", new string[] { "preview-test" })
            {
                ETag = "0x1234568AE7E58A1",
            };
            Response<SearchAlias> response = client.CreateOrUpdate("myalias", @alias);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Aliases_CreateOrUpdate_SearchServiceCreateOrUpdateAlias_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Aliases client = new SearchClient(endpoint, credential).GetAliasesClient();

            SearchAlias @alias = new SearchAlias("myalias", new string[] { "preview-test" })
            {
                ETag = "0x1234568AE7E58A1",
            };
            Response<SearchAlias> response = await client.CreateOrUpdateAsync("myalias", @alias);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Aliases_Delete_SearchServiceDeleteAlias()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Aliases client = new SearchClient(endpoint, credential).GetAliasesClient();

            Response response = client.Delete("tempalias");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Aliases_Delete_SearchServiceDeleteAlias_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Aliases client = new SearchClient(endpoint, credential).GetAliasesClient();

            Response response = await client.DeleteAsync("tempalias");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Aliases_GetAlias_SearchServiceGetAlias()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Aliases client = new SearchClient(endpoint, credential).GetAliasesClient();

            Response response = client.GetAlias("myalias", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("indexes")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Aliases_GetAlias_SearchServiceGetAlias_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Aliases client = new SearchClient(endpoint, credential).GetAliasesClient();

            Response response = await client.GetAliasAsync("myalias", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("indexes")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Aliases_GetAlias_SearchServiceGetAlias_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Aliases client = new SearchClient(endpoint, credential).GetAliasesClient();

            Response<SearchAlias> response = client.GetAlias("myalias");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Aliases_GetAlias_SearchServiceGetAlias_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Aliases client = new SearchClient(endpoint, credential).GetAliasesClient();

            Response<SearchAlias> response = await client.GetAliasAsync("myalias");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Aliases_GetAliases_SearchServiceListAliases()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Aliases client = new SearchClient(endpoint, credential).GetAliasesClient();

            foreach (BinaryData item in client.GetAliases(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("indexes")[0].ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Aliases_GetAliases_SearchServiceListAliases_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Aliases client = new SearchClient(endpoint, credential).GetAliasesClient();

            await foreach (BinaryData item in client.GetAliasesAsync(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("indexes")[0].ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Aliases_GetAliases_SearchServiceListAliases_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Aliases client = new SearchClient(endpoint, credential).GetAliasesClient();

            foreach (SearchAlias item in client.GetAliases())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Aliases_GetAliases_SearchServiceListAliases_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Aliases client = new SearchClient(endpoint, credential).GetAliasesClient();

            await foreach (SearchAlias item in client.GetAliasesAsync())
            {
            }
        }
    }
}
