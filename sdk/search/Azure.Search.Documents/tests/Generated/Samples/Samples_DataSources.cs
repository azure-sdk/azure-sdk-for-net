// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.Search.Documents.Indexes.Models;
using NUnit.Framework;

namespace Azure.Search.Documents.Samples
{
    public partial class Samples_DataSources
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DataSources_CreateOrUpdate_SearchServiceCreateOrUpdateDataSource()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DataSources client = new SearchClient(endpoint, credential).GetDataSourcesClient();

            using RequestContent content = RequestContent.Create(new Dictionary<string, object>
            {
                ["name"] = "tempdatasource",
                ["description"] = "My Azure Blob data source.",
                ["type"] = "azureblob",
                ["credentials"] = new
                {
                    connectionString = "DefaultEndpointsProtocol=https;AccountName=myAccountName;AccountKey=myAccountKey;EndpointSuffix=core.windows.net ",
                },
                ["container"] = new
                {
                    name = "doc-extraction-skillset",
                    query = "E2E_Dsat",
                },
                ["@odata.etag"] = "0x1234568AE7E58A1",
                ["encryptionKey"] = new
                {
                    keyVaultKeyName = "myUserManagedEncryptionKey-createdinAzureKeyVault",
                    keyVaultKeyVersion = "myKeyVersion-32charAlphaNumericString",
                    keyVaultUri = "https://myKeyVault.vault.azure.net",
                    accessCredentials = new
                    {
                        applicationId = "00000000-0000-0000-0000-000000000000",
                        applicationSecret = "<applicationSecret>",
                    },
                }
            });
            Response response = client.CreateOrUpdate("tempdatasource", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("credentials").ToString());
            Console.WriteLine(result.GetProperty("container").GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DataSources_CreateOrUpdate_SearchServiceCreateOrUpdateDataSource_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DataSources client = new SearchClient(endpoint, credential).GetDataSourcesClient();

            using RequestContent content = RequestContent.Create(new Dictionary<string, object>
            {
                ["name"] = "tempdatasource",
                ["description"] = "My Azure Blob data source.",
                ["type"] = "azureblob",
                ["credentials"] = new
                {
                    connectionString = "DefaultEndpointsProtocol=https;AccountName=myAccountName;AccountKey=myAccountKey;EndpointSuffix=core.windows.net ",
                },
                ["container"] = new
                {
                    name = "doc-extraction-skillset",
                    query = "E2E_Dsat",
                },
                ["@odata.etag"] = "0x1234568AE7E58A1",
                ["encryptionKey"] = new
                {
                    keyVaultKeyName = "myUserManagedEncryptionKey-createdinAzureKeyVault",
                    keyVaultKeyVersion = "myKeyVersion-32charAlphaNumericString",
                    keyVaultUri = "https://myKeyVault.vault.azure.net",
                    accessCredentials = new
                    {
                        applicationId = "00000000-0000-0000-0000-000000000000",
                        applicationSecret = "<applicationSecret>",
                    },
                }
            });
            Response response = await client.CreateOrUpdateAsync("tempdatasource", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("credentials").ToString());
            Console.WriteLine(result.GetProperty("container").GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DataSources_CreateOrUpdate_SearchServiceCreateOrUpdateDataSource_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DataSources client = new SearchClient(endpoint, credential).GetDataSourcesClient();

            Search.Documents.Indexes.Models.SearchIndexerDataSourceConnection dataSource = new Search.Documents.Indexes.Models.SearchIndexerDataSourceConnection("tempdatasource", SearchIndexerDataSourceType.AzureBlob, new DataSourceCredentials
            {
                ConnectionString = "DefaultEndpointsProtocol=https;AccountName=myAccountName;AccountKey=myAccountKey;EndpointSuffix=core.windows.net ",
            }, new SearchIndexerDataContainer("doc-extraction-skillset")
            {
                Query = "E2E_Dsat",
            })
            {
                Description = "My Azure Blob data source.",
                EncryptionKey = new SearchResourceEncryptionKey("myUserManagedEncryptionKey-createdinAzureKeyVault", "https://myKeyVault.vault.azure.net")
                {
                    KeyVersion = "myKeyVersion-32charAlphaNumericString",
                    AccessCredentials = new AzureActiveDirectoryApplicationCredentials("00000000-0000-0000-0000-000000000000")
                    {
                        ApplicationSecret = "<applicationSecret>",
                    },
                },
            };
            Response<Search.Documents.Indexes.Models.SearchIndexerDataSourceConnection> response = client.CreateOrUpdate("tempdatasource", dataSource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DataSources_CreateOrUpdate_SearchServiceCreateOrUpdateDataSource_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DataSources client = new SearchClient(endpoint, credential).GetDataSourcesClient();

            Search.Documents.Indexes.Models.SearchIndexerDataSourceConnection dataSource = new Search.Documents.Indexes.Models.SearchIndexerDataSourceConnection("tempdatasource", SearchIndexerDataSourceType.AzureBlob, new DataSourceCredentials
            {
                ConnectionString = "DefaultEndpointsProtocol=https;AccountName=myAccountName;AccountKey=myAccountKey;EndpointSuffix=core.windows.net ",
            }, new SearchIndexerDataContainer("doc-extraction-skillset")
            {
                Query = "E2E_Dsat",
            })
            {
                Description = "My Azure Blob data source.",
                EncryptionKey = new SearchResourceEncryptionKey("myUserManagedEncryptionKey-createdinAzureKeyVault", "https://myKeyVault.vault.azure.net")
                {
                    KeyVersion = "myKeyVersion-32charAlphaNumericString",
                    AccessCredentials = new AzureActiveDirectoryApplicationCredentials("00000000-0000-0000-0000-000000000000")
                    {
                        ApplicationSecret = "<applicationSecret>",
                    },
                },
            };
            Response<Search.Documents.Indexes.Models.SearchIndexerDataSourceConnection> response = await client.CreateOrUpdateAsync("tempdatasource", dataSource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DataSources_Delete_SearchServiceDeleteDataSource()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DataSources client = new SearchClient(endpoint, credential).GetDataSourcesClient();

            Response response = client.Delete("tempdatasource");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DataSources_Delete_SearchServiceDeleteDataSource_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DataSources client = new SearchClient(endpoint, credential).GetDataSourcesClient();

            Response response = await client.DeleteAsync("tempdatasource");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DataSources_GetDataSource_SearchServiceGetDataSource()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DataSources client = new SearchClient(endpoint, credential).GetDataSourcesClient();

            Response response = client.GetDataSource("mydocdbdatasource", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("credentials").ToString());
            Console.WriteLine(result.GetProperty("container").GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DataSources_GetDataSource_SearchServiceGetDataSource_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DataSources client = new SearchClient(endpoint, credential).GetDataSourcesClient();

            Response response = await client.GetDataSourceAsync("mydocdbdatasource", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("credentials").ToString());
            Console.WriteLine(result.GetProperty("container").GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DataSources_GetDataSource_SearchServiceGetDataSource_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DataSources client = new SearchClient(endpoint, credential).GetDataSourcesClient();

            Response<Search.Documents.Indexes.Models.SearchIndexerDataSourceConnection> response = client.GetDataSource("mydocdbdatasource");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DataSources_GetDataSource_SearchServiceGetDataSource_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DataSources client = new SearchClient(endpoint, credential).GetDataSourcesClient();

            Response<Search.Documents.Indexes.Models.SearchIndexerDataSourceConnection> response = await client.GetDataSourceAsync("mydocdbdatasource");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DataSources_GetDataSources_SearchServiceListDataSources()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DataSources client = new SearchClient(endpoint, credential).GetDataSourcesClient();

            Response response = client.GetDataSources(null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("credentials").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("container").GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DataSources_GetDataSources_SearchServiceListDataSources_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DataSources client = new SearchClient(endpoint, credential).GetDataSourcesClient();

            Response response = await client.GetDataSourcesAsync(null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("credentials").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("container").GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DataSources_GetDataSources_SearchServiceListDataSources_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DataSources client = new SearchClient(endpoint, credential).GetDataSourcesClient();

            Response<ListDataSourcesResult> response = client.GetDataSources();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DataSources_GetDataSources_SearchServiceListDataSources_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DataSources client = new SearchClient(endpoint, credential).GetDataSourcesClient();

            Response<ListDataSourcesResult> response = await client.GetDataSourcesAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DataSources_Create_SearchServiceCreateDataSource()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DataSources client = new SearchClient(endpoint, credential).GetDataSourcesClient();

            using RequestContent content = RequestContent.Create(new Dictionary<string, object>
            {
                ["name"] = "tempdatasource",
                ["description"] = "My Azure Blob data source.",
                ["type"] = "azureblob",
                ["credentials"] = new
                {
                    connectionString = "DefaultEndpointsProtocol=https;AccountName=myAccountName;AccountKey=myAccountKey;EndpointSuffix=core.windows.net ",
                },
                ["container"] = new
                {
                    name = "doc-extraction-skillset",
                    query = "E2E_Dsat",
                },
                ["@odata.etag"] = "0x1234568AE7E58A1",
                ["encryptionKey"] = new
                {
                    keyVaultKeyName = "myUserManagedEncryptionKey-createdinAzureKeyVault",
                    keyVaultKeyVersion = "myKeyVersion-32charAlphaNumericString",
                    keyVaultUri = "https://myKeyVault.vault.azure.net",
                    accessCredentials = new
                    {
                        applicationId = "00000000-0000-0000-0000-000000000000",
                        applicationSecret = "<applicationSecret>",
                    },
                }
            });
            Response response = client.Create(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("credentials").ToString());
            Console.WriteLine(result.GetProperty("container").GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DataSources_Create_SearchServiceCreateDataSource_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DataSources client = new SearchClient(endpoint, credential).GetDataSourcesClient();

            using RequestContent content = RequestContent.Create(new Dictionary<string, object>
            {
                ["name"] = "tempdatasource",
                ["description"] = "My Azure Blob data source.",
                ["type"] = "azureblob",
                ["credentials"] = new
                {
                    connectionString = "DefaultEndpointsProtocol=https;AccountName=myAccountName;AccountKey=myAccountKey;EndpointSuffix=core.windows.net ",
                },
                ["container"] = new
                {
                    name = "doc-extraction-skillset",
                    query = "E2E_Dsat",
                },
                ["@odata.etag"] = "0x1234568AE7E58A1",
                ["encryptionKey"] = new
                {
                    keyVaultKeyName = "myUserManagedEncryptionKey-createdinAzureKeyVault",
                    keyVaultKeyVersion = "myKeyVersion-32charAlphaNumericString",
                    keyVaultUri = "https://myKeyVault.vault.azure.net",
                    accessCredentials = new
                    {
                        applicationId = "00000000-0000-0000-0000-000000000000",
                        applicationSecret = "<applicationSecret>",
                    },
                }
            });
            Response response = await client.CreateAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("credentials").ToString());
            Console.WriteLine(result.GetProperty("container").GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DataSources_Create_SearchServiceCreateDataSource_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DataSources client = new SearchClient(endpoint, credential).GetDataSourcesClient();

            Search.Documents.Indexes.Models.SearchIndexerDataSourceConnection dataSource = new Search.Documents.Indexes.Models.SearchIndexerDataSourceConnection("tempdatasource", SearchIndexerDataSourceType.AzureBlob, new DataSourceCredentials
            {
                ConnectionString = "DefaultEndpointsProtocol=https;AccountName=myAccountName;AccountKey=myAccountKey;EndpointSuffix=core.windows.net ",
            }, new SearchIndexerDataContainer("doc-extraction-skillset")
            {
                Query = "E2E_Dsat",
            })
            {
                Description = "My Azure Blob data source.",
                EncryptionKey = new SearchResourceEncryptionKey("myUserManagedEncryptionKey-createdinAzureKeyVault", "https://myKeyVault.vault.azure.net")
                {
                    KeyVersion = "myKeyVersion-32charAlphaNumericString",
                    AccessCredentials = new AzureActiveDirectoryApplicationCredentials("00000000-0000-0000-0000-000000000000")
                    {
                        ApplicationSecret = "<applicationSecret>",
                    },
                },
            };
            Response<Search.Documents.Indexes.Models.SearchIndexerDataSourceConnection> response = client.Create(dataSource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DataSources_Create_SearchServiceCreateDataSource_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DataSources client = new SearchClient(endpoint, credential).GetDataSourcesClient();

            Search.Documents.Indexes.Models.SearchIndexerDataSourceConnection dataSource = new Search.Documents.Indexes.Models.SearchIndexerDataSourceConnection("tempdatasource", SearchIndexerDataSourceType.AzureBlob, new DataSourceCredentials
            {
                ConnectionString = "DefaultEndpointsProtocol=https;AccountName=myAccountName;AccountKey=myAccountKey;EndpointSuffix=core.windows.net ",
            }, new SearchIndexerDataContainer("doc-extraction-skillset")
            {
                Query = "E2E_Dsat",
            })
            {
                Description = "My Azure Blob data source.",
                EncryptionKey = new SearchResourceEncryptionKey("myUserManagedEncryptionKey-createdinAzureKeyVault", "https://myKeyVault.vault.azure.net")
                {
                    KeyVersion = "myKeyVersion-32charAlphaNumericString",
                    AccessCredentials = new AzureActiveDirectoryApplicationCredentials("00000000-0000-0000-0000-000000000000")
                    {
                        ApplicationSecret = "<applicationSecret>",
                    },
                },
            };
            Response<Search.Documents.Indexes.Models.SearchIndexerDataSourceConnection> response = await client.CreateAsync(dataSource);
        }
    }
}
