// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.Search.Documents.Models;
using NUnit.Framework;

namespace Azure.Search.Documents.Samples
{
    public partial class Samples_Skillsets
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Skillsets_CreateOrUpdate_SearchServiceCreateOrUpdateSkillset()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

            using RequestContent content = RequestContent.Create(new Dictionary<string, object>
            {
                ["name"] = "tempskillset",
                ["description"] = "Skillset for extracting entities and more",
                ["skills"] = Array.Empty<object>(),
                ["@odata.etag"] = "0x1234568AE7E58A1",
                ["encryptionKey"] = new
                {
                    keyVaultKeyName = "myUserManagedEncryptionKey-createdinAzureKeyVault",
                    keyVaultKeyVersion = "myKeyVersion-32charAlphaNumericString",
                    keyVaultUri = "https://myKeyVault.vault.azure.net",
                    accessCredentials = new
                    {
                        applicationId = "00000000-0000-0000-0000-000000000000",
                        applicationSecret = "<applicationSecret>",
                    },
                }
            });
            Response response = client.CreateOrUpdate("tempskillset", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("skills")[0].GetProperty("@odata.type").ToString());
            Console.WriteLine(result.GetProperty("skills")[0].GetProperty("inputs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("skills")[0].GetProperty("outputs")[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Skillsets_CreateOrUpdate_SearchServiceCreateOrUpdateSkillset_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

            using RequestContent content = RequestContent.Create(new Dictionary<string, object>
            {
                ["name"] = "tempskillset",
                ["description"] = "Skillset for extracting entities and more",
                ["skills"] = Array.Empty<object>(),
                ["@odata.etag"] = "0x1234568AE7E58A1",
                ["encryptionKey"] = new
                {
                    keyVaultKeyName = "myUserManagedEncryptionKey-createdinAzureKeyVault",
                    keyVaultKeyVersion = "myKeyVersion-32charAlphaNumericString",
                    keyVaultUri = "https://myKeyVault.vault.azure.net",
                    accessCredentials = new
                    {
                        applicationId = "00000000-0000-0000-0000-000000000000",
                        applicationSecret = "<applicationSecret>",
                    },
                }
            });
            Response response = await client.CreateOrUpdateAsync("tempskillset", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("skills")[0].GetProperty("@odata.type").ToString());
            Console.WriteLine(result.GetProperty("skills")[0].GetProperty("inputs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("skills")[0].GetProperty("outputs")[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Skillsets_CreateOrUpdate_SearchServiceCreateOrUpdateSkillset_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

            SearchIndexerSkillset skillset = new SearchIndexerSkillset("tempskillset", Array.Empty<SearchIndexerSkill>())
            {
                Description = "Skillset for extracting entities and more",
                ETag = "0x1234568AE7E58A1",
                EncryptionKey = new SearchResourceEncryptionKey("myUserManagedEncryptionKey-createdinAzureKeyVault", "https://myKeyVault.vault.azure.net")
                {
                    KeyVersion = "myKeyVersion-32charAlphaNumericString",
                    AccessCredentials = new AzureActiveDirectoryApplicationCredentials("00000000-0000-0000-0000-000000000000")
                    {
                        ApplicationSecret = "<applicationSecret>",
                    },
                },
            };
            Response<SearchIndexerSkillset> response = client.CreateOrUpdate("tempskillset", skillset);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Skillsets_CreateOrUpdate_SearchServiceCreateOrUpdateSkillset_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

            SearchIndexerSkillset skillset = new SearchIndexerSkillset("tempskillset", Array.Empty<SearchIndexerSkill>())
            {
                Description = "Skillset for extracting entities and more",
                ETag = "0x1234568AE7E58A1",
                EncryptionKey = new SearchResourceEncryptionKey("myUserManagedEncryptionKey-createdinAzureKeyVault", "https://myKeyVault.vault.azure.net")
                {
                    KeyVersion = "myKeyVersion-32charAlphaNumericString",
                    AccessCredentials = new AzureActiveDirectoryApplicationCredentials("00000000-0000-0000-0000-000000000000")
                    {
                        ApplicationSecret = "<applicationSecret>",
                    },
                },
            };
            Response<SearchIndexerSkillset> response = await client.CreateOrUpdateAsync("tempskillset", skillset);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Skillsets_Delete_SearchServiceDeleteSkillset()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

            Response response = client.Delete("tempskillset");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Skillsets_Delete_SearchServiceDeleteSkillset_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

            Response response = await client.DeleteAsync("tempskillset");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Skillsets_GetSkillset_SearchServiceGetSkillset()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

            Response response = client.GetSkillset("myskillset", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("skills")[0].GetProperty("@odata.type").ToString());
            Console.WriteLine(result.GetProperty("skills")[0].GetProperty("inputs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("skills")[0].GetProperty("outputs")[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Skillsets_GetSkillset_SearchServiceGetSkillset_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

            Response response = await client.GetSkillsetAsync("myskillset", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("skills")[0].GetProperty("@odata.type").ToString());
            Console.WriteLine(result.GetProperty("skills")[0].GetProperty("inputs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("skills")[0].GetProperty("outputs")[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Skillsets_GetSkillset_SearchServiceGetSkillset_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

            Response<SearchIndexerSkillset> response = client.GetSkillset("myskillset");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Skillsets_GetSkillset_SearchServiceGetSkillset_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

            Response<SearchIndexerSkillset> response = await client.GetSkillsetAsync("myskillset");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Skillsets_GetSkillsets_SearchServiceListSkillsets()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

            Response response = client.GetSkillsets(null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("skills")[0].GetProperty("@odata.type").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("skills")[0].GetProperty("inputs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("skills")[0].GetProperty("outputs")[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Skillsets_GetSkillsets_SearchServiceListSkillsets_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

            Response response = await client.GetSkillsetsAsync(null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("skills")[0].GetProperty("@odata.type").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("skills")[0].GetProperty("inputs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("skills")[0].GetProperty("outputs")[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Skillsets_GetSkillsets_SearchServiceListSkillsets_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

            Response<ListSkillsetsResult> response = client.GetSkillsets();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Skillsets_GetSkillsets_SearchServiceListSkillsets_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

            Response<ListSkillsetsResult> response = await client.GetSkillsetsAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Skillsets_Create_SearchServiceCreateSkillset()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

            using RequestContent content = RequestContent.Create(new Dictionary<string, object>
            {
                ["name"] = "tempskillset",
                ["description"] = "Skillset for extracting entities and more",
                ["skills"] = Array.Empty<object>(),
                ["@odata.etag"] = "0x1234568AE7E58A1",
                ["encryptionKey"] = new
                {
                    keyVaultKeyName = "myUserManagedEncryptionKey-createdinAzureKeyVault",
                    keyVaultKeyVersion = "myKeyVersion-32charAlphaNumericString",
                    keyVaultUri = "https://myKeyVault.vault.azure.net",
                    accessCredentials = new
                    {
                        applicationId = "00000000-0000-0000-0000-000000000000",
                        applicationSecret = "<applicationSecret>",
                    },
                }
            });
            Response response = client.Create(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("skills")[0].GetProperty("@odata.type").ToString());
            Console.WriteLine(result.GetProperty("skills")[0].GetProperty("inputs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("skills")[0].GetProperty("outputs")[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Skillsets_Create_SearchServiceCreateSkillset_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

            using RequestContent content = RequestContent.Create(new Dictionary<string, object>
            {
                ["name"] = "tempskillset",
                ["description"] = "Skillset for extracting entities and more",
                ["skills"] = Array.Empty<object>(),
                ["@odata.etag"] = "0x1234568AE7E58A1",
                ["encryptionKey"] = new
                {
                    keyVaultKeyName = "myUserManagedEncryptionKey-createdinAzureKeyVault",
                    keyVaultKeyVersion = "myKeyVersion-32charAlphaNumericString",
                    keyVaultUri = "https://myKeyVault.vault.azure.net",
                    accessCredentials = new
                    {
                        applicationId = "00000000-0000-0000-0000-000000000000",
                        applicationSecret = "<applicationSecret>",
                    },
                }
            });
            Response response = await client.CreateAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("skills")[0].GetProperty("@odata.type").ToString());
            Console.WriteLine(result.GetProperty("skills")[0].GetProperty("inputs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("skills")[0].GetProperty("outputs")[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Skillsets_Create_SearchServiceCreateSkillset_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

            SearchIndexerSkillset skillset = new SearchIndexerSkillset("tempskillset", Array.Empty<SearchIndexerSkill>())
            {
                Description = "Skillset for extracting entities and more",
                ETag = "0x1234568AE7E58A1",
                EncryptionKey = new SearchResourceEncryptionKey("myUserManagedEncryptionKey-createdinAzureKeyVault", "https://myKeyVault.vault.azure.net")
                {
                    KeyVersion = "myKeyVersion-32charAlphaNumericString",
                    AccessCredentials = new AzureActiveDirectoryApplicationCredentials("00000000-0000-0000-0000-000000000000")
                    {
                        ApplicationSecret = "<applicationSecret>",
                    },
                },
            };
            Response<SearchIndexerSkillset> response = client.Create(skillset);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Skillsets_Create_SearchServiceCreateSkillset_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

            SearchIndexerSkillset skillset = new SearchIndexerSkillset("tempskillset", Array.Empty<SearchIndexerSkill>())
            {
                Description = "Skillset for extracting entities and more",
                ETag = "0x1234568AE7E58A1",
                EncryptionKey = new SearchResourceEncryptionKey("myUserManagedEncryptionKey-createdinAzureKeyVault", "https://myKeyVault.vault.azure.net")
                {
                    KeyVersion = "myKeyVersion-32charAlphaNumericString",
                    AccessCredentials = new AzureActiveDirectoryApplicationCredentials("00000000-0000-0000-0000-000000000000")
                    {
                        ApplicationSecret = "<applicationSecret>",
                    },
                },
            };
            Response<SearchIndexerSkillset> response = await client.CreateAsync(skillset);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Skillsets_ResetSkills_SearchServiceResetSkills()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

            using RequestContent content = RequestContent.Create(new
            {
                skillNames = new object[]
            {
"skill2",
"skill3",
"skill4"
            },
            });
            Response response = client.ResetSkills("myskillset", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Skillsets_ResetSkills_SearchServiceResetSkills_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

            using RequestContent content = RequestContent.Create(new
            {
                skillNames = new object[]
            {
"skill2",
"skill3",
"skill4"
            },
            });
            Response response = await client.ResetSkillsAsync("myskillset", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Skillsets_ResetSkills_SearchServiceResetSkills_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

            ResetSkillsOptions resetSkillsOptions = null;
            Response response = client.ResetSkills("myskillset", resetSkillsOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Skillsets_ResetSkills_SearchServiceResetSkills_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

            ResetSkillsOptions resetSkillsOptions = null;
            Response response = await client.ResetSkillsAsync("myskillset", resetSkillsOptions);
        }
    }
}
