// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.HealthcareApis.Models
{
    public partial class ValidateMedtechMappingsDeviceResult
    {
        internal static ValidateMedtechMappingsDeviceResult DeserializeValidateMedtechMappingsDeviceResult(JsonElement element)
        {
            Optional<BinaryData> aggregatedCount = default;
            Optional<BinaryData> deviceEvent = default;
            Optional<IReadOnlyList<MedtechMappingValidationError>> exceptions = default;
            Optional<IReadOnlyList<MedtechMeasurement>> measurements = default;
            Optional<IReadOnlyList<BinaryData>> observations = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("aggregatedCount"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    aggregatedCount = BinaryData.FromString(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("deviceEvent"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    deviceEvent = BinaryData.FromString(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("exceptions"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<MedtechMappingValidationError> array = new List<MedtechMappingValidationError>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MedtechMappingValidationError.DeserializeMedtechMappingValidationError(item));
                    }
                    exceptions = array;
                    continue;
                }
                if (property.NameEquals("measurements"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<MedtechMeasurement> array = new List<MedtechMeasurement>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MedtechMeasurement.DeserializeMedtechMeasurement(item));
                    }
                    measurements = array;
                    continue;
                }
                if (property.NameEquals("observations"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<BinaryData> array = new List<BinaryData>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(BinaryData.FromString(item.GetRawText()));
                    }
                    observations = array;
                    continue;
                }
            }
            return new ValidateMedtechMappingsDeviceResult(aggregatedCount.Value, deviceEvent.Value, Optional.ToList(exceptions), Optional.ToList(measurements), Optional.ToList(observations));
        }
    }
}
