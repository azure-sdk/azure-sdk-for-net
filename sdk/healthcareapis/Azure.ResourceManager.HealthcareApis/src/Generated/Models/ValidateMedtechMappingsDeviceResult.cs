// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.HealthcareApis.Models
{
    /// <summary> A result returned when processing a single device event in Medtech Mapping Validation Service. </summary>
    public partial class ValidateMedtechMappingsDeviceResult
    {
        /// <summary> Initializes a new instance of ValidateMedtechMappingsDeviceResult. </summary>
        internal ValidateMedtechMappingsDeviceResult()
        {
            Exceptions = new ChangeTrackingList<MedtechMappingValidationError>();
            Measurements = new ChangeTrackingList<MedtechMeasurement>();
            Observations = new ChangeTrackingList<BinaryData>();
        }

        /// <summary> Initializes a new instance of ValidateMedtechMappingsDeviceResult. </summary>
        /// <param name="aggregatedCount"> Indicates how many Device Events produced the associated Exception. </param>
        /// <param name="deviceEvent"> The device event which was validated. </param>
        /// <param name="exceptions"> A list of mapping validation error. </param>
        /// <param name="measurements"> A collection of measurements which were produced. </param>
        /// <param name="observations"> A collection of observations which were produced. </param>
        internal ValidateMedtechMappingsDeviceResult(BinaryData aggregatedCount, BinaryData deviceEvent, IReadOnlyList<MedtechMappingValidationError> exceptions, IReadOnlyList<MedtechMeasurement> measurements, IReadOnlyList<BinaryData> observations)
        {
            AggregatedCount = aggregatedCount;
            DeviceEvent = deviceEvent;
            Exceptions = exceptions;
            Measurements = measurements;
            Observations = observations;
        }

        /// <summary>
        /// Indicates how many Device Events produced the associated Exception.
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formated json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData AggregatedCount { get; }
        /// <summary>
        /// The device event which was validated.
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formated json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData DeviceEvent { get; }
        /// <summary> A list of mapping validation error. </summary>
        public IReadOnlyList<MedtechMappingValidationError> Exceptions { get; }
        /// <summary> A collection of measurements which were produced. </summary>
        public IReadOnlyList<MedtechMeasurement> Measurements { get; }
        /// <summary>
        /// A collection of observations which were produced.
        /// <para>
        /// To assign an object to the element of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formated json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IReadOnlyList<BinaryData> Observations { get; }
    }
}
