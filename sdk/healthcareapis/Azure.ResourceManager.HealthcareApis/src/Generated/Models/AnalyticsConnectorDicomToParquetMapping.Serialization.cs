// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.HealthcareApis.Models
{
    public partial class AnalyticsConnectorDicomToParquetMapping : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(ExtensionSchemaReference))
            {
                writer.WritePropertyName("extensionSchemaReference"u8);
                writer.WriteStringValue(ExtensionSchemaReference);
            }
            writer.WritePropertyName("type"u8);
            writer.WriteStringValue(MappingType.ToString());
            foreach (var item in AdditionalProperties)
            {
                writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                JsonSerializer.Serialize(writer, JsonDocument.Parse(item.Value.ToString()).RootElement);
#endif
            }
            writer.WriteEndObject();
        }

        internal static AnalyticsConnectorDicomToParquetMapping DeserializeAnalyticsConnectorDicomToParquetMapping(JsonElement element)
        {
            Optional<string> extensionSchemaReference = default;
            AnalyticsConnectorMappingType type = default;
            IDictionary<string, BinaryData> additionalProperties = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("extensionSchemaReference"u8))
                {
                    extensionSchemaReference = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new AnalyticsConnectorMappingType(property.Value.GetString());
                    continue;
                }
                additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
            }
            additionalProperties = additionalPropertiesDictionary;
            return new AnalyticsConnectorDicomToParquetMapping(type, additionalProperties, extensionSchemaReference.Value);
        }
    }
}
