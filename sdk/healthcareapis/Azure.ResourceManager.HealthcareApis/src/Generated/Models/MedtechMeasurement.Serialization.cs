// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.HealthcareApis.Models
{
    public partial class MedtechMeasurement
    {
        internal static MedtechMeasurement DeserializeMedtechMeasurement(JsonElement element)
        {
            Optional<string> type = default;
            Optional<string> correlationId = default;
            Optional<string> deviceId = default;
            Optional<string> encounterId = default;
            Optional<string> occurrenceTimeUtc = default;
            Optional<IReadOnlyList<MedtechMeasurementProperty>> properties = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("correlationId"))
                {
                    correlationId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("deviceId"))
                {
                    deviceId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("encounterId"))
                {
                    encounterId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("occurrenceTimeUtc"))
                {
                    occurrenceTimeUtc = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<MedtechMeasurementProperty> array = new List<MedtechMeasurementProperty>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MedtechMeasurementProperty.DeserializeMedtechMeasurementProperty(item));
                    }
                    properties = array;
                    continue;
                }
            }
            return new MedtechMeasurement(type.Value, correlationId.Value, deviceId.Value, encounterId.Value, occurrenceTimeUtc.Value, Optional.ToList(properties));
        }
    }
}
