<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="IsSubscribedAsync(string,MonitoringDataPoint,long?,string,string,string,string,string,ETag?,CancellationToken)">
      <example>
This sample shows how to call IsSubscribedAsync.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
LiveMetricsClient client = new LiveMetricsClient(credential);

Response<CollectionConfigurationInfo> response = await client.IsSubscribedAsync("4473b98e-c70d-4220-b57c-2984c2a0e5cd");
]]></code></example>
    </member>
    <member name="IsSubscribed(string,MonitoringDataPoint,long?,string,string,string,string,string,ETag?,CancellationToken)">
      <example>
This sample shows how to call IsSubscribed.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
LiveMetricsClient client = new LiveMetricsClient(credential);

Response<CollectionConfigurationInfo> response = client.IsSubscribed("4473b98e-c70d-4220-b57c-2984c2a0e5cd");
]]></code></example>
    </member>
    <member name="IsSubscribedAsync(string,RequestContent,long?,string,string,string,string,string,ETag?,RequestContext)">
      <example>
This sample shows how to call IsSubscribedAsync and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
LiveMetricsClient client = new LiveMetricsClient(credential);

using RequestContent content = RequestContent.Create(new
{
    Instance = "server-pc-name",
    InvariantVersion = 5,
    IsWebApp = false,
    MachineName = "SERVER-PC-NAME",
    PerformanceCollectionSupported = true,
    RoleName = "",
    StreamId = "41112328328b4edb9aa777aa6d675186",
    Timestamp = "2024-02-01T21:36:32.5717105Z",
    Version = "2.21.0-429",
});
Response response = await client.IsSubscribedAsync("4473b98e-c70d-4220-b57c-2984c2a0e5cd", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("ETag").ToString());
Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("Id").ToString());
Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("TelemetryType").ToString());
Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("FilterGroups")[0].GetProperty("Filters")[0].GetProperty("FieldName").ToString());
Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("FilterGroups")[0].GetProperty("Filters")[0].GetProperty("Predicate").ToString());
Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("FilterGroups")[0].GetProperty("Filters")[0].GetProperty("Comparand").ToString());
Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("Projection").ToString());
Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("Aggregation").ToString());
Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("BackEndAggregation").ToString());
Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("Id").ToString());
Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("DocumentFilterGroups")[0].GetProperty("TelemetryType").ToString());
Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("DocumentFilterGroups")[0].GetProperty("Filters").GetProperty("Filters")[0].GetProperty("FieldName").ToString());
Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("DocumentFilterGroups")[0].GetProperty("Filters").GetProperty("Filters")[0].GetProperty("Predicate").ToString());
Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("DocumentFilterGroups")[0].GetProperty("Filters").GetProperty("Filters")[0].GetProperty("Comparand").ToString());
]]></code></example>
    </member>
    <member name="IsSubscribed(string,RequestContent,long?,string,string,string,string,string,ETag?,RequestContext)">
      <example>
This sample shows how to call IsSubscribed and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
LiveMetricsClient client = new LiveMetricsClient(credential);

using RequestContent content = RequestContent.Create(new
{
    Instance = "server-pc-name",
    InvariantVersion = 5,
    IsWebApp = false,
    MachineName = "SERVER-PC-NAME",
    PerformanceCollectionSupported = true,
    RoleName = "",
    StreamId = "41112328328b4edb9aa777aa6d675186",
    Timestamp = "2024-02-01T21:36:32.5717105Z",
    Version = "2.21.0-429",
});
Response response = client.IsSubscribed("4473b98e-c70d-4220-b57c-2984c2a0e5cd", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("ETag").ToString());
Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("Id").ToString());
Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("TelemetryType").ToString());
Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("FilterGroups")[0].GetProperty("Filters")[0].GetProperty("FieldName").ToString());
Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("FilterGroups")[0].GetProperty("Filters")[0].GetProperty("Predicate").ToString());
Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("FilterGroups")[0].GetProperty("Filters")[0].GetProperty("Comparand").ToString());
Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("Projection").ToString());
Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("Aggregation").ToString());
Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("BackEndAggregation").ToString());
Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("Id").ToString());
Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("DocumentFilterGroups")[0].GetProperty("TelemetryType").ToString());
Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("DocumentFilterGroups")[0].GetProperty("Filters").GetProperty("Filters")[0].GetProperty("FieldName").ToString());
Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("DocumentFilterGroups")[0].GetProperty("Filters").GetProperty("Filters")[0].GetProperty("Predicate").ToString());
Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("DocumentFilterGroups")[0].GetProperty("Filters").GetProperty("Filters")[0].GetProperty("Comparand").ToString());
]]></code></example>
    </member>
    <member name="PublishAsync(string,IEnumerable{MonitoringDataPoint},ETag?,long?,CancellationToken)">
      <example>
This sample shows how to call PublishAsync.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
LiveMetricsClient client = new LiveMetricsClient(credential);

Response<CollectionConfigurationInfo> response = await client.PublishAsync("4473b98e-c70d-4220-b57c-2984c2a0e5cd");
]]></code></example>
    </member>
    <member name="Publish(string,IEnumerable{MonitoringDataPoint},ETag?,long?,CancellationToken)">
      <example>
This sample shows how to call Publish.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
LiveMetricsClient client = new LiveMetricsClient(credential);

Response<CollectionConfigurationInfo> response = client.Publish("4473b98e-c70d-4220-b57c-2984c2a0e5cd");
]]></code></example>
    </member>
    <member name="PublishAsync(string,RequestContent,ETag?,long?,RequestContext)">
      <example>
This sample shows how to call PublishAsync and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
LiveMetricsClient client = new LiveMetricsClient(credential);

using RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        Instance = "server-pc-name",
        Metrics = new object[]
        {
            new
            {
                Name = "\\ApplicationInsights\\Requests/Sec",
                Value = 0.9989,
                Weight = 1,
            },
            new
            {
                Name = "\\ApplicationInsights\\Request Duration",
                Value = 2.266,
                Weight = 1,
            },
            new
            {
                Name = "\\ApplicationInsights\\Requests Failed/Sec",
                Value = 0,
                Weight = 1,
            },
            new
            {
                Name = "\\ApplicationInsights\\Requests Succeeded/Sec",
                Value = 0.9989,
                Weight = 1,
            },
            new
            {
                Name = "\\ApplicationInsights\\Dependency Calls/Sec",
                Value = 0,
                Weight = 1,
            },
            new
            {
                Name = "\\ApplicationInsights\\Dependency Call Duration",
                Value = 0,
                Weight = 0,
            },
            new
            {
                Name = "\\ApplicationInsights\\Dependency Calls Failed/Sec",
                Value = 0,
                Weight = 1,
            },
            new
            {
                Name = "\\ApplicationInsights\\Dependency Calls Succeeded/Sec",
                Value = 0,
                Weight = 1,
            },
            new
            {
                Name = "\\ApplicationInsights\\Exceptions/Sec",
                Value = 0,
                Weight = 1,
            },
            new
            {
                Name = "\\ASP.NET Applications(__Total__)\\Requests In Application Queue",
                Value = 0,
                Weight = 1,
            },
            new
            {
                Name = "\\Memory\\Committed Bytes",
                Value = 19902644224,
                Weight = 1,
            },
            new
            {
                Name = "\\Processor(_Total)\\% Processor Time",
                Value = 54.738,
                Weight = 1,
            }
        },
        Documents = new object[]
        {
            new
            {
                DocumentType = "Exception",
                ExceptionMessage = "Value cannot be null.\r\nParameter name: This exception has properties",
                ExceptionType = "System.ArgumentNullException",
                Properties = new object[]
                {
                    new
                    {
                        key = "UserProp2",
                        value = "UserPropValue2",
                    },
                    new
                    {
                        key = "DeveloperMode",
                        value = "true",
                    },
                    new
                    {
                        key = "UserProp1",
                        value = "UserPropValue1",
                    }
                },
            },
            new
            {
                DocumentType = "Request",
                Duration = "PT0.0010105S",
                Name = "GET Home/blablabla",
                Properties = new object[]
                {
                    new
                    {
                        key = "DeveloperMode",
                        value = "true",
                    }
                },
                ResponseCode = "404",
                Url = "http://40.78.109.134/Home/blablabla",
            }
        },
        Timestamp = "2024-02-01T21:36:30.5717105Z",
        Version = "2.1.0.42",
        InvariantVersion = 5,
        IsWebApp = false,
        MachineName = "SERVER-PC-NAME",
        PerformanceCollectionSupported = true,
        RoleName = "",
        StreamId = "41112328328b4edb9aa777aa6d675186",
    }
});
Response response = await client.PublishAsync("4473b98e-c70d-4220-b57c-2984c2a0e5cd", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("ETag").ToString());
Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("Id").ToString());
Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("TelemetryType").ToString());
Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("FilterGroups")[0].GetProperty("Filters")[0].GetProperty("FieldName").ToString());
Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("FilterGroups")[0].GetProperty("Filters")[0].GetProperty("Predicate").ToString());
Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("FilterGroups")[0].GetProperty("Filters")[0].GetProperty("Comparand").ToString());
Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("Projection").ToString());
Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("Aggregation").ToString());
Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("BackEndAggregation").ToString());
Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("Id").ToString());
Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("DocumentFilterGroups")[0].GetProperty("TelemetryType").ToString());
Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("DocumentFilterGroups")[0].GetProperty("Filters").GetProperty("Filters")[0].GetProperty("FieldName").ToString());
Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("DocumentFilterGroups")[0].GetProperty("Filters").GetProperty("Filters")[0].GetProperty("Predicate").ToString());
Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("DocumentFilterGroups")[0].GetProperty("Filters").GetProperty("Filters")[0].GetProperty("Comparand").ToString());
]]></code></example>
    </member>
    <member name="Publish(string,RequestContent,ETag?,long?,RequestContext)">
      <example>
This sample shows how to call Publish and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
LiveMetricsClient client = new LiveMetricsClient(credential);

using RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        Instance = "server-pc-name",
        Metrics = new object[]
        {
            new
            {
                Name = "\\ApplicationInsights\\Requests/Sec",
                Value = 0.9989,
                Weight = 1,
            },
            new
            {
                Name = "\\ApplicationInsights\\Request Duration",
                Value = 2.266,
                Weight = 1,
            },
            new
            {
                Name = "\\ApplicationInsights\\Requests Failed/Sec",
                Value = 0,
                Weight = 1,
            },
            new
            {
                Name = "\\ApplicationInsights\\Requests Succeeded/Sec",
                Value = 0.9989,
                Weight = 1,
            },
            new
            {
                Name = "\\ApplicationInsights\\Dependency Calls/Sec",
                Value = 0,
                Weight = 1,
            },
            new
            {
                Name = "\\ApplicationInsights\\Dependency Call Duration",
                Value = 0,
                Weight = 0,
            },
            new
            {
                Name = "\\ApplicationInsights\\Dependency Calls Failed/Sec",
                Value = 0,
                Weight = 1,
            },
            new
            {
                Name = "\\ApplicationInsights\\Dependency Calls Succeeded/Sec",
                Value = 0,
                Weight = 1,
            },
            new
            {
                Name = "\\ApplicationInsights\\Exceptions/Sec",
                Value = 0,
                Weight = 1,
            },
            new
            {
                Name = "\\ASP.NET Applications(__Total__)\\Requests In Application Queue",
                Value = 0,
                Weight = 1,
            },
            new
            {
                Name = "\\Memory\\Committed Bytes",
                Value = 19902644224,
                Weight = 1,
            },
            new
            {
                Name = "\\Processor(_Total)\\% Processor Time",
                Value = 54.738,
                Weight = 1,
            }
        },
        Documents = new object[]
        {
            new
            {
                DocumentType = "Exception",
                ExceptionMessage = "Value cannot be null.\r\nParameter name: This exception has properties",
                ExceptionType = "System.ArgumentNullException",
                Properties = new object[]
                {
                    new
                    {
                        key = "UserProp2",
                        value = "UserPropValue2",
                    },
                    new
                    {
                        key = "DeveloperMode",
                        value = "true",
                    },
                    new
                    {
                        key = "UserProp1",
                        value = "UserPropValue1",
                    }
                },
            },
            new
            {
                DocumentType = "Request",
                Duration = "PT0.0010105S",
                Name = "GET Home/blablabla",
                Properties = new object[]
                {
                    new
                    {
                        key = "DeveloperMode",
                        value = "true",
                    }
                },
                ResponseCode = "404",
                Url = "http://40.78.109.134/Home/blablabla",
            }
        },
        Timestamp = "2024-02-01T21:36:30.5717105Z",
        Version = "2.1.0.42",
        InvariantVersion = 5,
        IsWebApp = false,
        MachineName = "SERVER-PC-NAME",
        PerformanceCollectionSupported = true,
        RoleName = "",
        StreamId = "41112328328b4edb9aa777aa6d675186",
    }
});
Response response = client.Publish("4473b98e-c70d-4220-b57c-2984c2a0e5cd", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("ETag").ToString());
Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("Id").ToString());
Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("TelemetryType").ToString());
Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("FilterGroups")[0].GetProperty("Filters")[0].GetProperty("FieldName").ToString());
Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("FilterGroups")[0].GetProperty("Filters")[0].GetProperty("Predicate").ToString());
Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("FilterGroups")[0].GetProperty("Filters")[0].GetProperty("Comparand").ToString());
Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("Projection").ToString());
Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("Aggregation").ToString());
Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("BackEndAggregation").ToString());
Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("Id").ToString());
Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("DocumentFilterGroups")[0].GetProperty("TelemetryType").ToString());
Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("DocumentFilterGroups")[0].GetProperty("Filters").GetProperty("Filters")[0].GetProperty("FieldName").ToString());
Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("DocumentFilterGroups")[0].GetProperty("Filters").GetProperty("Filters")[0].GetProperty("Predicate").ToString());
Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("DocumentFilterGroups")[0].GetProperty("Filters").GetProperty("Filters")[0].GetProperty("Comparand").ToString());
]]></code></example>
    </member>
  </members>
</doc>