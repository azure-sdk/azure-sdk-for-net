// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace LiveMetrics
{
    /// <summary> Model factory for models. </summary>
    public static partial class LiveMetricsModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="LiveMetrics.MonitoringDataPoint"/>. </summary>
        /// <param name="version"> Application Insights SDK version. </param>
        /// <param name="invariantVersion"> Version/generation of the data contract (MonitoringDataPoint) between SDK and Live Metrics. </param>
        /// <param name="instance"> Service instance name where Application Insights SDK lives. </param>
        /// <param name="roleName"> Service role name. </param>
        /// <param name="machineName"> Computer name where Application Insights SDK lives. </param>
        /// <param name="streamId"> Identifies an Application Insights SDK as a trusted agent to report metrics and documents. </param>
        /// <param name="timestamp"> Data point generation timestamp. </param>
        /// <param name="transmissionTime"> Timestamp when the client transmits the metrics and documents to Live Metrics. </param>
        /// <param name="isWebApp"> True if the current application is an Azure Web App. </param>
        /// <param name="performanceCollectionSupported"> True if performance counters collection is supported. </param>
        /// <param name="metrics"> An array of metric data points. </param>
        /// <param name="documents">
        /// An array of documents of a specific type {Request}, {RemoteDependency}, {Exception}, {Event}, or {Trace}
        /// Please note <see cref="DocumentIngress"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Event"/>, <see cref="Exception"/>, <see cref="RemoteDependency"/>, <see cref="Request"/> and <see cref="Trace"/>.
        /// </param>
        /// <param name="topCpuProcesses"> An array of top cpu consumption data point. </param>
        /// <param name="collectionConfigurationErrors"> An array of error while SDK parses and applies the {CollectionConfigurationInfo} provided by Live Metrics. </param>
        /// <returns> A new <see cref="LiveMetrics.MonitoringDataPoint"/> instance for mocking. </returns>
        public static MonitoringDataPoint MonitoringDataPoint(string version = null, int invariantVersion = default, string instance = null, string roleName = null, string machineName = null, string streamId = null, DateTimeOffset? timestamp = null, DateTimeOffset? transmissionTime = null, bool isWebApp = default, bool performanceCollectionSupported = default, IEnumerable<MetricPoint> metrics = null, IEnumerable<DocumentIngress> documents = null, IEnumerable<ProcessCpuData> topCpuProcesses = null, IEnumerable<CollectionConfigurationError> collectionConfigurationErrors = null)
        {
            metrics ??= new List<MetricPoint>();
            documents ??= new List<DocumentIngress>();
            topCpuProcesses ??= new List<ProcessCpuData>();
            collectionConfigurationErrors ??= new List<CollectionConfigurationError>();

            return new MonitoringDataPoint(
                version,
                invariantVersion,
                instance,
                roleName,
                machineName,
                streamId,
                timestamp,
                transmissionTime,
                isWebApp,
                performanceCollectionSupported,
                metrics?.ToList(),
                documents?.ToList(),
                topCpuProcesses?.ToList(),
                collectionConfigurationErrors?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="LiveMetrics.CollectionConfigurationInfo"/>. </summary>
        /// <param name="eTag"> An encoded string that indicates whether the collection configuration is changed. </param>
        /// <param name="metrics"> An array of metric configuration info. </param>
        /// <param name="documentStreams"> An array of document stream configuration info. </param>
        /// <param name="quotaInfo"> Controls document quotas to be sent to Live Metrics. </param>
        /// <returns> A new <see cref="LiveMetrics.CollectionConfigurationInfo"/> instance for mocking. </returns>
        public static CollectionConfigurationInfo CollectionConfigurationInfo(string eTag = null, IEnumerable<DerivedMetricInfo> metrics = null, IEnumerable<DocumentStreamInfo> documentStreams = null, QuotaConfigurationInfo quotaInfo = null)
        {
            metrics ??= new List<DerivedMetricInfo>();
            documentStreams ??= new List<DocumentStreamInfo>();

            return new CollectionConfigurationInfo(eTag, metrics?.ToList(), documentStreams?.ToList(), quotaInfo, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="LiveMetrics.DerivedMetricInfo"/>. </summary>
        /// <param name="id"> metric configuration identifier. </param>
        /// <param name="telemetryType"> Telemetry type. </param>
        /// <param name="filterGroups"> A collection of filters to scope metrics that UX needs. </param>
        /// <param name="projection"> Telemetry's metric dimension whose value is to be aggregated. Example values: Duration, Count(),... </param>
        /// <param name="aggregation"> Aggregation type. This is the aggregation done from everything within a single server. </param>
        /// <param name="backEndAggregation"> Aggregation type. This Aggregation is done across the values for all the servers taken together. </param>
        /// <returns> A new <see cref="LiveMetrics.DerivedMetricInfo"/> instance for mocking. </returns>
        public static DerivedMetricInfo DerivedMetricInfo(string id = null, string telemetryType = null, IEnumerable<FilterConjunctionGroupInfo> filterGroups = null, string projection = null, AggregationType aggregation = default, AggregationType backEndAggregation = default)
        {
            filterGroups ??= new List<FilterConjunctionGroupInfo>();

            return new DerivedMetricInfo(
                id,
                telemetryType,
                filterGroups?.ToList(),
                projection,
                aggregation,
                backEndAggregation,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="LiveMetrics.FilterConjunctionGroupInfo"/>. </summary>
        /// <param name="filters"> An array of filters. </param>
        /// <returns> A new <see cref="LiveMetrics.FilterConjunctionGroupInfo"/> instance for mocking. </returns>
        public static FilterConjunctionGroupInfo FilterConjunctionGroupInfo(IEnumerable<FilterInfo> filters = null)
        {
            filters ??= new List<FilterInfo>();

            return new FilterConjunctionGroupInfo(filters?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="LiveMetrics.FilterInfo"/>. </summary>
        /// <param name="fieldName"> dimension name of the filter. </param>
        /// <param name="predicate"> Operator of the filter. </param>
        /// <param name="comparand"> Comparand of the filter. </param>
        /// <returns> A new <see cref="LiveMetrics.FilterInfo"/> instance for mocking. </returns>
        public static FilterInfo FilterInfo(string fieldName = null, PredicateType predicate = default, string comparand = null)
        {
            return new FilterInfo(fieldName, predicate, comparand, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="LiveMetrics.DocumentStreamInfo"/>. </summary>
        /// <param name="id"> Identifier of the document stream initiated by a UX. </param>
        /// <param name="documentFilterGroups"> Gets or sets an OR-connected collection of filter groups. </param>
        /// <returns> A new <see cref="LiveMetrics.DocumentStreamInfo"/> instance for mocking. </returns>
        public static DocumentStreamInfo DocumentStreamInfo(string id = null, IEnumerable<DocumentFilterConjunctionGroupInfo> documentFilterGroups = null)
        {
            documentFilterGroups ??= new List<DocumentFilterConjunctionGroupInfo>();

            return new DocumentStreamInfo(id, documentFilterGroups?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="LiveMetrics.DocumentFilterConjunctionGroupInfo"/>. </summary>
        /// <param name="telemetryType"> Telemetry type. </param>
        /// <param name="filters"> An array of filter groups. </param>
        /// <returns> A new <see cref="LiveMetrics.DocumentFilterConjunctionGroupInfo"/> instance for mocking. </returns>
        public static DocumentFilterConjunctionGroupInfo DocumentFilterConjunctionGroupInfo(TelemetryType telemetryType = default, FilterConjunctionGroupInfo filters = null)
        {
            return new DocumentFilterConjunctionGroupInfo(telemetryType, filters, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="LiveMetrics.QuotaConfigurationInfo"/>. </summary>
        /// <param name="initialQuota"> Initial quota. </param>
        /// <param name="maxQuota"> Max quota. </param>
        /// <param name="quotaAccrualRatePerSec"> Quota accrual rate per second. </param>
        /// <returns> A new <see cref="LiveMetrics.QuotaConfigurationInfo"/> instance for mocking. </returns>
        public static QuotaConfigurationInfo QuotaConfigurationInfo(float? initialQuota = null, float maxQuota = default, float quotaAccrualRatePerSec = default)
        {
            return new QuotaConfigurationInfo(initialQuota, maxQuota, quotaAccrualRatePerSec, serializedAdditionalRawData: null);
        }
    }
}
