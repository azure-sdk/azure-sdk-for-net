// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.StorageActions.Models;

namespace Azure.ResourceManager.StorageActions
{
    /// <summary>
    /// A class representing the StorageTask data model.
    /// Represents Storage Task.
    /// </summary>
    public partial class StorageTaskData : TrackedResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="StorageTaskData"/>. </summary>
        /// <param name="location"> The location. </param>
        /// <param name="identity"> The managed service identity of the resource. </param>
        /// <param name="enabled"> Storage Task is enabled when set to true and disabled when set to false. </param>
        /// <param name="description"> Text that describes the purpose of the storage task. </param>
        /// <param name="action"> The storage task action that is executed. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identity"/>, <paramref name="description"/> or <paramref name="action"/> is null. </exception>
        public StorageTaskData(AzureLocation location, ManagedServiceIdentity identity, bool enabled, string description, StorageTaskAction action) : base(location)
        {
            Argument.AssertNotNull(identity, nameof(identity));
            Argument.AssertNotNull(description, nameof(description));
            Argument.AssertNotNull(action, nameof(action));

            Identity = identity;
            Enabled = enabled;
            Description = description;
            Action = action;
        }

        /// <summary> Initializes a new instance of <see cref="StorageTaskData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity"> The managed service identity of the resource. </param>
        /// <param name="taskVersion"> Storage task version. </param>
        /// <param name="enabled"> Storage Task is enabled when set to true and disabled when set to false. </param>
        /// <param name="description"> Text that describes the purpose of the storage task. </param>
        /// <param name="action"> The storage task action that is executed. </param>
        /// <param name="provisioningState"> Represents the provisioning state of the storage task. </param>
        /// <param name="creationTimeInUtc"> The creation date and time of the storage task in UTC. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal StorageTaskData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, IDictionary<string, string> tags, AzureLocation location, ManagedServiceIdentity identity, long? taskVersion, bool enabled, string description, StorageTaskAction action, ProvisioningState? provisioningState, DateTimeOffset? creationTimeInUtc, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData, tags, location)
        {
            Identity = identity;
            TaskVersion = taskVersion;
            Enabled = enabled;
            Description = description;
            Action = action;
            ProvisioningState = provisioningState;
            CreationTimeInUtc = creationTimeInUtc;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="StorageTaskData"/> for deserialization. </summary>
        internal StorageTaskData()
        {
        }

        /// <summary> The managed service identity of the resource. </summary>
        public ManagedServiceIdentity Identity { get; set; }
        /// <summary> Storage task version. </summary>
        public long? TaskVersion { get; }
        /// <summary> Storage Task is enabled when set to true and disabled when set to false. </summary>
        public bool Enabled { get; set; }
        /// <summary> Text that describes the purpose of the storage task. </summary>
        public string Description { get; set; }
        /// <summary> The storage task action that is executed. </summary>
        public StorageTaskAction Action { get; set; }
        /// <summary> Represents the provisioning state of the storage task. </summary>
        public ProvisioningState? ProvisioningState { get; }
        /// <summary> The creation date and time of the storage task in UTC. </summary>
        public DateTimeOffset? CreationTimeInUtc { get; }
    }
}
