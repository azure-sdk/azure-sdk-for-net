// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.ContentSafety.Samples
{
    public partial class Samples_RaiPolicyClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RaiPolicy_CreateOrUpdateRaiPolicy_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            RaiPolicyClient client = new RaiPolicyClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                taskSettings = new object[]
            {
new
{
settingId = "<settingId>",
settingEnabled = true,
appliedFor = new object[]
{
new
{
role = "all",
source = "messageToAI",
}
},
kind = "harmCategory",
blockingCriteria = new
{
enabled = true,
kind = "severity",
allowedSeverity = 1234,
isDetected = true,
allowedRiskLevel = "safe",
},
}
            },
            });
            Response response = client.CreateOrUpdateRaiPolicy("<raiPolicyName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("settingId").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("settingEnabled").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("appliedFor")[0].GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("appliedFor")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("allowedSeverity").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("isDetected").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("allowedRiskLevel").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RaiPolicy_CreateOrUpdateRaiPolicy_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            RaiPolicyClient client = new RaiPolicyClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                taskSettings = new object[]
            {
new
{
settingId = "<settingId>",
settingEnabled = true,
appliedFor = new object[]
{
new
{
role = "all",
source = "messageToAI",
}
},
kind = "harmCategory",
blockingCriteria = new
{
enabled = true,
kind = "severity",
allowedSeverity = 1234,
isDetected = true,
allowedRiskLevel = "safe",
},
}
            },
            });
            Response response = await client.CreateOrUpdateRaiPolicyAsync("<raiPolicyName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("settingId").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("settingEnabled").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("appliedFor")[0].GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("appliedFor")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("allowedSeverity").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("isDetected").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("allowedRiskLevel").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RaiPolicy_CreateOrUpdateRaiPolicy_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            RaiPolicyClient client = new RaiPolicyClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                taskSettings = new object[]
            {
new
{
settingId = "<settingId>",
settingEnabled = true,
appliedFor = new object[]
{
new
{
role = "all",
source = "messageToAI",
}
},
kind = "harmCategory",
harmCategoryTaskSetting = new
{
harmCategory = "celebrity",
harmConfigId = "<harmConfigId>",
},
blocklistTaskSetting = new
{
name = "<name>",
},
safetyIncidentTaskSetting = new
{
name = "<name>",
},
customHarmCategoryTaskSetting = new
{
name = "<name>",
},
blockingCriteria = new
{
enabled = true,
kind = "severity",
allowedSeverity = 1234,
isDetected = true,
allowedRiskLevel = "safe",
},
}
            },
            });
            Response response = client.CreateOrUpdateRaiPolicy("<raiPolicyName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("settingId").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("settingEnabled").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("appliedFor")[0].GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("appliedFor")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("harmCategoryTaskSetting").GetProperty("harmCategory").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("harmCategoryTaskSetting").GetProperty("harmConfigId").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blocklistTaskSetting").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("safetyIncidentTaskSetting").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("customHarmCategoryTaskSetting").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("allowedSeverity").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("isDetected").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("allowedRiskLevel").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RaiPolicy_CreateOrUpdateRaiPolicy_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            RaiPolicyClient client = new RaiPolicyClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                taskSettings = new object[]
            {
new
{
settingId = "<settingId>",
settingEnabled = true,
appliedFor = new object[]
{
new
{
role = "all",
source = "messageToAI",
}
},
kind = "harmCategory",
harmCategoryTaskSetting = new
{
harmCategory = "celebrity",
harmConfigId = "<harmConfigId>",
},
blocklistTaskSetting = new
{
name = "<name>",
},
safetyIncidentTaskSetting = new
{
name = "<name>",
},
customHarmCategoryTaskSetting = new
{
name = "<name>",
},
blockingCriteria = new
{
enabled = true,
kind = "severity",
allowedSeverity = 1234,
isDetected = true,
allowedRiskLevel = "safe",
},
}
            },
            });
            Response response = await client.CreateOrUpdateRaiPolicyAsync("<raiPolicyName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("settingId").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("settingEnabled").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("appliedFor")[0].GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("appliedFor")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("harmCategoryTaskSetting").GetProperty("harmCategory").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("harmCategoryTaskSetting").GetProperty("harmConfigId").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blocklistTaskSetting").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("safetyIncidentTaskSetting").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("customHarmCategoryTaskSetting").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("allowedSeverity").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("isDetected").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("allowedRiskLevel").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RaiPolicy_DeleteRaiPolicy_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            RaiPolicyClient client = new RaiPolicyClient(endpoint, credential);

            Response response = client.DeleteRaiPolicy("<raiPolicyName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RaiPolicy_DeleteRaiPolicy_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            RaiPolicyClient client = new RaiPolicyClient(endpoint, credential);

            Response response = await client.DeleteRaiPolicyAsync("<raiPolicyName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RaiPolicy_DeleteRaiPolicy_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            RaiPolicyClient client = new RaiPolicyClient(endpoint, credential);

            Response response = client.DeleteRaiPolicy("<raiPolicyName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RaiPolicy_DeleteRaiPolicy_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            RaiPolicyClient client = new RaiPolicyClient(endpoint, credential);

            Response response = await client.DeleteRaiPolicyAsync("<raiPolicyName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RaiPolicy_GetRaiPolicy_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            RaiPolicyClient client = new RaiPolicyClient(endpoint, credential);

            Response response = client.GetRaiPolicy("<raiPolicyName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("settingId").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("settingEnabled").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("appliedFor")[0].GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("appliedFor")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("allowedSeverity").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("isDetected").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("allowedRiskLevel").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RaiPolicy_GetRaiPolicy_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            RaiPolicyClient client = new RaiPolicyClient(endpoint, credential);

            Response response = await client.GetRaiPolicyAsync("<raiPolicyName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("settingId").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("settingEnabled").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("appliedFor")[0].GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("appliedFor")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("allowedSeverity").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("isDetected").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("allowedRiskLevel").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RaiPolicy_GetRaiPolicy_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            RaiPolicyClient client = new RaiPolicyClient(endpoint, credential);

            Response<RaiPolicy> response = client.GetRaiPolicy("<raiPolicyName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RaiPolicy_GetRaiPolicy_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            RaiPolicyClient client = new RaiPolicyClient(endpoint, credential);

            Response<RaiPolicy> response = await client.GetRaiPolicyAsync("<raiPolicyName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RaiPolicy_GetRaiPolicy_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            RaiPolicyClient client = new RaiPolicyClient(endpoint, credential);

            Response response = client.GetRaiPolicy("<raiPolicyName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("settingId").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("settingEnabled").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("appliedFor")[0].GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("appliedFor")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("harmCategoryTaskSetting").GetProperty("harmCategory").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("harmCategoryTaskSetting").GetProperty("harmConfigId").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blocklistTaskSetting").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("safetyIncidentTaskSetting").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("customHarmCategoryTaskSetting").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("allowedSeverity").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("isDetected").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("allowedRiskLevel").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RaiPolicy_GetRaiPolicy_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            RaiPolicyClient client = new RaiPolicyClient(endpoint, credential);

            Response response = await client.GetRaiPolicyAsync("<raiPolicyName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("settingId").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("settingEnabled").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("appliedFor")[0].GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("appliedFor")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("harmCategoryTaskSetting").GetProperty("harmCategory").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("harmCategoryTaskSetting").GetProperty("harmConfigId").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blocklistTaskSetting").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("safetyIncidentTaskSetting").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("customHarmCategoryTaskSetting").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("allowedSeverity").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("isDetected").ToString());
            Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("allowedRiskLevel").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RaiPolicy_GetRaiPolicy_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            RaiPolicyClient client = new RaiPolicyClient(endpoint, credential);

            Response<RaiPolicy> response = client.GetRaiPolicy("<raiPolicyName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RaiPolicy_GetRaiPolicy_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            RaiPolicyClient client = new RaiPolicyClient(endpoint, credential);

            Response<RaiPolicy> response = await client.GetRaiPolicyAsync("<raiPolicyName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RaiPolicy_GetRaiPolicies_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            RaiPolicyClient client = new RaiPolicyClient(endpoint, credential);

            foreach (BinaryData item in client.GetRaiPolicies(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("settingId").ToString());
                Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("settingEnabled").ToString());
                Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("appliedFor")[0].GetProperty("role").ToString());
                Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("appliedFor")[0].GetProperty("source").ToString());
                Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("enabled").ToString());
                Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("allowedSeverity").ToString());
                Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("isDetected").ToString());
                Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("allowedRiskLevel").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RaiPolicy_GetRaiPolicies_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            RaiPolicyClient client = new RaiPolicyClient(endpoint, credential);

            await foreach (BinaryData item in client.GetRaiPoliciesAsync(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("settingId").ToString());
                Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("settingEnabled").ToString());
                Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("appliedFor")[0].GetProperty("role").ToString());
                Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("appliedFor")[0].GetProperty("source").ToString());
                Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("enabled").ToString());
                Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("allowedSeverity").ToString());
                Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("isDetected").ToString());
                Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("allowedRiskLevel").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RaiPolicy_GetRaiPolicies_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            RaiPolicyClient client = new RaiPolicyClient(endpoint, credential);

            foreach (RaiPolicy item in client.GetRaiPolicies())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RaiPolicy_GetRaiPolicies_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            RaiPolicyClient client = new RaiPolicyClient(endpoint, credential);

            await foreach (RaiPolicy item in client.GetRaiPoliciesAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RaiPolicy_GetRaiPolicies_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            RaiPolicyClient client = new RaiPolicyClient(endpoint, credential);

            foreach (BinaryData item in client.GetRaiPolicies(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("settingId").ToString());
                Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("settingEnabled").ToString());
                Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("appliedFor")[0].GetProperty("role").ToString());
                Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("appliedFor")[0].GetProperty("source").ToString());
                Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("harmCategoryTaskSetting").GetProperty("harmCategory").ToString());
                Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("harmCategoryTaskSetting").GetProperty("harmConfigId").ToString());
                Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blocklistTaskSetting").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("safetyIncidentTaskSetting").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("customHarmCategoryTaskSetting").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("enabled").ToString());
                Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("allowedSeverity").ToString());
                Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("isDetected").ToString());
                Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("allowedRiskLevel").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RaiPolicy_GetRaiPolicies_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            RaiPolicyClient client = new RaiPolicyClient(endpoint, credential);

            await foreach (BinaryData item in client.GetRaiPoliciesAsync(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("settingId").ToString());
                Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("settingEnabled").ToString());
                Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("appliedFor")[0].GetProperty("role").ToString());
                Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("appliedFor")[0].GetProperty("source").ToString());
                Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("harmCategoryTaskSetting").GetProperty("harmCategory").ToString());
                Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("harmCategoryTaskSetting").GetProperty("harmConfigId").ToString());
                Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blocklistTaskSetting").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("safetyIncidentTaskSetting").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("customHarmCategoryTaskSetting").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("enabled").ToString());
                Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("allowedSeverity").ToString());
                Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("isDetected").ToString());
                Console.WriteLine(result.GetProperty("taskSettings")[0].GetProperty("blockingCriteria").GetProperty("allowedRiskLevel").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RaiPolicy_GetRaiPolicies_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            RaiPolicyClient client = new RaiPolicyClient(endpoint, credential);

            foreach (RaiPolicy item in client.GetRaiPolicies())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RaiPolicy_GetRaiPolicies_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            RaiPolicyClient client = new RaiPolicyClient(endpoint, credential);

            await foreach (RaiPolicy item in client.GetRaiPoliciesAsync())
            {
            }
        }
    }
}
