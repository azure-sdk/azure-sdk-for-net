// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.AI.ContentSafety;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.ContentSafety.Samples
{
    public partial class Samples_ContentSafetyClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeText_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                text = "<text>",
            });
            Response response = client.AnalyzeText(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("categoriesAnalysis")[0].GetProperty("category").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeText_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                text = "<text>",
            });
            Response response = await client.AnalyzeTextAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("categoriesAnalysis")[0].GetProperty("category").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeText_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            AnalyzeTextOptions body = new AnalyzeTextOptions("<text>");
            Response<AnalyzeTextResult> response = client.AnalyzeText(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeText_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            AnalyzeTextOptions body = new AnalyzeTextOptions("<text>");
            Response<AnalyzeTextResult> response = await client.AnalyzeTextAsync(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeText_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                text = "<text>",
                categories = new object[]
            {
"Hate"
            },
                blocklistNames = new object[]
            {
"<blocklistNames>"
            },
                haltOnBlocklistHit = true,
                outputType = "FourSeverityLevels",
            });
            Response response = client.AnalyzeText(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blocklistsMatch")[0].GetProperty("blocklistName").ToString());
            Console.WriteLine(result.GetProperty("blocklistsMatch")[0].GetProperty("blocklistItemId").ToString());
            Console.WriteLine(result.GetProperty("blocklistsMatch")[0].GetProperty("blocklistItemText").ToString());
            Console.WriteLine(result.GetProperty("categoriesAnalysis")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("categoriesAnalysis")[0].GetProperty("severity").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeText_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                text = "<text>",
                categories = new object[]
            {
"Hate"
            },
                blocklistNames = new object[]
            {
"<blocklistNames>"
            },
                haltOnBlocklistHit = true,
                outputType = "FourSeverityLevels",
            });
            Response response = await client.AnalyzeTextAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blocklistsMatch")[0].GetProperty("blocklistName").ToString());
            Console.WriteLine(result.GetProperty("blocklistsMatch")[0].GetProperty("blocklistItemId").ToString());
            Console.WriteLine(result.GetProperty("blocklistsMatch")[0].GetProperty("blocklistItemText").ToString());
            Console.WriteLine(result.GetProperty("categoriesAnalysis")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("categoriesAnalysis")[0].GetProperty("severity").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeText_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            AnalyzeTextOptions body = new AnalyzeTextOptions("<text>")
            {
                Categories = { TextCategory.Hate },
                BlocklistNames = { "<blocklistNames>" },
                HaltOnBlocklistHit = true,
                OutputType = AnalyzeTextOutputType.FourSeverityLevels,
            };
            Response<AnalyzeTextResult> response = client.AnalyzeText(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeText_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            AnalyzeTextOptions body = new AnalyzeTextOptions("<text>")
            {
                Categories = { TextCategory.Hate },
                BlocklistNames = { "<blocklistNames>" },
                HaltOnBlocklistHit = true,
                OutputType = AnalyzeTextOutputType.FourSeverityLevels,
            };
            Response<AnalyzeTextResult> response = await client.AnalyzeTextAsync(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeImage_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                image = new object(),
            });
            Response response = client.AnalyzeImage(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("categoriesAnalysis")[0].GetProperty("category").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeImage_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                image = new object(),
            });
            Response response = await client.AnalyzeImageAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("categoriesAnalysis")[0].GetProperty("category").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeImage_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            AnalyzeImageOptions body = new AnalyzeImageOptions(new ContentSafetyImageData());
            Response<AnalyzeImageResult> response = client.AnalyzeImage(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeImage_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            AnalyzeImageOptions body = new AnalyzeImageOptions(new ContentSafetyImageData());
            Response<AnalyzeImageResult> response = await client.AnalyzeImageAsync(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeImage_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                image = new
                {
                    content = new object(),
                    blobUrl = "http://localhost:3000",
                },
                categories = new object[]
            {
"Hate"
            },
                outputType = "FourSeverityLevels",
            });
            Response response = client.AnalyzeImage(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("categoriesAnalysis")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("categoriesAnalysis")[0].GetProperty("severity").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeImage_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                image = new
                {
                    content = new object(),
                    blobUrl = "http://localhost:3000",
                },
                categories = new object[]
            {
"Hate"
            },
                outputType = "FourSeverityLevels",
            });
            Response response = await client.AnalyzeImageAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("categoriesAnalysis")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("categoriesAnalysis")[0].GetProperty("severity").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeImage_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            AnalyzeImageOptions body = new AnalyzeImageOptions(new ContentSafetyImageData
            {
                Content = BinaryData.FromObjectAsJson(new object()),
                BlobUrl = new Uri("http://localhost:3000"),
            })
            {
                Categories = { ImageCategory.Hate },
                OutputType = AnalyzeImageOutputType.FourSeverityLevels,
            };
            Response<AnalyzeImageResult> response = client.AnalyzeImage(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeImage_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            AnalyzeImageOptions body = new AnalyzeImageOptions(new ContentSafetyImageData
            {
                Content = BinaryData.FromObjectAsJson(new object()),
                BlobUrl = new Uri("http://localhost:3000"),
            })
            {
                Categories = { ImageCategory.Hate },
                OutputType = AnalyzeImageOutputType.FourSeverityLevels,
            };
            Response<AnalyzeImageResult> response = await client.AnalyzeImageAsync(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetTextBlocklist_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            Response response = client.GetTextBlocklist("<blocklistName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blocklistName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetTextBlocklist_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            Response response = await client.GetTextBlocklistAsync("<blocklistName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blocklistName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetTextBlocklist_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            Response<TextBlocklist> response = client.GetTextBlocklist("<blocklistName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetTextBlocklist_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            Response<TextBlocklist> response = await client.GetTextBlocklistAsync("<blocklistName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetTextBlocklist_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            Response response = client.GetTextBlocklist("<blocklistName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blocklistName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetTextBlocklist_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            Response response = await client.GetTextBlocklistAsync("<blocklistName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blocklistName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetTextBlocklist_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            Response<TextBlocklist> response = client.GetTextBlocklist("<blocklistName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetTextBlocklist_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            Response<TextBlocklist> response = await client.GetTextBlocklistAsync("<blocklistName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrUpdateTextBlocklist_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                blocklistName = "<blocklistName>",
            });
            Response response = client.CreateOrUpdateTextBlocklist("<blocklistName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blocklistName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrUpdateTextBlocklist_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                blocklistName = "<blocklistName>",
            });
            Response response = await client.CreateOrUpdateTextBlocklistAsync("<blocklistName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blocklistName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrUpdateTextBlocklist_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                blocklistName = "<blocklistName>",
                description = "<description>",
            });
            Response response = client.CreateOrUpdateTextBlocklist("<blocklistName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blocklistName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrUpdateTextBlocklist_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                blocklistName = "<blocklistName>",
                description = "<description>",
            });
            Response response = await client.CreateOrUpdateTextBlocklistAsync("<blocklistName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blocklistName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteTextBlocklist_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            Response response = client.DeleteTextBlocklist("<blocklistName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteTextBlocklist_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            Response response = await client.DeleteTextBlocklistAsync("<blocklistName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteTextBlocklist_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            Response response = client.DeleteTextBlocklist("<blocklistName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteTextBlocklist_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            Response response = await client.DeleteTextBlocklistAsync("<blocklistName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AddOrUpdateBlocklistItems_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                blocklistItems = new object[]
            {
new
{
text = "<text>",
}
            },
            });
            Response response = client.AddOrUpdateBlocklistItems("<blocklistName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blocklistItems")[0].GetProperty("blocklistItemId").ToString());
            Console.WriteLine(result.GetProperty("blocklistItems")[0].GetProperty("text").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AddOrUpdateBlocklistItems_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                blocklistItems = new object[]
            {
new
{
text = "<text>",
}
            },
            });
            Response response = await client.AddOrUpdateBlocklistItemsAsync("<blocklistName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blocklistItems")[0].GetProperty("blocklistItemId").ToString());
            Console.WriteLine(result.GetProperty("blocklistItems")[0].GetProperty("text").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AddOrUpdateBlocklistItems_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            AddOrUpdateTextBlocklistItemsOptions addOrUpdateTextBlocklistItemsOptions = new AddOrUpdateTextBlocklistItemsOptions(new TextBlocklistItem[]
            {
new TextBlocklistItem("<text>")
            });
            Response<AddOrUpdateTextBlocklistItemsResult> response = client.AddOrUpdateBlocklistItems("<blocklistName>", addOrUpdateTextBlocklistItemsOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AddOrUpdateBlocklistItems_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            AddOrUpdateTextBlocklistItemsOptions addOrUpdateTextBlocklistItemsOptions = new AddOrUpdateTextBlocklistItemsOptions(new TextBlocklistItem[]
            {
new TextBlocklistItem("<text>")
            });
            Response<AddOrUpdateTextBlocklistItemsResult> response = await client.AddOrUpdateBlocklistItemsAsync("<blocklistName>", addOrUpdateTextBlocklistItemsOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AddOrUpdateBlocklistItems_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                blocklistItems = new object[]
            {
new
{
description = "<description>",
text = "<text>",
}
            },
            });
            Response response = client.AddOrUpdateBlocklistItems("<blocklistName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blocklistItems")[0].GetProperty("blocklistItemId").ToString());
            Console.WriteLine(result.GetProperty("blocklistItems")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("blocklistItems")[0].GetProperty("text").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AddOrUpdateBlocklistItems_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                blocklistItems = new object[]
            {
new
{
description = "<description>",
text = "<text>",
}
            },
            });
            Response response = await client.AddOrUpdateBlocklistItemsAsync("<blocklistName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blocklistItems")[0].GetProperty("blocklistItemId").ToString());
            Console.WriteLine(result.GetProperty("blocklistItems")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("blocklistItems")[0].GetProperty("text").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AddOrUpdateBlocklistItems_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            AddOrUpdateTextBlocklistItemsOptions addOrUpdateTextBlocklistItemsOptions = new AddOrUpdateTextBlocklistItemsOptions(new TextBlocklistItem[]
            {
new TextBlocklistItem("<text>")
{
Description = "<description>",
}
            });
            Response<AddOrUpdateTextBlocklistItemsResult> response = client.AddOrUpdateBlocklistItems("<blocklistName>", addOrUpdateTextBlocklistItemsOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AddOrUpdateBlocklistItems_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            AddOrUpdateTextBlocklistItemsOptions addOrUpdateTextBlocklistItemsOptions = new AddOrUpdateTextBlocklistItemsOptions(new TextBlocklistItem[]
            {
new TextBlocklistItem("<text>")
{
Description = "<description>",
}
            });
            Response<AddOrUpdateTextBlocklistItemsResult> response = await client.AddOrUpdateBlocklistItemsAsync("<blocklistName>", addOrUpdateTextBlocklistItemsOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RemoveBlocklistItems_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                blocklistItemIds = new object[]
            {
"<blocklistItemIds>"
            },
            });
            Response response = client.RemoveBlocklistItems("<blocklistName>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RemoveBlocklistItems_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                blocklistItemIds = new object[]
            {
"<blocklistItemIds>"
            },
            });
            Response response = await client.RemoveBlocklistItemsAsync("<blocklistName>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RemoveBlocklistItems_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            RemoveTextBlocklistItemsOptions removeTextBlocklistItemsOptions = new RemoveTextBlocklistItemsOptions(new string[] { "<blocklistItemIds>" });
            Response response = client.RemoveBlocklistItems("<blocklistName>", removeTextBlocklistItemsOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RemoveBlocklistItems_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            RemoveTextBlocklistItemsOptions removeTextBlocklistItemsOptions = new RemoveTextBlocklistItemsOptions(new string[] { "<blocklistItemIds>" });
            Response response = await client.RemoveBlocklistItemsAsync("<blocklistName>", removeTextBlocklistItemsOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RemoveBlocklistItems_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                blocklistItemIds = new object[]
            {
"<blocklistItemIds>"
            },
            });
            Response response = client.RemoveBlocklistItems("<blocklistName>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RemoveBlocklistItems_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                blocklistItemIds = new object[]
            {
"<blocklistItemIds>"
            },
            });
            Response response = await client.RemoveBlocklistItemsAsync("<blocklistName>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RemoveBlocklistItems_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            RemoveTextBlocklistItemsOptions removeTextBlocklistItemsOptions = new RemoveTextBlocklistItemsOptions(new string[] { "<blocklistItemIds>" });
            Response response = client.RemoveBlocklistItems("<blocklistName>", removeTextBlocklistItemsOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RemoveBlocklistItems_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            RemoveTextBlocklistItemsOptions removeTextBlocklistItemsOptions = new RemoveTextBlocklistItemsOptions(new string[] { "<blocklistItemIds>" });
            Response response = await client.RemoveBlocklistItemsAsync("<blocklistName>", removeTextBlocklistItemsOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetTextBlocklistItem_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            Response response = client.GetTextBlocklistItem("<blocklistName>", "<blocklistItemId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blocklistItemId").ToString());
            Console.WriteLine(result.GetProperty("text").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetTextBlocklistItem_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            Response response = await client.GetTextBlocklistItemAsync("<blocklistName>", "<blocklistItemId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blocklistItemId").ToString());
            Console.WriteLine(result.GetProperty("text").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetTextBlocklistItem_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            Response<TextBlocklistItem> response = client.GetTextBlocklistItem("<blocklistName>", "<blocklistItemId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetTextBlocklistItem_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            Response<TextBlocklistItem> response = await client.GetTextBlocklistItemAsync("<blocklistName>", "<blocklistItemId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetTextBlocklistItem_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            Response response = client.GetTextBlocklistItem("<blocklistName>", "<blocklistItemId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blocklistItemId").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("text").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetTextBlocklistItem_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            Response response = await client.GetTextBlocklistItemAsync("<blocklistName>", "<blocklistItemId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blocklistItemId").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("text").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetTextBlocklistItem_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            Response<TextBlocklistItem> response = client.GetTextBlocklistItem("<blocklistName>", "<blocklistItemId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetTextBlocklistItem_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            Response<TextBlocklistItem> response = await client.GetTextBlocklistItemAsync("<blocklistName>", "<blocklistItemId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetTextBlocklists_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            foreach (BinaryData item in client.GetTextBlocklists(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("blocklistName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetTextBlocklists_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            await foreach (BinaryData item in client.GetTextBlocklistsAsync(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("blocklistName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetTextBlocklists_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            foreach (TextBlocklist item in client.GetTextBlocklists())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetTextBlocklists_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            await foreach (TextBlocklist item in client.GetTextBlocklistsAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetTextBlocklists_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            foreach (BinaryData item in client.GetTextBlocklists(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("blocklistName").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetTextBlocklists_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            await foreach (BinaryData item in client.GetTextBlocklistsAsync(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("blocklistName").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetTextBlocklists_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            foreach (TextBlocklist item in client.GetTextBlocklists())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetTextBlocklists_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            await foreach (TextBlocklist item in client.GetTextBlocklistsAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetTextBlocklistItems_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            foreach (BinaryData item in client.GetTextBlocklistItems("<blocklistName>", null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("blocklistItemId").ToString());
                Console.WriteLine(result.GetProperty("text").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetTextBlocklistItems_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            await foreach (BinaryData item in client.GetTextBlocklistItemsAsync("<blocklistName>", null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("blocklistItemId").ToString());
                Console.WriteLine(result.GetProperty("text").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetTextBlocklistItems_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            foreach (TextBlocklistItem item in client.GetTextBlocklistItems("<blocklistName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetTextBlocklistItems_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            await foreach (TextBlocklistItem item in client.GetTextBlocklistItemsAsync("<blocklistName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetTextBlocklistItems_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            foreach (BinaryData item in client.GetTextBlocklistItems("<blocklistName>", 1234, 1234, 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("blocklistItemId").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("text").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetTextBlocklistItems_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            await foreach (BinaryData item in client.GetTextBlocklistItemsAsync("<blocklistName>", 1234, 1234, 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("blocklistItemId").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("text").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetTextBlocklistItems_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            foreach (TextBlocklistItem item in client.GetTextBlocklistItems("<blocklistName>", maxCount: 1234, skip: 1234, maxpagesize: 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetTextBlocklistItems_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

            await foreach (TextBlocklistItem item in client.GetTextBlocklistItemsAsync("<blocklistName>", maxCount: 1234, skip: 1234, maxpagesize: 1234))
            {
            }
        }
    }
}
