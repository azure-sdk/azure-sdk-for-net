// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.ContentSafety
{
    /// <summary> Unify content model. </summary>
    public partial class UnifyContent
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="UnifyContent"/>. </summary>
        /// <param name="kind"> The kind of the content. </param>
        public UnifyContent(Modality kind)
        {
            Kind = kind;
        }

        /// <summary> Initializes a new instance of <see cref="UnifyContent"/>. </summary>
        /// <param name="kind"> The kind of the content. </param>
        /// <param name="text"> The text content. </param>
        /// <param name="imageBase64"> The base64 encoded image content. </param>
        /// <param name="imageBlob"> The blob URL of the image content. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal UnifyContent(Modality kind, string text, string imageBase64, string imageBlob, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Kind = kind;
            Text = text;
            ImageBase64 = imageBase64;
            ImageBlob = imageBlob;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="UnifyContent"/> for deserialization. </summary>
        internal UnifyContent()
        {
        }

        /// <summary> The kind of the content. </summary>
        public Modality Kind { get; }
        /// <summary> The text content. </summary>
        public string Text { get; set; }
        /// <summary> The base64 encoded image content. </summary>
        public string ImageBase64 { get; set; }
        /// <summary> The blob URL of the image content. </summary>
        public string ImageBlob { get; set; }
    }
}
