// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.ContentSafety
{
    /// <summary> Harm category task result model. </summary>
    public partial class HarmCategoryTaskResult
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="HarmCategoryTaskResult"/>. </summary>
        /// <param name="harmCategory"> The harm category. </param>
        /// <param name="harmConfigId"> The harm configuration ID. </param>
        /// <param name="isDetected"> Indicates if it is detected. </param>
        /// <param name="severity"> The severity level. </param>
        /// <param name="riskLevel"> The risk level. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="harmConfigId"/> is null. </exception>
        internal HarmCategoryTaskResult(HarmCategory harmCategory, string harmConfigId, bool isDetected, int severity, RiskLevel riskLevel)
        {
            Argument.AssertNotNull(harmConfigId, nameof(harmConfigId));

            HarmCategory = harmCategory;
            HarmConfigId = harmConfigId;
            IsDetected = isDetected;
            Severity = severity;
            RiskLevel = riskLevel;
        }

        /// <summary> Initializes a new instance of <see cref="HarmCategoryTaskResult"/>. </summary>
        /// <param name="harmCategory"> The harm category. </param>
        /// <param name="harmConfigId"> The harm configuration ID. </param>
        /// <param name="isDetected"> Indicates if it is detected. </param>
        /// <param name="severity"> The severity level. </param>
        /// <param name="riskLevel"> The risk level. </param>
        /// <param name="details"> Result details. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal HarmCategoryTaskResult(HarmCategory harmCategory, string harmConfigId, bool isDetected, int severity, RiskLevel riskLevel, PromptInjectionDetail details, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            HarmCategory = harmCategory;
            HarmConfigId = harmConfigId;
            IsDetected = isDetected;
            Severity = severity;
            RiskLevel = riskLevel;
            Details = details;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="HarmCategoryTaskResult"/> for deserialization. </summary>
        internal HarmCategoryTaskResult()
        {
        }

        /// <summary> The harm category. </summary>
        public HarmCategory HarmCategory { get; }
        /// <summary> The harm configuration ID. </summary>
        public string HarmConfigId { get; }
        /// <summary> Indicates if it is detected. </summary>
        public bool IsDetected { get; }
        /// <summary> The severity level. </summary>
        public int Severity { get; }
        /// <summary> The risk level. </summary>
        public RiskLevel RiskLevel { get; }
        /// <summary> Result details. </summary>
        public PromptInjectionDetail Details { get; }
    }
}
