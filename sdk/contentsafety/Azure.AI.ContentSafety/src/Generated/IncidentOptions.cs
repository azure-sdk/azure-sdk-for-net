// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.AI.ContentSafety
{
    /// <summary> The text analysis request. </summary>
    public partial class IncidentOptions
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="IncidentOptions"/>. </summary>
        public IncidentOptions()
        {
            IncidentNames = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="IncidentOptions"/>. </summary>
        /// <param name="incidentNames"> The accept decision made by service. </param>
        /// <param name="haltOnIncidentHit"> When set to true, further analyses of harmful content will not be performed in cases where incidents are hit. When set to false, all analyses of harmful content will be performed, whether or not incidents are hit. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal IncidentOptions(IList<string> incidentNames, bool? haltOnIncidentHit, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            IncidentNames = incidentNames;
            HaltOnIncidentHit = haltOnIncidentHit;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The accept decision made by service. </summary>
        public IList<string> IncidentNames { get; }
        /// <summary> When set to true, further analyses of harmful content will not be performed in cases where incidents are hit. When set to false, all analyses of harmful content will be performed, whether or not incidents are hit. </summary>
        public bool? HaltOnIncidentHit { get; set; }
    }
}
