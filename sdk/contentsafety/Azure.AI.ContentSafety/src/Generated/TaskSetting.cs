// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.ContentSafety
{
    /// <summary> Task setting model. </summary>
    public partial class TaskSetting
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="TaskSetting"/>. </summary>
        /// <param name="settingId"> The setting ID. </param>
        /// <param name="settingEnabled"> Indicates if the setting is enabled. </param>
        /// <param name="appliedFor"> The applied for settings. </param>
        /// <param name="kind"> The task type. </param>
        /// <param name="blockingCriteria"> The blocking criteria. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="settingId"/>, <paramref name="appliedFor"/> or <paramref name="blockingCriteria"/> is null. </exception>
        public TaskSetting(string settingId, bool settingEnabled, IEnumerable<AppliedFor> appliedFor, TaskType kind, BlockingCriteria blockingCriteria)
        {
            Argument.AssertNotNull(settingId, nameof(settingId));
            Argument.AssertNotNull(appliedFor, nameof(appliedFor));
            Argument.AssertNotNull(blockingCriteria, nameof(blockingCriteria));

            SettingId = settingId;
            SettingEnabled = settingEnabled;
            AppliedFor = appliedFor.ToList();
            Kind = kind;
            BlockingCriteria = blockingCriteria;
        }

        /// <summary> Initializes a new instance of <see cref="TaskSetting"/>. </summary>
        /// <param name="settingId"> The setting ID. </param>
        /// <param name="settingEnabled"> Indicates if the setting is enabled. </param>
        /// <param name="appliedFor"> The applied for settings. </param>
        /// <param name="kind"> The task type. </param>
        /// <param name="harmCategoryTaskSetting"> The harm category task setting. </param>
        /// <param name="blocklistTaskSetting"> The blocklist task setting. </param>
        /// <param name="safetyIncidentTaskSetting"> The safety incident task setting. </param>
        /// <param name="customHarmCategoryTaskSetting"> The custom harm category task setting. </param>
        /// <param name="blockingCriteria"> The blocking criteria. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal TaskSetting(string settingId, bool settingEnabled, IList<AppliedFor> appliedFor, TaskType kind, HarmCategoryTaskSetting harmCategoryTaskSetting, BlocklistTaskSetting blocklistTaskSetting, SafetyIncidentTaskSetting safetyIncidentTaskSetting, CustomHarmCategoryTaskSetting customHarmCategoryTaskSetting, BlockingCriteria blockingCriteria, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            SettingId = settingId;
            SettingEnabled = settingEnabled;
            AppliedFor = appliedFor;
            Kind = kind;
            HarmCategoryTaskSetting = harmCategoryTaskSetting;
            BlocklistTaskSetting = blocklistTaskSetting;
            SafetyIncidentTaskSetting = safetyIncidentTaskSetting;
            CustomHarmCategoryTaskSetting = customHarmCategoryTaskSetting;
            BlockingCriteria = blockingCriteria;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="TaskSetting"/> for deserialization. </summary>
        internal TaskSetting()
        {
        }

        /// <summary> The setting ID. </summary>
        public string SettingId { get; set; }
        /// <summary> Indicates if the setting is enabled. </summary>
        public bool SettingEnabled { get; set; }
        /// <summary> The applied for settings. </summary>
        public IList<AppliedFor> AppliedFor { get; }
        /// <summary> The task type. </summary>
        public TaskType Kind { get; set; }
        /// <summary> The harm category task setting. </summary>
        public HarmCategoryTaskSetting HarmCategoryTaskSetting { get; set; }
        /// <summary> The blocklist task setting. </summary>
        public BlocklistTaskSetting BlocklistTaskSetting { get; set; }
        /// <summary> The safety incident task setting. </summary>
        public SafetyIncidentTaskSetting SafetyIncidentTaskSetting { get; set; }
        /// <summary> The custom harm category task setting. </summary>
        public CustomHarmCategoryTaskSetting CustomHarmCategoryTaskSetting { get; set; }
        /// <summary> The blocking criteria. </summary>
        public BlockingCriteria BlockingCriteria { get; set; }
    }
}
