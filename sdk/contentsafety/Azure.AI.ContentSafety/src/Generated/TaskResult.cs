// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.ContentSafety
{
    /// <summary> Task result model. </summary>
    public partial class TaskResult
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="TaskResult"/>. </summary>
        /// <param name="settingId"> The setting ID. </param>
        /// <param name="resultCode"> The result code. </param>
        /// <param name="resultCodeDetail"> The result code detail. </param>
        /// <param name="isBlockingCriteriaMet"> Indicates if blocking criteria is met. </param>
        /// <param name="kind"> The task kind. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="settingId"/> or <paramref name="resultCodeDetail"/> is null. </exception>
        internal TaskResult(string settingId, ResultCode resultCode, string resultCodeDetail, bool isBlockingCriteriaMet, TaskType kind)
        {
            Argument.AssertNotNull(settingId, nameof(settingId));
            Argument.AssertNotNull(resultCodeDetail, nameof(resultCodeDetail));

            SettingId = settingId;
            ResultCode = resultCode;
            ResultCodeDetail = resultCodeDetail;
            IsBlockingCriteriaMet = isBlockingCriteriaMet;
            Kind = kind;
        }

        /// <summary> Initializes a new instance of <see cref="TaskResult"/>. </summary>
        /// <param name="settingId"> The setting ID. </param>
        /// <param name="resultCode"> The result code. </param>
        /// <param name="resultCodeDetail"> The result code detail. </param>
        /// <param name="isBlockingCriteriaMet"> Indicates if blocking criteria is met. </param>
        /// <param name="kind"> The task kind. </param>
        /// <param name="harmCategoryTaskResult"> The harm category task result. </param>
        /// <param name="blocklistTaskResult"> The blocklist task result. </param>
        /// <param name="safetyIncidentTaskResult"> The safety incident task result. </param>
        /// <param name="customCategoryTaskResult"> The custom category task result. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal TaskResult(string settingId, ResultCode resultCode, string resultCodeDetail, bool isBlockingCriteriaMet, TaskType kind, HarmCategoryTaskResult harmCategoryTaskResult, BlocklistTaskResult blocklistTaskResult, SafetyIncidentTaskResult safetyIncidentTaskResult, CustomCategoryTaskResult customCategoryTaskResult, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            SettingId = settingId;
            ResultCode = resultCode;
            ResultCodeDetail = resultCodeDetail;
            IsBlockingCriteriaMet = isBlockingCriteriaMet;
            Kind = kind;
            HarmCategoryTaskResult = harmCategoryTaskResult;
            BlocklistTaskResult = blocklistTaskResult;
            SafetyIncidentTaskResult = safetyIncidentTaskResult;
            CustomCategoryTaskResult = customCategoryTaskResult;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="TaskResult"/> for deserialization. </summary>
        internal TaskResult()
        {
        }

        /// <summary> The setting ID. </summary>
        public string SettingId { get; }
        /// <summary> The result code. </summary>
        public ResultCode ResultCode { get; }
        /// <summary> The result code detail. </summary>
        public string ResultCodeDetail { get; }
        /// <summary> Indicates if blocking criteria is met. </summary>
        public bool IsBlockingCriteriaMet { get; }
        /// <summary> The task kind. </summary>
        public TaskType Kind { get; }
        /// <summary> The harm category task result. </summary>
        public HarmCategoryTaskResult HarmCategoryTaskResult { get; }
        /// <summary> The blocklist task result. </summary>
        public BlocklistTaskResult BlocklistTaskResult { get; }
        /// <summary> The safety incident task result. </summary>
        public SafetyIncidentTaskResult SafetyIncidentTaskResult { get; }
        /// <summary> The custom category task result. </summary>
        public CustomCategoryTaskResult CustomCategoryTaskResult { get; }
    }
}
