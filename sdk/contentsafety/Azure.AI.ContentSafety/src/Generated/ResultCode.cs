// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.ContentSafety
{
    /// <summary> The result code. </summary>
    public readonly partial struct ResultCode : IEquatable<ResultCode>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ResultCode"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ResultCode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string OKValue = "oK";
        private const string NoValidInputValue = "noValidInput";
        private const string InternalTimeoutValue = "internalTimeout";
        private const string InternalErrorValue = "internalError";

        /// <summary> OK result code. </summary>
        public static ResultCode OK { get; } = new ResultCode(OKValue);
        /// <summary> No valid input result code. </summary>
        public static ResultCode NoValidInput { get; } = new ResultCode(NoValidInputValue);
        /// <summary> Internal timeout result code. </summary>
        public static ResultCode InternalTimeout { get; } = new ResultCode(InternalTimeoutValue);
        /// <summary> Internal error result code. </summary>
        public static ResultCode InternalError { get; } = new ResultCode(InternalErrorValue);
        /// <summary> Determines if two <see cref="ResultCode"/> values are the same. </summary>
        public static bool operator ==(ResultCode left, ResultCode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ResultCode"/> values are not the same. </summary>
        public static bool operator !=(ResultCode left, ResultCode right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ResultCode"/>. </summary>
        public static implicit operator ResultCode(string value) => new ResultCode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ResultCode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ResultCode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
