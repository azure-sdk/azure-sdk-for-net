// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.ContentSafety
{
    /// <summary> Unify message model. </summary>
    public partial class UnifyMessage
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="UnifyMessage"/>. </summary>
        /// <param name="source"> The source type of the message. </param>
        /// <param name="role"> The role of the message. </param>
        /// <param name="contents"> The contents of the message. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="contents"/> is null. </exception>
        public UnifyMessage(SourceType source, RoleType role, IEnumerable<UnifyContent> contents)
        {
            Argument.AssertNotNull(contents, nameof(contents));

            Source = source;
            Role = role;
            Contents = contents.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="UnifyMessage"/>. </summary>
        /// <param name="source"> The source type of the message. </param>
        /// <param name="role"> The role of the message. </param>
        /// <param name="contents"> The contents of the message. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal UnifyMessage(SourceType source, RoleType role, IList<UnifyContent> contents, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Source = source;
            Role = role;
            Contents = contents;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="UnifyMessage"/> for deserialization. </summary>
        internal UnifyMessage()
        {
        }

        /// <summary> The source type of the message. </summary>
        public SourceType Source { get; }
        /// <summary> The role of the message. </summary>
        public RoleType Role { get; }
        /// <summary> The contents of the message. </summary>
        public IList<UnifyContent> Contents { get; }
    }
}
