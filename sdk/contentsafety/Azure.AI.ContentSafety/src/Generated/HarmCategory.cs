// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.ContentSafety
{
    /// <summary> The harm category. </summary>
    public readonly partial struct HarmCategory : IEquatable<HarmCategory>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="HarmCategory"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public HarmCategory(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CelebrityValue = "celebrity";
        private const string DrugValue = "drug";
        private const string HateValue = "hate";
        private const string PromptInjectionValue = "promptInjection";
        private const string ProtectedMaterialValue = "protectedMaterial";
        private const string SexualValue = "sexual";
        private const string SelfHarmValue = "selfHarm";
        private const string ViolenceValue = "violence";

        /// <summary> Celebrity harm category. </summary>
        public static HarmCategory Celebrity { get; } = new HarmCategory(CelebrityValue);
        /// <summary> Drug harm category. </summary>
        public static HarmCategory Drug { get; } = new HarmCategory(DrugValue);
        /// <summary> Hate harm category. </summary>
        public static HarmCategory Hate { get; } = new HarmCategory(HateValue);
        /// <summary> Prompt injection harm category. </summary>
        public static HarmCategory PromptInjection { get; } = new HarmCategory(PromptInjectionValue);
        /// <summary> Protected material harm category. </summary>
        public static HarmCategory ProtectedMaterial { get; } = new HarmCategory(ProtectedMaterialValue);
        /// <summary> Sexual harm category. </summary>
        public static HarmCategory Sexual { get; } = new HarmCategory(SexualValue);
        /// <summary> Self-harm category. </summary>
        public static HarmCategory SelfHarm { get; } = new HarmCategory(SelfHarmValue);
        /// <summary> Violence harm category. </summary>
        public static HarmCategory Violence { get; } = new HarmCategory(ViolenceValue);
        /// <summary> Determines if two <see cref="HarmCategory"/> values are the same. </summary>
        public static bool operator ==(HarmCategory left, HarmCategory right) => left.Equals(right);
        /// <summary> Determines if two <see cref="HarmCategory"/> values are not the same. </summary>
        public static bool operator !=(HarmCategory left, HarmCategory right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="HarmCategory"/>. </summary>
        public static implicit operator HarmCategory(string value) => new HarmCategory(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is HarmCategory other && Equals(other);
        /// <inheritdoc />
        public bool Equals(HarmCategory other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
