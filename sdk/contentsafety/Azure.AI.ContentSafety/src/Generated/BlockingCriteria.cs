// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.ContentSafety
{
    /// <summary> Blocking criteria model. </summary>
    public partial class BlockingCriteria
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="BlockingCriteria"/>. </summary>
        /// <param name="enabled"> Indicates if blocking criteria is enabled. </param>
        /// <param name="kind"> The blocking criteria kind. </param>
        /// <param name="allowedSeverity"> The allowed severity level. </param>
        /// <param name="isDetected"> Indicates if it is detected. </param>
        /// <param name="allowedRiskLevel"> The risk level. </param>
        public BlockingCriteria(bool enabled, BlockingCriteriaKind kind, int allowedSeverity, bool isDetected, RiskLevel allowedRiskLevel)
        {
            Enabled = enabled;
            Kind = kind;
            AllowedSeverity = allowedSeverity;
            IsDetected = isDetected;
            AllowedRiskLevel = allowedRiskLevel;
        }

        /// <summary> Initializes a new instance of <see cref="BlockingCriteria"/>. </summary>
        /// <param name="enabled"> Indicates if blocking criteria is enabled. </param>
        /// <param name="kind"> The blocking criteria kind. </param>
        /// <param name="allowedSeverity"> The allowed severity level. </param>
        /// <param name="isDetected"> Indicates if it is detected. </param>
        /// <param name="allowedRiskLevel"> The risk level. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal BlockingCriteria(bool enabled, BlockingCriteriaKind kind, int allowedSeverity, bool isDetected, RiskLevel allowedRiskLevel, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Enabled = enabled;
            Kind = kind;
            AllowedSeverity = allowedSeverity;
            IsDetected = isDetected;
            AllowedRiskLevel = allowedRiskLevel;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="BlockingCriteria"/> for deserialization. </summary>
        internal BlockingCriteria()
        {
        }

        /// <summary> Indicates if blocking criteria is enabled. </summary>
        public bool Enabled { get; set; }
        /// <summary> The blocking criteria kind. </summary>
        public BlockingCriteriaKind Kind { get; set; }
        /// <summary> The allowed severity level. </summary>
        public int AllowedSeverity { get; set; }
        /// <summary> Indicates if it is detected. </summary>
        public bool IsDetected { get; set; }
        /// <summary> The risk level. </summary>
        public RiskLevel AllowedRiskLevel { get; set; }
    }
}
