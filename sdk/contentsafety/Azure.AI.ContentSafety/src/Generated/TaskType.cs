// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.ContentSafety
{
    /// <summary> The task type. </summary>
    public readonly partial struct TaskType : IEquatable<TaskType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="TaskType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TaskType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string HarmCategoryValue = "harmCategory";
        private const string BlocklistValue = "blocklist";
        private const string SafetyIncidentValue = "safetyIncident";
        private const string CustomHarmCategoryValue = "customHarmCategory";

        /// <summary> Harm category task type. </summary>
        public static TaskType HarmCategory { get; } = new TaskType(HarmCategoryValue);
        /// <summary> Blocklist task type. </summary>
        public static TaskType Blocklist { get; } = new TaskType(BlocklistValue);
        /// <summary> Safety incident task type. </summary>
        public static TaskType SafetyIncident { get; } = new TaskType(SafetyIncidentValue);
        /// <summary> Custom harm category task type. </summary>
        public static TaskType CustomHarmCategory { get; } = new TaskType(CustomHarmCategoryValue);
        /// <summary> Determines if two <see cref="TaskType"/> values are the same. </summary>
        public static bool operator ==(TaskType left, TaskType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TaskType"/> values are not the same. </summary>
        public static bool operator !=(TaskType left, TaskType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="TaskType"/>. </summary>
        public static implicit operator TaskType(string value) => new TaskType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TaskType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TaskType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
