// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.AI.OpenAI.Assistants
{
    /// <summary> The details describing tools that should be called to submit tool outputs. </summary>
    internal partial class InternalSubmitToolOutputsDetails
    {
        /// <summary> Initializes a new instance of <see cref="InternalSubmitToolOutputsDetails"/>. </summary>
        /// <param name="toolCalls"> The list of tool calls that must be resolved for the assistant thread run to continue. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="toolCalls"/> is null. </exception>
        internal InternalSubmitToolOutputsDetails(IEnumerable<ToolCall> toolCalls)
        {
            Argument.AssertNotNull(toolCalls, nameof(toolCalls));

            ToolCalls = toolCalls.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="InternalSubmitToolOutputsDetails"/>. </summary>
        /// <param name="toolCalls"> The list of tool calls that must be resolved for the assistant thread run to continue. </param>
        internal InternalSubmitToolOutputsDetails(IReadOnlyList<ToolCall> toolCalls)
        {
            ToolCalls = toolCalls;
        }

        /// <summary>
        /// The list of tool calls that must be resolved for the assistant thread run to continue.
        /// Please note <see cref="ToolCall"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="CodeInterpreterToolCall"/>, <see cref="RetrievalToolCall"/> and <see cref="FunctionToolCall"/>.
        /// </summary>
        public IReadOnlyList<ToolCall> ToolCalls { get; }
    }
}
