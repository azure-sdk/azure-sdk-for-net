// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.OpenAI.Assistants
{
    /// <summary> Model factory for models. </summary>
    public static partial class AIOpenAIAssistantsModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Assistants.Assistant"/>. </summary>
        /// <param name="id"> The identifier, which can be referenced in API endpoints. </param>
        /// <param name="object"> The object type, which is always assistant. </param>
        /// <param name="createdAt"> The Unix timestamp, in seconds, representing when this object was created. </param>
        /// <param name="name"> The name of the assistant. </param>
        /// <param name="description"> The description of the assistant. </param>
        /// <param name="model"> The ID of the model to use. </param>
        /// <param name="instructions"> The system instructions for the assistant to use. </param>
        /// <param name="tools"> The collection of tools enabled for the assistant. </param>
        /// <param name="fileIds"> A list of attached file IDs, ordered by creation date in ascending order. </param>
        /// <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        /// <returns> A new <see cref="Assistants.Assistant"/> instance for mocking. </returns>
        public static Assistant Assistant(string id = null, AssistantObject @object = default, DateTimeOffset createdAt = default, string name = null, string description = null, string model = null, string instructions = null, IEnumerable<ToolDefinition> tools = null, IEnumerable<string> fileIds = null, IReadOnlyDictionary<string, string> metadata = null)
        {
            tools ??= new List<ToolDefinition>();
            fileIds ??= new List<string>();
            metadata ??= new Dictionary<string, string>();

            return new Assistant(id, @object, createdAt, name, description, model, instructions, tools?.ToList(), fileIds?.ToList(), metadata);
        }

        /// <summary> Initializes a new instance of <see cref="Assistants.OpenAIPageableListOfAssistant"/>. </summary>
        /// <param name="object"> The object type, which is always list. </param>
        /// <param name="data"> The requested list of items. </param>
        /// <param name="firstId"> The first ID represented in this list. </param>
        /// <param name="lastId"> The last ID represented in this list. </param>
        /// <param name="hasMore"> A value indicating whether there are additional values available not captured in this list. </param>
        /// <returns> A new <see cref="Assistants.OpenAIPageableListOfAssistant"/> instance for mocking. </returns>
        public static OpenAIPageableListOfAssistant OpenAIPageableListOfAssistant(OpenAIPageableListOfAssistantObject @object = default, IEnumerable<Assistant> data = null, string firstId = null, string lastId = null, bool hasMore = default)
        {
            data ??= new List<Assistant>();

            return new OpenAIPageableListOfAssistant(@object, data?.ToList(), firstId, lastId, hasMore);
        }

        /// <summary> Initializes a new instance of <see cref="Assistants.InternalAssistantDeletionStatus"/>. </summary>
        /// <param name="id"> The ID of the resource specified for deletion. </param>
        /// <param name="deleted"> A value indicating whether deletion was successful. </param>
        /// <param name="object"> The object type, which is always 'assistant.deleted'. </param>
        /// <returns> A new <see cref="Assistants.InternalAssistantDeletionStatus"/> instance for mocking. </returns>
        public static InternalAssistantDeletionStatus InternalAssistantDeletionStatus(string id = null, bool deleted = default, InternalAssistantDeletionStatusObject @object = default)
        {
            return new InternalAssistantDeletionStatus(id, deleted, @object);
        }

        /// <summary> Initializes a new instance of <see cref="Assistants.AssistantFile"/>. </summary>
        /// <param name="id"> The identifier, which can be referenced in API endpoints. </param>
        /// <param name="object"> The object type, which is always 'assistant.file'. </param>
        /// <param name="createdAt"> The Unix timestamp, in seconds, representing when this object was created. </param>
        /// <param name="assistantId"> The assistant ID that the file is attached to. </param>
        /// <returns> A new <see cref="Assistants.AssistantFile"/> instance for mocking. </returns>
        public static AssistantFile AssistantFile(string id = null, AssistantFileObject @object = default, DateTimeOffset createdAt = default, string assistantId = null)
        {
            return new AssistantFile(id, @object, createdAt, assistantId);
        }

        /// <summary> Initializes a new instance of <see cref="Assistants.OpenAIPageableListOfAssistantFile"/>. </summary>
        /// <param name="object"> The object type, which is always list. </param>
        /// <param name="data"> The requested list of items. </param>
        /// <param name="firstId"> The first ID represented in this list. </param>
        /// <param name="lastId"> The last ID represented in this list. </param>
        /// <param name="hasMore"> A value indicating whether there are additional values available not captured in this list. </param>
        /// <returns> A new <see cref="Assistants.OpenAIPageableListOfAssistantFile"/> instance for mocking. </returns>
        public static OpenAIPageableListOfAssistantFile OpenAIPageableListOfAssistantFile(OpenAIPageableListOfAssistantFileObject @object = default, IEnumerable<AssistantFile> data = null, string firstId = null, string lastId = null, bool hasMore = default)
        {
            data ??= new List<AssistantFile>();

            return new OpenAIPageableListOfAssistantFile(@object, data?.ToList(), firstId, lastId, hasMore);
        }

        /// <summary> Initializes a new instance of <see cref="Assistants.InternalAssistantFileDeletionStatus"/>. </summary>
        /// <param name="id"> The ID of the resource specified for deletion. </param>
        /// <param name="deleted"> A value indicating whether deletion was successful. </param>
        /// <param name="object"> The object type, which is always 'assistant.file.deleted'. </param>
        /// <returns> A new <see cref="Assistants.InternalAssistantFileDeletionStatus"/> instance for mocking. </returns>
        public static InternalAssistantFileDeletionStatus InternalAssistantFileDeletionStatus(string id = null, bool deleted = default, InternalAssistantFileDeletionStatusObject @object = default)
        {
            return new InternalAssistantFileDeletionStatus(id, deleted, @object);
        }

        /// <summary> Initializes a new instance of <see cref="Assistants.AssistantThread"/>. </summary>
        /// <param name="id"> The identifier, which can be referenced in API endpoints. </param>
        /// <param name="object"> The object type, which is always 'thread'. </param>
        /// <param name="createdAt"> The Unix timestamp, in seconds, representing when this object was created. </param>
        /// <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        /// <returns> A new <see cref="Assistants.AssistantThread"/> instance for mocking. </returns>
        public static AssistantThread AssistantThread(string id = null, AssistantThreadObject @object = default, DateTimeOffset createdAt = default, IReadOnlyDictionary<string, string> metadata = null)
        {
            metadata ??= new Dictionary<string, string>();

            return new AssistantThread(id, @object, createdAt, metadata);
        }

        /// <summary> Initializes a new instance of <see cref="Assistants.ThreadDeletionStatus"/>. </summary>
        /// <param name="id"> The ID of the resource specified for deletion. </param>
        /// <param name="deleted"> A value indicating whether deletion was successful. </param>
        /// <param name="object"> The object type, which is always 'thread.deleted'. </param>
        /// <returns> A new <see cref="Assistants.ThreadDeletionStatus"/> instance for mocking. </returns>
        public static ThreadDeletionStatus ThreadDeletionStatus(string id = null, bool deleted = default, ThreadDeletionStatusObject @object = default)
        {
            return new ThreadDeletionStatus(id, deleted, @object);
        }

        /// <summary> Initializes a new instance of <see cref="Assistants.ThreadMessage"/>. </summary>
        /// <param name="id"> The identifier, which can be referenced in API endpoints. </param>
        /// <param name="object"> The object type, which is always 'thread.message'. </param>
        /// <param name="createdAt"> The Unix timestamp, in seconds, representing when this object was created. </param>
        /// <param name="threadId"> The ID of the thread that this message belongs to. </param>
        /// <param name="role"> The role associated with the assistant thread message. </param>
        /// <param name="contentItems"> The list of content items associated with the assistant thread message. </param>
        /// <param name="assistantId"> If applicable, the ID of the assistant that authored this message. </param>
        /// <param name="runId"> If applicable, the ID of the run associated with the authoring of this message. </param>
        /// <param name="fileIds">
        /// A list of file IDs that the assistant should use. Useful for tools like retrieval and code_interpreter that can
        /// access files.
        /// </param>
        /// <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        /// <returns> A new <see cref="Assistants.ThreadMessage"/> instance for mocking. </returns>
        public static ThreadMessage ThreadMessage(string id = null, ThreadMessageObject @object = default, DateTimeOffset createdAt = default, string threadId = null, MessageRole role = default, IEnumerable<MessageContent> contentItems = null, string assistantId = null, string runId = null, IEnumerable<string> fileIds = null, IReadOnlyDictionary<string, string> metadata = null)
        {
            contentItems ??= new List<MessageContent>();
            fileIds ??= new List<string>();
            metadata ??= new Dictionary<string, string>();

            return new ThreadMessage(id, @object, createdAt, threadId, role, contentItems?.ToList(), assistantId, runId, fileIds?.ToList(), metadata);
        }

        /// <summary> Initializes a new instance of <see cref="Assistants.OpenAIPageableListOfThreadMessage"/>. </summary>
        /// <param name="object"> The object type, which is always list. </param>
        /// <param name="data"> The requested list of items. </param>
        /// <param name="firstId"> The first ID represented in this list. </param>
        /// <param name="lastId"> The last ID represented in this list. </param>
        /// <param name="hasMore"> A value indicating whether there are additional values available not captured in this list. </param>
        /// <returns> A new <see cref="Assistants.OpenAIPageableListOfThreadMessage"/> instance for mocking. </returns>
        public static OpenAIPageableListOfThreadMessage OpenAIPageableListOfThreadMessage(OpenAIPageableListOfThreadMessageObject @object = default, IEnumerable<ThreadMessage> data = null, string firstId = null, string lastId = null, bool hasMore = default)
        {
            data ??= new List<ThreadMessage>();

            return new OpenAIPageableListOfThreadMessage(@object, data?.ToList(), firstId, lastId, hasMore);
        }

        /// <summary> Initializes a new instance of <see cref="Assistants.OpenAIPageableListOfMessageFile"/>. </summary>
        /// <param name="object"> The object type, which is always list. </param>
        /// <param name="data"> The requested list of items. </param>
        /// <param name="firstId"> The first ID represented in this list. </param>
        /// <param name="lastId"> The last ID represented in this list. </param>
        /// <param name="hasMore"> A value indicating whether there are additional values available not captured in this list. </param>
        /// <returns> A new <see cref="Assistants.OpenAIPageableListOfMessageFile"/> instance for mocking. </returns>
        public static OpenAIPageableListOfMessageFile OpenAIPageableListOfMessageFile(OpenAIPageableListOfMessageFileObject @object = default, IEnumerable<MessageFile> data = null, string firstId = null, string lastId = null, bool hasMore = default)
        {
            data ??= new List<MessageFile>();

            return new OpenAIPageableListOfMessageFile(@object, data?.ToList(), firstId, lastId, hasMore);
        }

        /// <summary> Initializes a new instance of <see cref="Assistants.MessageFile"/>. </summary>
        /// <param name="id"> The identifier, which can be referenced in API endpoints. </param>
        /// <param name="object"> The object type, which is always 'thread.message.file'. </param>
        /// <param name="createdAt"> The Unix timestamp, in seconds, representing when this object was created. </param>
        /// <param name="messageId"> The ID of the message that this file is attached to. </param>
        /// <returns> A new <see cref="Assistants.MessageFile"/> instance for mocking. </returns>
        public static MessageFile MessageFile(string id = null, MessageFileObject @object = default, DateTimeOffset createdAt = default, string messageId = null)
        {
            return new MessageFile(id, @object, createdAt, messageId);
        }

        /// <summary> Initializes a new instance of <see cref="Assistants.ThreadRun"/>. </summary>
        /// <param name="id"> The identifier, which can be referenced in API endpoints. </param>
        /// <param name="object"> The object type, which is always 'thread.run'. </param>
        /// <param name="threadId"> The ID of the thread associated with this run. </param>
        /// <param name="assistantId"> The ID of the assistant associated with the thread this run was performed against. </param>
        /// <param name="status"> The status of the assistant thread run. </param>
        /// <param name="requiredAction"> The details of the action required for the assistant thread run to continue. </param>
        /// <param name="lastError"> The last error, if any, encountered by this assistant thread run. </param>
        /// <param name="model"> The ID of the model to use. </param>
        /// <param name="instructions"> The overridden system instructions used for this assistant thread run. </param>
        /// <param name="tools"> The overridden enabled tools used for this assistant thread run. </param>
        /// <param name="fileIds"> A list of attached file IDs, ordered by creation date in ascending order. </param>
        /// <param name="createdAt"> The Unix timestamp, in seconds, representing when this object was created. </param>
        /// <param name="expiresAt"> The Unix timestamp, in seconds, representing when this item expires. </param>
        /// <param name="startedAt"> The Unix timestamp, in seconds, representing when this item was started. </param>
        /// <param name="completedAt"> The Unix timestamp, in seconds, representing when this completed. </param>
        /// <param name="cancelledAt"> The Unix timestamp, in seconds, representing when this was cancelled. </param>
        /// <param name="failedAt"> The Unix timestamp, in seconds, representing when this failed. </param>
        /// <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        /// <returns> A new <see cref="Assistants.ThreadRun"/> instance for mocking. </returns>
        public static ThreadRun ThreadRun(string id = null, ThreadRunObject @object = default, string threadId = null, string assistantId = null, RunStatus status = default, RequiredAction requiredAction = null, RunError lastError = null, string model = null, string instructions = null, IEnumerable<ToolDefinition> tools = null, IEnumerable<string> fileIds = null, DateTimeOffset createdAt = default, DateTimeOffset? expiresAt = null, DateTimeOffset? startedAt = null, DateTimeOffset? completedAt = null, DateTimeOffset? cancelledAt = null, DateTimeOffset? failedAt = null, IReadOnlyDictionary<string, string> metadata = null)
        {
            tools ??= new List<ToolDefinition>();
            fileIds ??= new List<string>();
            metadata ??= new Dictionary<string, string>();

            return new ThreadRun(id, @object, threadId, assistantId, status, requiredAction, lastError, model, instructions, tools?.ToList(), fileIds?.ToList(), createdAt, expiresAt, startedAt, completedAt, cancelledAt, failedAt, metadata);
        }

        /// <summary> Initializes a new instance of <see cref="Assistants.RunError"/>. </summary>
        /// <param name="code"> The status for the error. </param>
        /// <param name="message"> The human-readable text associated with the error. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="code"/> or <paramref name="message"/> is null. </exception>
        /// <returns> A new <see cref="Assistants.RunError"/> instance for mocking. </returns>
        public static RunError RunError(string code = null, string message = null)
        {
            if (code == null)
            {
                throw new ArgumentNullException(nameof(code));
            }
            if (message == null)
            {
                throw new ArgumentNullException(nameof(message));
            }

            return new RunError(code, message);
        }

        /// <summary> Initializes a new instance of <see cref="Assistants.OpenAIPageableListOfThreadRun"/>. </summary>
        /// <param name="object"> The object type, which is always list. </param>
        /// <param name="data"> The requested list of items. </param>
        /// <param name="firstId"> The first ID represented in this list. </param>
        /// <param name="lastId"> The last ID represented in this list. </param>
        /// <param name="hasMore"> A value indicating whether there are additional values available not captured in this list. </param>
        /// <returns> A new <see cref="Assistants.OpenAIPageableListOfThreadRun"/> instance for mocking. </returns>
        public static OpenAIPageableListOfThreadRun OpenAIPageableListOfThreadRun(OpenAIPageableListOfThreadRunObject @object = default, IEnumerable<ThreadRun> data = null, string firstId = null, string lastId = null, bool hasMore = default)
        {
            data ??= new List<ThreadRun>();

            return new OpenAIPageableListOfThreadRun(@object, data?.ToList(), firstId, lastId, hasMore);
        }

        /// <summary> Initializes a new instance of <see cref="Assistants.RunStep"/>. </summary>
        /// <param name="id"> The identifier, which can be referenced in API endpoints. </param>
        /// <param name="object"> The object type, which is always 'thread.run.step'. </param>
        /// <param name="type"> The type of run step, which can be either message_creation or tool_calls. </param>
        /// <param name="assistantId"> The ID of the assistant associated with the run step. </param>
        /// <param name="threadId"> The ID of the thread that was run. </param>
        /// <param name="runId"> The ID of the run that this run step is a part of. </param>
        /// <param name="status"> The status of this run step. </param>
        /// <param name="stepDetails"> The details for this run step. </param>
        /// <param name="lastError"> If applicable, information about the last error encountered by this run step. </param>
        /// <param name="createdAt"> The Unix timestamp, in seconds, representing when this object was created. </param>
        /// <param name="expiredAt"> The Unix timestamp, in seconds, representing when this item expired. </param>
        /// <param name="completedAt"> The Unix timestamp, in seconds, representing when this completed. </param>
        /// <param name="cancelledAt"> The Unix timestamp, in seconds, representing when this was cancelled. </param>
        /// <param name="failedAt"> The Unix timestamp, in seconds, representing when this failed. </param>
        /// <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        /// <returns> A new <see cref="Assistants.RunStep"/> instance for mocking. </returns>
        public static RunStep RunStep(string id = null, RunStepObject @object = default, RunStepType type = default, string assistantId = null, string threadId = null, string runId = null, RunStepStatus status = default, RunStepDetails stepDetails = null, RunStepError lastError = null, DateTimeOffset createdAt = default, DateTimeOffset? expiredAt = null, DateTimeOffset? completedAt = null, DateTimeOffset? cancelledAt = null, DateTimeOffset? failedAt = null, IReadOnlyDictionary<string, string> metadata = null)
        {
            metadata ??= new Dictionary<string, string>();

            return new RunStep(id, @object, type, assistantId, threadId, runId, status, stepDetails, lastError, createdAt, expiredAt, completedAt, cancelledAt, failedAt, metadata);
        }

        /// <summary> Initializes a new instance of <see cref="Assistants.RunStepError"/>. </summary>
        /// <param name="code"> The error code for this error. </param>
        /// <param name="message"> The human-readable text associated with this error. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="message"/> is null. </exception>
        /// <returns> A new <see cref="Assistants.RunStepError"/> instance for mocking. </returns>
        public static RunStepError RunStepError(RunStepErrorCode code = default, string message = null)
        {
            if (message == null)
            {
                throw new ArgumentNullException(nameof(message));
            }

            return new RunStepError(code, message);
        }

        /// <summary> Initializes a new instance of <see cref="Assistants.OpenAIPageableListOfRunStep"/>. </summary>
        /// <param name="object"> The object type, which is always list. </param>
        /// <param name="data"> The requested list of items. </param>
        /// <param name="firstId"> The first ID represented in this list. </param>
        /// <param name="lastId"> The last ID represented in this list. </param>
        /// <param name="hasMore"> A value indicating whether there are additional values available not captured in this list. </param>
        /// <returns> A new <see cref="Assistants.OpenAIPageableListOfRunStep"/> instance for mocking. </returns>
        public static OpenAIPageableListOfRunStep OpenAIPageableListOfRunStep(OpenAIPageableListOfRunStepObject @object = default, IEnumerable<RunStep> data = null, string firstId = null, string lastId = null, bool hasMore = default)
        {
            data ??= new List<RunStep>();

            return new OpenAIPageableListOfRunStep(@object, data?.ToList(), firstId, lastId, hasMore);
        }

        /// <summary> Initializes a new instance of <see cref="Assistants.InternalFileListResponse"/>. </summary>
        /// <param name="object"> The object type, which is always 'list'. </param>
        /// <param name="data"> The files returned for the request. </param>
        /// <returns> A new <see cref="Assistants.InternalFileListResponse"/> instance for mocking. </returns>
        public static InternalFileListResponse InternalFileListResponse(InternalFileListResponseObject @object = default, IEnumerable<OpenAIFile> data = null)
        {
            data ??= new List<OpenAIFile>();

            return new InternalFileListResponse(@object, data?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Assistants.OpenAIFile"/>. </summary>
        /// <param name="object"> The object type, which is always 'file'. </param>
        /// <param name="id"> The identifier, which can be referenced in API endpoints. </param>
        /// <param name="size"> The size of the file, in bytes. </param>
        /// <param name="filename"> The name of the file. </param>
        /// <param name="createdAt"> The Unix timestamp, in seconds, representing when this object was created. </param>
        /// <param name="purpose"> The intended purpose of a file. </param>
        /// <returns> A new <see cref="Assistants.OpenAIFile"/> instance for mocking. </returns>
        public static OpenAIFile OpenAIFile(OpenAIFileObject @object = default, string id = null, int size = default, string filename = null, DateTimeOffset createdAt = default, OpenAIFilePurpose purpose = default)
        {
            return new OpenAIFile(@object, id, size, filename, createdAt, purpose);
        }

        /// <summary> Initializes a new instance of <see cref="Assistants.InternalFileDeletionStatus"/>. </summary>
        /// <param name="id"> The ID of the resource specified for deletion. </param>
        /// <param name="deleted"> A value indicating whether deletion was successful. </param>
        /// <param name="object"> The object type, which is always 'file'. </param>
        /// <returns> A new <see cref="Assistants.InternalFileDeletionStatus"/> instance for mocking. </returns>
        public static InternalFileDeletionStatus InternalFileDeletionStatus(string id = null, bool deleted = default, InternalFileDeletionStatusObject @object = default)
        {
            return new InternalFileDeletionStatus(id, deleted, @object);
        }

        /// <summary> Initializes a new instance of <see cref="Assistants.ToolCall"/>. </summary>
        /// <param name="type"> The object type. </param>
        /// <param name="id"> The ID of the tool call. This ID must be referenced when you submit tool outputs. </param>
        /// <returns> A new <see cref="Assistants.ToolCall"/> instance for mocking. </returns>
        public static ToolCall ToolCall(string type = null, string id = null)
        {
            return new UnknownToolCall(type, id);
        }

        /// <summary> Initializes a new instance of <see cref="Assistants.RetrievalToolCall"/>. </summary>
        /// <param name="id"> The ID of the tool call. This ID must be referenced when you submit tool outputs. </param>
        /// <param name="retrieval"> The key/value pairs produced by the retrieval tool. </param>
        /// <returns> A new <see cref="Assistants.RetrievalToolCall"/> instance for mocking. </returns>
        public static RetrievalToolCall RetrievalToolCall(string id = null, IReadOnlyDictionary<string, string> retrieval = null)
        {
            retrieval ??= new Dictionary<string, string>();

            return new RetrievalToolCall("retrieval", id, retrieval);
        }

        /// <summary> Initializes a new instance of <see cref="Assistants.MessageTextAnnotation"/>. </summary>
        /// <param name="type"> The object type. </param>
        /// <param name="text"> The textual content associated with this text annotation item. </param>
        /// <param name="startIndex"> The first text index associated with this text annotation. </param>
        /// <param name="endIndex"> The last text index associated with this text annotation. </param>
        /// <returns> A new <see cref="Assistants.MessageTextAnnotation"/> instance for mocking. </returns>
        public static MessageTextAnnotation MessageTextAnnotation(string type = null, string text = null, int startIndex = default, int endIndex = default)
        {
            return new UnknownMessageTextAnnotation(type, text, startIndex, endIndex);
        }

        /// <summary> Initializes a new instance of <see cref="Assistants.RunStepMessageCreationDetails"/>. </summary>
        /// <param name="messageCreation"> Information about the message creation associated with this run step. </param>
        /// <returns> A new <see cref="Assistants.RunStepMessageCreationDetails"/> instance for mocking. </returns>
        public static RunStepMessageCreationDetails RunStepMessageCreationDetails(RunStepMessageCreationReference messageCreation = null)
        {
            return new RunStepMessageCreationDetails(RunStepType.MessageCreation, messageCreation);
        }

        /// <summary> Initializes a new instance of <see cref="Assistants.RunStepMessageCreationReference"/>. </summary>
        /// <param name="messageId"> The ID of the message created by this run step. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="messageId"/> is null. </exception>
        /// <returns> A new <see cref="Assistants.RunStepMessageCreationReference"/> instance for mocking. </returns>
        public static RunStepMessageCreationReference RunStepMessageCreationReference(string messageId = null)
        {
            if (messageId == null)
            {
                throw new ArgumentNullException(nameof(messageId));
            }

            return new RunStepMessageCreationReference(messageId);
        }

        /// <summary> Initializes a new instance of <see cref="Assistants.RunStepToolCallDetails"/>. </summary>
        /// <param name="toolCalls"> A list tool call details for this run step. </param>
        /// <returns> A new <see cref="Assistants.RunStepToolCallDetails"/> instance for mocking. </returns>
        public static RunStepToolCallDetails RunStepToolCallDetails(IEnumerable<ToolCall> toolCalls = null)
        {
            toolCalls ??= new List<ToolCall>();

            return new RunStepToolCallDetails(RunStepType.ToolCalls, toolCalls?.ToList());
        }
    }
}
