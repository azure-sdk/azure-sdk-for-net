// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.OpenAI.Assistants
{
    /// <summary> The . </summary>
    internal readonly partial struct : IEquatable<Assistants.>
    {
private readonly string _value;

    /// <summary> Initializes a new instance of <see cref=""/>. </summary>
    /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
    public (string value)
{
_value = value?? throw new ArgumentNullException(nameof(value));
}

private const string ThreadCreatedValue = "thread.created";
private const string ThreadRunCreatedValue = "thread.run.created";
private const string ThreadRunQueuedValue = "thread.run.queued";
private const string ThreadRunInProgressValue = "thread.run.in_progress";
private const string ThreadRunRequiresActionValue = "thread.run.requires_action";
private const string ThreadRunCompletedValue = "thread.run.completed";
private const string ThreadRunFailedValue = "thread.run.failed";
private const string ThreadRunCancellingValue = "thread.run.cancelling";
private const string ThreadRunCancelledValue = "thread.run.cancelled";
private const string ThreadRunExpiredValue = "thread.run.expired";
private const string ThreadRunStepCreatedValue = "thread.run.step.created";
private const string ThreadRunStepInProgressValue = "thread.run.step.in_progress";
private const string ThreadRunStepDeltaValue = "thread.run.step.delta";
private const string ThreadRunStepCompletedValue = "thread.run.step.completed";
private const string ThreadRunStepFailedValue = "thread.run.step.failed";
private const string ThreadRunStepCancelledValue = "thread.run.step.cancelled";
private const string ThreadRunStepExpiredValue = "thread.run.step.expired";
private const string ThreadMessageCreatedValue = "thread.message.created";
private const string ThreadMessageInProgressValue = "thread.message.in_progress";
private const string ThreadMessageDeltaValue = "thread.message.delta";
private const string ThreadMessageCompletedValue = "thread.message.completed";
private const string ThreadMessageIncompleteValue = "thread.message.incomplete";
private const string ErrorValue = "error";
private const string DoneValue = "done";

/// <summary> Event sent when a new thread is created. The data of this event is of type AssistantThread. </summary>
public static Azure.AI.OpenAI.Assistants.ThreadCreated
{ get; } = new Azure.AI.OpenAI.Assistants.(ThreadCreatedValue);
/// <summary> Event sent when a new run is created. The data of this event is of type ThreadRun. </summary>
public static Azure.AI.OpenAI.Assistants.ThreadRunCreated
{ get; } = new Azure.AI.OpenAI.Assistants.(ThreadRunCreatedValue);
/// <summary> Event sent when a run moves to `queued` status. The data of this event is of type ThreadRun. </summary>
public static Azure.AI.OpenAI.Assistants.ThreadRunQueued
{ get; } = new Azure.AI.OpenAI.Assistants.(ThreadRunQueuedValue);
/// <summary> Event sent when a run moves to `in_progress` status. The data of this event is of type ThreadRun. </summary>
public static Azure.AI.OpenAI.Assistants.ThreadRunInProgress
{ get; } = new Azure.AI.OpenAI.Assistants.(ThreadRunInProgressValue);
/// <summary> Event sent when a run moves to `requires_action` status. The data of this event is of type ThreadRun. </summary>
public static Azure.AI.OpenAI.Assistants.ThreadRunRequiresAction
{ get; } = new Azure.AI.OpenAI.Assistants.(ThreadRunRequiresActionValue);
/// <summary> Event sent when a run is completed. The data of this event is of type ThreadRun. </summary>
public static Azure.AI.OpenAI.Assistants.ThreadRunCompleted
{ get; } = new Azure.AI.OpenAI.Assistants.(ThreadRunCompletedValue);
/// <summary> Event sent when a run fails. The data of this event is of type ThreadRun. </summary>
public static Azure.AI.OpenAI.Assistants.ThreadRunFailed
{ get; } = new Azure.AI.OpenAI.Assistants.(ThreadRunFailedValue);
/// <summary> Event sent when a run moves to `cancelling` status. The data of this event is of type ThreadRun. </summary>
public static Azure.AI.OpenAI.Assistants.ThreadRunCancelling
{ get; } = new Azure.AI.OpenAI.Assistants.(ThreadRunCancellingValue);
/// <summary> Event sent when a run is cancelled. The data of this event is of type ThreadRun. </summary>
public static Azure.AI.OpenAI.Assistants.ThreadRunCancelled
{ get; } = new Azure.AI.OpenAI.Assistants.(ThreadRunCancelledValue);
/// <summary> Event sent when a run is expired. The data of this event is of type ThreadRun. </summary>
public static Azure.AI.OpenAI.Assistants.ThreadRunExpired
{ get; } = new Azure.AI.OpenAI.Assistants.(ThreadRunExpiredValue);
/// <summary> Event sent when a new thread run step is created. The data of this event is of type RunStep. </summary>
public static Azure.AI.OpenAI.Assistants.ThreadRunStepCreated
{ get; } = new Azure.AI.OpenAI.Assistants.(ThreadRunStepCreatedValue);
/// <summary> Event sent when a run step moves to `in_progress` status. The data of this event is of type RunStep. </summary>
public static Azure.AI.OpenAI.Assistants.ThreadRunStepInProgress
{ get; } = new Azure.AI.OpenAI.Assistants.(ThreadRunStepInProgressValue);
/// <summary> Event sent when a run stepis being streamed. The data of this event is of type RunStepDeltaChunk. </summary>
public static Azure.AI.OpenAI.Assistants.ThreadRunStepDelta
{ get; } = new Azure.AI.OpenAI.Assistants.(ThreadRunStepDeltaValue);
/// <summary> Event sent when a run step is completed. The data of this event is of type RunStep. </summary>
public static Azure.AI.OpenAI.Assistants.ThreadRunStepCompleted
{ get; } = new Azure.AI.OpenAI.Assistants.(ThreadRunStepCompletedValue);
/// <summary> Event sent when a run step fails. The data of this event is of type RunStep. </summary>
public static Azure.AI.OpenAI.Assistants.ThreadRunStepFailed
{ get; } = new Azure.AI.OpenAI.Assistants.(ThreadRunStepFailedValue);
/// <summary> Event sent when a run step is cancelled. The data of this event is of type RunStep. </summary>
public static Azure.AI.OpenAI.Assistants.ThreadRunStepCancelled
{ get; } = new Azure.AI.OpenAI.Assistants.(ThreadRunStepCancelledValue);
/// <summary> Event sent when a run step is expired. The data of this event is of type RunStep. </summary>
public static Azure.AI.OpenAI.Assistants.ThreadRunStepExpired
{ get; } = new Azure.AI.OpenAI.Assistants.(ThreadRunStepExpiredValue);
/// <summary> Event sent when a new message is created. The data of this event is of type ThreadMessage. </summary>
public static Azure.AI.OpenAI.Assistants.ThreadMessageCreated
{ get; } = new Azure.AI.OpenAI.Assistants.(ThreadMessageCreatedValue);
/// <summary> Event sent when a message moves to `in_progress` status. The data of this event is of type ThreadMessage. </summary>
public static Azure.AI.OpenAI.Assistants.ThreadMessageInProgress
{ get; } = new Azure.AI.OpenAI.Assistants.(ThreadMessageInProgressValue);
/// <summary> Event sent when a message is being streamed. The data of this event is of type MessageDeltaChunk. </summary>
public static Azure.AI.OpenAI.Assistants.ThreadMessageDelta
{ get; } = new Azure.AI.OpenAI.Assistants.(ThreadMessageDeltaValue);
/// <summary> Event sent when a message is completed. The data of this event is of type ThreadMessage. </summary>
public static Azure.AI.OpenAI.Assistants.ThreadMessageCompleted
{ get; } = new Azure.AI.OpenAI.Assistants.(ThreadMessageCompletedValue);
/// <summary> Event sent before a message is completed. The data of this event is of type ThreadMessage. </summary>
public static Azure.AI.OpenAI.Assistants.ThreadMessageIncomplete
{ get; } = new Azure.AI.OpenAI.Assistants.(ThreadMessageIncompleteValue);
/// <summary> Event sent when an error occurs, such as an internal server error or a timeout. </summary>
public static Azure.AI.OpenAI.Assistants.Error
{ get; } = new Azure.AI.OpenAI.Assistants.(ErrorValue);
/// <summary> Event sent when the stream is done. </summary>
public static Azure.AI.OpenAI.Assistants.Done
{ get; } = new Azure.AI.OpenAI.Assistants.(DoneValue);
/// <summary> Determines if two <see cref=""/> values are the same. </summary>
public static bool operator ==(Azure.AI.OpenAI.Assistants.left, Azure.AI.OpenAI.Assistants.right) => left.Equals(right);
/// <summary> Determines if two <see cref=""/> values are not the same. </summary>
public static bool operator !=(Azure.AI.OpenAI.Assistants.left, Azure.AI.OpenAI.Assistants.right) => !left.Equals(right);
/// <summary> Converts a string to a <see cref=""/>. </summary>
public static implicit operator Azure.AI.OpenAI.Assistants.(string value) => new Azure.AI.OpenAI.Assistants.(value);

/// <inheritdoc />
[EditorBrowsable(EditorBrowsableState.Never)]
public override bool Equals(object obj) => obj is Azure.AI.OpenAI.Assistants.other && Equals(other);
/// <inheritdoc />
public bool Equals(Azure.AI.OpenAI.Assistants.other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

/// <inheritdoc />
[EditorBrowsable(EditorBrowsableState.Never)]
public override int GetHashCode() => _value?.GetHashCode() ?? 0;
/// <inheritdoc />
public override string ToString() => _value;
}
}
