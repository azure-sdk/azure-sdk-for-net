// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.OpenAI
{
    /// <summary> Object containing audio response data and its metadata. </summary>
    public partial class AudioResponseData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="AudioResponseData"/>. </summary>
        /// <param name="id"> Unique identifier for this audio response. </param>
        /// <param name="expiresAt">
        /// The Unix timestamp (in seconds) for when this audio response
        /// will no longer be accessible on the server for use in multi-turn
        /// conversations.
        /// </param>
        /// <param name="data">
        /// Base64 encoded audio bytes generated by the model, in the format
        /// specified in the request.
        /// </param>
        /// <param name="transcript"> Transcript of the audio generated by the model. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/>, <paramref name="data"/> or <paramref name="transcript"/> is null. </exception>
        internal AudioResponseData(string id, DateTimeOffset expiresAt, string data, string transcript)
        {
            Argument.AssertNotNull(id, nameof(id));
            Argument.AssertNotNull(data, nameof(data));
            Argument.AssertNotNull(transcript, nameof(transcript));

            Id = id;
            ExpiresAt = expiresAt;
            Data = data;
            Transcript = transcript;
        }

        /// <summary> Initializes a new instance of <see cref="AudioResponseData"/>. </summary>
        /// <param name="id"> Unique identifier for this audio response. </param>
        /// <param name="expiresAt">
        /// The Unix timestamp (in seconds) for when this audio response
        /// will no longer be accessible on the server for use in multi-turn
        /// conversations.
        /// </param>
        /// <param name="data">
        /// Base64 encoded audio bytes generated by the model, in the format
        /// specified in the request.
        /// </param>
        /// <param name="transcript"> Transcript of the audio generated by the model. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal AudioResponseData(string id, DateTimeOffset expiresAt, string data, string transcript, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Id = id;
            ExpiresAt = expiresAt;
            Data = data;
            Transcript = transcript;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="AudioResponseData"/> for deserialization. </summary>
        internal AudioResponseData()
        {
        }

        /// <summary> Unique identifier for this audio response. </summary>
        public string Id { get; }
        /// <summary>
        /// The Unix timestamp (in seconds) for when this audio response
        /// will no longer be accessible on the server for use in multi-turn
        /// conversations.
        /// </summary>
        public DateTimeOffset ExpiresAt { get; }
        /// <summary>
        /// Base64 encoded audio bytes generated by the model, in the format
        /// specified in the request.
        /// </summary>
        public string Data { get; }
        /// <summary> Transcript of the audio generated by the model. </summary>
        public string Transcript { get; }
    }
}
