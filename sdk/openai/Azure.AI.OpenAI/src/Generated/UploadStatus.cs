// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.OpenAI
{
    /// <summary> The UploadStatus. </summary>
    public readonly partial struct UploadStatus : IEquatable<UploadStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="UploadStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public UploadStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PendingValue = "pending";
        private const string CompletedValue = "completed";
        private const string CancelledValue = "cancelled";
        private const string ExpiredValue = "expired";

        /// <summary> pending. </summary>
        public static UploadStatus Pending { get; } = new UploadStatus(PendingValue);
        /// <summary> completed. </summary>
        public static UploadStatus Completed { get; } = new UploadStatus(CompletedValue);
        /// <summary> cancelled. </summary>
        public static UploadStatus Cancelled { get; } = new UploadStatus(CancelledValue);
        /// <summary> expired. </summary>
        public static UploadStatus Expired { get; } = new UploadStatus(ExpiredValue);
        /// <summary> Determines if two <see cref="UploadStatus"/> values are the same. </summary>
        public static bool operator ==(UploadStatus left, UploadStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="UploadStatus"/> values are not the same. </summary>
        public static bool operator !=(UploadStatus left, UploadStatus right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="UploadStatus"/>. </summary>
        public static implicit operator UploadStatus(string value) => new UploadStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is UploadStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(UploadStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
