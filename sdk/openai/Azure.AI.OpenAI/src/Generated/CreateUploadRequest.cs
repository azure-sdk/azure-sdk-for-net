// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.OpenAI
{
    /// <summary> The request body of an upload creation operation. </summary>
    public partial class CreateUploadRequest
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="CreateUploadRequest"/>. </summary>
        /// <param name="filename"> The name of the file to upload. </param>
        /// <param name="purpose">
        /// The intended purpose of the uploaded file.
        ///
        /// Use 'assistants' for Assistants and Message files, 'vision' for Assistants image file inputs, 'batch' for Batch API, and 'fine-tune' for Fine-tuning.
        /// </param>
        /// <param name="bytes"> The number of bytes in the file you are uploading. </param>
        /// <param name="mimeType">
        /// The MIME type of the file.
        ///
        /// This must fall within the supported MIME types for your file purpose. See the supported MIME types for assistants and vision.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="filename"/> or <paramref name="mimeType"/> is null. </exception>
        public CreateUploadRequest(string filename, CreateUploadRequestPurpose purpose, int bytes, string mimeType)
        {
            Argument.AssertNotNull(filename, nameof(filename));
            Argument.AssertNotNull(mimeType, nameof(mimeType));

            Filename = filename;
            Purpose = purpose;
            Bytes = bytes;
            MimeType = mimeType;
        }

        /// <summary> Initializes a new instance of <see cref="CreateUploadRequest"/>. </summary>
        /// <param name="filename"> The name of the file to upload. </param>
        /// <param name="purpose">
        /// The intended purpose of the uploaded file.
        ///
        /// Use 'assistants' for Assistants and Message files, 'vision' for Assistants image file inputs, 'batch' for Batch API, and 'fine-tune' for Fine-tuning.
        /// </param>
        /// <param name="bytes"> The number of bytes in the file you are uploading. </param>
        /// <param name="mimeType">
        /// The MIME type of the file.
        ///
        /// This must fall within the supported MIME types for your file purpose. See the supported MIME types for assistants and vision.
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal CreateUploadRequest(string filename, CreateUploadRequestPurpose purpose, int bytes, string mimeType, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Filename = filename;
            Purpose = purpose;
            Bytes = bytes;
            MimeType = mimeType;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="CreateUploadRequest"/> for deserialization. </summary>
        internal CreateUploadRequest()
        {
        }

        /// <summary> The name of the file to upload. </summary>
        public string Filename { get; }
        /// <summary>
        /// The intended purpose of the uploaded file.
        ///
        /// Use 'assistants' for Assistants and Message files, 'vision' for Assistants image file inputs, 'batch' for Batch API, and 'fine-tune' for Fine-tuning.
        /// </summary>
        public CreateUploadRequestPurpose Purpose { get; }
        /// <summary> The number of bytes in the file you are uploading. </summary>
        public int Bytes { get; }
        /// <summary>
        /// The MIME type of the file.
        ///
        /// This must fall within the supported MIME types for your file purpose. See the supported MIME types for assistants and vision.
        /// </summary>
        public string MimeType { get; }
    }
}
