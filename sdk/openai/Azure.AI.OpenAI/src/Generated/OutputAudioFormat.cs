// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.OpenAI
{
    /// <summary> The output audio format. </summary>
    public readonly partial struct OutputAudioFormat : IEquatable<OutputAudioFormat>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="OutputAudioFormat"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public OutputAudioFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string WavValue = "wav";
        private const string Mp3Value = "mp3";
        private const string FlacValue = "flac";
        private const string OpusValue = "opus";
        private const string Pcm16Value = "pcm16";

        /// <summary> The output audio format is WAV. </summary>
        public static OutputAudioFormat Wav { get; } = new OutputAudioFormat(WavValue);
        /// <summary> The output audio format is MP3. </summary>
        public static OutputAudioFormat Mp3 { get; } = new OutputAudioFormat(Mp3Value);
        /// <summary> The output audio format is FLAC. </summary>
        public static OutputAudioFormat Flac { get; } = new OutputAudioFormat(FlacValue);
        /// <summary> The output audio format is OPUS. </summary>
        public static OutputAudioFormat Opus { get; } = new OutputAudioFormat(OpusValue);
        /// <summary> The output audio format is PCM16. </summary>
        public static OutputAudioFormat Pcm16 { get; } = new OutputAudioFormat(Pcm16Value);
        /// <summary> Determines if two <see cref="OutputAudioFormat"/> values are the same. </summary>
        public static bool operator ==(OutputAudioFormat left, OutputAudioFormat right) => left.Equals(right);
        /// <summary> Determines if two <see cref="OutputAudioFormat"/> values are not the same. </summary>
        public static bool operator !=(OutputAudioFormat left, OutputAudioFormat right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="OutputAudioFormat"/>. </summary>
        public static implicit operator OutputAudioFormat(string value) => new OutputAudioFormat(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is OutputAudioFormat other && Equals(other);
        /// <inheritdoc />
        public bool Equals(OutputAudioFormat other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
