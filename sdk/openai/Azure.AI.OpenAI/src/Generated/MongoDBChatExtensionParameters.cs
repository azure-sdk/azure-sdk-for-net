// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.OpenAI
{
    /// <summary> Parameters for the MongoDB chat extension. The supported authentication types are AccessToken, SystemAssignedManagedIdentity and UserAssignedManagedIdentity. </summary>
    public partial class MongoDBChatExtensionParameters
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="MongoDBChatExtensionParameters"/>. </summary>
        /// <param name="endpoint"> The endpoint name for MongoDB. </param>
        /// <param name="collectionName"> The collection name for MongoDB. </param>
        /// <param name="databaseName"> The database name for MongoDB. </param>
        /// <param name="appName"> The app name for MongoDB. </param>
        /// <param name="indexName"> The name of the MongoDB index. </param>
        /// <param name="fieldsMapping">
        /// Field mappings to apply to data used by the MongoDB data source.
        /// Note that content and vector field mappings are required for MongoDB.
        /// </param>
        /// <param name="embeddingDependency"> The vectorization source to use with the MongoDB chat extension. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/>, <paramref name="collectionName"/>, <paramref name="databaseName"/>, <paramref name="appName"/>, <paramref name="indexName"/>, <paramref name="fieldsMapping"/> or <paramref name="embeddingDependency"/> is null. </exception>
        public MongoDBChatExtensionParameters(string endpoint, string collectionName, string databaseName, string appName, string indexName, MongoDBChatExtensionParametersFieldsMapping fieldsMapping, BinaryData embeddingDependency)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(collectionName, nameof(collectionName));
            Argument.AssertNotNull(databaseName, nameof(databaseName));
            Argument.AssertNotNull(appName, nameof(appName));
            Argument.AssertNotNull(indexName, nameof(indexName));
            Argument.AssertNotNull(fieldsMapping, nameof(fieldsMapping));
            Argument.AssertNotNull(embeddingDependency, nameof(embeddingDependency));

            IncludeContexts = new ChangeTrackingList<OnYourDataContextProperty>();
            Endpoint = endpoint;
            CollectionName = collectionName;
            DatabaseName = databaseName;
            AppName = appName;
            IndexName = indexName;
            FieldsMapping = fieldsMapping;
            EmbeddingDependency = embeddingDependency;
        }

        /// <summary> Initializes a new instance of <see cref="MongoDBChatExtensionParameters"/>. </summary>
        /// <param name="documentCount"> The configured top number of documents to feature for the configured query. </param>
        /// <param name="shouldRestrictResultScope"> Whether queries should be restricted to use of indexed data. </param>
        /// <param name="strictness"> The configured strictness of the search relevance filtering. The higher of strictness, the higher of the precision but lower recall of the answer. </param>
        /// <param name="maxSearchQueries">
        /// The max number of rewritten queries should be send to search provider for one user message. If not specified,
        /// the system will decide the number of queries to send.
        /// </param>
        /// <param name="allowPartialResult">
        /// If specified as true, the system will allow partial search results to be used and the request fails if all the queries fail.
        /// If not specified, or specified as false, the request will fail if any search query fails.
        /// </param>
        /// <param name="includeContexts"> The included properties of the output context. If not specified, the default value is `citations` and `intent`. </param>
        /// <param name="authentication">
        /// The authentication method to use when accessing the defined data source.
        /// Each data source type supports a specific set of available authentication methods; please see the documentation of
        /// the data source for supported mechanisms.
        /// If not otherwise provided, On Your Data will attempt to use System Managed Identity (default credential)
        /// authentication.
        /// </param>
        /// <param name="endpoint"> The endpoint name for MongoDB. </param>
        /// <param name="collectionName"> The collection name for MongoDB. </param>
        /// <param name="databaseName"> The database name for MongoDB. </param>
        /// <param name="appName"> The app name for MongoDB. </param>
        /// <param name="indexName"> The name of the MongoDB index. </param>
        /// <param name="fieldsMapping">
        /// Field mappings to apply to data used by the MongoDB data source.
        /// Note that content and vector field mappings are required for MongoDB.
        /// </param>
        /// <param name="embeddingDependency"> The vectorization source to use with the MongoDB chat extension. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal MongoDBChatExtensionParameters(int? documentCount, bool? shouldRestrictResultScope, int? strictness, int? maxSearchQueries, bool? allowPartialResult, IList<OnYourDataContextProperty> includeContexts, OnYourDataUsernameAndPasswordAuthenticationOptions authentication, string endpoint, string collectionName, string databaseName, string appName, string indexName, MongoDBChatExtensionParametersFieldsMapping fieldsMapping, BinaryData embeddingDependency, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            DocumentCount = documentCount;
            ShouldRestrictResultScope = shouldRestrictResultScope;
            Strictness = strictness;
            MaxSearchQueries = maxSearchQueries;
            AllowPartialResult = allowPartialResult;
            IncludeContexts = includeContexts;
            Authentication = authentication;
            Endpoint = endpoint;
            CollectionName = collectionName;
            DatabaseName = databaseName;
            AppName = appName;
            IndexName = indexName;
            FieldsMapping = fieldsMapping;
            EmbeddingDependency = embeddingDependency;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="MongoDBChatExtensionParameters"/> for deserialization. </summary>
        internal MongoDBChatExtensionParameters()
        {
        }

        /// <summary> The configured top number of documents to feature for the configured query. </summary>
        public int? DocumentCount { get; set; }
        /// <summary> Whether queries should be restricted to use of indexed data. </summary>
        public bool? ShouldRestrictResultScope { get; set; }
        /// <summary> The configured strictness of the search relevance filtering. The higher of strictness, the higher of the precision but lower recall of the answer. </summary>
        public int? Strictness { get; set; }
        /// <summary>
        /// The max number of rewritten queries should be send to search provider for one user message. If not specified,
        /// the system will decide the number of queries to send.
        /// </summary>
        public int? MaxSearchQueries { get; set; }
        /// <summary>
        /// If specified as true, the system will allow partial search results to be used and the request fails if all the queries fail.
        /// If not specified, or specified as false, the request will fail if any search query fails.
        /// </summary>
        public bool? AllowPartialResult { get; set; }
        /// <summary> The included properties of the output context. If not specified, the default value is `citations` and `intent`. </summary>
        public IList<OnYourDataContextProperty> IncludeContexts { get; }
        /// <summary>
        /// The authentication method to use when accessing the defined data source.
        /// Each data source type supports a specific set of available authentication methods; please see the documentation of
        /// the data source for supported mechanisms.
        /// If not otherwise provided, On Your Data will attempt to use System Managed Identity (default credential)
        /// authentication.
        /// </summary>
        public OnYourDataUsernameAndPasswordAuthenticationOptions Authentication { get; set; }
        /// <summary> The endpoint name for MongoDB. </summary>
        public string Endpoint { get; }
        /// <summary> The collection name for MongoDB. </summary>
        public string CollectionName { get; }
        /// <summary> The database name for MongoDB. </summary>
        public string DatabaseName { get; }
        /// <summary> The app name for MongoDB. </summary>
        public string AppName { get; }
        /// <summary> The name of the MongoDB index. </summary>
        public string IndexName { get; }
        /// <summary>
        /// Field mappings to apply to data used by the MongoDB data source.
        /// Note that content and vector field mappings are required for MongoDB.
        /// </summary>
        public MongoDBChatExtensionParametersFieldsMapping FieldsMapping { get; }
        /// <summary>
        /// The vectorization source to use with the MongoDB chat extension.
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// <remarks>
        /// Supported types:
        /// <list type="bullet">
        /// <item>
        /// <description><see cref="OnYourDataEndpointVectorizationSource"/></description>
        /// </item>
        /// <item>
        /// <description><see cref="OnYourDataDeploymentNameVectorizationSource"/></description>
        /// </item>
        /// </list>
        /// </remarks>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData EmbeddingDependency { get; }
    }
}
