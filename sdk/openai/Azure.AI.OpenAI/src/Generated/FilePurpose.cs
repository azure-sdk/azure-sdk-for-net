// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.OpenAI
{
    /// <summary> The possible values denoting the intended usage of a file. </summary>
    public readonly partial struct FilePurpose : IEquatable<FilePurpose>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="FilePurpose"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public FilePurpose(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string FineTuneValue = "fine-tune";
        private const string FineTuneResultsValue = "fine-tune-results";
        private const string AssistantsValue = "assistants";
        private const string AssistantsOutputValue = "assistants_output";
        private const string BatchValue = "batch";
        private const string BatchOutputValue = "batch_output";
        private const string VisionValue = "vision";

        /// <summary> Indicates a file is used for fine tuning input. </summary>
        public static FilePurpose FineTune { get; } = new FilePurpose(FineTuneValue);
        /// <summary> Indicates a file is used for fine tuning results. </summary>
        public static FilePurpose FineTuneResults { get; } = new FilePurpose(FineTuneResultsValue);
        /// <summary> Indicates a file is used as input to assistants. </summary>
        public static FilePurpose Assistants { get; } = new FilePurpose(AssistantsValue);
        /// <summary> Indicates a file is used as output by assistants. </summary>
        public static FilePurpose AssistantsOutput { get; } = new FilePurpose(AssistantsOutputValue);
        /// <summary> Indicates a file is used as input to . </summary>
        public static FilePurpose Batch { get; } = new FilePurpose(BatchValue);
        /// <summary> Indicates a file is used as output by a vector store batch operation. </summary>
        public static FilePurpose BatchOutput { get; } = new FilePurpose(BatchOutputValue);
        /// <summary> Indicates a file is used as input to a vision operation. </summary>
        public static FilePurpose Vision { get; } = new FilePurpose(VisionValue);
        /// <summary> Determines if two <see cref="FilePurpose"/> values are the same. </summary>
        public static bool operator ==(FilePurpose left, FilePurpose right) => left.Equals(right);
        /// <summary> Determines if two <see cref="FilePurpose"/> values are not the same. </summary>
        public static bool operator !=(FilePurpose left, FilePurpose right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="FilePurpose"/>. </summary>
        public static implicit operator FilePurpose(string value) => new FilePurpose(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is FilePurpose other && Equals(other);
        /// <inheritdoc />
        public bool Equals(FilePurpose other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
