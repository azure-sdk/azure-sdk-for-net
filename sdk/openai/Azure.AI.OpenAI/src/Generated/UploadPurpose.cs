// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.OpenAI
{
    /// <summary> The UploadPurpose. </summary>
    public readonly partial struct UploadPurpose : IEquatable<UploadPurpose>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="UploadPurpose"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public UploadPurpose(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string BatchValue = "batch";
        private const string BatchOutputValue = "batch_output";
        private const string FineTuneValue = "fine-tune";
        private const string FineTuneResultsValue = "fine-tune-results";
        private const string AssistantsValue = "assistants";
        private const string AssistantsOutputValue = "assistants_output";
        private const string VisionValue = "vision";

        /// <summary> batch. </summary>
        public static UploadPurpose Batch { get; } = new UploadPurpose(BatchValue);
        /// <summary> batch_output. </summary>
        public static UploadPurpose BatchOutput { get; } = new UploadPurpose(BatchOutputValue);
        /// <summary> fine-tune. </summary>
        public static UploadPurpose FineTune { get; } = new UploadPurpose(FineTuneValue);
        /// <summary> fine-tune-results. </summary>
        public static UploadPurpose FineTuneResults { get; } = new UploadPurpose(FineTuneResultsValue);
        /// <summary> assistants. </summary>
        public static UploadPurpose Assistants { get; } = new UploadPurpose(AssistantsValue);
        /// <summary> assistants_output. </summary>
        public static UploadPurpose AssistantsOutput { get; } = new UploadPurpose(AssistantsOutputValue);
        /// <summary> vision. </summary>
        public static UploadPurpose Vision { get; } = new UploadPurpose(VisionValue);
        /// <summary> Determines if two <see cref="UploadPurpose"/> values are the same. </summary>
        public static bool operator ==(UploadPurpose left, UploadPurpose right) => left.Equals(right);
        /// <summary> Determines if two <see cref="UploadPurpose"/> values are not the same. </summary>
        public static bool operator !=(UploadPurpose left, UploadPurpose right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="UploadPurpose"/>. </summary>
        public static implicit operator UploadPurpose(string value) => new UploadPurpose(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is UploadPurpose other && Equals(other);
        /// <inheritdoc />
        public bool Equals(UploadPurpose other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
