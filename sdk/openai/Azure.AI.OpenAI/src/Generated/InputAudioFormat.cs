// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.OpenAI
{
    /// <summary> Values to describe the format of the input audio data. </summary>
    public readonly partial struct InputAudioFormat : IEquatable<InputAudioFormat>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="InputAudioFormat"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public InputAudioFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string WavValue = "wav";
        private const string Mp3Value = "mp3";

        /// <summary> Specifies that the audio data is in the WAV format. </summary>
        public static InputAudioFormat Wav { get; } = new InputAudioFormat(WavValue);
        /// <summary> Specifies that the audio data is in the MP3 format. </summary>
        public static InputAudioFormat Mp3 { get; } = new InputAudioFormat(Mp3Value);
        /// <summary> Determines if two <see cref="InputAudioFormat"/> values are the same. </summary>
        public static bool operator ==(InputAudioFormat left, InputAudioFormat right) => left.Equals(right);
        /// <summary> Determines if two <see cref="InputAudioFormat"/> values are not the same. </summary>
        public static bool operator !=(InputAudioFormat left, InputAudioFormat right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="InputAudioFormat"/>. </summary>
        public static implicit operator InputAudioFormat(string value) => new InputAudioFormat(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is InputAudioFormat other && Equals(other);
        /// <inheritdoc />
        public bool Equals(InputAudioFormat other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
