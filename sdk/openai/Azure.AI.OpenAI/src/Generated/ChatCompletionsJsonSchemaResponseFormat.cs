// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.OpenAI
{
    /// <summary>
    /// A response format for Chat Completions that restricts responses to emitting JSON that conforms to a provided JSON
    /// Schema for Structured Outputs.
    /// </summary>
    public partial class ChatCompletionsJsonSchemaResponseFormat : ChatCompletionsResponseFormat
    {
        /// <summary> Initializes a new instance of <see cref="ChatCompletionsJsonSchemaResponseFormat"/>. </summary>
        /// <param name="jsonSchema"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="jsonSchema"/> is null. </exception>
        public ChatCompletionsJsonSchemaResponseFormat(ChatCompletionsJsonSchemaResponseFormatJsonSchema jsonSchema)
        {
            Argument.AssertNotNull(jsonSchema, nameof(jsonSchema));

            Type = "json_schema";
            JsonSchema = jsonSchema;
        }

        /// <summary> Initializes a new instance of <see cref="ChatCompletionsJsonSchemaResponseFormat"/>. </summary>
        /// <param name="type"> The discriminated type for the response format. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="jsonSchema"></param>
        internal ChatCompletionsJsonSchemaResponseFormat(string type, IDictionary<string, BinaryData> serializedAdditionalRawData, ChatCompletionsJsonSchemaResponseFormatJsonSchema jsonSchema) : base(type, serializedAdditionalRawData)
        {
            JsonSchema = jsonSchema;
        }

        /// <summary> Initializes a new instance of <see cref="ChatCompletionsJsonSchemaResponseFormat"/> for deserialization. </summary>
        internal ChatCompletionsJsonSchemaResponseFormat()
        {
        }

        /// <summary> Gets the json schema. </summary>
        public ChatCompletionsJsonSchemaResponseFormatJsonSchema JsonSchema { get; }
    }
}
