// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.AI.OpenAI;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.OpenAI.Samples
{
    public class Samples_OpenAIClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAudioTranscriptionAsPlainText()
        {
            OpenAIClient client = new OpenAIClient(null);

            RequestContent content = RequestContent.Create(new
            {
                file = new object(),
            });
            Response response = client.GetAudioTranscriptionAsPlainText("<deploymentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAudioTranscriptionAsPlainText_Async()
        {
            OpenAIClient client = new OpenAIClient(null);

            RequestContent content = RequestContent.Create(new
            {
                file = new object(),
            });
            Response response = await client.GetAudioTranscriptionAsPlainTextAsync("<deploymentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAudioTranscriptionAsPlainText_Convenience()
        {
            OpenAIClient client = new OpenAIClient(null);

            AudioTranscriptionOptions audioTranscriptionOptions = new AudioTranscriptionOptions(BinaryData.FromObjectAsJson(new object()));
            Response<string> response = client.GetAudioTranscriptionAsPlainText("<deploymentId>", audioTranscriptionOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAudioTranscriptionAsPlainText_Convenience_Async()
        {
            OpenAIClient client = new OpenAIClient(null);

            AudioTranscriptionOptions audioTranscriptionOptions = new AudioTranscriptionOptions(BinaryData.FromObjectAsJson(new object()));
            Response<string> response = await client.GetAudioTranscriptionAsPlainTextAsync("<deploymentId>", audioTranscriptionOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAudioTranscriptionAsPlainText_AllParameters()
        {
            OpenAIClient client = new OpenAIClient(null);

            RequestContent content = RequestContent.Create(new
            {
                file = new object(),
                response_format = "json",
                language = "<language>",
                prompt = "<prompt>",
                temperature = 123.45F,
                model = "<model>",
            });
            Response response = client.GetAudioTranscriptionAsPlainText("<deploymentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAudioTranscriptionAsPlainText_AllParameters_Async()
        {
            OpenAIClient client = new OpenAIClient(null);

            RequestContent content = RequestContent.Create(new
            {
                file = new object(),
                response_format = "json",
                language = "<language>",
                prompt = "<prompt>",
                temperature = 123.45F,
                model = "<model>",
            });
            Response response = await client.GetAudioTranscriptionAsPlainTextAsync("<deploymentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAudioTranscriptionAsPlainText_AllParameters_Convenience()
        {
            OpenAIClient client = new OpenAIClient(null);

            AudioTranscriptionOptions audioTranscriptionOptions = new AudioTranscriptionOptions(BinaryData.FromObjectAsJson(new object()))
            {
                ResponseFormat = AudioTranscriptionFormat.Json,
                Language = "<language>",
                Prompt = "<prompt>",
                Temperature = 123.45F,
                InternalNonAzureModelName = "<model>",
            };
            Response<string> response = client.GetAudioTranscriptionAsPlainText("<deploymentId>", audioTranscriptionOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAudioTranscriptionAsPlainText_AllParameters_Convenience_Async()
        {
            OpenAIClient client = new OpenAIClient(null);

            AudioTranscriptionOptions audioTranscriptionOptions = new AudioTranscriptionOptions(BinaryData.FromObjectAsJson(new object()))
            {
                ResponseFormat = AudioTranscriptionFormat.Json,
                Language = "<language>",
                Prompt = "<prompt>",
                Temperature = 123.45F,
                InternalNonAzureModelName = "<model>",
            };
            Response<string> response = await client.GetAudioTranscriptionAsPlainTextAsync("<deploymentId>", audioTranscriptionOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAudioTranscriptionAsResponseObject()
        {
            OpenAIClient client = new OpenAIClient(null);

            RequestContent content = RequestContent.Create(new
            {
                file = new object(),
            });
            Response response = client.GetAudioTranscriptionAsResponseObject("<deploymentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("text").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAudioTranscriptionAsResponseObject_Async()
        {
            OpenAIClient client = new OpenAIClient(null);

            RequestContent content = RequestContent.Create(new
            {
                file = new object(),
            });
            Response response = await client.GetAudioTranscriptionAsResponseObjectAsync("<deploymentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("text").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAudioTranscriptionAsResponseObject_Convenience()
        {
            OpenAIClient client = new OpenAIClient(null);

            AudioTranscriptionOptions audioTranscriptionOptions = new AudioTranscriptionOptions(BinaryData.FromObjectAsJson(new object()));
            Response<AudioTranscription> response = client.GetAudioTranscriptionAsResponseObject("<deploymentId>", audioTranscriptionOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAudioTranscriptionAsResponseObject_Convenience_Async()
        {
            OpenAIClient client = new OpenAIClient(null);

            AudioTranscriptionOptions audioTranscriptionOptions = new AudioTranscriptionOptions(BinaryData.FromObjectAsJson(new object()));
            Response<AudioTranscription> response = await client.GetAudioTranscriptionAsResponseObjectAsync("<deploymentId>", audioTranscriptionOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAudioTranscriptionAsResponseObject_AllParameters()
        {
            OpenAIClient client = new OpenAIClient(null);

            RequestContent content = RequestContent.Create(new
            {
                file = new object(),
                response_format = "json",
                language = "<language>",
                prompt = "<prompt>",
                temperature = 123.45F,
                model = "<model>",
            });
            Response response = client.GetAudioTranscriptionAsResponseObject("<deploymentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("task").ToString());
            Console.WriteLine(result.GetProperty("language").ToString());
            Console.WriteLine(result.GetProperty("duration").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("start").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("end").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("avg_logprob").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("compression_ratio").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("no_speech_prob").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("tokens")[0].ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("seek").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAudioTranscriptionAsResponseObject_AllParameters_Async()
        {
            OpenAIClient client = new OpenAIClient(null);

            RequestContent content = RequestContent.Create(new
            {
                file = new object(),
                response_format = "json",
                language = "<language>",
                prompt = "<prompt>",
                temperature = 123.45F,
                model = "<model>",
            });
            Response response = await client.GetAudioTranscriptionAsResponseObjectAsync("<deploymentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("task").ToString());
            Console.WriteLine(result.GetProperty("language").ToString());
            Console.WriteLine(result.GetProperty("duration").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("start").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("end").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("avg_logprob").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("compression_ratio").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("no_speech_prob").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("tokens")[0].ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("seek").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAudioTranscriptionAsResponseObject_AllParameters_Convenience()
        {
            OpenAIClient client = new OpenAIClient(null);

            AudioTranscriptionOptions audioTranscriptionOptions = new AudioTranscriptionOptions(BinaryData.FromObjectAsJson(new object()))
            {
                ResponseFormat = AudioTranscriptionFormat.Json,
                Language = "<language>",
                Prompt = "<prompt>",
                Temperature = 123.45F,
                InternalNonAzureModelName = "<model>",
            };
            Response<AudioTranscription> response = client.GetAudioTranscriptionAsResponseObject("<deploymentId>", audioTranscriptionOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAudioTranscriptionAsResponseObject_AllParameters_Convenience_Async()
        {
            OpenAIClient client = new OpenAIClient(null);

            AudioTranscriptionOptions audioTranscriptionOptions = new AudioTranscriptionOptions(BinaryData.FromObjectAsJson(new object()))
            {
                ResponseFormat = AudioTranscriptionFormat.Json,
                Language = "<language>",
                Prompt = "<prompt>",
                Temperature = 123.45F,
                InternalNonAzureModelName = "<model>",
            };
            Response<AudioTranscription> response = await client.GetAudioTranscriptionAsResponseObjectAsync("<deploymentId>", audioTranscriptionOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAudioTranslationAsPlainText()
        {
            OpenAIClient client = new OpenAIClient(null);

            RequestContent content = RequestContent.Create(new
            {
                file = new object(),
            });
            Response response = client.GetAudioTranslationAsPlainText("<deploymentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAudioTranslationAsPlainText_Async()
        {
            OpenAIClient client = new OpenAIClient(null);

            RequestContent content = RequestContent.Create(new
            {
                file = new object(),
            });
            Response response = await client.GetAudioTranslationAsPlainTextAsync("<deploymentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAudioTranslationAsPlainText_Convenience()
        {
            OpenAIClient client = new OpenAIClient(null);

            AudioTranslationOptions audioTranslationOptions = new AudioTranslationOptions(BinaryData.FromObjectAsJson(new object()));
            Response<string> response = client.GetAudioTranslationAsPlainText("<deploymentId>", audioTranslationOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAudioTranslationAsPlainText_Convenience_Async()
        {
            OpenAIClient client = new OpenAIClient(null);

            AudioTranslationOptions audioTranslationOptions = new AudioTranslationOptions(BinaryData.FromObjectAsJson(new object()));
            Response<string> response = await client.GetAudioTranslationAsPlainTextAsync("<deploymentId>", audioTranslationOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAudioTranslationAsPlainText_AllParameters()
        {
            OpenAIClient client = new OpenAIClient(null);

            RequestContent content = RequestContent.Create(new
            {
                file = new object(),
                response_format = "json",
                prompt = "<prompt>",
                temperature = 123.45F,
                model = "<model>",
            });
            Response response = client.GetAudioTranslationAsPlainText("<deploymentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAudioTranslationAsPlainText_AllParameters_Async()
        {
            OpenAIClient client = new OpenAIClient(null);

            RequestContent content = RequestContent.Create(new
            {
                file = new object(),
                response_format = "json",
                prompt = "<prompt>",
                temperature = 123.45F,
                model = "<model>",
            });
            Response response = await client.GetAudioTranslationAsPlainTextAsync("<deploymentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAudioTranslationAsPlainText_AllParameters_Convenience()
        {
            OpenAIClient client = new OpenAIClient(null);

            AudioTranslationOptions audioTranslationOptions = new AudioTranslationOptions(BinaryData.FromObjectAsJson(new object()))
            {
                ResponseFormat = AudioTranslationFormat.Json,
                Prompt = "<prompt>",
                Temperature = 123.45F,
                InternalNonAzureModelName = "<model>",
            };
            Response<string> response = client.GetAudioTranslationAsPlainText("<deploymentId>", audioTranslationOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAudioTranslationAsPlainText_AllParameters_Convenience_Async()
        {
            OpenAIClient client = new OpenAIClient(null);

            AudioTranslationOptions audioTranslationOptions = new AudioTranslationOptions(BinaryData.FromObjectAsJson(new object()))
            {
                ResponseFormat = AudioTranslationFormat.Json,
                Prompt = "<prompt>",
                Temperature = 123.45F,
                InternalNonAzureModelName = "<model>",
            };
            Response<string> response = await client.GetAudioTranslationAsPlainTextAsync("<deploymentId>", audioTranslationOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAudioTranslationAsResponseObject()
        {
            OpenAIClient client = new OpenAIClient(null);

            RequestContent content = RequestContent.Create(new
            {
                file = new object(),
            });
            Response response = client.GetAudioTranslationAsResponseObject("<deploymentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("text").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAudioTranslationAsResponseObject_Async()
        {
            OpenAIClient client = new OpenAIClient(null);

            RequestContent content = RequestContent.Create(new
            {
                file = new object(),
            });
            Response response = await client.GetAudioTranslationAsResponseObjectAsync("<deploymentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("text").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAudioTranslationAsResponseObject_Convenience()
        {
            OpenAIClient client = new OpenAIClient(null);

            AudioTranslationOptions audioTranslationOptions = new AudioTranslationOptions(BinaryData.FromObjectAsJson(new object()));
            Response<AudioTranslation> response = client.GetAudioTranslationAsResponseObject("<deploymentId>", audioTranslationOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAudioTranslationAsResponseObject_Convenience_Async()
        {
            OpenAIClient client = new OpenAIClient(null);

            AudioTranslationOptions audioTranslationOptions = new AudioTranslationOptions(BinaryData.FromObjectAsJson(new object()));
            Response<AudioTranslation> response = await client.GetAudioTranslationAsResponseObjectAsync("<deploymentId>", audioTranslationOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAudioTranslationAsResponseObject_AllParameters()
        {
            OpenAIClient client = new OpenAIClient(null);

            RequestContent content = RequestContent.Create(new
            {
                file = new object(),
                response_format = "json",
                prompt = "<prompt>",
                temperature = 123.45F,
                model = "<model>",
            });
            Response response = client.GetAudioTranslationAsResponseObject("<deploymentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("task").ToString());
            Console.WriteLine(result.GetProperty("language").ToString());
            Console.WriteLine(result.GetProperty("duration").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("start").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("end").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("avg_logprob").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("compression_ratio").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("no_speech_prob").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("tokens")[0].ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("seek").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAudioTranslationAsResponseObject_AllParameters_Async()
        {
            OpenAIClient client = new OpenAIClient(null);

            RequestContent content = RequestContent.Create(new
            {
                file = new object(),
                response_format = "json",
                prompt = "<prompt>",
                temperature = 123.45F,
                model = "<model>",
            });
            Response response = await client.GetAudioTranslationAsResponseObjectAsync("<deploymentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("task").ToString());
            Console.WriteLine(result.GetProperty("language").ToString());
            Console.WriteLine(result.GetProperty("duration").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("start").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("end").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("avg_logprob").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("compression_ratio").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("no_speech_prob").ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("tokens")[0].ToString());
            Console.WriteLine(result.GetProperty("segments")[0].GetProperty("seek").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAudioTranslationAsResponseObject_AllParameters_Convenience()
        {
            OpenAIClient client = new OpenAIClient(null);

            AudioTranslationOptions audioTranslationOptions = new AudioTranslationOptions(BinaryData.FromObjectAsJson(new object()))
            {
                ResponseFormat = AudioTranslationFormat.Json,
                Prompt = "<prompt>",
                Temperature = 123.45F,
                InternalNonAzureModelName = "<model>",
            };
            Response<AudioTranslation> response = client.GetAudioTranslationAsResponseObject("<deploymentId>", audioTranslationOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAudioTranslationAsResponseObject_AllParameters_Convenience_Async()
        {
            OpenAIClient client = new OpenAIClient(null);

            AudioTranslationOptions audioTranslationOptions = new AudioTranslationOptions(BinaryData.FromObjectAsJson(new object()))
            {
                ResponseFormat = AudioTranslationFormat.Json,
                Prompt = "<prompt>",
                Temperature = 123.45F,
                InternalNonAzureModelName = "<model>",
            };
            Response<AudioTranslation> response = await client.GetAudioTranslationAsResponseObjectAsync("<deploymentId>", audioTranslationOptions);
        }
    }
}
