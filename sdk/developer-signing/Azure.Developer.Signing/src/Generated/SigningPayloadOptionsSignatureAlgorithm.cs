// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Developer.Signing
{
    /// <summary> Enum for signatureAlgorithm in SigningPayloadOptions. </summary>
    public readonly partial struct SigningPayloadOptionsSignatureAlgorithm : IEquatable<SigningPayloadOptionsSignatureAlgorithm>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SigningPayloadOptionsSignatureAlgorithm"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SigningPayloadOptionsSignatureAlgorithm(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string RS256Value = "RS256";
        private const string RS384Value = "RS384";
        private const string RS512Value = "RS512";
        private const string PS256Value = "PS256";
        private const string PS384Value = "PS384";
        private const string PS512Value = "PS512";
        private const string ES256Value = "ES256";
        private const string ES384Value = "ES384";
        private const string ES512Value = "ES512";
        private const string ES256KValue = "ES256K";

        /// <summary> RS256. </summary>
        public static SigningPayloadOptionsSignatureAlgorithm RS256 { get; } = new SigningPayloadOptionsSignatureAlgorithm(RS256Value);
        /// <summary> RS384. </summary>
        public static SigningPayloadOptionsSignatureAlgorithm RS384 { get; } = new SigningPayloadOptionsSignatureAlgorithm(RS384Value);
        /// <summary> RS512. </summary>
        public static SigningPayloadOptionsSignatureAlgorithm RS512 { get; } = new SigningPayloadOptionsSignatureAlgorithm(RS512Value);
        /// <summary> PS256. </summary>
        public static SigningPayloadOptionsSignatureAlgorithm PS256 { get; } = new SigningPayloadOptionsSignatureAlgorithm(PS256Value);
        /// <summary> PS384. </summary>
        public static SigningPayloadOptionsSignatureAlgorithm PS384 { get; } = new SigningPayloadOptionsSignatureAlgorithm(PS384Value);
        /// <summary> PS512. </summary>
        public static SigningPayloadOptionsSignatureAlgorithm PS512 { get; } = new SigningPayloadOptionsSignatureAlgorithm(PS512Value);
        /// <summary> ES256. </summary>
        public static SigningPayloadOptionsSignatureAlgorithm ES256 { get; } = new SigningPayloadOptionsSignatureAlgorithm(ES256Value);
        /// <summary> ES384. </summary>
        public static SigningPayloadOptionsSignatureAlgorithm ES384 { get; } = new SigningPayloadOptionsSignatureAlgorithm(ES384Value);
        /// <summary> ES512. </summary>
        public static SigningPayloadOptionsSignatureAlgorithm ES512 { get; } = new SigningPayloadOptionsSignatureAlgorithm(ES512Value);
        /// <summary> ES256K. </summary>
        public static SigningPayloadOptionsSignatureAlgorithm ES256K { get; } = new SigningPayloadOptionsSignatureAlgorithm(ES256KValue);
        /// <summary> Determines if two <see cref="SigningPayloadOptionsSignatureAlgorithm"/> values are the same. </summary>
        public static bool operator ==(SigningPayloadOptionsSignatureAlgorithm left, SigningPayloadOptionsSignatureAlgorithm right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SigningPayloadOptionsSignatureAlgorithm"/> values are not the same. </summary>
        public static bool operator !=(SigningPayloadOptionsSignatureAlgorithm left, SigningPayloadOptionsSignatureAlgorithm right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SigningPayloadOptionsSignatureAlgorithm"/>. </summary>
        public static implicit operator SigningPayloadOptionsSignatureAlgorithm(string value) => new SigningPayloadOptionsSignatureAlgorithm(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SigningPayloadOptionsSignatureAlgorithm other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SigningPayloadOptionsSignatureAlgorithm other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
