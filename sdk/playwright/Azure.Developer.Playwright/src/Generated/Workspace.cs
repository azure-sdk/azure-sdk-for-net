// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.Developer.Playwright
{
    /// <summary> Playwright workspace is the parent resource for most of the other service resources. </summary>
    public partial class Workspace
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="Workspace"/>. </summary>
        internal Workspace()
        {
        }

        /// <summary> Initializes a new instance of <see cref="Workspace"/>. </summary>
        /// <param name="id"> The workspace id. </param>
        /// <param name="resourceId"> Fully-qualified Azure resource id for the workspace. </param>
        /// <param name="name"> The workspace name. </param>
        /// <param name="state"> The state of workspace - Active | Inactive. </param>
        /// <param name="subscriptionId"> Azure subscription id for the workspace. </param>
        /// <param name="subscriptionState"> Azure subscription state - Registered | Unregistered | Warned | Suspended | Deleted. </param>
        /// <param name="tenantId"> Azure tenant id for the workspace. </param>
        /// <param name="location"> Azure location of the workspace, for eg. eastus, southeastasia. </param>
        /// <param name="dataplaneUri"> The workspace data plane URI. </param>
        /// <param name="regionalAffinity"> This property sets the connection region for client workers to cloud-hosted browsers. If enabled, workers connect to browsers in the closest Azure region, ensuring lower latency. If disabled, workers connect to browsers in the Azure region in which the workspace was initially created. </param>
        /// <param name="localAuth"> When enabled, this feature allows the workspace to use local auth (through service access token) for executing operations. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal Workspace(Guid id, ResourceIdentifier resourceId, string name, ResourceState state, Guid subscriptionId, SubscriptionState subscriptionState, Guid tenantId, string location, Uri dataplaneUri, EnablementStatus? regionalAffinity, EnablementStatus? localAuth, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Id = id;
            ResourceId = resourceId;
            Name = name;
            State = state;
            SubscriptionId = subscriptionId;
            SubscriptionState = subscriptionState;
            TenantId = tenantId;
            Location = location;
            DataplaneUri = dataplaneUri;
            RegionalAffinity = regionalAffinity;
            LocalAuth = localAuth;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The workspace id. </summary>
        public Guid Id { get; }
        /// <summary> Fully-qualified Azure resource id for the workspace. </summary>
        public ResourceIdentifier ResourceId { get; }
        /// <summary> The workspace name. </summary>
        public string Name { get; }
        /// <summary> The state of workspace - Active | Inactive. </summary>
        public ResourceState State { get; }
        /// <summary> Azure subscription id for the workspace. </summary>
        public Guid SubscriptionId { get; }
        /// <summary> Azure subscription state - Registered | Unregistered | Warned | Suspended | Deleted. </summary>
        public SubscriptionState SubscriptionState { get; }
        /// <summary> Azure tenant id for the workspace. </summary>
        public Guid TenantId { get; }
        /// <summary> Azure location of the workspace, for eg. eastus, southeastasia. </summary>
        public string Location { get; }
        /// <summary> The workspace data plane URI. </summary>
        public Uri DataplaneUri { get; }
        /// <summary> This property sets the connection region for client workers to cloud-hosted browsers. If enabled, workers connect to browsers in the closest Azure region, ensuring lower latency. If disabled, workers connect to browsers in the Azure region in which the workspace was initially created. </summary>
        public EnablementStatus? RegionalAffinity { get; }
        /// <summary> When enabled, this feature allows the workspace to use local auth (through service access token) for executing operations. </summary>
        public EnablementStatus? LocalAuth { get; }
    }
}
