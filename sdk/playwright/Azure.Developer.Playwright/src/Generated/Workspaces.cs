// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Developer.Playwright
{
    // Data plane generated sub-client.
    /// <summary> The Workspaces sub-client. </summary>
    public partial class Workspaces
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://playwright.microsoft.com/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of Workspaces for mocking. </summary>
        protected Workspaces()
        {
        }

        /// <summary> Initializes a new instance of Workspaces. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="tokenCredential"> The token credential to copy. </param>
        /// <param name="endpoint">
        /// Supported Playwright Service API Endpoints (protocol and hostname, for example:
        ///   https://{region}.api.playwright.microsoft.com).
        /// </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        internal Workspaces(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, TokenCredential tokenCredential, Uri endpoint, string apiVersion)
        {
            ClientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
            _tokenCredential = tokenCredential;
            _endpoint = endpoint;
            _apiVersion = apiVersion;
        }

        /// <summary> Get details of the Azure resource mapped to a workspace for the given workspace id. Authorization required is Bearer JWT Access token provided by EntraID. </summary>
        /// <param name="workspaceId"> The workspace id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/Workspaces.xml" path="doc/members/member[@name='GetWorkspaceAsync(Guid,CancellationToken)']/*" />
        public virtual async Task<Response<Workspace>> GetWorkspaceAsync(Guid workspaceId, CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetWorkspaceAsync(workspaceId, context).ConfigureAwait(false);
            return Response.FromValue(Workspace.FromResponse(response), response);
        }

        /// <summary> Get details of the Azure resource mapped to a workspace for the given workspace id. Authorization required is Bearer JWT Access token provided by EntraID. </summary>
        /// <param name="workspaceId"> The workspace id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/Workspaces.xml" path="doc/members/member[@name='GetWorkspace(Guid,CancellationToken)']/*" />
        public virtual Response<Workspace> GetWorkspace(Guid workspaceId, CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetWorkspace(workspaceId, context);
            return Response.FromValue(Workspace.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Get details of the Azure resource mapped to a workspace for the given workspace id. Authorization required is Bearer JWT Access token provided by EntraID.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetWorkspaceAsync(Guid,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="workspaceId"> The workspace id. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Workspaces.xml" path="doc/members/member[@name='GetWorkspaceAsync(Guid,RequestContext)']/*" />
        public virtual async Task<Response> GetWorkspaceAsync(Guid workspaceId, RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("Workspaces.GetWorkspace");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetWorkspaceRequest(workspaceId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get details of the Azure resource mapped to a workspace for the given workspace id. Authorization required is Bearer JWT Access token provided by EntraID.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetWorkspace(Guid,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="workspaceId"> The workspace id. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Workspaces.xml" path="doc/members/member[@name='GetWorkspace(Guid,RequestContext)']/*" />
        public virtual Response GetWorkspace(Guid workspaceId, RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("Workspaces.GetWorkspace");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetWorkspaceRequest(workspaceId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets remote browsers corresponding to given workspace id and redirects the client for executing Playwright scripts. Authorization required is Bearer JWT Access token provided by EntraID or Playwright Service. </summary>
        /// <param name="workspaceId"> The workspace id. </param>
        /// <param name="os"> The os provided by client for remote script runs. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workspaceId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="workspaceId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/Workspaces.xml" path="doc/members/member[@name='GetBrowsersAsync(string,OS?,CancellationToken)']/*" />
        public virtual async Task<Response> GetBrowsersAsync(string workspaceId, OS? os = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(workspaceId, nameof(workspaceId));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetBrowsersAsync(workspaceId, os?.ToString(), context).ConfigureAwait(false);
            return response;
        }

        /// <summary> Gets remote browsers corresponding to given workspace id and redirects the client for executing Playwright scripts. Authorization required is Bearer JWT Access token provided by EntraID or Playwright Service. </summary>
        /// <param name="workspaceId"> The workspace id. </param>
        /// <param name="os"> The os provided by client for remote script runs. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workspaceId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="workspaceId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/Workspaces.xml" path="doc/members/member[@name='GetBrowsers(string,OS?,CancellationToken)']/*" />
        public virtual Response GetBrowsers(string workspaceId, OS? os = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(workspaceId, nameof(workspaceId));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetBrowsers(workspaceId, os?.ToString(), context);
            return response;
        }

        /// <summary>
        /// [Protocol Method] Gets remote browsers corresponding to given workspace id and redirects the client for executing Playwright scripts. Authorization required is Bearer JWT Access token provided by EntraID or Playwright Service.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetBrowsersAsync(string,OS?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="workspaceId"> The workspace id. </param>
        /// <param name="os"> The os provided by client for remote script runs. Allowed values: "Linux" | "Windows". </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workspaceId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="workspaceId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Workspaces.xml" path="doc/members/member[@name='GetBrowsersAsync(string,string,RequestContext)']/*" />
        public virtual async Task<Response> GetBrowsersAsync(string workspaceId, string os, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(workspaceId, nameof(workspaceId));

            using var scope = ClientDiagnostics.CreateScope("Workspaces.GetBrowsers");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetBrowsersRequest(workspaceId, os, context);
                RedirectPolicy.SetAllowAutoRedirect(message, true);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets remote browsers corresponding to given workspace id and redirects the client for executing Playwright scripts. Authorization required is Bearer JWT Access token provided by EntraID or Playwright Service.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetBrowsers(string,OS?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="workspaceId"> The workspace id. </param>
        /// <param name="os"> The os provided by client for remote script runs. Allowed values: "Linux" | "Windows". </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workspaceId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="workspaceId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Workspaces.xml" path="doc/members/member[@name='GetBrowsers(string,string,RequestContext)']/*" />
        public virtual Response GetBrowsers(string workspaceId, string os, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(workspaceId, nameof(workspaceId));

            using var scope = ClientDiagnostics.CreateScope("Workspaces.GetBrowsers");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetBrowsersRequest(workspaceId, os, context);
                RedirectPolicy.SetAllowAutoRedirect(message, true);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateGetWorkspaceRequest(Guid workspaceId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/playwrightworkspaces/", false);
            uri.AppendPath(workspaceId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetBrowsersRequest(string workspaceId, string os, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier302);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/playwrightworkspaces/", false);
            uri.AppendPath(workspaceId, true);
            uri.AppendPath("/browsers", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (os != null)
            {
                uri.AppendQuery("os", os, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier302;
        private static ResponseClassifier ResponseClassifier302 => _responseClassifier302 ??= new StatusCodeClassifier(stackalloc ushort[] { 302 });
    }
}
