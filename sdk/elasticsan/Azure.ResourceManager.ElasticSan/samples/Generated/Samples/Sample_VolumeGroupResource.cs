// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.ElasticSan.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.ElasticSan.Samples
{
    public partial class Sample_VolumeGroupResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_VolumeGroupsGetMaximumSetGen()
        {
            // Generated from example definition: 2024-07-01-preview/VolumeGroups_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "VolumeGroup_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this VolumeGroupResource created on azure
            // for more information of creating VolumeGroupResource, please refer to the document of VolumeGroupResource
            string subscriptionId = "subscriptionid";
            string resourceGroupName = "resourcegroupname";
            string elasticSanName = "elasticsanname";
            string volumeGroupName = "volumegroupname";
            ResourceIdentifier volumeGroupResourceId = VolumeGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, elasticSanName, volumeGroupName);
            VolumeGroupResource volumeGroup = client.GetVolumeGroupResource(volumeGroupResourceId);

            // invoke the operation
            VolumeGroupResource result = await volumeGroup.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            VolumeGroupData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_VolumeGroupsGetMinimumSetGen()
        {
            // Generated from example definition: 2024-07-01-preview/VolumeGroups_Get_MinimumSet_Gen.json
            // this example is just showing the usage of "VolumeGroup_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this VolumeGroupResource created on azure
            // for more information of creating VolumeGroupResource, please refer to the document of VolumeGroupResource
            string subscriptionId = "subscriptionid";
            string resourceGroupName = "resourcegroupname";
            string elasticSanName = "elasticsanname";
            string volumeGroupName = "volumegroupname";
            ResourceIdentifier volumeGroupResourceId = VolumeGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, elasticSanName, volumeGroupName);
            VolumeGroupResource volumeGroup = client.GetVolumeGroupResource(volumeGroupResourceId);

            // invoke the operation
            VolumeGroupResource result = await volumeGroup.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            VolumeGroupData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_VolumeGroupsDeleteMaximumSetGen()
        {
            // Generated from example definition: 2024-07-01-preview/VolumeGroups_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "VolumeGroup_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this VolumeGroupResource created on azure
            // for more information of creating VolumeGroupResource, please refer to the document of VolumeGroupResource
            string subscriptionId = "subscriptionid";
            string resourceGroupName = "resourcegroupname";
            string elasticSanName = "elasticsanname";
            string volumeGroupName = "volumegroupname";
            ResourceIdentifier volumeGroupResourceId = VolumeGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, elasticSanName, volumeGroupName);
            VolumeGroupResource volumeGroup = client.GetVolumeGroupResource(volumeGroupResourceId);

            // invoke the operation
            await volumeGroup.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_VolumeGroupsDeleteMinimumSetGen()
        {
            // Generated from example definition: 2024-07-01-preview/VolumeGroups_Delete_MinimumSet_Gen.json
            // this example is just showing the usage of "VolumeGroup_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this VolumeGroupResource created on azure
            // for more information of creating VolumeGroupResource, please refer to the document of VolumeGroupResource
            string subscriptionId = "subscriptionid";
            string resourceGroupName = "resourcegroupname";
            string elasticSanName = "elasticsanname";
            string volumeGroupName = "volumegroupname";
            ResourceIdentifier volumeGroupResourceId = VolumeGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, elasticSanName, volumeGroupName);
            VolumeGroupResource volumeGroup = client.GetVolumeGroupResource(volumeGroupResourceId);

            // invoke the operation
            await volumeGroup.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_VolumeGroupsUpdateMaximumSetGen()
        {
            // Generated from example definition: 2024-07-01-preview/VolumeGroups_Update_MaximumSet_Gen.json
            // this example is just showing the usage of "VolumeGroup_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this VolumeGroupResource created on azure
            // for more information of creating VolumeGroupResource, please refer to the document of VolumeGroupResource
            string subscriptionId = "subscriptionid";
            string resourceGroupName = "resourcegroupname";
            string elasticSanName = "elasticsanname";
            string volumeGroupName = "volumegroupname";
            ResourceIdentifier volumeGroupResourceId = VolumeGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, elasticSanName, volumeGroupName);
            VolumeGroupResource volumeGroup = client.GetVolumeGroupResource(volumeGroupResourceId);

            // invoke the operation
            VolumeGroupPatch patch = new VolumeGroupPatch();
            ArmOperation<VolumeGroupResource> lro = await volumeGroup.UpdateAsync(WaitUntil.Completed, patch);
            VolumeGroupResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            VolumeGroupData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_VolumeGroupsUpdateMinimumSetGen()
        {
            // Generated from example definition: 2024-07-01-preview/VolumeGroups_Update_MinimumSet_Gen.json
            // this example is just showing the usage of "VolumeGroup_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this VolumeGroupResource created on azure
            // for more information of creating VolumeGroupResource, please refer to the document of VolumeGroupResource
            string subscriptionId = "subscriptionid";
            string resourceGroupName = "resourcegroupname";
            string elasticSanName = "elasticsanname";
            string volumeGroupName = "volumegroupname";
            ResourceIdentifier volumeGroupResourceId = VolumeGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, elasticSanName, volumeGroupName);
            VolumeGroupResource volumeGroup = client.GetVolumeGroupResource(volumeGroupResourceId);

            // invoke the operation
            VolumeGroupPatch patch = new VolumeGroupPatch();
            ArmOperation<VolumeGroupResource> lro = await volumeGroup.UpdateAsync(WaitUntil.Completed, patch);
            VolumeGroupResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            VolumeGroupData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task PreBackup_VolumeGroupsPreBackupMaximumSetGen()
        {
            // Generated from example definition: 2024-07-01-preview/Volumes_PreBackup_MaximumSet_Gen.json
            // this example is just showing the usage of "VolumeGroups_PreBackup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this VolumeGroupResource created on azure
            // for more information of creating VolumeGroupResource, please refer to the document of VolumeGroupResource
            string subscriptionId = "subscriptionid";
            string resourceGroupName = "resourcegroupname";
            string elasticSanName = "elasticsanname";
            string volumeGroupName = "volumegroupname";
            ResourceIdentifier volumeGroupResourceId = VolumeGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, elasticSanName, volumeGroupName);
            VolumeGroupResource volumeGroup = client.GetVolumeGroupResource(volumeGroupResourceId);

            // invoke the operation
            VolumeNameList volumeNameList = new VolumeNameList(null);
            ArmOperation<PreValidationResult> lro = await volumeGroup.PreBackupAsync(WaitUntil.Completed, volumeNameList);
            PreValidationResult result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task PreRestore_VolumeGroupsPreRestoreMaximumSetGen()
        {
            // Generated from example definition: 2024-07-01-preview/Volumes_PreRestore_MaximumSet_Gen.json
            // this example is just showing the usage of "VolumeGroups_PreRestore" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this VolumeGroupResource created on azure
            // for more information of creating VolumeGroupResource, please refer to the document of VolumeGroupResource
            string subscriptionId = "subscriptionid";
            string resourceGroupName = "resourcegroupname";
            string elasticSanName = "elasticsanname";
            string volumeGroupName = "volumegroupname";
            ResourceIdentifier volumeGroupResourceId = VolumeGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, elasticSanName, volumeGroupName);
            VolumeGroupResource volumeGroup = client.GetVolumeGroupResource(volumeGroupResourceId);

            // invoke the operation
            DiskSnapshotList diskSnapshotList = new DiskSnapshotList(null);
            ArmOperation<PreValidationResult> lro = await volumeGroup.PreRestoreAsync(WaitUntil.Completed, diskSnapshotList);
            PreValidationResult result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
