// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.ResourceManager.ElasticSan.Samples
{
    public partial class Sample_VolumeCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_VolumesCreateMaximumSetGen()
        {
            // Generated from example definition: 2024-07-01-preview/Volumes_Create_MaximumSet_Gen.json
            // this example is just showing the usage of "Volume_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this VolumeGroupResource created on azure
            // for more information of creating VolumeGroupResource, please refer to the document of VolumeGroupResource
            string subscriptionId = "subscriptionid";
            string resourceGroupName = "resourcegroupname";
            string elasticSanName = "elasticsanname";
            string volumeGroupName = "volumegroupname";
            ResourceIdentifier volumeGroupResourceId = VolumeGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, elasticSanName, volumeGroupName);
            VolumeGroupResource volumeGroup = client.GetVolumeGroupResource(volumeGroupResourceId);

            // get the collection of this VolumeResource
            VolumeCollection collection = volumeGroup.GetVolumes();

            // invoke the operation
            string volumeName = "volumename";
            VolumeData data = new VolumeData(default);
            await collection.CreateOrUpdateAsync(WaitUntil.Completed, volumeName, data);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_VolumesCreateMinimumSetGen()
        {
            // Generated from example definition: 2024-07-01-preview/Volumes_Create_MinimumSet_Gen.json
            // this example is just showing the usage of "Volume_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this VolumeGroupResource created on azure
            // for more information of creating VolumeGroupResource, please refer to the document of VolumeGroupResource
            string subscriptionId = "subscriptionid";
            string resourceGroupName = "resourcegroupname";
            string elasticSanName = "elasticsanname";
            string volumeGroupName = "volumegroupname";
            ResourceIdentifier volumeGroupResourceId = VolumeGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, elasticSanName, volumeGroupName);
            VolumeGroupResource volumeGroup = client.GetVolumeGroupResource(volumeGroupResourceId);

            // get the collection of this VolumeResource
            VolumeCollection collection = volumeGroup.GetVolumes();

            // invoke the operation
            string volumeName = "volumename";
            VolumeData data = new VolumeData(default);
            await collection.CreateOrUpdateAsync(WaitUntil.Completed, volumeName, data);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_VolumesGetMaximumSetGen()
        {
            // Generated from example definition: 2024-07-01-preview/Volumes_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Volume_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this VolumeGroupResource created on azure
            // for more information of creating VolumeGroupResource, please refer to the document of VolumeGroupResource
            string subscriptionId = "subscriptionid";
            string resourceGroupName = "resourcegroupname";
            string elasticSanName = "elasticsanname";
            string volumeGroupName = "volumegroupname";
            ResourceIdentifier volumeGroupResourceId = VolumeGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, elasticSanName, volumeGroupName);
            VolumeGroupResource volumeGroup = client.GetVolumeGroupResource(volumeGroupResourceId);

            // get the collection of this VolumeResource
            VolumeCollection collection = volumeGroup.GetVolumes();

            // invoke the operation
            string volumeName = "volumename";
            VolumeResource result = await collection.GetAsync(volumeName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            VolumeData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_VolumesGetMinimumSetGen()
        {
            // Generated from example definition: 2024-07-01-preview/Volumes_Get_MinimumSet_Gen.json
            // this example is just showing the usage of "Volume_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this VolumeGroupResource created on azure
            // for more information of creating VolumeGroupResource, please refer to the document of VolumeGroupResource
            string subscriptionId = "subscriptionid";
            string resourceGroupName = "resourcegroupname";
            string elasticSanName = "elasticsanname";
            string volumeGroupName = "volumegroupname";
            ResourceIdentifier volumeGroupResourceId = VolumeGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, elasticSanName, volumeGroupName);
            VolumeGroupResource volumeGroup = client.GetVolumeGroupResource(volumeGroupResourceId);

            // get the collection of this VolumeResource
            VolumeCollection collection = volumeGroup.GetVolumes();

            // invoke the operation
            string volumeName = "volumename";
            VolumeResource result = await collection.GetAsync(volumeName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            VolumeData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_VolumesListByVolumeGroupMaximumSetGen()
        {
            // Generated from example definition: 2024-07-01-preview/Volumes_ListByVolumeGroup_MaximumSet_Gen.json
            // this example is just showing the usage of "Volume_ListByVolumeGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this VolumeGroupResource created on azure
            // for more information of creating VolumeGroupResource, please refer to the document of VolumeGroupResource
            string subscriptionId = "subscriptionid";
            string resourceGroupName = "resourcegroupname";
            string elasticSanName = "elasticsanname";
            string volumeGroupName = "volumegroupname";
            ResourceIdentifier volumeGroupResourceId = VolumeGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, elasticSanName, volumeGroupName);
            VolumeGroupResource volumeGroup = client.GetVolumeGroupResource(volumeGroupResourceId);

            // get the collection of this VolumeResource
            VolumeCollection collection = volumeGroup.GetVolumes();

            // invoke the operation and iterate over the result
            await foreach (VolumeResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                VolumeData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_VolumesListByVolumeGroupMinimumSetGen()
        {
            // Generated from example definition: 2024-07-01-preview/Volumes_ListByVolumeGroup_MinimumSet_Gen.json
            // this example is just showing the usage of "Volume_ListByVolumeGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this VolumeGroupResource created on azure
            // for more information of creating VolumeGroupResource, please refer to the document of VolumeGroupResource
            string subscriptionId = "subscriptionid";
            string resourceGroupName = "resourcegroupname";
            string elasticSanName = "elasticsanname";
            string volumeGroupName = "volumegroupname";
            ResourceIdentifier volumeGroupResourceId = VolumeGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, elasticSanName, volumeGroupName);
            VolumeGroupResource volumeGroup = client.GetVolumeGroupResource(volumeGroupResourceId);

            // get the collection of this VolumeResource
            VolumeCollection collection = volumeGroup.GetVolumes();

            // invoke the operation and iterate over the result
            await foreach (VolumeResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                VolumeData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_VolumesGetMaximumSetGen()
        {
            // Generated from example definition: 2024-07-01-preview/Volumes_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Volume_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this VolumeGroupResource created on azure
            // for more information of creating VolumeGroupResource, please refer to the document of VolumeGroupResource
            string subscriptionId = "subscriptionid";
            string resourceGroupName = "resourcegroupname";
            string elasticSanName = "elasticsanname";
            string volumeGroupName = "volumegroupname";
            ResourceIdentifier volumeGroupResourceId = VolumeGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, elasticSanName, volumeGroupName);
            VolumeGroupResource volumeGroup = client.GetVolumeGroupResource(volumeGroupResourceId);

            // get the collection of this VolumeResource
            VolumeCollection collection = volumeGroup.GetVolumes();

            // invoke the operation
            string volumeName = "volumename";
            bool result = await collection.ExistsAsync(volumeName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_VolumesGetMinimumSetGen()
        {
            // Generated from example definition: 2024-07-01-preview/Volumes_Get_MinimumSet_Gen.json
            // this example is just showing the usage of "Volume_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this VolumeGroupResource created on azure
            // for more information of creating VolumeGroupResource, please refer to the document of VolumeGroupResource
            string subscriptionId = "subscriptionid";
            string resourceGroupName = "resourcegroupname";
            string elasticSanName = "elasticsanname";
            string volumeGroupName = "volumegroupname";
            ResourceIdentifier volumeGroupResourceId = VolumeGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, elasticSanName, volumeGroupName);
            VolumeGroupResource volumeGroup = client.GetVolumeGroupResource(volumeGroupResourceId);

            // get the collection of this VolumeResource
            VolumeCollection collection = volumeGroup.GetVolumes();

            // invoke the operation
            string volumeName = "volumename";
            bool result = await collection.ExistsAsync(volumeName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_VolumesGetMaximumSetGen()
        {
            // Generated from example definition: 2024-07-01-preview/Volumes_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Volume_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this VolumeGroupResource created on azure
            // for more information of creating VolumeGroupResource, please refer to the document of VolumeGroupResource
            string subscriptionId = "subscriptionid";
            string resourceGroupName = "resourcegroupname";
            string elasticSanName = "elasticsanname";
            string volumeGroupName = "volumegroupname";
            ResourceIdentifier volumeGroupResourceId = VolumeGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, elasticSanName, volumeGroupName);
            VolumeGroupResource volumeGroup = client.GetVolumeGroupResource(volumeGroupResourceId);

            // get the collection of this VolumeResource
            VolumeCollection collection = volumeGroup.GetVolumes();

            // invoke the operation
            string volumeName = "volumename";
            NullableResponse<VolumeResource> response = await collection.GetIfExistsAsync(volumeName);
            VolumeResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                VolumeData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_VolumesGetMinimumSetGen()
        {
            // Generated from example definition: 2024-07-01-preview/Volumes_Get_MinimumSet_Gen.json
            // this example is just showing the usage of "Volume_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this VolumeGroupResource created on azure
            // for more information of creating VolumeGroupResource, please refer to the document of VolumeGroupResource
            string subscriptionId = "subscriptionid";
            string resourceGroupName = "resourcegroupname";
            string elasticSanName = "elasticsanname";
            string volumeGroupName = "volumegroupname";
            ResourceIdentifier volumeGroupResourceId = VolumeGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, elasticSanName, volumeGroupName);
            VolumeGroupResource volumeGroup = client.GetVolumeGroupResource(volumeGroupResourceId);

            // get the collection of this VolumeResource
            VolumeCollection collection = volumeGroup.GetVolumes();

            // invoke the operation
            string volumeName = "volumename";
            NullableResponse<VolumeResource> response = await collection.GetIfExistsAsync(volumeName);
            VolumeResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                VolumeData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
