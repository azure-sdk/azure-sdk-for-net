// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.ElasticSan.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmElasticSanModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="ElasticSan.ElasticSanData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="sku"> resource sku. </param>
        /// <param name="availabilityZones"> Logical zone for Elastic San resource; example: ["1"]. </param>
        /// <param name="provisioningState"> State of the operation on the resource. </param>
        /// <param name="baseSizeTiB"> Base size of the Elastic San appliance in TiB. </param>
        /// <param name="extendedCapacitySizeTiB"> Extended size of the Elastic San appliance in TiB. </param>
        /// <param name="totalVolumeSizeGiB"> Total size of the provisioned Volumes in GiB. </param>
        /// <param name="volumeGroupCount"> Total number of volume groups in this Elastic San appliance. </param>
        /// <param name="totalIops"> Total Provisioned IOPS of the Elastic San appliance. </param>
        /// <param name="totalMBps"> Total Provisioned MBps Elastic San appliance. </param>
        /// <param name="totalSizeTiB"> Total size of the Elastic San appliance in TB. </param>
        /// <param name="privateEndpointConnections"> The list of Private Endpoint Connections. </param>
        /// <param name="publicNetworkAccess"> Allow or disallow public network access to ElasticSan. Value is optional but if passed in, must be 'Enabled' or 'Disabled'. </param>
        /// <param name="scaleUpProperties"> Auto Scale Properties for Elastic San Appliance. </param>
        /// <returns> A new <see cref="ElasticSan.ElasticSanData"/> instance for mocking. </returns>
        public static ElasticSanData ElasticSanData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ElasticSanSku sku = null, IEnumerable<string> availabilityZones = null, ProvisioningState? provisioningState = null, long baseSizeTiB = default, long extendedCapacitySizeTiB = default, long? totalVolumeSizeGiB = null, long? volumeGroupCount = null, long? totalIops = null, long? totalMBps = null, long? totalSizeTiB = null, IEnumerable<ElasticSanPrivateEndpointConnectionData> privateEndpointConnections = null, PublicNetworkAccess? publicNetworkAccess = null, ScaleUpProperties scaleUpProperties = null)
        {
            tags ??= new Dictionary<string, string>();
            availabilityZones ??= new List<string>();
            privateEndpointConnections ??= new List<ElasticSanPrivateEndpointConnectionData>();

            return new ElasticSanData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                sku,
                availabilityZones?.ToList(),
                provisioningState,
                baseSizeTiB,
                extendedCapacitySizeTiB,
                totalVolumeSizeGiB,
                volumeGroupCount,
                totalIops,
                totalMBps,
                totalSizeTiB,
                privateEndpointConnections?.ToList(),
                publicNetworkAccess,
                scaleUpProperties != null ? new AutoScaleProperties(scaleUpProperties, serializedAdditionalRawData: null) : null,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ElasticSan.ElasticSanPrivateEndpointConnectionData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provisioningState"> Provisioning State of Private Endpoint connection resource. </param>
        /// <param name="privateEndpointId"> Private Endpoint resource. </param>
        /// <param name="privateLinkServiceConnectionState"> Private Link Service Connection State. </param>
        /// <param name="groupIds"> List of resources private endpoint is mapped. </param>
        /// <returns> A new <see cref="ElasticSan.ElasticSanPrivateEndpointConnectionData"/> instance for mocking. </returns>
        public static ElasticSanPrivateEndpointConnectionData ElasticSanPrivateEndpointConnectionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ProvisioningState? provisioningState = null, ResourceIdentifier privateEndpointId = null, ElasticSanPrivateLinkServiceConnectionState privateLinkServiceConnectionState = null, IEnumerable<string> groupIds = null)
        {
            groupIds ??= new List<string>();

            return new ElasticSanPrivateEndpointConnectionData(
                id,
                name,
                resourceType,
                systemData,
                provisioningState,
                privateEndpointId != null ? ResourceManagerModelFactory.SubResource(privateEndpointId) : null,
                privateLinkServiceConnectionState,
                groupIds?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ElasticSanPrivateLinkResourceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="groupId"> The private link resource group id. </param>
        /// <param name="requiredMembers"> The private link resource required member names. </param>
        /// <param name="requiredZoneNames"> The private link resource Private link DNS zone name. </param>
        /// <returns> A new <see cref="Models.ElasticSanPrivateLinkResourceData"/> instance for mocking. </returns>
        public static ElasticSanPrivateLinkResourceData ElasticSanPrivateLinkResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string groupId = null, IEnumerable<string> requiredMembers = null, IEnumerable<string> requiredZoneNames = null)
        {
            requiredMembers ??= new List<string>();
            requiredZoneNames ??= new List<string>();

            return new ElasticSanPrivateLinkResourceData(
                id,
                name,
                resourceType,
                systemData,
                groupId,
                requiredMembers?.ToList(),
                requiredZoneNames?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ElasticSan.VolumeGroupData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="identity"> The identity of the resource. Current supported identity types: None, SystemAssigned, UserAssigned. </param>
        /// <param name="provisioningState"> State of the operation on the resource. </param>
        /// <param name="protocolType"> Type of storage target. </param>
        /// <param name="encryption"> Type of encryption. </param>
        /// <param name="encryptionProperties"> Encryption Properties describing Key Vault and Identity information. </param>
        /// <param name="virtualNetworkRules"> A collection of rules governing the accessibility from specific network locations. </param>
        /// <param name="privateEndpointConnections"> The list of Private Endpoint Connections. </param>
        /// <param name="enforceDataIntegrityCheckForIscsi"> A boolean indicating whether or not Data Integrity Check is enabled. </param>
        /// <param name="deleteRetentionPolicy"> The retention policy for the soft deleted volume group and its associated resources. </param>
        /// <returns> A new <see cref="ElasticSan.VolumeGroupData"/> instance for mocking. </returns>
        public static VolumeGroupData VolumeGroupData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ManagedServiceIdentity identity = null, ProvisioningState? provisioningState = null, StorageTargetType? protocolType = null, EncryptionType? encryption = null, EncryptionProperties encryptionProperties = null, IEnumerable<VirtualNetworkRule> virtualNetworkRules = null, IEnumerable<ElasticSanPrivateEndpointConnectionData> privateEndpointConnections = null, bool? enforceDataIntegrityCheckForIscsi = null, DeleteRetentionPolicy deleteRetentionPolicy = null)
        {
            virtualNetworkRules ??= new List<VirtualNetworkRule>();
            privateEndpointConnections ??= new List<ElasticSanPrivateEndpointConnectionData>();

            return new VolumeGroupData(
                id,
                name,
                resourceType,
                systemData,
                identity,
                provisioningState,
                protocolType,
                encryption,
                encryptionProperties,
                virtualNetworkRules != null ? new NetworkRuleSet(virtualNetworkRules?.ToList(), serializedAdditionalRawData: null) : null,
                privateEndpointConnections?.ToList(),
                enforceDataIntegrityCheckForIscsi,
                deleteRetentionPolicy,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.KeyVaultProperties"/>. </summary>
        /// <param name="keyName"> The name of KeyVault key. </param>
        /// <param name="keyVersion"> The version of KeyVault key. </param>
        /// <param name="keyVaultUri"> The Uri of KeyVault. </param>
        /// <param name="currentVersionedKeyIdentifier"> The object identifier of the current versioned Key Vault Key in use. </param>
        /// <param name="lastKeyRotationTimestamp"> Timestamp of last rotation of the Key Vault Key. </param>
        /// <param name="currentVersionedKeyExpirationTimestamp"> This is a read only property that represents the expiration time of the current version of the customer managed key used for encryption. </param>
        /// <returns> A new <see cref="Models.KeyVaultProperties"/> instance for mocking. </returns>
        public static KeyVaultProperties KeyVaultProperties(string keyName = null, string keyVersion = null, Uri keyVaultUri = null, string currentVersionedKeyIdentifier = null, DateTimeOffset? lastKeyRotationTimestamp = null, DateTimeOffset? currentVersionedKeyExpirationTimestamp = null)
        {
            return new KeyVaultProperties(
                keyName,
                keyVersion,
                keyVaultUri,
                currentVersionedKeyIdentifier,
                lastKeyRotationTimestamp,
                currentVersionedKeyExpirationTimestamp,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.PreValidationResult"/>. </summary>
        /// <param name="validationStatus"> a status value indicating success or failure of validation. </param>
        /// <returns> A new <see cref="Models.PreValidationResult"/> instance for mocking. </returns>
        public static PreValidationResult PreValidationResult(string validationStatus = null)
        {
            return new PreValidationResult(validationStatus, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ElasticSan.VolumeData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="volumeId"> Unique Id of the volume in GUID format. </param>
        /// <param name="creationData"> State of the operation on the resource. </param>
        /// <param name="sizeGiB"> Volume size. </param>
        /// <param name="storageTarget"> Storage target information. </param>
        /// <param name="managedByResourceId"> Parent resource information. </param>
        /// <param name="provisioningState"> State of the operation on the resource. </param>
        /// <returns> A new <see cref="ElasticSan.VolumeData"/> instance for mocking. </returns>
        public static VolumeData VolumeData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string volumeId = null, SourceCreationContent creationData = null, long sizeGiB = default, IscsiTargetInfo storageTarget = null, string managedByResourceId = null, ProvisioningState? provisioningState = null)
        {
            return new VolumeData(
                id,
                name,
                resourceType,
                systemData,
                volumeId,
                creationData,
                sizeGiB,
                storageTarget,
                managedByResourceId != null ? new ManagedByInfo(managedByResourceId, serializedAdditionalRawData: null) : null,
                provisioningState,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.IscsiTargetInfo"/>. </summary>
        /// <param name="targetIqn"> iSCSI Target IQN (iSCSI Qualified Name); example: "iqn.2005-03.org.iscsi:server". </param>
        /// <param name="targetPortalHostname"> iSCSI Target Portal Host Name. </param>
        /// <param name="targetPortalPort"> iSCSI Target Portal Port. </param>
        /// <param name="provisioningState"> State of the operation on the resource. </param>
        /// <param name="status"> Operational status of the iSCSI Target. </param>
        /// <returns> A new <see cref="Models.IscsiTargetInfo"/> instance for mocking. </returns>
        public static IscsiTargetInfo IscsiTargetInfo(string targetIqn = null, string targetPortalHostname = null, int? targetPortalPort = null, ProvisioningState? provisioningState = null, OperationalStatus? status = null)
        {
            return new IscsiTargetInfo(
                targetIqn,
                targetPortalHostname,
                targetPortalPort,
                provisioningState,
                status,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ElasticSan.SnapshotData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="creationDataSourceId"> Data used when creating a volume snapshot. </param>
        /// <param name="provisioningState"> State of the operation on the resource. </param>
        /// <param name="sourceVolumeSizeGiB"> Size of Source Volume. </param>
        /// <param name="volumeName"> Source Volume Name of a snapshot. </param>
        /// <returns> A new <see cref="ElasticSan.SnapshotData"/> instance for mocking. </returns>
        public static SnapshotData SnapshotData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string creationDataSourceId = null, ProvisioningState? provisioningState = null, long? sourceVolumeSizeGiB = null, string volumeName = null)
        {
            return new SnapshotData(
                id,
                name,
                resourceType,
                systemData,
                creationDataSourceId != null ? new SnapshotCreationContent(creationDataSourceId, serializedAdditionalRawData: null) : null,
                provisioningState,
                sourceVolumeSizeGiB,
                volumeName,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ElasticSanSkuInformation"/>. </summary>
        /// <param name="name"> Sku Name. </param>
        /// <param name="tier"> Sku Tier. </param>
        /// <param name="resourceType"> The type of the resource. </param>
        /// <param name="locations"> The set of locations that the SKU is available. This will be supported and registered Azure Geo Regions (e.g. West US, East US, Southeast Asia, etc.). </param>
        /// <param name="locationInfo"> Availability of the SKU for the location/zone. </param>
        /// <param name="capabilities"> The capability information in the specified SKU. </param>
        /// <returns> A new <see cref="Models.ElasticSanSkuInformation"/> instance for mocking. </returns>
        public static ElasticSanSkuInformation ElasticSanSkuInformation(ElasticSanSkuName name = default, ElasticSanSkuTier? tier = null, string resourceType = null, IEnumerable<string> locations = null, IEnumerable<SkuLocationInfo> locationInfo = null, IEnumerable<SKUCapability> capabilities = null)
        {
            locations ??= new List<string>();
            locationInfo ??= new List<SkuLocationInfo>();
            capabilities ??= new List<SKUCapability>();

            return new ElasticSanSkuInformation(
                name,
                tier,
                resourceType,
                locations?.ToList(),
                locationInfo?.ToList(),
                capabilities?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SkuLocationInfo"/>. </summary>
        /// <param name="location"> The location. </param>
        /// <param name="zones"> The zones. </param>
        /// <returns> A new <see cref="Models.SkuLocationInfo"/> instance for mocking. </returns>
        public static SkuLocationInfo SkuLocationInfo(string location = null, IEnumerable<string> zones = null)
        {
            zones ??= new List<string>();

            return new SkuLocationInfo(location, zones?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SKUCapability"/>. </summary>
        /// <param name="name"> The name of capability. </param>
        /// <param name="value"> A string value to indicate states of given capability. </param>
        /// <returns> A new <see cref="Models.SKUCapability"/> instance for mocking. </returns>
        public static SKUCapability SKUCapability(string name = null, string value = null)
        {
            return new SKUCapability(name, value, serializedAdditionalRawData: null);
        }
    }
}
