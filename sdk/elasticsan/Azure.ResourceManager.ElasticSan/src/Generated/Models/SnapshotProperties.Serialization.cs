// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ElasticSan.Models
{
    public partial class SnapshotProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("creationData"u8);
            writer.WriteObjectValue(CreationData);
            writer.WriteEndObject();
        }

        internal static SnapshotProperties DeserializeSnapshotProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            SnapshotCreationData creationData = default;
            Optional<ElasticSanProvisioningState> provisioningState = default;
            Optional<long> sourceVolumeSizeGiB = default;
            Optional<string> volumeName = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("creationData"u8))
                {
                    creationData = SnapshotCreationData.DeserializeSnapshotCreationData(property.Value);
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new ElasticSanProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("sourceVolumeSizeGiB"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sourceVolumeSizeGiB = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("volumeName"u8))
                {
                    volumeName = property.Value.GetString();
                    continue;
                }
            }
            return new SnapshotProperties(creationData, Optional.ToNullable(provisioningState), Optional.ToNullable(sourceVolumeSizeGiB), volumeName.Value);
        }
    }
}
