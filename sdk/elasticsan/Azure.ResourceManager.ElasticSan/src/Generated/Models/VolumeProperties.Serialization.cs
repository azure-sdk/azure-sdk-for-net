// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ElasticSan.Models
{
    public partial class VolumeProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(CreationData))
            {
                writer.WritePropertyName("creationData"u8);
                writer.WriteObjectValue(CreationData);
            }
            writer.WritePropertyName("sizeGiB"u8);
            writer.WriteNumberValue(SizeGiB);
            if (Optional.IsDefined(ManagedBy))
            {
                writer.WritePropertyName("managedBy"u8);
                writer.WriteObjectValue(ManagedBy);
            }
            writer.WriteEndObject();
        }

        internal static VolumeProperties DeserializeVolumeProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> volumeId = default;
            Optional<ElasticSanVolumeDataSourceInfo> creationData = default;
            long sizeGiB = default;
            Optional<IscsiTargetInfo> storageTarget = default;
            Optional<ManagedByInfo> managedBy = default;
            Optional<ElasticSanProvisioningState> provisioningState = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("volumeId"u8))
                {
                    volumeId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("creationData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    creationData = ElasticSanVolumeDataSourceInfo.DeserializeElasticSanVolumeDataSourceInfo(property.Value);
                    continue;
                }
                if (property.NameEquals("sizeGiB"u8))
                {
                    sizeGiB = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("storageTarget"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    storageTarget = IscsiTargetInfo.DeserializeIscsiTargetInfo(property.Value);
                    continue;
                }
                if (property.NameEquals("managedBy"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    managedBy = ManagedByInfo.DeserializeManagedByInfo(property.Value);
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new ElasticSanProvisioningState(property.Value.GetString());
                    continue;
                }
            }
            return new VolumeProperties(volumeId.Value, creationData.Value, sizeGiB, storageTarget.Value, managedBy.Value, Optional.ToNullable(provisioningState));
        }
    }
}
