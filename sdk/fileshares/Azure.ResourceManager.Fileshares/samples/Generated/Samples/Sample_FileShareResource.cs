// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Fileshares.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.Fileshares.Samples
{
    public partial class Sample_FileShareResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_FileSharesGetMaximumSetGenGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2024-01-01-preview/FileShares_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "FileShare_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FileShareResource created on azure
            // for more information of creating FileShareResource, please refer to the document of FileShareResource
            string subscriptionId = "AD98EFD8-D1E9-4F38-A862-E066114E49EE";
            string resourceGroupName = "rgfileshares";
            string resourceName = "testfileshare";
            ResourceIdentifier fileShareResourceId = FileShareResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName);
            FileShareResource fileShare = client.GetFileShareResource(fileShareResourceId);

            // invoke the operation
            FileShareResource result = await fileShare.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            FileShareData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_FileSharesDeleteMaximumSetGenGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2024-01-01-preview/FileShares_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "FileShare_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FileShareResource created on azure
            // for more information of creating FileShareResource, please refer to the document of FileShareResource
            string subscriptionId = "AD98EFD8-D1E9-4F38-A862-E066114E49EE";
            string resourceGroupName = "rgfileshares";
            string resourceName = "testfileshare";
            ResourceIdentifier fileShareResourceId = FileShareResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName);
            FileShareResource fileShare = client.GetFileShareResource(fileShareResourceId);

            // invoke the operation
            await fileShare.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_FileSharesUpdateMaximumSetGenGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2024-01-01-preview/FileShares_Update_MaximumSet_Gen.json
            // this example is just showing the usage of "FileShare_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FileShareResource created on azure
            // for more information of creating FileShareResource, please refer to the document of FileShareResource
            string subscriptionId = "AD98EFD8-D1E9-4F38-A862-E066114E49EE";
            string resourceGroupName = "rgfileshares";
            string resourceName = "testfileshare";
            ResourceIdentifier fileShareResourceId = FileShareResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName);
            FileShareResource fileShare = client.GetFileShareResource(fileShareResourceId);

            // invoke the operation
            FileSharePatch patch = new FileSharePatch
            {
                Tags =
{
["key9986"] = "aq"
},
                Properties = new FileShareUpdateProperties
                {
                    ProvisionedStorageGiB = 20,
                    ProvisionedIOPerSec = 19,
                    ProvisionedThroughputMiBPerSec = 27,
                    NfsProtocolRootSquash = ShareRootSquash.NoRootSquash,
                    PublicAccessAllowedSubnets = { "pvjhqlnqfiubvbfcggthlpy" },
                    PublicNetworkAccess = PublicNetworkAccess.Enabled,
                },
            };
            ArmOperation<FileShareResource> lro = await fileShare.UpdateAsync(WaitUntil.Completed, patch);
            FileShareResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            FileShareData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
