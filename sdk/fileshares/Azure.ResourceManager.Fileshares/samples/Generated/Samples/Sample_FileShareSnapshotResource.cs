// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Fileshares.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.Fileshares.Samples
{
    public partial class Sample_FileShareSnapshotResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_FileSharesGetFileShareSnapshotMaximumSetGenGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2024-01-01-preview/FileShares_GetFileShareSnapshot_MaximumSet_Gen.json
            // this example is just showing the usage of "FileShareSnapshot_GetFileShareSnapshot" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FileShareSnapshotResource created on azure
            // for more information of creating FileShareSnapshotResource, please refer to the document of FileShareSnapshotResource
            string subscriptionId = "AD98EFD8-D1E9-4F38-A862-E066114E49EE";
            string resourceGroupName = "rgfileshares";
            string resourceName = "testfileshare";
            string name = "testfilesharesnapshot";
            ResourceIdentifier fileShareSnapshotResourceId = FileShareSnapshotResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName, name);
            FileShareSnapshotResource fileShareSnapshot = client.GetFileShareSnapshotResource(fileShareSnapshotResourceId);

            // invoke the operation
            FileShareSnapshotResource result = await fileShareSnapshot.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            FileShareSnapshotData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_FileSharesDeleteFileShareSnapshotMaximumSetGenGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2024-01-01-preview/FileShares_DeleteFileShareSnapshot_MaximumSet_Gen.json
            // this example is just showing the usage of "FileShareSnapshot_DeleteFileShareSnapshot" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FileShareSnapshotResource created on azure
            // for more information of creating FileShareSnapshotResource, please refer to the document of FileShareSnapshotResource
            string subscriptionId = "AD98EFD8-D1E9-4F38-A862-E066114E49EE";
            string resourceGroupName = "rgfileshares";
            string resourceName = "testfileshare";
            string name = "testfilesharesnapshot";
            ResourceIdentifier fileShareSnapshotResourceId = FileShareSnapshotResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName, name);
            FileShareSnapshotResource fileShareSnapshot = client.GetFileShareSnapshotResource(fileShareSnapshotResourceId);

            // invoke the operation
            await fileShareSnapshot.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_FileSharesUpdateFileShareSnapshotMaximumSetGenGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2024-01-01-preview/FileShares_UpdateFileShareSnapshot_MaximumSet_Gen.json
            // this example is just showing the usage of "FileShareSnapshot_UpdateFileShareSnapshot" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FileShareSnapshotResource created on azure
            // for more information of creating FileShareSnapshotResource, please refer to the document of FileShareSnapshotResource
            string subscriptionId = "AD98EFD8-D1E9-4F38-A862-E066114E49EE";
            string resourceGroupName = "rgfileshares";
            string resourceName = "testfileshare";
            string name = "testfilesharesnapshot";
            ResourceIdentifier fileShareSnapshotResourceId = FileShareSnapshotResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName, name);
            FileShareSnapshotResource fileShareSnapshot = client.GetFileShareSnapshotResource(fileShareSnapshotResourceId);

            // invoke the operation
            FileShareSnapshotPatch patch = new FileShareSnapshotPatch
            {
                FileShareSnapshotUpdateMetadata =
{
["key5497"] = "xxznaauato"
},
            };
            ArmOperation<FileShareSnapshotResource> lro = await fileShareSnapshot.UpdateAsync(WaitUntil.Completed, patch);
            FileShareSnapshotResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            FileShareSnapshotData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
