// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.Fileshares.Models
{
    /// <summary> The updatable properties of the FileShare. </summary>
    public partial class FileShareUpdateProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="FileShareUpdateProperties"/>. </summary>
        public FileShareUpdateProperties()
        {
        }

        /// <summary> Initializes a new instance of <see cref="FileShareUpdateProperties"/>. </summary>
        /// <param name="provisionedStorageGiB"> The provisioned storage size of the share in GiB (1 GiB is 1024^3 bytes or 1073741824 bytes). A component of the file share's bill is the provisioned storage, regardless of the amount of used storage. </param>
        /// <param name="provisionedIOPerSec"> The provisioned IO / sec of the share. </param>
        /// <param name="provisionedThroughputMiBPerSec"> The provisioned throughput / sec of the share. </param>
        /// <param name="nfsProtocolProperties"> Protocol settings specific NFS. </param>
        /// <param name="publicAccessProperties"> The set of properties for control public access. </param>
        /// <param name="publicNetworkAccess"> Gets or sets allow or disallow public network access to azure managed file share. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal FileShareUpdateProperties(int? provisionedStorageGiB, int? provisionedIOPerSec, int? provisionedThroughputMiBPerSec, NfsProtocolProperties nfsProtocolProperties, PublicAccessProperties publicAccessProperties, PublicNetworkAccess? publicNetworkAccess, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ProvisionedStorageGiB = provisionedStorageGiB;
            ProvisionedIOPerSec = provisionedIOPerSec;
            ProvisionedThroughputMiBPerSec = provisionedThroughputMiBPerSec;
            NfsProtocolProperties = nfsProtocolProperties;
            PublicAccessProperties = publicAccessProperties;
            PublicNetworkAccess = publicNetworkAccess;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The provisioned storage size of the share in GiB (1 GiB is 1024^3 bytes or 1073741824 bytes). A component of the file share's bill is the provisioned storage, regardless of the amount of used storage. </summary>
        public int? ProvisionedStorageGiB { get; set; }
        /// <summary> The provisioned IO / sec of the share. </summary>
        public int? ProvisionedIOPerSec { get; set; }
        /// <summary> The provisioned throughput / sec of the share. </summary>
        public int? ProvisionedThroughputMiBPerSec { get; set; }
        /// <summary> Protocol settings specific NFS. </summary>
        internal NfsProtocolProperties NfsProtocolProperties { get; set; }
        /// <summary> Root squash defines how root users on clients are mapped to the NFS share. </summary>
        public ShareRootSquash? NfsProtocolRootSquash
        {
            get => NfsProtocolProperties is null ? default : NfsProtocolProperties.RootSquash;
            set
            {
                if (NfsProtocolProperties is null)
                    NfsProtocolProperties = new NfsProtocolProperties();
                NfsProtocolProperties.RootSquash = value;
            }
        }

        /// <summary> The set of properties for control public access. </summary>
        internal PublicAccessProperties PublicAccessProperties { get; set; }
        /// <summary> The allowed set of subnets when access is restricted. </summary>
        public IList<string> PublicAccessAllowedSubnets
        {
            get
            {
                if (PublicAccessProperties is null)
                    PublicAccessProperties = new PublicAccessProperties();
                return PublicAccessProperties.AllowedSubnets;
            }
        }

        /// <summary> Gets or sets allow or disallow public network access to azure managed file share. </summary>
        public PublicNetworkAccess? PublicNetworkAccess { get; set; }
    }
}
