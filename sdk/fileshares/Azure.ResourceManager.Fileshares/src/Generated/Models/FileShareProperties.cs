// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.Fileshares.Models
{
    /// <summary> File share properties. </summary>
    public partial class FileShareProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="FileShareProperties"/>. </summary>
        public FileShareProperties()
        {
            PrivateEndpointConnections = new ChangeTrackingList<FilesharesPrivateEndpointConnection>();
        }

        /// <summary> Initializes a new instance of <see cref="FileShareProperties"/>. </summary>
        /// <param name="mountName"> The name of the file share as seen by the end user when mounting the share, such as in a URI or UNC format in their operating system. </param>
        /// <param name="hostName"> The host name of the file share. </param>
        /// <param name="mediaTier"> The storage media tier of the file share. </param>
        /// <param name="redundancy"> The chosen redundancy level of the file share. </param>
        /// <param name="protocol"> The file sharing protocol for this file share. </param>
        /// <param name="provisionedStorageGiB"> The provisioned storage size of the share in GiB (1 GiB is 1024^3 bytes or 1073741824 bytes). A component of the file share's bill is the provisioned storage, regardless of the amount of used storage. </param>
        /// <param name="provisionedStorageNextAllowedDowngrade"> A date/time value that specifies when the provisioned storage for the file share is permitted to be reduced. </param>
        /// <param name="provisionedIOPerSec"> The provisioned IO / sec of the share. </param>
        /// <param name="provisionedIOPerSecNextAllowedDowngrade"> A date/time value that specifies when the provisioned IOPS for the file share is permitted to be reduced. </param>
        /// <param name="provisionedThroughputMiBPerSec"> The provisioned throughput / sec of the share. </param>
        /// <param name="provisionedThroughputNextAllowedDowngrade"> A date/time value that specifies when the provisioned throughput for the file share is permitted to be reduced. </param>
        /// <param name="includedBurstIOPerSec"> Burst IOPS are extra buffer IOPS enabling you to consume more than your provisioned IOPS for a short period of time, depending on the burst credits available for your share. </param>
        /// <param name="maxBurstIOPerSecCredits"> Max burst IOPS credits shows the maximum number of burst credits the share can have at the current IOPS provisioning level. </param>
        /// <param name="nfsProtocolProperties"> Protocol settings specific NFS. </param>
        /// <param name="publicAccessProperties"> The set of properties for control public access. </param>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="publicNetworkAccess"> Gets or sets allow or disallow public network access to azure managed file share. </param>
        /// <param name="privateEndpointConnections"> The list of associated private endpoint connections. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal FileShareProperties(string mountName, string hostName, MediaTier? mediaTier, Redundancy? redundancy, Protocol? protocol, int? provisionedStorageGiB, DateTimeOffset? provisionedStorageNextAllowedDowngrade, int? provisionedIOPerSec, DateTimeOffset? provisionedIOPerSecNextAllowedDowngrade, int? provisionedThroughputMiBPerSec, DateTimeOffset? provisionedThroughputNextAllowedDowngrade, int? includedBurstIOPerSec, long? maxBurstIOPerSecCredits, NfsProtocolProperties nfsProtocolProperties, PublicAccessProperties publicAccessProperties, FileShareProvisioningState? provisioningState, PublicNetworkAccess? publicNetworkAccess, IReadOnlyList<FilesharesPrivateEndpointConnection> privateEndpointConnections, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            MountName = mountName;
            HostName = hostName;
            MediaTier = mediaTier;
            Redundancy = redundancy;
            Protocol = protocol;
            ProvisionedStorageGiB = provisionedStorageGiB;
            ProvisionedStorageNextAllowedDowngrade = provisionedStorageNextAllowedDowngrade;
            ProvisionedIOPerSec = provisionedIOPerSec;
            ProvisionedIOPerSecNextAllowedDowngrade = provisionedIOPerSecNextAllowedDowngrade;
            ProvisionedThroughputMiBPerSec = provisionedThroughputMiBPerSec;
            ProvisionedThroughputNextAllowedDowngrade = provisionedThroughputNextAllowedDowngrade;
            IncludedBurstIOPerSec = includedBurstIOPerSec;
            MaxBurstIOPerSecCredits = maxBurstIOPerSecCredits;
            NfsProtocolProperties = nfsProtocolProperties;
            PublicAccessProperties = publicAccessProperties;
            ProvisioningState = provisioningState;
            PublicNetworkAccess = publicNetworkAccess;
            PrivateEndpointConnections = privateEndpointConnections;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The name of the file share as seen by the end user when mounting the share, such as in a URI or UNC format in their operating system. </summary>
        public string MountName { get; set; }
        /// <summary> The host name of the file share. </summary>
        public string HostName { get; }
        /// <summary> The storage media tier of the file share. </summary>
        public MediaTier? MediaTier { get; set; }
        /// <summary> The chosen redundancy level of the file share. </summary>
        public Redundancy? Redundancy { get; set; }
        /// <summary> The file sharing protocol for this file share. </summary>
        public Protocol? Protocol { get; set; }
        /// <summary> The provisioned storage size of the share in GiB (1 GiB is 1024^3 bytes or 1073741824 bytes). A component of the file share's bill is the provisioned storage, regardless of the amount of used storage. </summary>
        public int? ProvisionedStorageGiB { get; set; }
        /// <summary> A date/time value that specifies when the provisioned storage for the file share is permitted to be reduced. </summary>
        public DateTimeOffset? ProvisionedStorageNextAllowedDowngrade { get; }
        /// <summary> The provisioned IO / sec of the share. </summary>
        public int? ProvisionedIOPerSec { get; set; }
        /// <summary> A date/time value that specifies when the provisioned IOPS for the file share is permitted to be reduced. </summary>
        public DateTimeOffset? ProvisionedIOPerSecNextAllowedDowngrade { get; }
        /// <summary> The provisioned throughput / sec of the share. </summary>
        public int? ProvisionedThroughputMiBPerSec { get; set; }
        /// <summary> A date/time value that specifies when the provisioned throughput for the file share is permitted to be reduced. </summary>
        public DateTimeOffset? ProvisionedThroughputNextAllowedDowngrade { get; }
        /// <summary> Burst IOPS are extra buffer IOPS enabling you to consume more than your provisioned IOPS for a short period of time, depending on the burst credits available for your share. </summary>
        public int? IncludedBurstIOPerSec { get; }
        /// <summary> Max burst IOPS credits shows the maximum number of burst credits the share can have at the current IOPS provisioning level. </summary>
        public long? MaxBurstIOPerSecCredits { get; }
        /// <summary> Protocol settings specific NFS. </summary>
        internal NfsProtocolProperties NfsProtocolProperties { get; set; }
        /// <summary> Root squash defines how root users on clients are mapped to the NFS share. </summary>
        public ShareRootSquash? NfsProtocolRootSquash
        {
            get => NfsProtocolProperties is null ? default(ShareRootSquash?) : NfsProtocolProperties.RootSquash;
            set
            {
                NfsProtocolProperties = value.HasValue ? new NfsProtocolProperties(value.Value) : null;
            }
        }

        /// <summary> The set of properties for control public access. </summary>
        internal PublicAccessProperties PublicAccessProperties { get; set; }
        /// <summary> The allowed set of subnets when access is restricted. </summary>
        public IList<string> PublicAccessAllowedSubnets
        {
            get => PublicAccessProperties is null ? default : PublicAccessProperties.AllowedSubnets;
            set => PublicAccessProperties = new PublicAccessProperties(value);
        }

        /// <summary> The status of the last operation. </summary>
        public FileShareProvisioningState? ProvisioningState { get; }
        /// <summary> Gets or sets allow or disallow public network access to azure managed file share. </summary>
        public PublicNetworkAccess? PublicNetworkAccess { get; set; }
        /// <summary> The list of associated private endpoint connections. </summary>
        public IReadOnlyList<FilesharesPrivateEndpointConnection> PrivateEndpointConnections { get; }
    }
}
