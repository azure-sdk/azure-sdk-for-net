// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Fileshares.Models
{
    public partial class FileShareProperties : IUtf8JsonSerializable, IJsonModel<FileShareProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<FileShareProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<FileShareProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<FileShareProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(FileShareProperties)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(MountName))
            {
                writer.WritePropertyName("mountName"u8);
                writer.WriteStringValue(MountName);
            }
            if (options.Format != "W" && Optional.IsDefined(HostName))
            {
                writer.WritePropertyName("hostName"u8);
                writer.WriteStringValue(HostName);
            }
            if (Optional.IsDefined(MediaTier))
            {
                writer.WritePropertyName("mediaTier"u8);
                writer.WriteStringValue(MediaTier.Value.ToSerialString());
            }
            if (Optional.IsDefined(Redundancy))
            {
                writer.WritePropertyName("redundancy"u8);
                writer.WriteStringValue(Redundancy.Value.ToSerialString());
            }
            if (Optional.IsDefined(Protocol))
            {
                writer.WritePropertyName("protocol"u8);
                writer.WriteStringValue(Protocol.Value.ToSerialString());
            }
            if (Optional.IsDefined(ProvisionedStorageGiB))
            {
                writer.WritePropertyName("provisionedStorageGiB"u8);
                writer.WriteNumberValue(ProvisionedStorageGiB.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisionedStorageNextAllowedDowngrade))
            {
                writer.WritePropertyName("provisionedStorageNextAllowedDowngrade"u8);
                writer.WriteStringValue(ProvisionedStorageNextAllowedDowngrade.Value, "O");
            }
            if (Optional.IsDefined(ProvisionedIOPerSec))
            {
                writer.WritePropertyName("provisionedIOPerSec"u8);
                writer.WriteNumberValue(ProvisionedIOPerSec.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisionedIOPerSecNextAllowedDowngrade))
            {
                writer.WritePropertyName("provisionedIOPerSecNextAllowedDowngrade"u8);
                writer.WriteStringValue(ProvisionedIOPerSecNextAllowedDowngrade.Value, "O");
            }
            if (Optional.IsDefined(ProvisionedThroughputMiBPerSec))
            {
                writer.WritePropertyName("provisionedThroughputMiBPerSec"u8);
                writer.WriteNumberValue(ProvisionedThroughputMiBPerSec.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisionedThroughputNextAllowedDowngrade))
            {
                writer.WritePropertyName("provisionedThroughputNextAllowedDowngrade"u8);
                writer.WriteStringValue(ProvisionedThroughputNextAllowedDowngrade.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(IncludedBurstIOPerSec))
            {
                writer.WritePropertyName("includedBurstIOPerSec"u8);
                writer.WriteNumberValue(IncludedBurstIOPerSec.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(MaxBurstIOPerSecCredits))
            {
                writer.WritePropertyName("maxBurstIOPerSecCredits"u8);
                writer.WriteNumberValue(MaxBurstIOPerSecCredits.Value);
            }
            if (Optional.IsDefined(NfsProtocolProperties))
            {
                writer.WritePropertyName("nfsProtocolProperties"u8);
                writer.WriteObjectValue(NfsProtocolProperties, options);
            }
            if (Optional.IsDefined(PublicAccessProperties))
            {
                writer.WritePropertyName("publicAccessProperties"u8);
                writer.WriteObjectValue(PublicAccessProperties, options);
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (Optional.IsDefined(PublicNetworkAccess))
            {
                writer.WritePropertyName("publicNetworkAccess"u8);
                writer.WriteStringValue(PublicNetworkAccess.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(PrivateEndpointConnections))
            {
                writer.WritePropertyName("privateEndpointConnections"u8);
                writer.WriteStartArray();
                foreach (var item in PrivateEndpointConnections)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        FileShareProperties IJsonModel<FileShareProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<FileShareProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(FileShareProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeFileShareProperties(document.RootElement, options);
        }

        internal static FileShareProperties DeserializeFileShareProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string mountName = default;
            string hostName = default;
            MediaTier? mediaTier = default;
            Redundancy? redundancy = default;
            Protocol? protocol = default;
            int? provisionedStorageGiB = default;
            DateTimeOffset? provisionedStorageNextAllowedDowngrade = default;
            int? provisionedIOPerSec = default;
            DateTimeOffset? provisionedIOPerSecNextAllowedDowngrade = default;
            int? provisionedThroughputMiBPerSec = default;
            DateTimeOffset? provisionedThroughputNextAllowedDowngrade = default;
            int? includedBurstIOPerSec = default;
            long? maxBurstIOPerSecCredits = default;
            NfsProtocolProperties nfsProtocolProperties = default;
            PublicAccessProperties publicAccessProperties = default;
            FileShareProvisioningState? provisioningState = default;
            PublicNetworkAccess? publicNetworkAccess = default;
            IReadOnlyList<FilesharesPrivateEndpointConnection> privateEndpointConnections = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("mountName"u8))
                {
                    mountName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("hostName"u8))
                {
                    hostName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("mediaTier"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    mediaTier = property.Value.GetString().ToMediaTier();
                    continue;
                }
                if (property.NameEquals("redundancy"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    redundancy = property.Value.GetString().ToRedundancy();
                    continue;
                }
                if (property.NameEquals("protocol"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    protocol = property.Value.GetString().ToProtocol();
                    continue;
                }
                if (property.NameEquals("provisionedStorageGiB"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisionedStorageGiB = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("provisionedStorageNextAllowedDowngrade"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisionedStorageNextAllowedDowngrade = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("provisionedIOPerSec"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisionedIOPerSec = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("provisionedIOPerSecNextAllowedDowngrade"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisionedIOPerSecNextAllowedDowngrade = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("provisionedThroughputMiBPerSec"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisionedThroughputMiBPerSec = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("provisionedThroughputNextAllowedDowngrade"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisionedThroughputNextAllowedDowngrade = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("includedBurstIOPerSec"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    includedBurstIOPerSec = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("maxBurstIOPerSecCredits"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maxBurstIOPerSecCredits = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("nfsProtocolProperties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    nfsProtocolProperties = NfsProtocolProperties.DeserializeNfsProtocolProperties(property.Value, options);
                    continue;
                }
                if (property.NameEquals("publicAccessProperties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    publicAccessProperties = PublicAccessProperties.DeserializePublicAccessProperties(property.Value, options);
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new FileShareProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("publicNetworkAccess"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    publicNetworkAccess = new PublicNetworkAccess(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("privateEndpointConnections"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<FilesharesPrivateEndpointConnection> array = new List<FilesharesPrivateEndpointConnection>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(FilesharesPrivateEndpointConnection.DeserializeFilesharesPrivateEndpointConnection(item, options));
                    }
                    privateEndpointConnections = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new FileShareProperties(
                mountName,
                hostName,
                mediaTier,
                redundancy,
                protocol,
                provisionedStorageGiB,
                provisionedStorageNextAllowedDowngrade,
                provisionedIOPerSec,
                provisionedIOPerSecNextAllowedDowngrade,
                provisionedThroughputMiBPerSec,
                provisionedThroughputNextAllowedDowngrade,
                includedBurstIOPerSec,
                maxBurstIOPerSecCredits,
                nfsProtocolProperties,
                publicAccessProperties,
                provisioningState,
                publicNetworkAccess,
                privateEndpointConnections ?? new ChangeTrackingList<FilesharesPrivateEndpointConnection>(),
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<FileShareProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<FileShareProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerFilesharesContext.Default);
                default:
                    throw new FormatException($"The model {nameof(FileShareProperties)} does not support writing '{options.Format}' format.");
            }
        }

        FileShareProperties IPersistableModel<FileShareProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<FileShareProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeFileShareProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(FileShareProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<FileShareProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
