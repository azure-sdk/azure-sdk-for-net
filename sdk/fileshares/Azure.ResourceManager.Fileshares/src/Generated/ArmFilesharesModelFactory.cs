// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Fileshares.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmFilesharesModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Fileshares.FileShareData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="Fileshares.FileShareData"/> instance for mocking. </returns>
        public static FileShareData FileShareData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, FileShareProperties properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new FileShareData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.FileShareProperties"/>. </summary>
        /// <param name="mountName"> The name of the file share as seen by the end user when mounting the share, such as in a URI or UNC format in their operating system. </param>
        /// <param name="hostName"> The host name of the file share. </param>
        /// <param name="mediaTier"> The storage media tier of the file share. </param>
        /// <param name="redundancy"> The chosen redundancy level of the file share. </param>
        /// <param name="protocol"> The file sharing protocol for this file share. </param>
        /// <param name="provisionedStorageGiB"> The provisioned storage size of the share in GiB (1 GiB is 1024^3 bytes or 1073741824 bytes). A component of the file share's bill is the provisioned storage, regardless of the amount of used storage. </param>
        /// <param name="provisionedStorageNextAllowedDowngrade"> A date/time value that specifies when the provisioned storage for the file share is permitted to be reduced. </param>
        /// <param name="provisionedIOPerSec"> The provisioned IO / sec of the share. </param>
        /// <param name="provisionedIOPerSecNextAllowedDowngrade"> A date/time value that specifies when the provisioned IOPS for the file share is permitted to be reduced. </param>
        /// <param name="provisionedThroughputMiBPerSec"> The provisioned throughput / sec of the share. </param>
        /// <param name="provisionedThroughputNextAllowedDowngrade"> A date/time value that specifies when the provisioned throughput for the file share is permitted to be reduced. </param>
        /// <param name="includedBurstIOPerSec"> Burst IOPS are extra buffer IOPS enabling you to consume more than your provisioned IOPS for a short period of time, depending on the burst credits available for your share. </param>
        /// <param name="maxBurstIOPerSecCredits"> Max burst IOPS credits shows the maximum number of burst credits the share can have at the current IOPS provisioning level. </param>
        /// <param name="nfsProtocolRootSquash"> Protocol settings specific NFS. </param>
        /// <param name="publicAccessAllowedSubnets"> The set of properties for control public access. </param>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="publicNetworkAccess"> Gets or sets allow or disallow public network access to azure managed file share. </param>
        /// <param name="privateEndpointConnections"> The list of associated private endpoint connections. </param>
        /// <returns> A new <see cref="Models.FileShareProperties"/> instance for mocking. </returns>
        public static FileShareProperties FileShareProperties(string mountName = null, string hostName = null, MediaTier? mediaTier = null, Redundancy? redundancy = null, Protocol? protocol = null, int? provisionedStorageGiB = null, DateTimeOffset? provisionedStorageNextAllowedDowngrade = null, int? provisionedIOPerSec = null, DateTimeOffset? provisionedIOPerSecNextAllowedDowngrade = null, int? provisionedThroughputMiBPerSec = null, DateTimeOffset? provisionedThroughputNextAllowedDowngrade = null, int? includedBurstIOPerSec = null, long? maxBurstIOPerSecCredits = null, ShareRootSquash? nfsProtocolRootSquash = null, IEnumerable<string> publicAccessAllowedSubnets = null, FileShareProvisioningState? provisioningState = null, PublicNetworkAccess? publicNetworkAccess = null, IEnumerable<FilesharesPrivateEndpointConnection> privateEndpointConnections = null)
        {
            publicAccessAllowedSubnets ??= new List<string>();
            privateEndpointConnections ??= new List<FilesharesPrivateEndpointConnection>();

            return new FileShareProperties(
                mountName,
                hostName,
                mediaTier,
                redundancy,
                protocol,
                provisionedStorageGiB,
                provisionedStorageNextAllowedDowngrade,
                provisionedIOPerSec,
                provisionedIOPerSecNextAllowedDowngrade,
                provisionedThroughputMiBPerSec,
                provisionedThroughputNextAllowedDowngrade,
                includedBurstIOPerSec,
                maxBurstIOPerSecCredits,
                nfsProtocolRootSquash.HasValue ? new NfsProtocolProperties(nfsProtocolRootSquash.Value, serializedAdditionalRawData: null) : null,
                publicAccessAllowedSubnets != null ? new PublicAccessProperties(publicAccessAllowedSubnets?.ToList(), serializedAdditionalRawData: null) : null,
                provisioningState,
                publicNetworkAccess,
                privateEndpointConnections?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.FilesharesPrivateEndpointConnection"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The private endpoint connection properties. </param>
        /// <returns> A new <see cref="Models.FilesharesPrivateEndpointConnection"/> instance for mocking. </returns>
        public static FilesharesPrivateEndpointConnection FilesharesPrivateEndpointConnection(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, PrivateEndpointConnectionProperties properties = null)
        {
            return new FilesharesPrivateEndpointConnection(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.PrivateEndpointConnectionProperties"/>. </summary>
        /// <param name="groupIds"> The group ids for the private endpoint resource. </param>
        /// <param name="privateEndpointId"> The private endpoint resource. </param>
        /// <param name="privateLinkServiceConnectionState"> A collection of information about the state of the connection between service consumer and provider. </param>
        /// <param name="provisioningState"> The provisioning state of the private endpoint connection resource. </param>
        /// <returns> A new <see cref="Models.PrivateEndpointConnectionProperties"/> instance for mocking. </returns>
        public static PrivateEndpointConnectionProperties PrivateEndpointConnectionProperties(IEnumerable<string> groupIds = null, ResourceIdentifier privateEndpointId = null, FilesharesPrivateLinkServiceConnectionState privateLinkServiceConnectionState = null, FilesharesPrivateEndpointConnectionProvisioningState? provisioningState = null)
        {
            groupIds ??= new List<string>();

            return new PrivateEndpointConnectionProperties(groupIds?.ToList(), privateEndpointId != null ? ResourceManagerModelFactory.SubResource(privateEndpointId) : null, privateLinkServiceConnectionState, provisioningState, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.FilesharesPrivateLinkServiceConnectionState"/>. </summary>
        /// <param name="status"> Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service. </param>
        /// <param name="description"> The reason for approval/rejection of the connection. </param>
        /// <param name="actionsRequired"> A message indicating if changes on the service provider require any updates on the consumer. </param>
        /// <returns> A new <see cref="Models.FilesharesPrivateLinkServiceConnectionState"/> instance for mocking. </returns>
        public static FilesharesPrivateLinkServiceConnectionState FilesharesPrivateLinkServiceConnectionState(FilesharesPrivateEndpointServiceConnectionStatus? status = null, string description = null, string actionsRequired = null)
        {
            return new FilesharesPrivateLinkServiceConnectionState(status, description, actionsRequired, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CheckNameAvailabilityResponse"/>. </summary>
        /// <param name="nameAvailable"> Indicates if the resource name is available. </param>
        /// <param name="reason"> The reason why the given name is not available. </param>
        /// <param name="message"> Detailed reason why the given name is not available. </param>
        /// <returns> A new <see cref="Models.CheckNameAvailabilityResponse"/> instance for mocking. </returns>
        public static CheckNameAvailabilityResponse CheckNameAvailabilityResponse(bool? nameAvailable = null, CheckNameAvailabilityReason? reason = null, string message = null)
        {
            return new CheckNameAvailabilityResponse(nameAvailable, reason, message, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Fileshares.FileShareSnapshotData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="Fileshares.FileShareSnapshotData"/> instance for mocking. </returns>
        public static FileShareSnapshotData FileShareSnapshotData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, FileShareSnapshotProperties properties = null)
        {
            return new FileShareSnapshotData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.FileShareSnapshotProperties"/>. </summary>
        /// <param name="snapshotTime"> The FileShareSnapshot time in UTC in string representation. </param>
        /// <param name="initiatorId"> The initiator of the FileShareSnapshot. </param>
        /// <param name="metadata"> The metadata. </param>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <returns> A new <see cref="Models.FileShareSnapshotProperties"/> instance for mocking. </returns>
        public static FileShareSnapshotProperties FileShareSnapshotProperties(string snapshotTime = null, string initiatorId = null, IEnumerable<MetadataItem> metadata = null, FileShareProvisioningState? provisioningState = null)
        {
            metadata ??= new List<MetadataItem>();

            return new FileShareSnapshotProperties(snapshotTime, initiatorId, metadata?.ToList(), provisioningState, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.Operation"/>. </summary>
        /// <param name="name"> The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action". </param>
        /// <param name="isDataAction"> Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for Azure Resource Manager/control-plane operations. </param>
        /// <param name="display"> Localized display information for this particular operation. </param>
        /// <param name="origin"> The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is "user,system". </param>
        /// <param name="actionType"> Extensible enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs. </param>
        /// <returns> A new <see cref="Models.Operation"/> instance for mocking. </returns>
        public static Operation Operation(string name = null, bool? isDataAction = null, OperationDisplay display = null, Origin? origin = null, ActionType? actionType = null)
        {
            return new Operation(
                name,
                isDataAction,
                display,
                origin,
                actionType,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.OperationDisplay"/>. </summary>
        /// <param name="provider"> The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft Compute". </param>
        /// <param name="resource"> The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job Schedule Collections". </param>
        /// <param name="operation"> The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine". </param>
        /// <param name="description"> The short, localized friendly description of the operation; suitable for tool tips and detailed views. </param>
        /// <returns> A new <see cref="Models.OperationDisplay"/> instance for mocking. </returns>
        public static OperationDisplay OperationDisplay(string provider = null, string resource = null, string operation = null, string description = null)
        {
            return new OperationDisplay(provider, resource, operation, description, serializedAdditionalRawData: null);
        }
    }
}
