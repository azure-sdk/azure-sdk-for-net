// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.Purview.Administration
{
    // Data plane generated client. The Schedule service client.
    /// <summary> The Schedule service client. </summary>
    public partial class ScheduleClient
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://purview.azure.net/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of ScheduleClient for mocking. </summary>
        protected ScheduleClient()
        {
        }

        /// <summary> Initializes a new instance of ScheduleClient. </summary>
        /// <param name="endpoint"> The endpoint of your Purview account. Example: https://{accountName}.purview.azure.com. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public ScheduleClient(Uri endpoint, TokenCredential credential) : this(endpoint, credential, new PurviewAccountClientOptions())
        {
        }

        /// <summary> Initializes a new instance of ScheduleClient. </summary>
        /// <param name="endpoint"> The endpoint of your Purview account. Example: https://{accountName}.purview.azure.com. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public ScheduleClient(Uri endpoint, TokenCredential credential, PurviewAccountClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(credential, nameof(credential));
            options ??= new PurviewAccountClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) }, new ResponseClassifier());
            _endpoint = endpoint;
        }

        /// <summary> Create Schedule Assessment. </summary>
        /// <param name="accountId"> Get Account Id. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="runNow"> Get RunNow. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/ScheduleClient.xml" path="doc/members/member[@name='CreateAsync(String,RequestContent,Boolean,RequestContext)']/*" />
        public virtual async Task<Response> CreateAsync(string accountId, RequestContent content, bool? runNow = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ScheduleClient.Create");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateRequest(accountId, content, runNow, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Schedule Assessment. </summary>
        /// <param name="accountId"> Get Account Id. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="runNow"> Get RunNow. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/ScheduleClient.xml" path="doc/members/member[@name='Create(String,RequestContent,Boolean,RequestContext)']/*" />
        public virtual Response Create(string accountId, RequestContent content, bool? runNow = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ScheduleClient.Create");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateRequest(accountId, content, runNow, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update Schedule Assessment. </summary>
        /// <param name="accountId"> Get Account Id. </param>
        /// <param name="scheduleId"> Get Schedule Id. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="runNow"> Get RunNow. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/>, <paramref name="scheduleId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="scheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/ScheduleClient.xml" path="doc/members/member[@name='UpdateAsync(String,String,RequestContent,Boolean,RequestContext)']/*" />
        public virtual async Task<Response> UpdateAsync(string accountId, string scheduleId, RequestContent content, bool? runNow = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(scheduleId, nameof(scheduleId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ScheduleClient.Update");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateRequest(accountId, scheduleId, content, runNow, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update Schedule Assessment. </summary>
        /// <param name="accountId"> Get Account Id. </param>
        /// <param name="scheduleId"> Get Schedule Id. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="runNow"> Get RunNow. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/>, <paramref name="scheduleId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="scheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/ScheduleClient.xml" path="doc/members/member[@name='Update(String,String,RequestContent,Boolean,RequestContext)']/*" />
        public virtual Response Update(string accountId, string scheduleId, RequestContent content, bool? runNow = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(scheduleId, nameof(scheduleId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ScheduleClient.Update");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateRequest(accountId, scheduleId, content, runNow, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get Schedule Assessment MetaData. </summary>
        /// <param name="accountId"> Get Account Id. </param>
        /// <param name="scheduleId"> Get Schedule Id. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="scheduleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="scheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/ScheduleClient.xml" path="doc/members/member[@name='GetScheduleAsync(String,String,RequestContext)']/*" />
        public virtual async Task<Response> GetScheduleAsync(string accountId, string scheduleId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(scheduleId, nameof(scheduleId));

            using var scope = ClientDiagnostics.CreateScope("ScheduleClient.GetSchedule");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetScheduleRequest(accountId, scheduleId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get Schedule Assessment MetaData. </summary>
        /// <param name="accountId"> Get Account Id. </param>
        /// <param name="scheduleId"> Get Schedule Id. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="scheduleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="scheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/ScheduleClient.xml" path="doc/members/member[@name='GetSchedule(String,String,RequestContext)']/*" />
        public virtual Response GetSchedule(string accountId, string scheduleId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(scheduleId, nameof(scheduleId));

            using var scope = ClientDiagnostics.CreateScope("ScheduleClient.GetSchedule");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetScheduleRequest(accountId, scheduleId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete Schedule Assessment. </summary>
        /// <param name="accountId"> Get Account Id. </param>
        /// <param name="scheduleId"> Get Schedule Id. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="scheduleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="scheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ScheduleClient.xml" path="doc/members/member[@name='DeleteAsync(String,String,RequestContext)']/*" />
        public virtual async Task<Response> DeleteAsync(string accountId, string scheduleId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(scheduleId, nameof(scheduleId));

            using var scope = ClientDiagnostics.CreateScope("ScheduleClient.Delete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRequest(accountId, scheduleId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete Schedule Assessment. </summary>
        /// <param name="accountId"> Get Account Id. </param>
        /// <param name="scheduleId"> Get Schedule Id. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="scheduleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="scheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ScheduleClient.xml" path="doc/members/member[@name='Delete(String,String,RequestContext)']/*" />
        public virtual Response Delete(string accountId, string scheduleId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(scheduleId, nameof(scheduleId));

            using var scope = ClientDiagnostics.CreateScope("ScheduleClient.Delete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRequest(accountId, scheduleId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Cancel Schedule Assessment. </summary>
        /// <param name="accountId"> Get Account Id. </param>
        /// <param name="scheduleId"> Get Schedule Id. </param>
        /// <param name="runId"> Get Run Id. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/>, <paramref name="scheduleId"/> or <paramref name="runId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/>, <paramref name="scheduleId"/> or <paramref name="runId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ScheduleClient.xml" path="doc/members/member[@name='CancelAsync(String,String,String,RequestContext)']/*" />
        public virtual async Task<Response> CancelAsync(string accountId, string scheduleId, string runId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(scheduleId, nameof(scheduleId));
            Argument.AssertNotNullOrEmpty(runId, nameof(runId));

            using var scope = ClientDiagnostics.CreateScope("ScheduleClient.Cancel");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCancelRequest(accountId, scheduleId, runId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Cancel Schedule Assessment. </summary>
        /// <param name="accountId"> Get Account Id. </param>
        /// <param name="scheduleId"> Get Schedule Id. </param>
        /// <param name="runId"> Get Run Id. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/>, <paramref name="scheduleId"/> or <paramref name="runId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/>, <paramref name="scheduleId"/> or <paramref name="runId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ScheduleClient.xml" path="doc/members/member[@name='Cancel(String,String,String,RequestContext)']/*" />
        public virtual Response Cancel(string accountId, string scheduleId, string runId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(scheduleId, nameof(scheduleId));
            Argument.AssertNotNullOrEmpty(runId, nameof(runId));

            using var scope = ClientDiagnostics.CreateScope("ScheduleClient.Cancel");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCancelRequest(accountId, scheduleId, runId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Run Schedule Assessment External. </summary>
        /// <param name="accountId"> Get Account Id. </param>
        /// <param name="scheduleId"> Get Schedule Id. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="scheduleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="scheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ScheduleClient.xml" path="doc/members/member[@name='TriggerAsync(String,String,RequestContext)']/*" />
        public virtual async Task<Response> TriggerAsync(string accountId, string scheduleId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(scheduleId, nameof(scheduleId));

            using var scope = ClientDiagnostics.CreateScope("ScheduleClient.Trigger");
            scope.Start();
            try
            {
                using HttpMessage message = CreateTriggerRequest(accountId, scheduleId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Run Schedule Assessment External. </summary>
        /// <param name="accountId"> Get Account Id. </param>
        /// <param name="scheduleId"> Get Schedule Id. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="scheduleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="scheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ScheduleClient.xml" path="doc/members/member[@name='Trigger(String,String,RequestContext)']/*" />
        public virtual Response Trigger(string accountId, string scheduleId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(scheduleId, nameof(scheduleId));

            using var scope = ClientDiagnostics.CreateScope("ScheduleClient.Trigger");
            scope.Start();
            try
            {
                using HttpMessage message = CreateTriggerRequest(accountId, scheduleId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateCreateRequest(string accountId, RequestContent content, bool? runNow, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier201);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/assessments/schedules", false);
            if (runNow != null)
            {
                uri.AppendQuery("runNow", runNow.Value, true);
            }
            uri.AppendQuery("api-version", "2022-09-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateUpdateRequest(string accountId, string scheduleId, RequestContent content, bool? runNow, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/assessments/schedules/", false);
            uri.AppendPath(scheduleId, true);
            if (runNow != null)
            {
                uri.AppendQuery("runNow", runNow.Value, true);
            }
            uri.AppendQuery("api-version", "2022-09-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetScheduleRequest(string accountId, string scheduleId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/assessments/schedules/", false);
            uri.AppendPath(scheduleId, true);
            uri.AppendQuery("api-version", "2022-09-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateDeleteRequest(string accountId, string scheduleId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/assessments/schedules/", false);
            uri.AppendPath(scheduleId, true);
            uri.AppendQuery("api-version", "2022-09-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCancelRequest(string accountId, string scheduleId, string runId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/assessments/schedules/", false);
            uri.AppendPath(scheduleId, true);
            uri.AppendPath("/runs/", false);
            uri.AppendPath(runId, true);
            uri.AppendPath("/cancel", false);
            uri.AppendQuery("api-version", "2022-09-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateTriggerRequest(string accountId, string scheduleId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/assessments/schedules/", false);
            uri.AppendPath(scheduleId, true);
            uri.AppendPath("/trigger", false);
            uri.AppendQuery("api-version", "2022-09-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static ResponseClassifier _responseClassifier201;
        private static ResponseClassifier ResponseClassifier201 => _responseClassifier201 ??= new StatusCodeClassifier(stackalloc ushort[] { 201 });
        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier204;
        private static ResponseClassifier ResponseClassifier204 => _responseClassifier204 ??= new StatusCodeClassifier(stackalloc ushort[] { 204 });
    }
}
