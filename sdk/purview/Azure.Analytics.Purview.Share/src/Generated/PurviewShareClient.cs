// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.Purview.Share
{
    // Data plane generated client. The PurviewShare service client.
    /// <summary> The PurviewShare service client. </summary>
    public partial class PurviewShareClient
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://purview.azure.net/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of PurviewShareClient for mocking. </summary>
        protected PurviewShareClient()
        {
        }

        /// <summary> Initializes a new instance of PurviewShareClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="credential"/> is null. </exception>
        public PurviewShareClient(TokenCredential credential) : this(credential, new Uri(""), new PurviewShareClientOptions())
        {
        }

        /// <summary> Initializes a new instance of PurviewShareClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="credential"/> or <paramref name="endpoint"/> is null. </exception>
        public PurviewShareClient(TokenCredential credential, Uri endpoint, PurviewShareClientOptions options)
        {
            Argument.AssertNotNull(credential, nameof(credential));
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new PurviewShareClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) }, new ResponseClassifier());
            _endpoint = endpoint;
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateAlertAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.CreateAlertAsync("<accountId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call CreateAlertAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {
        ///     id = "<id>",
        ///     name = "<name>",
        ///     description = "<description>",
        ///     status = "ACTIVE",
        ///     notificationFrequency = "IMMEDIATE",
        ///     notificationType = "EMAIL",
        ///     condition = "<condition>",
        ///     alertingScopes = new[] {
        ///         new {
        ///             level = "CATALOG_PATH",
        ///             type = "<type>",
        ///             id = "<id>",
        ///         }
        ///     },
        ///     createdOn = "2022-05-10T18:57:31.2311892Z",
        ///     createdBy = "<createdBy>",
        ///     lastUpdatedOn = "2022-05-10T18:57:31.2311892Z",
        ///     lastUpdatedBy = "<lastUpdatedBy>",
        ///     lastActivatedOn = "2022-05-10T18:57:31.2311892Z",
        ///     activatedCount = 1234,
        /// };
        /// 
        /// Response response = await client.CreateAlertAsync("<accountId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("notificationFrequency").ToString());
        /// Console.WriteLine(result.GetProperty("notificationType").ToString());
        /// Console.WriteLine(result.GetProperty("condition").ToString());
        /// Console.WriteLine(result.GetProperty("alertingScopes")[0].GetProperty("level").ToString());
        /// Console.WriteLine(result.GetProperty("alertingScopes")[0].GetProperty("type").ToString());
        /// Console.WriteLine(result.GetProperty("alertingScopes")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("createdOn").ToString());
        /// Console.WriteLine(result.GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("lastUpdatedOn").ToString());
        /// Console.WriteLine(result.GetProperty("lastUpdatedBy").ToString());
        /// Console.WriteLine(result.GetProperty("lastActivatedOn").ToString());
        /// Console.WriteLine(result.GetProperty("activatedCount").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>DQAlert</c>:
        /// <code>{
        ///   id: string, # Optional.
        ///   name: string, # Optional.
        ///   description: string, # Optional.
        ///   status: &quot;ACTIVE&quot; | &quot;DELETED&quot; | &quot;ENABLED&quot; | &quot;DISABLED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///   notificationFrequency: &quot;IMMEDIATE&quot;, # Optional.
        ///   notificationType: &quot;EMAIL&quot;, # Optional.
        ///   condition: string, # Optional.
        ///   alertingScopes: [
        ///     {
        ///       level: &quot;CATALOG_PATH&quot;, # Optional.
        ///       type: string, # Optional.
        ///       id: string, # Optional.
        ///     }
        ///   ], # Optional.
        ///   createdOn: string (ISO 8601 Format), # Optional.
        ///   createdBy: string, # Optional.
        ///   lastUpdatedOn: string (ISO 8601 Format), # Optional.
        ///   lastUpdatedBy: string, # Optional.
        ///   lastActivatedOn: string (ISO 8601 Format), # Optional.
        ///   activatedCount: number, # Optional.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>DQAlert</c>:
        /// <code>{
        ///   id: string, # Optional.
        ///   name: string, # Optional.
        ///   description: string, # Optional.
        ///   status: &quot;ACTIVE&quot; | &quot;DELETED&quot; | &quot;ENABLED&quot; | &quot;DISABLED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///   notificationFrequency: &quot;IMMEDIATE&quot;, # Optional.
        ///   notificationType: &quot;EMAIL&quot;, # Optional.
        ///   condition: string, # Optional.
        ///   alertingScopes: [
        ///     {
        ///       level: &quot;CATALOG_PATH&quot;, # Optional.
        ///       type: string, # Optional.
        ///       id: string, # Optional.
        ///     }
        ///   ], # Optional.
        ///   createdOn: string (ISO 8601 Format), # Optional.
        ///   createdBy: string, # Optional.
        ///   lastUpdatedOn: string (ISO 8601 Format), # Optional.
        ///   lastUpdatedBy: string, # Optional.
        ///   lastActivatedOn: string (ISO 8601 Format), # Optional.
        ///   activatedCount: number, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> CreateAlertAsync(string accountId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.CreateAlert");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateAlertRequest(accountId, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateAlert with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.CreateAlert("<accountId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call CreateAlert with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {
        ///     id = "<id>",
        ///     name = "<name>",
        ///     description = "<description>",
        ///     status = "ACTIVE",
        ///     notificationFrequency = "IMMEDIATE",
        ///     notificationType = "EMAIL",
        ///     condition = "<condition>",
        ///     alertingScopes = new[] {
        ///         new {
        ///             level = "CATALOG_PATH",
        ///             type = "<type>",
        ///             id = "<id>",
        ///         }
        ///     },
        ///     createdOn = "2022-05-10T18:57:31.2311892Z",
        ///     createdBy = "<createdBy>",
        ///     lastUpdatedOn = "2022-05-10T18:57:31.2311892Z",
        ///     lastUpdatedBy = "<lastUpdatedBy>",
        ///     lastActivatedOn = "2022-05-10T18:57:31.2311892Z",
        ///     activatedCount = 1234,
        /// };
        /// 
        /// Response response = client.CreateAlert("<accountId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("notificationFrequency").ToString());
        /// Console.WriteLine(result.GetProperty("notificationType").ToString());
        /// Console.WriteLine(result.GetProperty("condition").ToString());
        /// Console.WriteLine(result.GetProperty("alertingScopes")[0].GetProperty("level").ToString());
        /// Console.WriteLine(result.GetProperty("alertingScopes")[0].GetProperty("type").ToString());
        /// Console.WriteLine(result.GetProperty("alertingScopes")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("createdOn").ToString());
        /// Console.WriteLine(result.GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("lastUpdatedOn").ToString());
        /// Console.WriteLine(result.GetProperty("lastUpdatedBy").ToString());
        /// Console.WriteLine(result.GetProperty("lastActivatedOn").ToString());
        /// Console.WriteLine(result.GetProperty("activatedCount").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>DQAlert</c>:
        /// <code>{
        ///   id: string, # Optional.
        ///   name: string, # Optional.
        ///   description: string, # Optional.
        ///   status: &quot;ACTIVE&quot; | &quot;DELETED&quot; | &quot;ENABLED&quot; | &quot;DISABLED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///   notificationFrequency: &quot;IMMEDIATE&quot;, # Optional.
        ///   notificationType: &quot;EMAIL&quot;, # Optional.
        ///   condition: string, # Optional.
        ///   alertingScopes: [
        ///     {
        ///       level: &quot;CATALOG_PATH&quot;, # Optional.
        ///       type: string, # Optional.
        ///       id: string, # Optional.
        ///     }
        ///   ], # Optional.
        ///   createdOn: string (ISO 8601 Format), # Optional.
        ///   createdBy: string, # Optional.
        ///   lastUpdatedOn: string (ISO 8601 Format), # Optional.
        ///   lastUpdatedBy: string, # Optional.
        ///   lastActivatedOn: string (ISO 8601 Format), # Optional.
        ///   activatedCount: number, # Optional.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>DQAlert</c>:
        /// <code>{
        ///   id: string, # Optional.
        ///   name: string, # Optional.
        ///   description: string, # Optional.
        ///   status: &quot;ACTIVE&quot; | &quot;DELETED&quot; | &quot;ENABLED&quot; | &quot;DISABLED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///   notificationFrequency: &quot;IMMEDIATE&quot;, # Optional.
        ///   notificationType: &quot;EMAIL&quot;, # Optional.
        ///   condition: string, # Optional.
        ///   alertingScopes: [
        ///     {
        ///       level: &quot;CATALOG_PATH&quot;, # Optional.
        ///       type: string, # Optional.
        ///       id: string, # Optional.
        ///     }
        ///   ], # Optional.
        ///   createdOn: string (ISO 8601 Format), # Optional.
        ///   createdBy: string, # Optional.
        ///   lastUpdatedOn: string (ISO 8601 Format), # Optional.
        ///   lastUpdatedBy: string, # Optional.
        ///   lastActivatedOn: string (ISO 8601 Format), # Optional.
        ///   activatedCount: number, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response CreateAlert(string accountId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.CreateAlert");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateAlertRequest(accountId, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="level"> The String to use. </param>
        /// <param name="scopeId"> The String to use. </param>
        /// <param name="skipDetails"> The Boolean to use. </param>
        /// <param name="skipToken"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetAllMatchedAlertsAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// Response response = await client.GetAllMatchedAlertsAsync("<accountId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("values")[0].ToString());
        /// ]]></code>
        /// This sample shows how to call GetAllMatchedAlertsAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// Response response = await client.GetAllMatchedAlertsAsync("<accountId>", "<level>", "<scopeId>", true, "<skipToken>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("values")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result[0].GetProperty("values")[0].GetProperty("name").ToString());
        /// Console.WriteLine(result[0].GetProperty("values")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("values")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("values")[0].GetProperty("notificationFrequency").ToString());
        /// Console.WriteLine(result[0].GetProperty("values")[0].GetProperty("notificationType").ToString());
        /// Console.WriteLine(result[0].GetProperty("values")[0].GetProperty("condition").ToString());
        /// Console.WriteLine(result[0].GetProperty("values")[0].GetProperty("alertingScopes")[0].GetProperty("level").ToString());
        /// Console.WriteLine(result[0].GetProperty("values")[0].GetProperty("alertingScopes")[0].GetProperty("type").ToString());
        /// Console.WriteLine(result[0].GetProperty("values")[0].GetProperty("alertingScopes")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result[0].GetProperty("values")[0].GetProperty("createdOn").ToString());
        /// Console.WriteLine(result[0].GetProperty("values")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result[0].GetProperty("values")[0].GetProperty("lastUpdatedOn").ToString());
        /// Console.WriteLine(result[0].GetProperty("values")[0].GetProperty("lastUpdatedBy").ToString());
        /// Console.WriteLine(result[0].GetProperty("values")[0].GetProperty("lastActivatedOn").ToString());
        /// Console.WriteLine(result[0].GetProperty("values")[0].GetProperty("activatedCount").ToString());
        /// Console.WriteLine(result[0].GetProperty("nextLink").ToString());
        /// Console.WriteLine(result[0].GetProperty("count").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>DQAlertPagedResults</c>:
        /// <code>{
        ///   values: [
        ///     {
        ///       id: string, # Optional.
        ///       name: string, # Optional.
        ///       description: string, # Optional.
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot; | &quot;ENABLED&quot; | &quot;DISABLED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       notificationFrequency: &quot;IMMEDIATE&quot;, # Optional.
        ///       notificationType: &quot;EMAIL&quot;, # Optional.
        ///       condition: string, # Optional.
        ///       alertingScopes: [
        ///         {
        ///           level: &quot;CATALOG_PATH&quot;, # Optional.
        ///           type: string, # Optional.
        ///           id: string, # Optional.
        ///         }
        ///       ], # Optional.
        ///       createdOn: string (ISO 8601 Format), # Optional.
        ///       createdBy: string, # Optional.
        ///       lastUpdatedOn: string (ISO 8601 Format), # Optional.
        ///       lastUpdatedBy: string, # Optional.
        ///       lastActivatedOn: string (ISO 8601 Format), # Optional.
        ///       activatedCount: number, # Optional.
        ///     }
        ///   ], # Required.
        ///   nextLink: string, # Optional.
        ///   count: number, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetAllMatchedAlertsAsync(string accountId, string level = null, string scopeId = null, bool? skipDetails = null, string skipToken = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.GetAllMatchedAlerts");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAllMatchedAlertsRequest(accountId, level, scopeId, skipDetails, skipToken, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="level"> The String to use. </param>
        /// <param name="scopeId"> The String to use. </param>
        /// <param name="skipDetails"> The Boolean to use. </param>
        /// <param name="skipToken"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetAllMatchedAlerts with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// Response response = client.GetAllMatchedAlerts("<accountId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("values")[0].ToString());
        /// ]]></code>
        /// This sample shows how to call GetAllMatchedAlerts with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// Response response = client.GetAllMatchedAlerts("<accountId>", "<level>", "<scopeId>", true, "<skipToken>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("values")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result[0].GetProperty("values")[0].GetProperty("name").ToString());
        /// Console.WriteLine(result[0].GetProperty("values")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("values")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("values")[0].GetProperty("notificationFrequency").ToString());
        /// Console.WriteLine(result[0].GetProperty("values")[0].GetProperty("notificationType").ToString());
        /// Console.WriteLine(result[0].GetProperty("values")[0].GetProperty("condition").ToString());
        /// Console.WriteLine(result[0].GetProperty("values")[0].GetProperty("alertingScopes")[0].GetProperty("level").ToString());
        /// Console.WriteLine(result[0].GetProperty("values")[0].GetProperty("alertingScopes")[0].GetProperty("type").ToString());
        /// Console.WriteLine(result[0].GetProperty("values")[0].GetProperty("alertingScopes")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result[0].GetProperty("values")[0].GetProperty("createdOn").ToString());
        /// Console.WriteLine(result[0].GetProperty("values")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result[0].GetProperty("values")[0].GetProperty("lastUpdatedOn").ToString());
        /// Console.WriteLine(result[0].GetProperty("values")[0].GetProperty("lastUpdatedBy").ToString());
        /// Console.WriteLine(result[0].GetProperty("values")[0].GetProperty("lastActivatedOn").ToString());
        /// Console.WriteLine(result[0].GetProperty("values")[0].GetProperty("activatedCount").ToString());
        /// Console.WriteLine(result[0].GetProperty("nextLink").ToString());
        /// Console.WriteLine(result[0].GetProperty("count").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>DQAlertPagedResults</c>:
        /// <code>{
        ///   values: [
        ///     {
        ///       id: string, # Optional.
        ///       name: string, # Optional.
        ///       description: string, # Optional.
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot; | &quot;ENABLED&quot; | &quot;DISABLED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       notificationFrequency: &quot;IMMEDIATE&quot;, # Optional.
        ///       notificationType: &quot;EMAIL&quot;, # Optional.
        ///       condition: string, # Optional.
        ///       alertingScopes: [
        ///         {
        ///           level: &quot;CATALOG_PATH&quot;, # Optional.
        ///           type: string, # Optional.
        ///           id: string, # Optional.
        ///         }
        ///       ], # Optional.
        ///       createdOn: string (ISO 8601 Format), # Optional.
        ///       createdBy: string, # Optional.
        ///       lastUpdatedOn: string (ISO 8601 Format), # Optional.
        ///       lastUpdatedBy: string, # Optional.
        ///       lastActivatedOn: string (ISO 8601 Format), # Optional.
        ///       activatedCount: number, # Optional.
        ///     }
        ///   ], # Required.
        ///   nextLink: string, # Optional.
        ///   count: number, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetAllMatchedAlerts(string accountId, string level = null, string scopeId = null, bool? skipDetails = null, string skipToken = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.GetAllMatchedAlerts");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAllMatchedAlertsRequest(accountId, level, scopeId, skipDetails, skipToken, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="alertId"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="alertId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="alertId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetAlertDetailsAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// Response response = await client.GetAlertDetailsAsync("<accountId>", "<alertId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("notificationFrequency").ToString());
        /// Console.WriteLine(result.GetProperty("notificationType").ToString());
        /// Console.WriteLine(result.GetProperty("condition").ToString());
        /// Console.WriteLine(result.GetProperty("alertingScopes")[0].GetProperty("level").ToString());
        /// Console.WriteLine(result.GetProperty("alertingScopes")[0].GetProperty("type").ToString());
        /// Console.WriteLine(result.GetProperty("alertingScopes")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("createdOn").ToString());
        /// Console.WriteLine(result.GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("lastUpdatedOn").ToString());
        /// Console.WriteLine(result.GetProperty("lastUpdatedBy").ToString());
        /// Console.WriteLine(result.GetProperty("lastActivatedOn").ToString());
        /// Console.WriteLine(result.GetProperty("activatedCount").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>DQAlert</c>:
        /// <code>{
        ///   id: string, # Optional.
        ///   name: string, # Optional.
        ///   description: string, # Optional.
        ///   status: &quot;ACTIVE&quot; | &quot;DELETED&quot; | &quot;ENABLED&quot; | &quot;DISABLED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///   notificationFrequency: &quot;IMMEDIATE&quot;, # Optional.
        ///   notificationType: &quot;EMAIL&quot;, # Optional.
        ///   condition: string, # Optional.
        ///   alertingScopes: [
        ///     {
        ///       level: &quot;CATALOG_PATH&quot;, # Optional.
        ///       type: string, # Optional.
        ///       id: string, # Optional.
        ///     }
        ///   ], # Optional.
        ///   createdOn: string (ISO 8601 Format), # Optional.
        ///   createdBy: string, # Optional.
        ///   lastUpdatedOn: string (ISO 8601 Format), # Optional.
        ///   lastUpdatedBy: string, # Optional.
        ///   lastActivatedOn: string (ISO 8601 Format), # Optional.
        ///   activatedCount: number, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetAlertDetailsAsync(string accountId, string alertId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(alertId, nameof(alertId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.GetAlertDetails");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAlertDetailsRequest(accountId, alertId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="alertId"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="alertId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="alertId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetAlertDetails with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// Response response = client.GetAlertDetails("<accountId>", "<alertId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("notificationFrequency").ToString());
        /// Console.WriteLine(result.GetProperty("notificationType").ToString());
        /// Console.WriteLine(result.GetProperty("condition").ToString());
        /// Console.WriteLine(result.GetProperty("alertingScopes")[0].GetProperty("level").ToString());
        /// Console.WriteLine(result.GetProperty("alertingScopes")[0].GetProperty("type").ToString());
        /// Console.WriteLine(result.GetProperty("alertingScopes")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("createdOn").ToString());
        /// Console.WriteLine(result.GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("lastUpdatedOn").ToString());
        /// Console.WriteLine(result.GetProperty("lastUpdatedBy").ToString());
        /// Console.WriteLine(result.GetProperty("lastActivatedOn").ToString());
        /// Console.WriteLine(result.GetProperty("activatedCount").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>DQAlert</c>:
        /// <code>{
        ///   id: string, # Optional.
        ///   name: string, # Optional.
        ///   description: string, # Optional.
        ///   status: &quot;ACTIVE&quot; | &quot;DELETED&quot; | &quot;ENABLED&quot; | &quot;DISABLED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///   notificationFrequency: &quot;IMMEDIATE&quot;, # Optional.
        ///   notificationType: &quot;EMAIL&quot;, # Optional.
        ///   condition: string, # Optional.
        ///   alertingScopes: [
        ///     {
        ///       level: &quot;CATALOG_PATH&quot;, # Optional.
        ///       type: string, # Optional.
        ///       id: string, # Optional.
        ///     }
        ///   ], # Optional.
        ///   createdOn: string (ISO 8601 Format), # Optional.
        ///   createdBy: string, # Optional.
        ///   lastUpdatedOn: string (ISO 8601 Format), # Optional.
        ///   lastUpdatedBy: string, # Optional.
        ///   lastActivatedOn: string (ISO 8601 Format), # Optional.
        ///   activatedCount: number, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetAlertDetails(string accountId, string alertId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(alertId, nameof(alertId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.GetAlertDetails");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAlertDetailsRequest(accountId, alertId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="alertId"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="alertId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="alertId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call UpdateAlertAsync with required parameters and request content and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.UpdateAlertAsync("<accountId>", "<alertId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("notificationFrequency").ToString());
        /// Console.WriteLine(result.GetProperty("notificationType").ToString());
        /// Console.WriteLine(result.GetProperty("condition").ToString());
        /// Console.WriteLine(result.GetProperty("alertingScopes")[0].GetProperty("level").ToString());
        /// Console.WriteLine(result.GetProperty("alertingScopes")[0].GetProperty("type").ToString());
        /// Console.WriteLine(result.GetProperty("alertingScopes")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("createdOn").ToString());
        /// Console.WriteLine(result.GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("lastUpdatedOn").ToString());
        /// Console.WriteLine(result.GetProperty("lastUpdatedBy").ToString());
        /// Console.WriteLine(result.GetProperty("lastActivatedOn").ToString());
        /// Console.WriteLine(result.GetProperty("activatedCount").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>DQAlert</c>:
        /// <code>{
        ///   id: string, # Optional.
        ///   name: string, # Optional.
        ///   description: string, # Optional.
        ///   status: &quot;ACTIVE&quot; | &quot;DELETED&quot; | &quot;ENABLED&quot; | &quot;DISABLED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///   notificationFrequency: &quot;IMMEDIATE&quot;, # Optional.
        ///   notificationType: &quot;EMAIL&quot;, # Optional.
        ///   condition: string, # Optional.
        ///   alertingScopes: [
        ///     {
        ///       level: &quot;CATALOG_PATH&quot;, # Optional.
        ///       type: string, # Optional.
        ///       id: string, # Optional.
        ///     }
        ///   ], # Optional.
        ///   createdOn: string (ISO 8601 Format), # Optional.
        ///   createdBy: string, # Optional.
        ///   lastUpdatedOn: string (ISO 8601 Format), # Optional.
        ///   lastUpdatedBy: string, # Optional.
        ///   lastActivatedOn: string (ISO 8601 Format), # Optional.
        ///   activatedCount: number, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> UpdateAlertAsync(string accountId, string alertId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(alertId, nameof(alertId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.UpdateAlert");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateAlertRequest(accountId, alertId, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="alertId"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="alertId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="alertId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call UpdateAlert with required parameters and request content and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.UpdateAlert("<accountId>", "<alertId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("notificationFrequency").ToString());
        /// Console.WriteLine(result.GetProperty("notificationType").ToString());
        /// Console.WriteLine(result.GetProperty("condition").ToString());
        /// Console.WriteLine(result.GetProperty("alertingScopes")[0].GetProperty("level").ToString());
        /// Console.WriteLine(result.GetProperty("alertingScopes")[0].GetProperty("type").ToString());
        /// Console.WriteLine(result.GetProperty("alertingScopes")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("createdOn").ToString());
        /// Console.WriteLine(result.GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("lastUpdatedOn").ToString());
        /// Console.WriteLine(result.GetProperty("lastUpdatedBy").ToString());
        /// Console.WriteLine(result.GetProperty("lastActivatedOn").ToString());
        /// Console.WriteLine(result.GetProperty("activatedCount").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>DQAlert</c>:
        /// <code>{
        ///   id: string, # Optional.
        ///   name: string, # Optional.
        ///   description: string, # Optional.
        ///   status: &quot;ACTIVE&quot; | &quot;DELETED&quot; | &quot;ENABLED&quot; | &quot;DISABLED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///   notificationFrequency: &quot;IMMEDIATE&quot;, # Optional.
        ///   notificationType: &quot;EMAIL&quot;, # Optional.
        ///   condition: string, # Optional.
        ///   alertingScopes: [
        ///     {
        ///       level: &quot;CATALOG_PATH&quot;, # Optional.
        ///       type: string, # Optional.
        ///       id: string, # Optional.
        ///     }
        ///   ], # Optional.
        ///   createdOn: string (ISO 8601 Format), # Optional.
        ///   createdBy: string, # Optional.
        ///   lastUpdatedOn: string (ISO 8601 Format), # Optional.
        ///   lastUpdatedBy: string, # Optional.
        ///   lastActivatedOn: string (ISO 8601 Format), # Optional.
        ///   activatedCount: number, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response UpdateAlert(string accountId, string alertId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(alertId, nameof(alertId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.UpdateAlert");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateAlertRequest(accountId, alertId, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="alertId"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="alertId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="alertId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteAlertAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// Response response = await client.DeleteAlertAsync("<accountId>", "<alertId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> DeleteAlertAsync(string accountId, string alertId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(alertId, nameof(alertId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.DeleteAlert");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteAlertRequest(accountId, alertId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="alertId"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="alertId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="alertId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteAlert with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// Response response = client.DeleteAlert("<accountId>", "<alertId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// </example>
        public virtual Response DeleteAlert(string accountId, string alertId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(alertId, nameof(alertId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.DeleteAlert");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteAlertRequest(accountId, alertId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call CheckAlertNameScopeUniquenessAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.CheckAlertNameScopeUniquenessAsync("<accountId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call CheckAlertNameScopeUniquenessAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {
        ///     alertName = "<alertName>",
        ///     values = new[] {
        ///         new {
        ///             level = "CATALOG_PATH",
        ///             type = "<type>",
        ///             id = "<id>",
        ///         }
        ///     },
        /// };
        /// 
        /// Response response = await client.CheckAlertNameScopeUniquenessAsync("<accountId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>AlertNameValidation</c>:
        /// <code>{
        ///   alertName: string, # Optional.
        ///   values: [
        ///     {
        ///       level: &quot;CATALOG_PATH&quot;, # Optional.
        ///       type: string, # Optional.
        ///       id: string, # Optional.
        ///     }
        ///   ], # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> CheckAlertNameScopeUniquenessAsync(string accountId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.CheckAlertNameScopeUniqueness");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCheckAlertNameScopeUniquenessRequest(accountId, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call CheckAlertNameScopeUniqueness with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.CheckAlertNameScopeUniqueness("<accountId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call CheckAlertNameScopeUniqueness with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {
        ///     alertName = "<alertName>",
        ///     values = new[] {
        ///         new {
        ///             level = "CATALOG_PATH",
        ///             type = "<type>",
        ///             id = "<id>",
        ///         }
        ///     },
        /// };
        /// 
        /// Response response = client.CheckAlertNameScopeUniqueness("<accountId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>AlertNameValidation</c>:
        /// <code>{
        ///   alertName: string, # Optional.
        ///   values: [
        ///     {
        ///       level: &quot;CATALOG_PATH&quot;, # Optional.
        ///       type: string, # Optional.
        ///       id: string, # Optional.
        ///     }
        ///   ], # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response CheckAlertNameScopeUniqueness(string accountId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.CheckAlertNameScopeUniqueness");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCheckAlertNameScopeUniquenessRequest(accountId, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="assetId"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="assetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="assetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateRulesAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.CreateRulesAsync("<accountId>", "<assetId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call CreateRulesAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {
        ///     modelVersion = "<modelVersion>",
        ///     dataSourceId = "<dataSourceId>",
        ///     dataSourceFQN = "<dataSourceFQN>",
        ///     favouriteFields = new[] {
        ///         "<String>"
        ///     },
        ///     schemaAtSource = new {
        ///         schemaProvider = "CATALOG",
        ///         schema = "<schema>",
        ///         refreshedAt = 1234L,
        ///     },
        ///     schemaReference = new {
        ///         key = new {
        ///             properties = new {
        ///                 key = "<String>",
        ///             },
        ///         },
        ///     },
        ///     dataSourceType = "None",
        ///     rules = new[] {
        ///         new {
        ///             id = "<id>",
        ///             name = "<name>",
        ///             description = "<description>",
        ///             status = "INCOMPLETE",
        ///             level = "ASSET",
        ///             type = "enum",
        ///             tags = new[] {
        ///                 "<String>"
        ///             },
        ///             typeProperties = new {},
        ///         }
        ///     },
        /// };
        /// 
        /// Response response = await client.CreateRulesAsync("<accountId>", "<assetId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("modelVersion").ToString());
        /// Console.WriteLine(result.GetProperty("dataSourceId").ToString());
        /// Console.WriteLine(result.GetProperty("dataSourceFQN").ToString());
        /// Console.WriteLine(result.GetProperty("favouriteFields")[0].ToString());
        /// Console.WriteLine(result.GetProperty("schemaAtSource").GetProperty("schemaProvider").ToString());
        /// Console.WriteLine(result.GetProperty("schemaAtSource").GetProperty("schema").ToString());
        /// Console.WriteLine(result.GetProperty("schemaAtSource").GetProperty("refreshedAt").ToString());
        /// Console.WriteLine(result.GetProperty("schemaReference").GetProperty("<test>").GetProperty("properties").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("dataSourceType").ToString());
        /// Console.WriteLine(result.GetProperty("rules")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("rules")[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("rules")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("rules")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("rules")[0].GetProperty("level").ToString());
        /// Console.WriteLine(result.GetProperty("rules")[0].GetProperty("type").ToString());
        /// Console.WriteLine(result.GetProperty("rules")[0].GetProperty("tags")[0].ToString());
        /// Console.WriteLine(result.GetProperty("rules")[0].GetProperty("typeProperties").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>DataQualityRules</c>:
        /// <code>{
        ///   modelVersion: string, # Optional.
        ///   dataSourceId: string, # Optional.
        ///   dataSourceFQN: string, # Optional.
        ///   favouriteFields: [string], # Optional.
        ///   schemaAtSource: {
        ///     schemaProvider: &quot;CATALOG&quot; | &quot;DATAQUALITY_SCAN&quot;, # Optional.
        ///     schema: string, # Optional.
        ///     refreshedAt: number, # Optional.
        ///   }, # Optional.
        ///   schemaReference: Dictionary&lt;string, DataTypeProperties&gt;, # Optional. Dictionary of &lt;DataTypeProperties&gt;
        ///   dataSourceType: &quot;None&quot; | &quot;AzureSubscription&quot; | &quot;AzureResourceGroup&quot; | &quot;AzureSynapseWorkspace&quot; | &quot;AzureSynapse&quot; | &quot;AdlsGen1&quot; | &quot;AdlsGen2&quot; | &quot;AmazonAccount&quot; | &quot;AmazonS3&quot; | &quot;AmazonSql&quot; | &quot;AzureCosmosDb&quot; | &quot;AzureDataExplorer&quot; | &quot;AzureFileService&quot; | &quot;AzureSqlDatabase&quot; | &quot;AmazonPostgreSql&quot; | &quot;AzurePostgreSql&quot; | &quot;SqlServerDatabase&quot; | &quot;AzureSqlDatabaseManagedInstance&quot; | &quot;AzureSqlDataWarehouse&quot; | &quot;AzureMySql&quot; | &quot;AzureStorage&quot; | &quot;Teradata&quot; | &quot;Oracle&quot; | &quot;SapS4Hana&quot; | &quot;SapEcc&quot; | &quot;PowerBI&quot; | &quot;CATALOG_ASSET&quot; | &quot;FLOWLET&quot;, # Optional.
        ///   rules: [Rule], # Optional.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>DataQualityRules</c>:
        /// <code>{
        ///   modelVersion: string, # Optional.
        ///   dataSourceId: string, # Optional.
        ///   dataSourceFQN: string, # Optional.
        ///   favouriteFields: [string], # Optional.
        ///   schemaAtSource: {
        ///     schemaProvider: &quot;CATALOG&quot; | &quot;DATAQUALITY_SCAN&quot;, # Optional.
        ///     schema: string, # Optional.
        ///     refreshedAt: number, # Optional.
        ///   }, # Optional.
        ///   schemaReference: Dictionary&lt;string, DataTypeProperties&gt;, # Optional. Dictionary of &lt;DataTypeProperties&gt;
        ///   dataSourceType: &quot;None&quot; | &quot;AzureSubscription&quot; | &quot;AzureResourceGroup&quot; | &quot;AzureSynapseWorkspace&quot; | &quot;AzureSynapse&quot; | &quot;AdlsGen1&quot; | &quot;AdlsGen2&quot; | &quot;AmazonAccount&quot; | &quot;AmazonS3&quot; | &quot;AmazonSql&quot; | &quot;AzureCosmosDb&quot; | &quot;AzureDataExplorer&quot; | &quot;AzureFileService&quot; | &quot;AzureSqlDatabase&quot; | &quot;AmazonPostgreSql&quot; | &quot;AzurePostgreSql&quot; | &quot;SqlServerDatabase&quot; | &quot;AzureSqlDatabaseManagedInstance&quot; | &quot;AzureSqlDataWarehouse&quot; | &quot;AzureMySql&quot; | &quot;AzureStorage&quot; | &quot;Teradata&quot; | &quot;Oracle&quot; | &quot;SapS4Hana&quot; | &quot;SapEcc&quot; | &quot;PowerBI&quot; | &quot;CATALOG_ASSET&quot; | &quot;FLOWLET&quot;, # Optional.
        ///   rules: [Rule], # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> CreateRulesAsync(string accountId, string assetId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(assetId, nameof(assetId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.CreateRules");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateRulesRequest(accountId, assetId, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="assetId"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="assetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="assetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateRules with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.CreateRules("<accountId>", "<assetId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call CreateRules with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {
        ///     modelVersion = "<modelVersion>",
        ///     dataSourceId = "<dataSourceId>",
        ///     dataSourceFQN = "<dataSourceFQN>",
        ///     favouriteFields = new[] {
        ///         "<String>"
        ///     },
        ///     schemaAtSource = new {
        ///         schemaProvider = "CATALOG",
        ///         schema = "<schema>",
        ///         refreshedAt = 1234L,
        ///     },
        ///     schemaReference = new {
        ///         key = new {
        ///             properties = new {
        ///                 key = "<String>",
        ///             },
        ///         },
        ///     },
        ///     dataSourceType = "None",
        ///     rules = new[] {
        ///         new {
        ///             id = "<id>",
        ///             name = "<name>",
        ///             description = "<description>",
        ///             status = "INCOMPLETE",
        ///             level = "ASSET",
        ///             type = "enum",
        ///             tags = new[] {
        ///                 "<String>"
        ///             },
        ///             typeProperties = new {},
        ///         }
        ///     },
        /// };
        /// 
        /// Response response = client.CreateRules("<accountId>", "<assetId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("modelVersion").ToString());
        /// Console.WriteLine(result.GetProperty("dataSourceId").ToString());
        /// Console.WriteLine(result.GetProperty("dataSourceFQN").ToString());
        /// Console.WriteLine(result.GetProperty("favouriteFields")[0].ToString());
        /// Console.WriteLine(result.GetProperty("schemaAtSource").GetProperty("schemaProvider").ToString());
        /// Console.WriteLine(result.GetProperty("schemaAtSource").GetProperty("schema").ToString());
        /// Console.WriteLine(result.GetProperty("schemaAtSource").GetProperty("refreshedAt").ToString());
        /// Console.WriteLine(result.GetProperty("schemaReference").GetProperty("<test>").GetProperty("properties").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("dataSourceType").ToString());
        /// Console.WriteLine(result.GetProperty("rules")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("rules")[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("rules")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("rules")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("rules")[0].GetProperty("level").ToString());
        /// Console.WriteLine(result.GetProperty("rules")[0].GetProperty("type").ToString());
        /// Console.WriteLine(result.GetProperty("rules")[0].GetProperty("tags")[0].ToString());
        /// Console.WriteLine(result.GetProperty("rules")[0].GetProperty("typeProperties").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>DataQualityRules</c>:
        /// <code>{
        ///   modelVersion: string, # Optional.
        ///   dataSourceId: string, # Optional.
        ///   dataSourceFQN: string, # Optional.
        ///   favouriteFields: [string], # Optional.
        ///   schemaAtSource: {
        ///     schemaProvider: &quot;CATALOG&quot; | &quot;DATAQUALITY_SCAN&quot;, # Optional.
        ///     schema: string, # Optional.
        ///     refreshedAt: number, # Optional.
        ///   }, # Optional.
        ///   schemaReference: Dictionary&lt;string, DataTypeProperties&gt;, # Optional. Dictionary of &lt;DataTypeProperties&gt;
        ///   dataSourceType: &quot;None&quot; | &quot;AzureSubscription&quot; | &quot;AzureResourceGroup&quot; | &quot;AzureSynapseWorkspace&quot; | &quot;AzureSynapse&quot; | &quot;AdlsGen1&quot; | &quot;AdlsGen2&quot; | &quot;AmazonAccount&quot; | &quot;AmazonS3&quot; | &quot;AmazonSql&quot; | &quot;AzureCosmosDb&quot; | &quot;AzureDataExplorer&quot; | &quot;AzureFileService&quot; | &quot;AzureSqlDatabase&quot; | &quot;AmazonPostgreSql&quot; | &quot;AzurePostgreSql&quot; | &quot;SqlServerDatabase&quot; | &quot;AzureSqlDatabaseManagedInstance&quot; | &quot;AzureSqlDataWarehouse&quot; | &quot;AzureMySql&quot; | &quot;AzureStorage&quot; | &quot;Teradata&quot; | &quot;Oracle&quot; | &quot;SapS4Hana&quot; | &quot;SapEcc&quot; | &quot;PowerBI&quot; | &quot;CATALOG_ASSET&quot; | &quot;FLOWLET&quot;, # Optional.
        ///   rules: [Rule], # Optional.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>DataQualityRules</c>:
        /// <code>{
        ///   modelVersion: string, # Optional.
        ///   dataSourceId: string, # Optional.
        ///   dataSourceFQN: string, # Optional.
        ///   favouriteFields: [string], # Optional.
        ///   schemaAtSource: {
        ///     schemaProvider: &quot;CATALOG&quot; | &quot;DATAQUALITY_SCAN&quot;, # Optional.
        ///     schema: string, # Optional.
        ///     refreshedAt: number, # Optional.
        ///   }, # Optional.
        ///   schemaReference: Dictionary&lt;string, DataTypeProperties&gt;, # Optional. Dictionary of &lt;DataTypeProperties&gt;
        ///   dataSourceType: &quot;None&quot; | &quot;AzureSubscription&quot; | &quot;AzureResourceGroup&quot; | &quot;AzureSynapseWorkspace&quot; | &quot;AzureSynapse&quot; | &quot;AdlsGen1&quot; | &quot;AdlsGen2&quot; | &quot;AmazonAccount&quot; | &quot;AmazonS3&quot; | &quot;AmazonSql&quot; | &quot;AzureCosmosDb&quot; | &quot;AzureDataExplorer&quot; | &quot;AzureFileService&quot; | &quot;AzureSqlDatabase&quot; | &quot;AmazonPostgreSql&quot; | &quot;AzurePostgreSql&quot; | &quot;SqlServerDatabase&quot; | &quot;AzureSqlDatabaseManagedInstance&quot; | &quot;AzureSqlDataWarehouse&quot; | &quot;AzureMySql&quot; | &quot;AzureStorage&quot; | &quot;Teradata&quot; | &quot;Oracle&quot; | &quot;SapS4Hana&quot; | &quot;SapEcc&quot; | &quot;PowerBI&quot; | &quot;CATALOG_ASSET&quot; | &quot;FLOWLET&quot;, # Optional.
        ///   rules: [Rule], # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response CreateRules(string accountId, string assetId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(assetId, nameof(assetId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.CreateRules");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateRulesRequest(accountId, assetId, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="assetId"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="assetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="assetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetRulesAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// Response response = await client.GetRulesAsync("<accountId>", "<assetId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("modelVersion").ToString());
        /// Console.WriteLine(result.GetProperty("dataSourceId").ToString());
        /// Console.WriteLine(result.GetProperty("dataSourceFQN").ToString());
        /// Console.WriteLine(result.GetProperty("favouriteFields")[0].ToString());
        /// Console.WriteLine(result.GetProperty("schemaAtSource").GetProperty("schemaProvider").ToString());
        /// Console.WriteLine(result.GetProperty("schemaAtSource").GetProperty("schema").ToString());
        /// Console.WriteLine(result.GetProperty("schemaAtSource").GetProperty("refreshedAt").ToString());
        /// Console.WriteLine(result.GetProperty("schemaReference").GetProperty("<test>").GetProperty("properties").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("dataSourceType").ToString());
        /// Console.WriteLine(result.GetProperty("rules")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("rules")[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("rules")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("rules")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("rules")[0].GetProperty("level").ToString());
        /// Console.WriteLine(result.GetProperty("rules")[0].GetProperty("type").ToString());
        /// Console.WriteLine(result.GetProperty("rules")[0].GetProperty("tags")[0].ToString());
        /// Console.WriteLine(result.GetProperty("rules")[0].GetProperty("typeProperties").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>DataQualityRules</c>:
        /// <code>{
        ///   modelVersion: string, # Optional.
        ///   dataSourceId: string, # Optional.
        ///   dataSourceFQN: string, # Optional.
        ///   favouriteFields: [string], # Optional.
        ///   schemaAtSource: {
        ///     schemaProvider: &quot;CATALOG&quot; | &quot;DATAQUALITY_SCAN&quot;, # Optional.
        ///     schema: string, # Optional.
        ///     refreshedAt: number, # Optional.
        ///   }, # Optional.
        ///   schemaReference: Dictionary&lt;string, DataTypeProperties&gt;, # Optional. Dictionary of &lt;DataTypeProperties&gt;
        ///   dataSourceType: &quot;None&quot; | &quot;AzureSubscription&quot; | &quot;AzureResourceGroup&quot; | &quot;AzureSynapseWorkspace&quot; | &quot;AzureSynapse&quot; | &quot;AdlsGen1&quot; | &quot;AdlsGen2&quot; | &quot;AmazonAccount&quot; | &quot;AmazonS3&quot; | &quot;AmazonSql&quot; | &quot;AzureCosmosDb&quot; | &quot;AzureDataExplorer&quot; | &quot;AzureFileService&quot; | &quot;AzureSqlDatabase&quot; | &quot;AmazonPostgreSql&quot; | &quot;AzurePostgreSql&quot; | &quot;SqlServerDatabase&quot; | &quot;AzureSqlDatabaseManagedInstance&quot; | &quot;AzureSqlDataWarehouse&quot; | &quot;AzureMySql&quot; | &quot;AzureStorage&quot; | &quot;Teradata&quot; | &quot;Oracle&quot; | &quot;SapS4Hana&quot; | &quot;SapEcc&quot; | &quot;PowerBI&quot; | &quot;CATALOG_ASSET&quot; | &quot;FLOWLET&quot;, # Optional.
        ///   rules: [Rule], # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetRulesAsync(string accountId, string assetId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(assetId, nameof(assetId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.GetRules");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetRulesRequest(accountId, assetId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="assetId"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="assetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="assetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetRules with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// Response response = client.GetRules("<accountId>", "<assetId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("modelVersion").ToString());
        /// Console.WriteLine(result.GetProperty("dataSourceId").ToString());
        /// Console.WriteLine(result.GetProperty("dataSourceFQN").ToString());
        /// Console.WriteLine(result.GetProperty("favouriteFields")[0].ToString());
        /// Console.WriteLine(result.GetProperty("schemaAtSource").GetProperty("schemaProvider").ToString());
        /// Console.WriteLine(result.GetProperty("schemaAtSource").GetProperty("schema").ToString());
        /// Console.WriteLine(result.GetProperty("schemaAtSource").GetProperty("refreshedAt").ToString());
        /// Console.WriteLine(result.GetProperty("schemaReference").GetProperty("<test>").GetProperty("properties").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("dataSourceType").ToString());
        /// Console.WriteLine(result.GetProperty("rules")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("rules")[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("rules")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("rules")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("rules")[0].GetProperty("level").ToString());
        /// Console.WriteLine(result.GetProperty("rules")[0].GetProperty("type").ToString());
        /// Console.WriteLine(result.GetProperty("rules")[0].GetProperty("tags")[0].ToString());
        /// Console.WriteLine(result.GetProperty("rules")[0].GetProperty("typeProperties").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>DataQualityRules</c>:
        /// <code>{
        ///   modelVersion: string, # Optional.
        ///   dataSourceId: string, # Optional.
        ///   dataSourceFQN: string, # Optional.
        ///   favouriteFields: [string], # Optional.
        ///   schemaAtSource: {
        ///     schemaProvider: &quot;CATALOG&quot; | &quot;DATAQUALITY_SCAN&quot;, # Optional.
        ///     schema: string, # Optional.
        ///     refreshedAt: number, # Optional.
        ///   }, # Optional.
        ///   schemaReference: Dictionary&lt;string, DataTypeProperties&gt;, # Optional. Dictionary of &lt;DataTypeProperties&gt;
        ///   dataSourceType: &quot;None&quot; | &quot;AzureSubscription&quot; | &quot;AzureResourceGroup&quot; | &quot;AzureSynapseWorkspace&quot; | &quot;AzureSynapse&quot; | &quot;AdlsGen1&quot; | &quot;AdlsGen2&quot; | &quot;AmazonAccount&quot; | &quot;AmazonS3&quot; | &quot;AmazonSql&quot; | &quot;AzureCosmosDb&quot; | &quot;AzureDataExplorer&quot; | &quot;AzureFileService&quot; | &quot;AzureSqlDatabase&quot; | &quot;AmazonPostgreSql&quot; | &quot;AzurePostgreSql&quot; | &quot;SqlServerDatabase&quot; | &quot;AzureSqlDatabaseManagedInstance&quot; | &quot;AzureSqlDataWarehouse&quot; | &quot;AzureMySql&quot; | &quot;AzureStorage&quot; | &quot;Teradata&quot; | &quot;Oracle&quot; | &quot;SapS4Hana&quot; | &quot;SapEcc&quot; | &quot;PowerBI&quot; | &quot;CATALOG_ASSET&quot; | &quot;FLOWLET&quot;, # Optional.
        ///   rules: [Rule], # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetRules(string accountId, string assetId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(assetId, nameof(assetId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.GetRules");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetRulesRequest(accountId, assetId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="assetId"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="assetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="assetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call UpdateRulesAsync with required parameters and request content and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.UpdateRulesAsync("<accountId>", "<assetId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("modelVersion").ToString());
        /// Console.WriteLine(result.GetProperty("dataSourceId").ToString());
        /// Console.WriteLine(result.GetProperty("dataSourceFQN").ToString());
        /// Console.WriteLine(result.GetProperty("favouriteFields")[0].ToString());
        /// Console.WriteLine(result.GetProperty("schemaAtSource").GetProperty("schemaProvider").ToString());
        /// Console.WriteLine(result.GetProperty("schemaAtSource").GetProperty("schema").ToString());
        /// Console.WriteLine(result.GetProperty("schemaAtSource").GetProperty("refreshedAt").ToString());
        /// Console.WriteLine(result.GetProperty("schemaReference").GetProperty("<test>").GetProperty("properties").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("dataSourceType").ToString());
        /// Console.WriteLine(result.GetProperty("rules")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("rules")[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("rules")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("rules")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("rules")[0].GetProperty("level").ToString());
        /// Console.WriteLine(result.GetProperty("rules")[0].GetProperty("type").ToString());
        /// Console.WriteLine(result.GetProperty("rules")[0].GetProperty("tags")[0].ToString());
        /// Console.WriteLine(result.GetProperty("rules")[0].GetProperty("typeProperties").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>DataQualityRules</c>:
        /// <code>{
        ///   modelVersion: string, # Optional.
        ///   dataSourceId: string, # Optional.
        ///   dataSourceFQN: string, # Optional.
        ///   favouriteFields: [string], # Optional.
        ///   schemaAtSource: {
        ///     schemaProvider: &quot;CATALOG&quot; | &quot;DATAQUALITY_SCAN&quot;, # Optional.
        ///     schema: string, # Optional.
        ///     refreshedAt: number, # Optional.
        ///   }, # Optional.
        ///   schemaReference: Dictionary&lt;string, DataTypeProperties&gt;, # Optional. Dictionary of &lt;DataTypeProperties&gt;
        ///   dataSourceType: &quot;None&quot; | &quot;AzureSubscription&quot; | &quot;AzureResourceGroup&quot; | &quot;AzureSynapseWorkspace&quot; | &quot;AzureSynapse&quot; | &quot;AdlsGen1&quot; | &quot;AdlsGen2&quot; | &quot;AmazonAccount&quot; | &quot;AmazonS3&quot; | &quot;AmazonSql&quot; | &quot;AzureCosmosDb&quot; | &quot;AzureDataExplorer&quot; | &quot;AzureFileService&quot; | &quot;AzureSqlDatabase&quot; | &quot;AmazonPostgreSql&quot; | &quot;AzurePostgreSql&quot; | &quot;SqlServerDatabase&quot; | &quot;AzureSqlDatabaseManagedInstance&quot; | &quot;AzureSqlDataWarehouse&quot; | &quot;AzureMySql&quot; | &quot;AzureStorage&quot; | &quot;Teradata&quot; | &quot;Oracle&quot; | &quot;SapS4Hana&quot; | &quot;SapEcc&quot; | &quot;PowerBI&quot; | &quot;CATALOG_ASSET&quot; | &quot;FLOWLET&quot;, # Optional.
        ///   rules: [Rule], # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> UpdateRulesAsync(string accountId, string assetId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(assetId, nameof(assetId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.UpdateRules");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateRulesRequest(accountId, assetId, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="assetId"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="assetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="assetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call UpdateRules with required parameters and request content and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.UpdateRules("<accountId>", "<assetId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("modelVersion").ToString());
        /// Console.WriteLine(result.GetProperty("dataSourceId").ToString());
        /// Console.WriteLine(result.GetProperty("dataSourceFQN").ToString());
        /// Console.WriteLine(result.GetProperty("favouriteFields")[0].ToString());
        /// Console.WriteLine(result.GetProperty("schemaAtSource").GetProperty("schemaProvider").ToString());
        /// Console.WriteLine(result.GetProperty("schemaAtSource").GetProperty("schema").ToString());
        /// Console.WriteLine(result.GetProperty("schemaAtSource").GetProperty("refreshedAt").ToString());
        /// Console.WriteLine(result.GetProperty("schemaReference").GetProperty("<test>").GetProperty("properties").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("dataSourceType").ToString());
        /// Console.WriteLine(result.GetProperty("rules")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("rules")[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("rules")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("rules")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("rules")[0].GetProperty("level").ToString());
        /// Console.WriteLine(result.GetProperty("rules")[0].GetProperty("type").ToString());
        /// Console.WriteLine(result.GetProperty("rules")[0].GetProperty("tags")[0].ToString());
        /// Console.WriteLine(result.GetProperty("rules")[0].GetProperty("typeProperties").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>DataQualityRules</c>:
        /// <code>{
        ///   modelVersion: string, # Optional.
        ///   dataSourceId: string, # Optional.
        ///   dataSourceFQN: string, # Optional.
        ///   favouriteFields: [string], # Optional.
        ///   schemaAtSource: {
        ///     schemaProvider: &quot;CATALOG&quot; | &quot;DATAQUALITY_SCAN&quot;, # Optional.
        ///     schema: string, # Optional.
        ///     refreshedAt: number, # Optional.
        ///   }, # Optional.
        ///   schemaReference: Dictionary&lt;string, DataTypeProperties&gt;, # Optional. Dictionary of &lt;DataTypeProperties&gt;
        ///   dataSourceType: &quot;None&quot; | &quot;AzureSubscription&quot; | &quot;AzureResourceGroup&quot; | &quot;AzureSynapseWorkspace&quot; | &quot;AzureSynapse&quot; | &quot;AdlsGen1&quot; | &quot;AdlsGen2&quot; | &quot;AmazonAccount&quot; | &quot;AmazonS3&quot; | &quot;AmazonSql&quot; | &quot;AzureCosmosDb&quot; | &quot;AzureDataExplorer&quot; | &quot;AzureFileService&quot; | &quot;AzureSqlDatabase&quot; | &quot;AmazonPostgreSql&quot; | &quot;AzurePostgreSql&quot; | &quot;SqlServerDatabase&quot; | &quot;AzureSqlDatabaseManagedInstance&quot; | &quot;AzureSqlDataWarehouse&quot; | &quot;AzureMySql&quot; | &quot;AzureStorage&quot; | &quot;Teradata&quot; | &quot;Oracle&quot; | &quot;SapS4Hana&quot; | &quot;SapEcc&quot; | &quot;PowerBI&quot; | &quot;CATALOG_ASSET&quot; | &quot;FLOWLET&quot;, # Optional.
        ///   rules: [Rule], # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response UpdateRules(string accountId, string assetId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(assetId, nameof(assetId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.UpdateRules");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateRulesRequest(accountId, assetId, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="assetId"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="dataSourceFQN"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="assetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="assetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call SetFavouriteFieldsAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.SetFavouriteFieldsAsync("<accountId>", "<assetId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].ToString());
        /// ]]></code>
        /// This sample shows how to call SetFavouriteFieldsAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {
        ///     modelVersion = "<modelVersion>",
        ///     dataSourceId = "<dataSourceId>",
        ///     dataSourceFQN = "<dataSourceFQN>",
        ///     favouriteFields = new[] {
        ///         "<String>"
        ///     },
        ///     schemaAtSource = new {
        ///         schemaProvider = "CATALOG",
        ///         schema = "<schema>",
        ///         refreshedAt = 1234L,
        ///     },
        ///     schemaReference = new {
        ///         key = new {
        ///             properties = new {
        ///                 key = "<String>",
        ///             },
        ///         },
        ///     },
        ///     dataSourceType = "None",
        ///     rules = new[] {
        ///         new {
        ///             id = "<id>",
        ///             name = "<name>",
        ///             description = "<description>",
        ///             status = "INCOMPLETE",
        ///             level = "ASSET",
        ///             type = "enum",
        ///             tags = new[] {
        ///                 "<String>"
        ///             },
        ///             typeProperties = new {},
        ///         }
        ///     },
        /// };
        /// 
        /// Response response = await client.SetFavouriteFieldsAsync("<accountId>", "<assetId>", RequestContent.Create(data), "<dataSourceFQN>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>DataQualityRules</c>:
        /// <code>{
        ///   modelVersion: string, # Optional.
        ///   dataSourceId: string, # Optional.
        ///   dataSourceFQN: string, # Optional.
        ///   favouriteFields: [string], # Optional.
        ///   schemaAtSource: {
        ///     schemaProvider: &quot;CATALOG&quot; | &quot;DATAQUALITY_SCAN&quot;, # Optional.
        ///     schema: string, # Optional.
        ///     refreshedAt: number, # Optional.
        ///   }, # Optional.
        ///   schemaReference: Dictionary&lt;string, DataTypeProperties&gt;, # Optional. Dictionary of &lt;DataTypeProperties&gt;
        ///   dataSourceType: &quot;None&quot; | &quot;AzureSubscription&quot; | &quot;AzureResourceGroup&quot; | &quot;AzureSynapseWorkspace&quot; | &quot;AzureSynapse&quot; | &quot;AdlsGen1&quot; | &quot;AdlsGen2&quot; | &quot;AmazonAccount&quot; | &quot;AmazonS3&quot; | &quot;AmazonSql&quot; | &quot;AzureCosmosDb&quot; | &quot;AzureDataExplorer&quot; | &quot;AzureFileService&quot; | &quot;AzureSqlDatabase&quot; | &quot;AmazonPostgreSql&quot; | &quot;AzurePostgreSql&quot; | &quot;SqlServerDatabase&quot; | &quot;AzureSqlDatabaseManagedInstance&quot; | &quot;AzureSqlDataWarehouse&quot; | &quot;AzureMySql&quot; | &quot;AzureStorage&quot; | &quot;Teradata&quot; | &quot;Oracle&quot; | &quot;SapS4Hana&quot; | &quot;SapEcc&quot; | &quot;PowerBI&quot; | &quot;CATALOG_ASSET&quot; | &quot;FLOWLET&quot;, # Optional.
        ///   rules: [Rule], # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> SetFavouriteFieldsAsync(string accountId, string assetId, RequestContent content, string dataSourceFQN = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(assetId, nameof(assetId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.SetFavouriteFields");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSetFavouriteFieldsRequest(accountId, assetId, content, dataSourceFQN, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="assetId"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="dataSourceFQN"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="assetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="assetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call SetFavouriteFields with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.SetFavouriteFields("<accountId>", "<assetId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].ToString());
        /// ]]></code>
        /// This sample shows how to call SetFavouriteFields with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {
        ///     modelVersion = "<modelVersion>",
        ///     dataSourceId = "<dataSourceId>",
        ///     dataSourceFQN = "<dataSourceFQN>",
        ///     favouriteFields = new[] {
        ///         "<String>"
        ///     },
        ///     schemaAtSource = new {
        ///         schemaProvider = "CATALOG",
        ///         schema = "<schema>",
        ///         refreshedAt = 1234L,
        ///     },
        ///     schemaReference = new {
        ///         key = new {
        ///             properties = new {
        ///                 key = "<String>",
        ///             },
        ///         },
        ///     },
        ///     dataSourceType = "None",
        ///     rules = new[] {
        ///         new {
        ///             id = "<id>",
        ///             name = "<name>",
        ///             description = "<description>",
        ///             status = "INCOMPLETE",
        ///             level = "ASSET",
        ///             type = "enum",
        ///             tags = new[] {
        ///                 "<String>"
        ///             },
        ///             typeProperties = new {},
        ///         }
        ///     },
        /// };
        /// 
        /// Response response = client.SetFavouriteFields("<accountId>", "<assetId>", RequestContent.Create(data), "<dataSourceFQN>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>DataQualityRules</c>:
        /// <code>{
        ///   modelVersion: string, # Optional.
        ///   dataSourceId: string, # Optional.
        ///   dataSourceFQN: string, # Optional.
        ///   favouriteFields: [string], # Optional.
        ///   schemaAtSource: {
        ///     schemaProvider: &quot;CATALOG&quot; | &quot;DATAQUALITY_SCAN&quot;, # Optional.
        ///     schema: string, # Optional.
        ///     refreshedAt: number, # Optional.
        ///   }, # Optional.
        ///   schemaReference: Dictionary&lt;string, DataTypeProperties&gt;, # Optional. Dictionary of &lt;DataTypeProperties&gt;
        ///   dataSourceType: &quot;None&quot; | &quot;AzureSubscription&quot; | &quot;AzureResourceGroup&quot; | &quot;AzureSynapseWorkspace&quot; | &quot;AzureSynapse&quot; | &quot;AdlsGen1&quot; | &quot;AdlsGen2&quot; | &quot;AmazonAccount&quot; | &quot;AmazonS3&quot; | &quot;AmazonSql&quot; | &quot;AzureCosmosDb&quot; | &quot;AzureDataExplorer&quot; | &quot;AzureFileService&quot; | &quot;AzureSqlDatabase&quot; | &quot;AmazonPostgreSql&quot; | &quot;AzurePostgreSql&quot; | &quot;SqlServerDatabase&quot; | &quot;AzureSqlDatabaseManagedInstance&quot; | &quot;AzureSqlDataWarehouse&quot; | &quot;AzureMySql&quot; | &quot;AzureStorage&quot; | &quot;Teradata&quot; | &quot;Oracle&quot; | &quot;SapS4Hana&quot; | &quot;SapEcc&quot; | &quot;PowerBI&quot; | &quot;CATALOG_ASSET&quot; | &quot;FLOWLET&quot;, # Optional.
        ///   rules: [Rule], # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response SetFavouriteFields(string accountId, string assetId, RequestContent content, string dataSourceFQN = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(assetId, nameof(assetId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.SetFavouriteFields");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSetFavouriteFieldsRequest(accountId, assetId, content, dataSourceFQN, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="assetId"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="assetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="assetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call SubmitJobAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.SubmitJobAsync("<accountId>", "<assetId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call SubmitJobAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {
        ///     jobId = "<jobId>",
        /// };
        /// 
        /// Response response = await client.SubmitJobAsync("<accountId>", "<assetId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>AssessmentJobDTO</c>:
        /// <code>{
        ///   jobId: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> SubmitJobAsync(string accountId, string assetId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(assetId, nameof(assetId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.SubmitJob");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSubmitJobRequest(accountId, assetId, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="assetId"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="assetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="assetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call SubmitJob with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.SubmitJob("<accountId>", "<assetId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call SubmitJob with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {
        ///     jobId = "<jobId>",
        /// };
        /// 
        /// Response response = client.SubmitJob("<accountId>", "<assetId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>AssessmentJobDTO</c>:
        /// <code>{
        ///   jobId: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response SubmitJob(string accountId, string assetId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(assetId, nameof(assetId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.SubmitJob");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSubmitJobRequest(accountId, assetId, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="assetId"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="assetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="assetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetAssetRunMetadataAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// Response response = await client.GetAssetRunMetadataAsync("<accountId>", "<assetId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("accountId").ToString());
        /// Console.WriteLine(result[0].GetProperty("assetID").ToString());
        /// Console.WriteLine(result[0].GetProperty("jobID").ToString());
        /// Console.WriteLine(result[0].GetProperty("jobRunId").ToString());
        /// Console.WriteLine(result[0].GetProperty("jobStartTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("jobEndTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("totalRunTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("jobStatus").ToString());
        /// Console.WriteLine(result[0].GetProperty("message").ToString());
        /// Console.WriteLine(result[0].GetProperty("globalScore").ToString());
        /// Console.WriteLine(result[0].GetProperty("jobEnvironment").ToString());
        /// Console.WriteLine(result[0].GetProperty("scheduleId").ToString());
        /// Console.WriteLine(result[0].GetProperty("assetType").ToString());
        /// Console.WriteLine(result[0].GetProperty("statusCode").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>JobStatusEntity</c>:
        /// <code>{
        ///   accountId: string, # Optional.
        ///   assetID: string, # Optional.
        ///   jobID: string, # Optional.
        ///   jobRunId: string, # Optional.
        ///   jobStartTime: string (ISO 8601 Format), # Optional.
        ///   jobEndTime: string (ISO 8601 Format), # Optional.
        ///   totalRunTime: string, # Optional.
        ///   jobStatus: string, # Optional.
        ///   message: string, # Optional.
        ///   globalScore: number, # Optional.
        ///   jobEnvironment: string, # Optional.
        ///   scheduleId: string, # Optional.
        ///   assetType: string, # Optional.
        ///   statusCode: number, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetAssetRunMetadataAsync(string accountId, string assetId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(assetId, nameof(assetId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.GetAssetRunMetadata");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAssetRunMetadataRequest(accountId, assetId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="assetId"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="assetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="assetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetAssetRunMetadata with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// Response response = client.GetAssetRunMetadata("<accountId>", "<assetId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("accountId").ToString());
        /// Console.WriteLine(result[0].GetProperty("assetID").ToString());
        /// Console.WriteLine(result[0].GetProperty("jobID").ToString());
        /// Console.WriteLine(result[0].GetProperty("jobRunId").ToString());
        /// Console.WriteLine(result[0].GetProperty("jobStartTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("jobEndTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("totalRunTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("jobStatus").ToString());
        /// Console.WriteLine(result[0].GetProperty("message").ToString());
        /// Console.WriteLine(result[0].GetProperty("globalScore").ToString());
        /// Console.WriteLine(result[0].GetProperty("jobEnvironment").ToString());
        /// Console.WriteLine(result[0].GetProperty("scheduleId").ToString());
        /// Console.WriteLine(result[0].GetProperty("assetType").ToString());
        /// Console.WriteLine(result[0].GetProperty("statusCode").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>JobStatusEntity</c>:
        /// <code>{
        ///   accountId: string, # Optional.
        ///   assetID: string, # Optional.
        ///   jobID: string, # Optional.
        ///   jobRunId: string, # Optional.
        ///   jobStartTime: string (ISO 8601 Format), # Optional.
        ///   jobEndTime: string (ISO 8601 Format), # Optional.
        ///   totalRunTime: string, # Optional.
        ///   jobStatus: string, # Optional.
        ///   message: string, # Optional.
        ///   globalScore: number, # Optional.
        ///   jobEnvironment: string, # Optional.
        ///   scheduleId: string, # Optional.
        ///   assetType: string, # Optional.
        ///   statusCode: number, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetAssetRunMetadata(string accountId, string assetId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(assetId, nameof(assetId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.GetAssetRunMetadata");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAssetRunMetadataRequest(accountId, assetId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="assetId"> The String to use. </param>
        /// <param name="assessmentId"> The Guid to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="assetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="assetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetJobStatusAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// Response response = await client.GetJobStatusAsync("<accountId>", "<assetId>", Guid.NewGuid());
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("jobRunId").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("runStart").ToString());
        /// Console.WriteLine(result.GetProperty("runEnd").ToString());
        /// Console.WriteLine(result.GetProperty("durationInMs").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>JobStatusEntityDTO</c>:
        /// <code>{
        ///   jobRunId: string, # Optional.
        ///   status: string, # Optional.
        ///   message: string, # Optional.
        ///   runStart: string (ISO 8601 Format), # Optional.
        ///   runEnd: string (ISO 8601 Format), # Optional.
        ///   durationInMs: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetJobStatusAsync(string accountId, string assetId, Guid assessmentId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(assetId, nameof(assetId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.GetJobStatus");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetJobStatusRequest(accountId, assetId, assessmentId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="assetId"> The String to use. </param>
        /// <param name="assessmentId"> The Guid to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="assetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="assetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetJobStatus with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// Response response = client.GetJobStatus("<accountId>", "<assetId>", Guid.NewGuid());
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("jobRunId").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("runStart").ToString());
        /// Console.WriteLine(result.GetProperty("runEnd").ToString());
        /// Console.WriteLine(result.GetProperty("durationInMs").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>JobStatusEntityDTO</c>:
        /// <code>{
        ///   jobRunId: string, # Optional.
        ///   status: string, # Optional.
        ///   message: string, # Optional.
        ///   runStart: string (ISO 8601 Format), # Optional.
        ///   runEnd: string (ISO 8601 Format), # Optional.
        ///   durationInMs: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetJobStatus(string accountId, string assetId, Guid assessmentId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(assetId, nameof(assetId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.GetJobStatus");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetJobStatusRequest(accountId, assetId, assessmentId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="assetId"> The String to use. </param>
        /// <param name="assessmentId"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/>, <paramref name="assetId"/> or <paramref name="assessmentId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/>, <paramref name="assetId"/> or <paramref name="assessmentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetJobRunAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// Response response = await client.GetJobRunAsync("<accountId>", "<assetId>", "<assessmentId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("scores")[0].GetProperty("ruleLookupIdentifier").ToString());
        /// Console.WriteLine(result.GetProperty("scores")[0].GetProperty("failingRows").ToString());
        /// Console.WriteLine(result.GetProperty("scores")[0].GetProperty("passingRows").ToString());
        /// Console.WriteLine(result.GetProperty("scores")[0].GetProperty("score").ToString());
        /// Console.WriteLine(result.GetProperty("scores")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("scores")[0].GetProperty("ruleType").ToString());
        /// Console.WriteLine(result.GetProperty("goodRowCount").ToString());
        /// Console.WriteLine(result.GetProperty("totalRows").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>DQRunResult</c>:
        /// <code>{
        ///   scores: [
        ///     {
        ///       ruleLookupIdentifier: string, # Optional.
        ///       failingRows: number, # Optional.
        ///       passingRows: number, # Optional.
        ///       score: number, # Optional.
        ///       status: &quot;INCOMPLETE&quot; | &quot;DRAFT&quot; | &quot;PUBLISHED&quot;, # Optional.
        ///       ruleType: string, # Optional.
        ///     }
        ///   ], # Optional.
        ///   goodRowCount: number, # Optional.
        ///   totalRows: number, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetJobRunAsync(string accountId, string assetId, string assessmentId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(assetId, nameof(assetId));
            Argument.AssertNotNullOrEmpty(assessmentId, nameof(assessmentId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.GetJobRun");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetJobRunRequest(accountId, assetId, assessmentId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="assetId"> The String to use. </param>
        /// <param name="assessmentId"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/>, <paramref name="assetId"/> or <paramref name="assessmentId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/>, <paramref name="assetId"/> or <paramref name="assessmentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetJobRun with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// Response response = client.GetJobRun("<accountId>", "<assetId>", "<assessmentId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("scores")[0].GetProperty("ruleLookupIdentifier").ToString());
        /// Console.WriteLine(result.GetProperty("scores")[0].GetProperty("failingRows").ToString());
        /// Console.WriteLine(result.GetProperty("scores")[0].GetProperty("passingRows").ToString());
        /// Console.WriteLine(result.GetProperty("scores")[0].GetProperty("score").ToString());
        /// Console.WriteLine(result.GetProperty("scores")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("scores")[0].GetProperty("ruleType").ToString());
        /// Console.WriteLine(result.GetProperty("goodRowCount").ToString());
        /// Console.WriteLine(result.GetProperty("totalRows").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>DQRunResult</c>:
        /// <code>{
        ///   scores: [
        ///     {
        ///       ruleLookupIdentifier: string, # Optional.
        ///       failingRows: number, # Optional.
        ///       passingRows: number, # Optional.
        ///       score: number, # Optional.
        ///       status: &quot;INCOMPLETE&quot; | &quot;DRAFT&quot; | &quot;PUBLISHED&quot;, # Optional.
        ///       ruleType: string, # Optional.
        ///     }
        ///   ], # Optional.
        ///   goodRowCount: number, # Optional.
        ///   totalRows: number, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetJobRun(string accountId, string assetId, string assessmentId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(assetId, nameof(assetId));
            Argument.AssertNotNullOrEmpty(assessmentId, nameof(assessmentId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.GetJobRun");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetJobRunRequest(accountId, assetId, assessmentId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="assetId"> The String to use. </param>
        /// <param name="assessmentId"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/>, <paramref name="assetId"/> or <paramref name="assessmentId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/>, <paramref name="assetId"/> or <paramref name="assessmentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call GetJobRulesAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// Response response = await client.GetJobRulesAsync("<accountId>", "<assetId>", "<assessmentId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> GetJobRulesAsync(string accountId, string assetId, string assessmentId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(assetId, nameof(assetId));
            Argument.AssertNotNullOrEmpty(assessmentId, nameof(assessmentId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.GetJobRules");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetJobRulesRequest(accountId, assetId, assessmentId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="assetId"> The String to use. </param>
        /// <param name="assessmentId"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/>, <paramref name="assetId"/> or <paramref name="assessmentId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/>, <paramref name="assetId"/> or <paramref name="assessmentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call GetJobRules with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// Response response = client.GetJobRules("<accountId>", "<assetId>", "<assessmentId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// </example>
        public virtual Response GetJobRules(string accountId, string assetId, string assessmentId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(assetId, nameof(assetId));
            Argument.AssertNotNullOrEmpty(assessmentId, nameof(assessmentId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.GetJobRules");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetJobRulesRequest(accountId, assetId, assessmentId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="assetId"> The String to use. </param>
        /// <param name="assessmentId"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/>, <paramref name="assetId"/> or <paramref name="assessmentId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/>, <paramref name="assetId"/> or <paramref name="assessmentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DownloadJobErrorFileAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// Response response = await client.DownloadJobErrorFileAsync("<accountId>", "<assetId>", "<assessmentId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> DownloadJobErrorFileAsync(string accountId, string assetId, string assessmentId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(assetId, nameof(assetId));
            Argument.AssertNotNullOrEmpty(assessmentId, nameof(assessmentId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.DownloadJobErrorFile");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDownloadJobErrorFileRequest(accountId, assetId, assessmentId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="assetId"> The String to use. </param>
        /// <param name="assessmentId"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/>, <paramref name="assetId"/> or <paramref name="assessmentId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/>, <paramref name="assetId"/> or <paramref name="assessmentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DownloadJobErrorFile with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// Response response = client.DownloadJobErrorFile("<accountId>", "<assetId>", "<assessmentId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// </example>
        public virtual Response DownloadJobErrorFile(string accountId, string assetId, string assessmentId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(assetId, nameof(assetId));
            Argument.AssertNotNullOrEmpty(assessmentId, nameof(assessmentId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.DownloadJobErrorFile");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDownloadJobErrorFileRequest(accountId, assetId, assessmentId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="assetId"> The String to use. </param>
        /// <param name="assessmentId"> The Guid to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="assetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="assetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call CancelJobAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// Response response = await client.CancelJobAsync("<accountId>", "<assetId>", Guid.NewGuid());
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> CancelJobAsync(string accountId, string assetId, Guid assessmentId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(assetId, nameof(assetId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.CancelJob");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCancelJobRequest(accountId, assetId, assessmentId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="assetId"> The String to use. </param>
        /// <param name="assessmentId"> The Guid to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="assetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="assetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call CancelJob with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// Response response = client.CancelJob("<accountId>", "<assetId>", Guid.NewGuid());
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// </example>
        public virtual Response CancelJob(string accountId, string assetId, Guid assessmentId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(assetId, nameof(assetId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.CancelJob");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCancelJobRequest(accountId, assetId, assessmentId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="runNow"> The Boolean to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateScheduledAssessmentsAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.CreateScheduledAssessmentsAsync("<accountId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call CreateScheduledAssessmentsAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {
        ///     scheduleId = "<scheduleId>",
        ///     scheduleName = "<scheduleName>",
        ///     description = "<description>",
        ///     recurrence = new {
        ///         frequency = "<frequency>",
        ///         interval = 1234,
        ///         startTime = "2022-05-10T18:57:31.2311892Z",
        ///         endTime = "2022-05-10T18:57:31.2311892Z",
        ///         schedule = new {},
        ///         timezone = "<timezone>",
        ///     },
        ///     datasources = new[] {
        ///         new {
        ///             datasourceKind = "<datasourceKind>",
        ///             datasourceName = "<datasourceName>",
        ///             includes = new[] {
        ///                 "<String>"
        ///             },
        ///             properties = new {},
        ///             credentials = new {
        ///                 credentialType = "AccountKey",
        ///                 referenceName = "<referenceName>",
        ///                 credentialProperties = new {},
        ///             },
        ///         }
        ///     },
        ///     scheduleStatus = "RUNNING",
        ///     runOnce = true,
        /// };
        /// 
        /// Response response = await client.CreateScheduledAssessmentsAsync("<accountId>", RequestContent.Create(data), true);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("scheduleId").ToString());
        /// Console.WriteLine(result.GetProperty("scheduleName").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("recurrence").GetProperty("frequency").ToString());
        /// Console.WriteLine(result.GetProperty("recurrence").GetProperty("interval").ToString());
        /// Console.WriteLine(result.GetProperty("recurrence").GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("recurrence").GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("recurrence").GetProperty("schedule").ToString());
        /// Console.WriteLine(result.GetProperty("recurrence").GetProperty("timezone").ToString());
        /// Console.WriteLine(result.GetProperty("datasources")[0].GetProperty("datasourceKind").ToString());
        /// Console.WriteLine(result.GetProperty("datasources")[0].GetProperty("datasourceName").ToString());
        /// Console.WriteLine(result.GetProperty("datasources")[0].GetProperty("includes")[0].ToString());
        /// Console.WriteLine(result.GetProperty("datasources")[0].GetProperty("properties").ToString());
        /// Console.WriteLine(result.GetProperty("datasources")[0].GetProperty("credentials").GetProperty("credentialType").ToString());
        /// Console.WriteLine(result.GetProperty("datasources")[0].GetProperty("credentials").GetProperty("referenceName").ToString());
        /// Console.WriteLine(result.GetProperty("datasources")[0].GetProperty("credentials").GetProperty("credentialProperties").ToString());
        /// Console.WriteLine(result.GetProperty("scheduleStatus").ToString());
        /// Console.WriteLine(result.GetProperty("runOnce").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>ScheduleMetadataAutoGenerated</c>:
        /// <code>{
        ///   scheduleId: string, # Optional.
        ///   scheduleName: string, # Optional.
        ///   description: string, # Optional.
        ///   recurrence: {
        ///     frequency: string, # Optional.
        ///     interval: number, # Optional.
        ///     startTime: string (ISO 8601 Format), # Optional.
        ///     endTime: string (ISO 8601 Format), # Optional.
        ///     schedule: any, # Optional. Anything
        ///     timezone: string, # Optional.
        ///   }, # Optional.
        ///   datasources: [
        ///     {
        ///       datasourceKind: string, # Optional.
        ///       datasourceName: string, # Optional.
        ///       includes: [string], # Optional.
        ///       properties: any, # Optional. Anything
        ///       credentials: {
        ///         credentialType: &quot;AccountKey&quot; | &quot;ServicePrincipal&quot; | &quot;BasicAuth&quot; | &quot;SqlAuth&quot; | &quot;AmazonARN&quot; | &quot;ConsumerKeyAuth&quot; | &quot;DelegatedAuth&quot; | &quot;ManagedIdentity&quot;, # Optional.
        ///         referenceName: string, # Optional.
        ///         credentialProperties: any, # Optional. Anything
        ///       }, # Optional.
        ///     }
        ///   ], # Optional.
        ///   scheduleStatus: &quot;RUNNING&quot; | &quot;PAUSED&quot; | &quot;DELETED&quot; | &quot;DELETING&quot; | &quot;TRIGGER_DELETED&quot; | &quot;PIPELINE_DELETED&quot;, # Optional.
        ///   runOnce: boolean, # Optional.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ScheduleMetadataAutoGenerated</c>:
        /// <code>{
        ///   scheduleId: string, # Optional.
        ///   scheduleName: string, # Optional.
        ///   description: string, # Optional.
        ///   recurrence: {
        ///     frequency: string, # Optional.
        ///     interval: number, # Optional.
        ///     startTime: string (ISO 8601 Format), # Optional.
        ///     endTime: string (ISO 8601 Format), # Optional.
        ///     schedule: any, # Optional. Anything
        ///     timezone: string, # Optional.
        ///   }, # Optional.
        ///   datasources: [
        ///     {
        ///       datasourceKind: string, # Optional.
        ///       datasourceName: string, # Optional.
        ///       includes: [string], # Optional.
        ///       properties: any, # Optional. Anything
        ///       credentials: {
        ///         credentialType: &quot;AccountKey&quot; | &quot;ServicePrincipal&quot; | &quot;BasicAuth&quot; | &quot;SqlAuth&quot; | &quot;AmazonARN&quot; | &quot;ConsumerKeyAuth&quot; | &quot;DelegatedAuth&quot; | &quot;ManagedIdentity&quot;, # Optional.
        ///         referenceName: string, # Optional.
        ///         credentialProperties: any, # Optional. Anything
        ///       }, # Optional.
        ///     }
        ///   ], # Optional.
        ///   scheduleStatus: &quot;RUNNING&quot; | &quot;PAUSED&quot; | &quot;DELETED&quot; | &quot;DELETING&quot; | &quot;TRIGGER_DELETED&quot; | &quot;PIPELINE_DELETED&quot;, # Optional.
        ///   runOnce: boolean, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> CreateScheduledAssessmentsAsync(string accountId, RequestContent content, bool? runNow = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.CreateScheduledAssessments");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateScheduledAssessmentsRequest(accountId, content, runNow, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="runNow"> The Boolean to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateScheduledAssessments with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.CreateScheduledAssessments("<accountId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call CreateScheduledAssessments with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {
        ///     scheduleId = "<scheduleId>",
        ///     scheduleName = "<scheduleName>",
        ///     description = "<description>",
        ///     recurrence = new {
        ///         frequency = "<frequency>",
        ///         interval = 1234,
        ///         startTime = "2022-05-10T18:57:31.2311892Z",
        ///         endTime = "2022-05-10T18:57:31.2311892Z",
        ///         schedule = new {},
        ///         timezone = "<timezone>",
        ///     },
        ///     datasources = new[] {
        ///         new {
        ///             datasourceKind = "<datasourceKind>",
        ///             datasourceName = "<datasourceName>",
        ///             includes = new[] {
        ///                 "<String>"
        ///             },
        ///             properties = new {},
        ///             credentials = new {
        ///                 credentialType = "AccountKey",
        ///                 referenceName = "<referenceName>",
        ///                 credentialProperties = new {},
        ///             },
        ///         }
        ///     },
        ///     scheduleStatus = "RUNNING",
        ///     runOnce = true,
        /// };
        /// 
        /// Response response = client.CreateScheduledAssessments("<accountId>", RequestContent.Create(data), true);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("scheduleId").ToString());
        /// Console.WriteLine(result.GetProperty("scheduleName").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("recurrence").GetProperty("frequency").ToString());
        /// Console.WriteLine(result.GetProperty("recurrence").GetProperty("interval").ToString());
        /// Console.WriteLine(result.GetProperty("recurrence").GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("recurrence").GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("recurrence").GetProperty("schedule").ToString());
        /// Console.WriteLine(result.GetProperty("recurrence").GetProperty("timezone").ToString());
        /// Console.WriteLine(result.GetProperty("datasources")[0].GetProperty("datasourceKind").ToString());
        /// Console.WriteLine(result.GetProperty("datasources")[0].GetProperty("datasourceName").ToString());
        /// Console.WriteLine(result.GetProperty("datasources")[0].GetProperty("includes")[0].ToString());
        /// Console.WriteLine(result.GetProperty("datasources")[0].GetProperty("properties").ToString());
        /// Console.WriteLine(result.GetProperty("datasources")[0].GetProperty("credentials").GetProperty("credentialType").ToString());
        /// Console.WriteLine(result.GetProperty("datasources")[0].GetProperty("credentials").GetProperty("referenceName").ToString());
        /// Console.WriteLine(result.GetProperty("datasources")[0].GetProperty("credentials").GetProperty("credentialProperties").ToString());
        /// Console.WriteLine(result.GetProperty("scheduleStatus").ToString());
        /// Console.WriteLine(result.GetProperty("runOnce").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>ScheduleMetadataAutoGenerated</c>:
        /// <code>{
        ///   scheduleId: string, # Optional.
        ///   scheduleName: string, # Optional.
        ///   description: string, # Optional.
        ///   recurrence: {
        ///     frequency: string, # Optional.
        ///     interval: number, # Optional.
        ///     startTime: string (ISO 8601 Format), # Optional.
        ///     endTime: string (ISO 8601 Format), # Optional.
        ///     schedule: any, # Optional. Anything
        ///     timezone: string, # Optional.
        ///   }, # Optional.
        ///   datasources: [
        ///     {
        ///       datasourceKind: string, # Optional.
        ///       datasourceName: string, # Optional.
        ///       includes: [string], # Optional.
        ///       properties: any, # Optional. Anything
        ///       credentials: {
        ///         credentialType: &quot;AccountKey&quot; | &quot;ServicePrincipal&quot; | &quot;BasicAuth&quot; | &quot;SqlAuth&quot; | &quot;AmazonARN&quot; | &quot;ConsumerKeyAuth&quot; | &quot;DelegatedAuth&quot; | &quot;ManagedIdentity&quot;, # Optional.
        ///         referenceName: string, # Optional.
        ///         credentialProperties: any, # Optional. Anything
        ///       }, # Optional.
        ///     }
        ///   ], # Optional.
        ///   scheduleStatus: &quot;RUNNING&quot; | &quot;PAUSED&quot; | &quot;DELETED&quot; | &quot;DELETING&quot; | &quot;TRIGGER_DELETED&quot; | &quot;PIPELINE_DELETED&quot;, # Optional.
        ///   runOnce: boolean, # Optional.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ScheduleMetadataAutoGenerated</c>:
        /// <code>{
        ///   scheduleId: string, # Optional.
        ///   scheduleName: string, # Optional.
        ///   description: string, # Optional.
        ///   recurrence: {
        ///     frequency: string, # Optional.
        ///     interval: number, # Optional.
        ///     startTime: string (ISO 8601 Format), # Optional.
        ///     endTime: string (ISO 8601 Format), # Optional.
        ///     schedule: any, # Optional. Anything
        ///     timezone: string, # Optional.
        ///   }, # Optional.
        ///   datasources: [
        ///     {
        ///       datasourceKind: string, # Optional.
        ///       datasourceName: string, # Optional.
        ///       includes: [string], # Optional.
        ///       properties: any, # Optional. Anything
        ///       credentials: {
        ///         credentialType: &quot;AccountKey&quot; | &quot;ServicePrincipal&quot; | &quot;BasicAuth&quot; | &quot;SqlAuth&quot; | &quot;AmazonARN&quot; | &quot;ConsumerKeyAuth&quot; | &quot;DelegatedAuth&quot; | &quot;ManagedIdentity&quot;, # Optional.
        ///         referenceName: string, # Optional.
        ///         credentialProperties: any, # Optional. Anything
        ///       }, # Optional.
        ///     }
        ///   ], # Optional.
        ///   scheduleStatus: &quot;RUNNING&quot; | &quot;PAUSED&quot; | &quot;DELETED&quot; | &quot;DELETING&quot; | &quot;TRIGGER_DELETED&quot; | &quot;PIPELINE_DELETED&quot;, # Optional.
        ///   runOnce: boolean, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response CreateScheduledAssessments(string accountId, RequestContent content, bool? runNow = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.CreateScheduledAssessments");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateScheduledAssessmentsRequest(accountId, content, runNow, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetScheduledAssessmentsAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// Response response = await client.GetScheduledAssessmentsAsync("<accountId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("values")[0].GetProperty("scheduleId").ToString());
        /// Console.WriteLine(result.GetProperty("values")[0].GetProperty("scheduleName").ToString());
        /// Console.WriteLine(result.GetProperty("values")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("values")[0].GetProperty("recurrence").GetProperty("frequency").ToString());
        /// Console.WriteLine(result.GetProperty("values")[0].GetProperty("recurrence").GetProperty("interval").ToString());
        /// Console.WriteLine(result.GetProperty("values")[0].GetProperty("recurrence").GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("values")[0].GetProperty("recurrence").GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("values")[0].GetProperty("recurrence").GetProperty("schedule").ToString());
        /// Console.WriteLine(result.GetProperty("values")[0].GetProperty("recurrence").GetProperty("timezone").ToString());
        /// Console.WriteLine(result.GetProperty("values")[0].GetProperty("datasources")[0].GetProperty("datasourceKind").ToString());
        /// Console.WriteLine(result.GetProperty("values")[0].GetProperty("datasources")[0].GetProperty("datasourceName").ToString());
        /// Console.WriteLine(result.GetProperty("values")[0].GetProperty("datasources")[0].GetProperty("includes")[0].ToString());
        /// Console.WriteLine(result.GetProperty("values")[0].GetProperty("datasources")[0].GetProperty("properties").ToString());
        /// Console.WriteLine(result.GetProperty("values")[0].GetProperty("datasources")[0].GetProperty("credentials").GetProperty("credentialType").ToString());
        /// Console.WriteLine(result.GetProperty("values")[0].GetProperty("datasources")[0].GetProperty("credentials").GetProperty("referenceName").ToString());
        /// Console.WriteLine(result.GetProperty("values")[0].GetProperty("datasources")[0].GetProperty("credentials").GetProperty("credentialProperties").ToString());
        /// Console.WriteLine(result.GetProperty("values")[0].GetProperty("scheduleStatus").ToString());
        /// Console.WriteLine(result.GetProperty("values")[0].GetProperty("runOnce").ToString());
        /// Console.WriteLine(result.GetProperty("nextLink").ToString());
        /// Console.WriteLine(result.GetProperty("count").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ScheduleMetadataPagedResults</c>:
        /// <code>{
        ///   values: [
        ///     {
        ///       scheduleId: string, # Optional.
        ///       scheduleName: string, # Optional.
        ///       description: string, # Optional.
        ///       recurrence: {
        ///         frequency: string, # Optional.
        ///         interval: number, # Optional.
        ///         startTime: string (ISO 8601 Format), # Optional.
        ///         endTime: string (ISO 8601 Format), # Optional.
        ///         schedule: any, # Optional. Anything
        ///         timezone: string, # Optional.
        ///       }, # Optional.
        ///       datasources: [
        ///         {
        ///           datasourceKind: string, # Optional.
        ///           datasourceName: string, # Optional.
        ///           includes: [string], # Optional.
        ///           properties: any, # Optional. Anything
        ///           credentials: {
        ///             credentialType: &quot;AccountKey&quot; | &quot;ServicePrincipal&quot; | &quot;BasicAuth&quot; | &quot;SqlAuth&quot; | &quot;AmazonARN&quot; | &quot;ConsumerKeyAuth&quot; | &quot;DelegatedAuth&quot; | &quot;ManagedIdentity&quot;, # Optional.
        ///             referenceName: string, # Optional.
        ///             credentialProperties: any, # Optional. Anything
        ///           }, # Optional.
        ///         }
        ///       ], # Optional.
        ///       scheduleStatus: &quot;RUNNING&quot; | &quot;PAUSED&quot; | &quot;DELETED&quot; | &quot;DELETING&quot; | &quot;TRIGGER_DELETED&quot; | &quot;PIPELINE_DELETED&quot;, # Optional.
        ///       runOnce: boolean, # Optional.
        ///     }
        ///   ], # Required.
        ///   nextLink: string, # Optional.
        ///   count: number, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetScheduledAssessmentsAsync(string accountId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.GetScheduledAssessments");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetScheduledAssessmentsRequest(accountId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetScheduledAssessments with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// Response response = client.GetScheduledAssessments("<accountId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("values")[0].GetProperty("scheduleId").ToString());
        /// Console.WriteLine(result.GetProperty("values")[0].GetProperty("scheduleName").ToString());
        /// Console.WriteLine(result.GetProperty("values")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("values")[0].GetProperty("recurrence").GetProperty("frequency").ToString());
        /// Console.WriteLine(result.GetProperty("values")[0].GetProperty("recurrence").GetProperty("interval").ToString());
        /// Console.WriteLine(result.GetProperty("values")[0].GetProperty("recurrence").GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("values")[0].GetProperty("recurrence").GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("values")[0].GetProperty("recurrence").GetProperty("schedule").ToString());
        /// Console.WriteLine(result.GetProperty("values")[0].GetProperty("recurrence").GetProperty("timezone").ToString());
        /// Console.WriteLine(result.GetProperty("values")[0].GetProperty("datasources")[0].GetProperty("datasourceKind").ToString());
        /// Console.WriteLine(result.GetProperty("values")[0].GetProperty("datasources")[0].GetProperty("datasourceName").ToString());
        /// Console.WriteLine(result.GetProperty("values")[0].GetProperty("datasources")[0].GetProperty("includes")[0].ToString());
        /// Console.WriteLine(result.GetProperty("values")[0].GetProperty("datasources")[0].GetProperty("properties").ToString());
        /// Console.WriteLine(result.GetProperty("values")[0].GetProperty("datasources")[0].GetProperty("credentials").GetProperty("credentialType").ToString());
        /// Console.WriteLine(result.GetProperty("values")[0].GetProperty("datasources")[0].GetProperty("credentials").GetProperty("referenceName").ToString());
        /// Console.WriteLine(result.GetProperty("values")[0].GetProperty("datasources")[0].GetProperty("credentials").GetProperty("credentialProperties").ToString());
        /// Console.WriteLine(result.GetProperty("values")[0].GetProperty("scheduleStatus").ToString());
        /// Console.WriteLine(result.GetProperty("values")[0].GetProperty("runOnce").ToString());
        /// Console.WriteLine(result.GetProperty("nextLink").ToString());
        /// Console.WriteLine(result.GetProperty("count").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ScheduleMetadataPagedResults</c>:
        /// <code>{
        ///   values: [
        ///     {
        ///       scheduleId: string, # Optional.
        ///       scheduleName: string, # Optional.
        ///       description: string, # Optional.
        ///       recurrence: {
        ///         frequency: string, # Optional.
        ///         interval: number, # Optional.
        ///         startTime: string (ISO 8601 Format), # Optional.
        ///         endTime: string (ISO 8601 Format), # Optional.
        ///         schedule: any, # Optional. Anything
        ///         timezone: string, # Optional.
        ///       }, # Optional.
        ///       datasources: [
        ///         {
        ///           datasourceKind: string, # Optional.
        ///           datasourceName: string, # Optional.
        ///           includes: [string], # Optional.
        ///           properties: any, # Optional. Anything
        ///           credentials: {
        ///             credentialType: &quot;AccountKey&quot; | &quot;ServicePrincipal&quot; | &quot;BasicAuth&quot; | &quot;SqlAuth&quot; | &quot;AmazonARN&quot; | &quot;ConsumerKeyAuth&quot; | &quot;DelegatedAuth&quot; | &quot;ManagedIdentity&quot;, # Optional.
        ///             referenceName: string, # Optional.
        ///             credentialProperties: any, # Optional. Anything
        ///           }, # Optional.
        ///         }
        ///       ], # Optional.
        ///       scheduleStatus: &quot;RUNNING&quot; | &quot;PAUSED&quot; | &quot;DELETED&quot; | &quot;DELETING&quot; | &quot;TRIGGER_DELETED&quot; | &quot;PIPELINE_DELETED&quot;, # Optional.
        ///       runOnce: boolean, # Optional.
        ///     }
        ///   ], # Required.
        ///   nextLink: string, # Optional.
        ///   count: number, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetScheduledAssessments(string accountId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.GetScheduledAssessments");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetScheduledAssessmentsRequest(accountId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="scheduleName"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="scheduleName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="scheduleName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ExistsScheduledAssessmentAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// Response response = await client.ExistsScheduledAssessmentAsync("<accountId>", "<scheduleName>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> ExistsScheduledAssessmentAsync(string accountId, string scheduleName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(scheduleName, nameof(scheduleName));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.ExistsScheduledAssessment");
            scope.Start();
            try
            {
                using HttpMessage message = CreateExistsScheduledAssessmentRequest(accountId, scheduleName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="scheduleName"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="scheduleName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="scheduleName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ExistsScheduledAssessment with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// Response response = client.ExistsScheduledAssessment("<accountId>", "<scheduleName>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// </example>
        public virtual Response ExistsScheduledAssessment(string accountId, string scheduleName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(scheduleName, nameof(scheduleName));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.ExistsScheduledAssessment");
            scope.Start();
            try
            {
                using HttpMessage message = CreateExistsScheduledAssessmentRequest(accountId, scheduleName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call GetAllScheduleNamesAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// Response response = await client.GetAllScheduleNamesAsync("<accountId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].ToString());
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> GetAllScheduleNamesAsync(string accountId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.GetAllScheduleNames");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAllScheduleNamesRequest(accountId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call GetAllScheduleNames with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// Response response = client.GetAllScheduleNames("<accountId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].ToString());
        /// ]]></code>
        /// </example>
        public virtual Response GetAllScheduleNames(string accountId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.GetAllScheduleNames");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAllScheduleNamesRequest(accountId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="scheduleId"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="scheduleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="scheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetScheduledAssessmentsRunsAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// Response response = await client.GetScheduledAssessmentsRunsAsync("<accountId>", "<scheduleId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("scheduleId").ToString());
        /// Console.WriteLine(result[0].GetProperty("scheduleName").ToString());
        /// Console.WriteLine(result[0].GetProperty("triggerRunId").ToString());
        /// Console.WriteLine(result[0].GetProperty("triggerStatus").ToString());
        /// Console.WriteLine(result[0].GetProperty("triggerStartTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("triggerLastUpdateTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("assessmentType").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ScheduleTriggerRunEntity</c>:
        /// <code>{
        ///   scheduleId: string, # Optional.
        ///   scheduleName: string, # Optional.
        ///   triggerRunId: string, # Optional.
        ///   triggerStatus: string, # Optional.
        ///   triggerStartTime: string (ISO 8601 Format), # Optional.
        ///   triggerLastUpdateTime: string (ISO 8601 Format), # Optional.
        ///   assessmentType: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetScheduledAssessmentsRunsAsync(string accountId, string scheduleId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(scheduleId, nameof(scheduleId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.GetScheduledAssessmentsRuns");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetScheduledAssessmentsRunsRequest(accountId, scheduleId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="scheduleId"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="scheduleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="scheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetScheduledAssessmentsRuns with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// Response response = client.GetScheduledAssessmentsRuns("<accountId>", "<scheduleId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("scheduleId").ToString());
        /// Console.WriteLine(result[0].GetProperty("scheduleName").ToString());
        /// Console.WriteLine(result[0].GetProperty("triggerRunId").ToString());
        /// Console.WriteLine(result[0].GetProperty("triggerStatus").ToString());
        /// Console.WriteLine(result[0].GetProperty("triggerStartTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("triggerLastUpdateTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("assessmentType").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ScheduleTriggerRunEntity</c>:
        /// <code>{
        ///   scheduleId: string, # Optional.
        ///   scheduleName: string, # Optional.
        ///   triggerRunId: string, # Optional.
        ///   triggerStatus: string, # Optional.
        ///   triggerStartTime: string (ISO 8601 Format), # Optional.
        ///   triggerLastUpdateTime: string (ISO 8601 Format), # Optional.
        ///   assessmentType: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetScheduledAssessmentsRuns(string accountId, string scheduleId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(scheduleId, nameof(scheduleId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.GetScheduledAssessmentsRuns");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetScheduledAssessmentsRunsRequest(accountId, scheduleId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetScheduledAssessmentsRunsBulkStatusAsync with required parameters and request content and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new[] {
        ///     new {
        ///         scheduleId = "<scheduleId>",
        ///         triggerRunIds = new[] {
        ///             "<String>"
        ///         },
        ///     }
        /// };
        /// 
        /// Response response = await client.GetScheduledAssessmentsRunsBulkStatusAsync("<accountId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("scheduleId").ToString());
        /// Console.WriteLine(result[0].GetProperty("scheduleName").ToString());
        /// Console.WriteLine(result[0].GetProperty("triggerRunId").ToString());
        /// Console.WriteLine(result[0].GetProperty("triggerStatus").ToString());
        /// Console.WriteLine(result[0].GetProperty("triggerStartTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("triggerLastUpdateTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("assessmentType").ToString());
        /// Console.WriteLine(result[0].GetProperty("jobStatus").GetProperty("succeeded").GetProperty("count").ToString());
        /// Console.WriteLine(result[0].GetProperty("jobStatus").GetProperty("succeeded").GetProperty("assets")[0].ToString());
        /// Console.WriteLine(result[0].GetProperty("jobStatus").GetProperty("inProgress").GetProperty("count").ToString());
        /// Console.WriteLine(result[0].GetProperty("jobStatus").GetProperty("inProgress").GetProperty("assets")[0].ToString());
        /// Console.WriteLine(result[0].GetProperty("jobStatus").GetProperty("queued").GetProperty("count").ToString());
        /// Console.WriteLine(result[0].GetProperty("jobStatus").GetProperty("queued").GetProperty("assets")[0].ToString());
        /// Console.WriteLine(result[0].GetProperty("jobStatus").GetProperty("failed").GetProperty("count").ToString());
        /// Console.WriteLine(result[0].GetProperty("jobStatus").GetProperty("failed").GetProperty("assets")[0].ToString());
        /// Console.WriteLine(result[0].GetProperty("jobStatus").GetProperty("cancelled").GetProperty("count").ToString());
        /// Console.WriteLine(result[0].GetProperty("jobStatus").GetProperty("cancelled").GetProperty("assets")[0].ToString());
        /// Console.WriteLine(result[0].GetProperty("jobStatus").GetProperty("skipped").GetProperty("count").ToString());
        /// Console.WriteLine(result[0].GetProperty("jobStatus").GetProperty("skipped").GetProperty("assets")[0].ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>ScheduleBulkRunsStatus</c>:
        /// <code>{
        ///   scheduleId: string, # Optional.
        ///   triggerRunIds: [string], # Optional.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ScheduleTriggerRunEntityAssetInfo</c>:
        /// <code>{
        ///   scheduleId: string, # Optional.
        ///   scheduleName: string, # Optional.
        ///   triggerRunId: string, # Optional.
        ///   triggerStatus: string, # Optional.
        ///   triggerStartTime: string (ISO 8601 Format), # Optional.
        ///   triggerLastUpdateTime: string (ISO 8601 Format), # Optional.
        ///   assessmentType: string, # Optional.
        ///   jobStatus: {
        ///     succeeded: {
        ///       count: number, # Optional.
        ///       assets: [string], # Optional.
        ///     }, # Optional.
        ///     inProgress: DQAssetList, # Optional.
        ///     queued: DQAssetList, # Optional.
        ///     failed: DQAssetList, # Optional.
        ///     cancelled: DQAssetList, # Optional.
        ///     skipped: DQAssetList, # Optional.
        ///   }, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetScheduledAssessmentsRunsBulkStatusAsync(string accountId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.GetScheduledAssessmentsRunsBulkStatus");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetScheduledAssessmentsRunsBulkStatusRequest(accountId, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetScheduledAssessmentsRunsBulkStatus with required parameters and request content and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new[] {
        ///     new {
        ///         scheduleId = "<scheduleId>",
        ///         triggerRunIds = new[] {
        ///             "<String>"
        ///         },
        ///     }
        /// };
        /// 
        /// Response response = client.GetScheduledAssessmentsRunsBulkStatus("<accountId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("scheduleId").ToString());
        /// Console.WriteLine(result[0].GetProperty("scheduleName").ToString());
        /// Console.WriteLine(result[0].GetProperty("triggerRunId").ToString());
        /// Console.WriteLine(result[0].GetProperty("triggerStatus").ToString());
        /// Console.WriteLine(result[0].GetProperty("triggerStartTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("triggerLastUpdateTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("assessmentType").ToString());
        /// Console.WriteLine(result[0].GetProperty("jobStatus").GetProperty("succeeded").GetProperty("count").ToString());
        /// Console.WriteLine(result[0].GetProperty("jobStatus").GetProperty("succeeded").GetProperty("assets")[0].ToString());
        /// Console.WriteLine(result[0].GetProperty("jobStatus").GetProperty("inProgress").GetProperty("count").ToString());
        /// Console.WriteLine(result[0].GetProperty("jobStatus").GetProperty("inProgress").GetProperty("assets")[0].ToString());
        /// Console.WriteLine(result[0].GetProperty("jobStatus").GetProperty("queued").GetProperty("count").ToString());
        /// Console.WriteLine(result[0].GetProperty("jobStatus").GetProperty("queued").GetProperty("assets")[0].ToString());
        /// Console.WriteLine(result[0].GetProperty("jobStatus").GetProperty("failed").GetProperty("count").ToString());
        /// Console.WriteLine(result[0].GetProperty("jobStatus").GetProperty("failed").GetProperty("assets")[0].ToString());
        /// Console.WriteLine(result[0].GetProperty("jobStatus").GetProperty("cancelled").GetProperty("count").ToString());
        /// Console.WriteLine(result[0].GetProperty("jobStatus").GetProperty("cancelled").GetProperty("assets")[0].ToString());
        /// Console.WriteLine(result[0].GetProperty("jobStatus").GetProperty("skipped").GetProperty("count").ToString());
        /// Console.WriteLine(result[0].GetProperty("jobStatus").GetProperty("skipped").GetProperty("assets")[0].ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>ScheduleBulkRunsStatus</c>:
        /// <code>{
        ///   scheduleId: string, # Optional.
        ///   triggerRunIds: [string], # Optional.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ScheduleTriggerRunEntityAssetInfo</c>:
        /// <code>{
        ///   scheduleId: string, # Optional.
        ///   scheduleName: string, # Optional.
        ///   triggerRunId: string, # Optional.
        ///   triggerStatus: string, # Optional.
        ///   triggerStartTime: string (ISO 8601 Format), # Optional.
        ///   triggerLastUpdateTime: string (ISO 8601 Format), # Optional.
        ///   assessmentType: string, # Optional.
        ///   jobStatus: {
        ///     succeeded: {
        ///       count: number, # Optional.
        ///       assets: [string], # Optional.
        ///     }, # Optional.
        ///     inProgress: DQAssetList, # Optional.
        ///     queued: DQAssetList, # Optional.
        ///     failed: DQAssetList, # Optional.
        ///     cancelled: DQAssetList, # Optional.
        ///     skipped: DQAssetList, # Optional.
        ///   }, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetScheduledAssessmentsRunsBulkStatus(string accountId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.GetScheduledAssessmentsRunsBulkStatus");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetScheduledAssessmentsRunsBulkStatusRequest(accountId, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="scheduleId"> The String to use. </param>
        /// <param name="runId"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/>, <paramref name="scheduleId"/> or <paramref name="runId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/>, <paramref name="scheduleId"/> or <paramref name="runId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetScheduledAssessmentRunDetailsAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// Response response = await client.GetScheduledAssessmentRunDetailsAsync("<accountId>", "<scheduleId>", "<runId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("scheduleId").ToString());
        /// Console.WriteLine(result.GetProperty("scheduleName").ToString());
        /// Console.WriteLine(result.GetProperty("triggerRunId").ToString());
        /// Console.WriteLine(result.GetProperty("triggerStatus").ToString());
        /// Console.WriteLine(result.GetProperty("triggerStartTime").ToString());
        /// Console.WriteLine(result.GetProperty("triggerLastUpdateTime").ToString());
        /// Console.WriteLine(result.GetProperty("assessmentType").ToString());
        /// Console.WriteLine(result.GetProperty("jobStatus").GetProperty("succeeded").GetProperty("count").ToString());
        /// Console.WriteLine(result.GetProperty("jobStatus").GetProperty("succeeded").GetProperty("assets")[0].ToString());
        /// Console.WriteLine(result.GetProperty("jobStatus").GetProperty("inProgress").GetProperty("count").ToString());
        /// Console.WriteLine(result.GetProperty("jobStatus").GetProperty("inProgress").GetProperty("assets")[0].ToString());
        /// Console.WriteLine(result.GetProperty("jobStatus").GetProperty("queued").GetProperty("count").ToString());
        /// Console.WriteLine(result.GetProperty("jobStatus").GetProperty("queued").GetProperty("assets")[0].ToString());
        /// Console.WriteLine(result.GetProperty("jobStatus").GetProperty("failed").GetProperty("count").ToString());
        /// Console.WriteLine(result.GetProperty("jobStatus").GetProperty("failed").GetProperty("assets")[0].ToString());
        /// Console.WriteLine(result.GetProperty("jobStatus").GetProperty("cancelled").GetProperty("count").ToString());
        /// Console.WriteLine(result.GetProperty("jobStatus").GetProperty("cancelled").GetProperty("assets")[0].ToString());
        /// Console.WriteLine(result.GetProperty("jobStatus").GetProperty("skipped").GetProperty("count").ToString());
        /// Console.WriteLine(result.GetProperty("jobStatus").GetProperty("skipped").GetProperty("assets")[0].ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ScheduleTriggerRunEntityAssetInfo</c>:
        /// <code>{
        ///   scheduleId: string, # Optional.
        ///   scheduleName: string, # Optional.
        ///   triggerRunId: string, # Optional.
        ///   triggerStatus: string, # Optional.
        ///   triggerStartTime: string (ISO 8601 Format), # Optional.
        ///   triggerLastUpdateTime: string (ISO 8601 Format), # Optional.
        ///   assessmentType: string, # Optional.
        ///   jobStatus: {
        ///     succeeded: {
        ///       count: number, # Optional.
        ///       assets: [string], # Optional.
        ///     }, # Optional.
        ///     inProgress: DQAssetList, # Optional.
        ///     queued: DQAssetList, # Optional.
        ///     failed: DQAssetList, # Optional.
        ///     cancelled: DQAssetList, # Optional.
        ///     skipped: DQAssetList, # Optional.
        ///   }, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetScheduledAssessmentRunDetailsAsync(string accountId, string scheduleId, string runId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(scheduleId, nameof(scheduleId));
            Argument.AssertNotNullOrEmpty(runId, nameof(runId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.GetScheduledAssessmentRunDetails");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetScheduledAssessmentRunDetailsRequest(accountId, scheduleId, runId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="scheduleId"> The String to use. </param>
        /// <param name="runId"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/>, <paramref name="scheduleId"/> or <paramref name="runId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/>, <paramref name="scheduleId"/> or <paramref name="runId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetScheduledAssessmentRunDetails with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// Response response = client.GetScheduledAssessmentRunDetails("<accountId>", "<scheduleId>", "<runId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("scheduleId").ToString());
        /// Console.WriteLine(result.GetProperty("scheduleName").ToString());
        /// Console.WriteLine(result.GetProperty("triggerRunId").ToString());
        /// Console.WriteLine(result.GetProperty("triggerStatus").ToString());
        /// Console.WriteLine(result.GetProperty("triggerStartTime").ToString());
        /// Console.WriteLine(result.GetProperty("triggerLastUpdateTime").ToString());
        /// Console.WriteLine(result.GetProperty("assessmentType").ToString());
        /// Console.WriteLine(result.GetProperty("jobStatus").GetProperty("succeeded").GetProperty("count").ToString());
        /// Console.WriteLine(result.GetProperty("jobStatus").GetProperty("succeeded").GetProperty("assets")[0].ToString());
        /// Console.WriteLine(result.GetProperty("jobStatus").GetProperty("inProgress").GetProperty("count").ToString());
        /// Console.WriteLine(result.GetProperty("jobStatus").GetProperty("inProgress").GetProperty("assets")[0].ToString());
        /// Console.WriteLine(result.GetProperty("jobStatus").GetProperty("queued").GetProperty("count").ToString());
        /// Console.WriteLine(result.GetProperty("jobStatus").GetProperty("queued").GetProperty("assets")[0].ToString());
        /// Console.WriteLine(result.GetProperty("jobStatus").GetProperty("failed").GetProperty("count").ToString());
        /// Console.WriteLine(result.GetProperty("jobStatus").GetProperty("failed").GetProperty("assets")[0].ToString());
        /// Console.WriteLine(result.GetProperty("jobStatus").GetProperty("cancelled").GetProperty("count").ToString());
        /// Console.WriteLine(result.GetProperty("jobStatus").GetProperty("cancelled").GetProperty("assets")[0].ToString());
        /// Console.WriteLine(result.GetProperty("jobStatus").GetProperty("skipped").GetProperty("count").ToString());
        /// Console.WriteLine(result.GetProperty("jobStatus").GetProperty("skipped").GetProperty("assets")[0].ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ScheduleTriggerRunEntityAssetInfo</c>:
        /// <code>{
        ///   scheduleId: string, # Optional.
        ///   scheduleName: string, # Optional.
        ///   triggerRunId: string, # Optional.
        ///   triggerStatus: string, # Optional.
        ///   triggerStartTime: string (ISO 8601 Format), # Optional.
        ///   triggerLastUpdateTime: string (ISO 8601 Format), # Optional.
        ///   assessmentType: string, # Optional.
        ///   jobStatus: {
        ///     succeeded: {
        ///       count: number, # Optional.
        ///       assets: [string], # Optional.
        ///     }, # Optional.
        ///     inProgress: DQAssetList, # Optional.
        ///     queued: DQAssetList, # Optional.
        ///     failed: DQAssetList, # Optional.
        ///     cancelled: DQAssetList, # Optional.
        ///     skipped: DQAssetList, # Optional.
        ///   }, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetScheduledAssessmentRunDetails(string accountId, string scheduleId, string runId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(scheduleId, nameof(scheduleId));
            Argument.AssertNotNullOrEmpty(runId, nameof(runId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.GetScheduledAssessmentRunDetails");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetScheduledAssessmentRunDetailsRequest(accountId, scheduleId, runId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="scheduleId"> The String to use. </param>
        /// <param name="runId"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/>, <paramref name="scheduleId"/> or <paramref name="runId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/>, <paramref name="scheduleId"/> or <paramref name="runId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call CancelScheduledAssessmentRunAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// Response response = await client.CancelScheduledAssessmentRunAsync("<accountId>", "<scheduleId>", "<runId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> CancelScheduledAssessmentRunAsync(string accountId, string scheduleId, string runId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(scheduleId, nameof(scheduleId));
            Argument.AssertNotNullOrEmpty(runId, nameof(runId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.CancelScheduledAssessmentRun");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCancelScheduledAssessmentRunRequest(accountId, scheduleId, runId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="scheduleId"> The String to use. </param>
        /// <param name="runId"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/>, <paramref name="scheduleId"/> or <paramref name="runId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/>, <paramref name="scheduleId"/> or <paramref name="runId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call CancelScheduledAssessmentRun with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// Response response = client.CancelScheduledAssessmentRun("<accountId>", "<scheduleId>", "<runId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// </example>
        public virtual Response CancelScheduledAssessmentRun(string accountId, string scheduleId, string runId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(scheduleId, nameof(scheduleId));
            Argument.AssertNotNullOrEmpty(runId, nameof(runId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.CancelScheduledAssessmentRun");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCancelScheduledAssessmentRunRequest(accountId, scheduleId, runId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="scheduleId"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="runNow"> The Boolean to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/>, <paramref name="scheduleId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="scheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call UpdateScheduledAssessmentsPostAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.UpdateScheduledAssessmentsPostAsync("<accountId>", "<scheduleId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call UpdateScheduledAssessmentsPostAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {
        ///     scheduleId = "<scheduleId>",
        ///     scheduleName = "<scheduleName>",
        ///     description = "<description>",
        ///     recurrence = new {
        ///         frequency = "<frequency>",
        ///         interval = 1234,
        ///         startTime = "2022-05-10T18:57:31.2311892Z",
        ///         endTime = "2022-05-10T18:57:31.2311892Z",
        ///         schedule = new {},
        ///         timezone = "<timezone>",
        ///     },
        ///     datasources = new[] {
        ///         new {
        ///             datasourceKind = "<datasourceKind>",
        ///             datasourceName = "<datasourceName>",
        ///             includes = new[] {
        ///                 "<String>"
        ///             },
        ///             properties = new {},
        ///             credentials = new {
        ///                 credentialType = "AccountKey",
        ///                 referenceName = "<referenceName>",
        ///                 credentialProperties = new {},
        ///             },
        ///         }
        ///     },
        ///     scheduleStatus = "RUNNING",
        ///     runOnce = true,
        /// };
        /// 
        /// Response response = await client.UpdateScheduledAssessmentsPostAsync("<accountId>", "<scheduleId>", RequestContent.Create(data), true);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("scheduleId").ToString());
        /// Console.WriteLine(result.GetProperty("scheduleName").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("recurrence").GetProperty("frequency").ToString());
        /// Console.WriteLine(result.GetProperty("recurrence").GetProperty("interval").ToString());
        /// Console.WriteLine(result.GetProperty("recurrence").GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("recurrence").GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("recurrence").GetProperty("schedule").ToString());
        /// Console.WriteLine(result.GetProperty("recurrence").GetProperty("timezone").ToString());
        /// Console.WriteLine(result.GetProperty("datasources")[0].GetProperty("datasourceKind").ToString());
        /// Console.WriteLine(result.GetProperty("datasources")[0].GetProperty("datasourceName").ToString());
        /// Console.WriteLine(result.GetProperty("datasources")[0].GetProperty("includes")[0].ToString());
        /// Console.WriteLine(result.GetProperty("datasources")[0].GetProperty("properties").ToString());
        /// Console.WriteLine(result.GetProperty("datasources")[0].GetProperty("credentials").GetProperty("credentialType").ToString());
        /// Console.WriteLine(result.GetProperty("datasources")[0].GetProperty("credentials").GetProperty("referenceName").ToString());
        /// Console.WriteLine(result.GetProperty("datasources")[0].GetProperty("credentials").GetProperty("credentialProperties").ToString());
        /// Console.WriteLine(result.GetProperty("scheduleStatus").ToString());
        /// Console.WriteLine(result.GetProperty("runOnce").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>ScheduleMetadataAutoGenerated</c>:
        /// <code>{
        ///   scheduleId: string, # Optional.
        ///   scheduleName: string, # Optional.
        ///   description: string, # Optional.
        ///   recurrence: {
        ///     frequency: string, # Optional.
        ///     interval: number, # Optional.
        ///     startTime: string (ISO 8601 Format), # Optional.
        ///     endTime: string (ISO 8601 Format), # Optional.
        ///     schedule: any, # Optional. Anything
        ///     timezone: string, # Optional.
        ///   }, # Optional.
        ///   datasources: [
        ///     {
        ///       datasourceKind: string, # Optional.
        ///       datasourceName: string, # Optional.
        ///       includes: [string], # Optional.
        ///       properties: any, # Optional. Anything
        ///       credentials: {
        ///         credentialType: &quot;AccountKey&quot; | &quot;ServicePrincipal&quot; | &quot;BasicAuth&quot; | &quot;SqlAuth&quot; | &quot;AmazonARN&quot; | &quot;ConsumerKeyAuth&quot; | &quot;DelegatedAuth&quot; | &quot;ManagedIdentity&quot;, # Optional.
        ///         referenceName: string, # Optional.
        ///         credentialProperties: any, # Optional. Anything
        ///       }, # Optional.
        ///     }
        ///   ], # Optional.
        ///   scheduleStatus: &quot;RUNNING&quot; | &quot;PAUSED&quot; | &quot;DELETED&quot; | &quot;DELETING&quot; | &quot;TRIGGER_DELETED&quot; | &quot;PIPELINE_DELETED&quot;, # Optional.
        ///   runOnce: boolean, # Optional.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ScheduleMetadataAutoGenerated</c>:
        /// <code>{
        ///   scheduleId: string, # Optional.
        ///   scheduleName: string, # Optional.
        ///   description: string, # Optional.
        ///   recurrence: {
        ///     frequency: string, # Optional.
        ///     interval: number, # Optional.
        ///     startTime: string (ISO 8601 Format), # Optional.
        ///     endTime: string (ISO 8601 Format), # Optional.
        ///     schedule: any, # Optional. Anything
        ///     timezone: string, # Optional.
        ///   }, # Optional.
        ///   datasources: [
        ///     {
        ///       datasourceKind: string, # Optional.
        ///       datasourceName: string, # Optional.
        ///       includes: [string], # Optional.
        ///       properties: any, # Optional. Anything
        ///       credentials: {
        ///         credentialType: &quot;AccountKey&quot; | &quot;ServicePrincipal&quot; | &quot;BasicAuth&quot; | &quot;SqlAuth&quot; | &quot;AmazonARN&quot; | &quot;ConsumerKeyAuth&quot; | &quot;DelegatedAuth&quot; | &quot;ManagedIdentity&quot;, # Optional.
        ///         referenceName: string, # Optional.
        ///         credentialProperties: any, # Optional. Anything
        ///       }, # Optional.
        ///     }
        ///   ], # Optional.
        ///   scheduleStatus: &quot;RUNNING&quot; | &quot;PAUSED&quot; | &quot;DELETED&quot; | &quot;DELETING&quot; | &quot;TRIGGER_DELETED&quot; | &quot;PIPELINE_DELETED&quot;, # Optional.
        ///   runOnce: boolean, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> UpdateScheduledAssessmentsPostAsync(string accountId, string scheduleId, RequestContent content, bool? runNow = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(scheduleId, nameof(scheduleId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.UpdateScheduledAssessmentsPost");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateScheduledAssessmentsPostRequest(accountId, scheduleId, content, runNow, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="scheduleId"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="runNow"> The Boolean to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/>, <paramref name="scheduleId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="scheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call UpdateScheduledAssessmentsPost with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.UpdateScheduledAssessmentsPost("<accountId>", "<scheduleId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call UpdateScheduledAssessmentsPost with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {
        ///     scheduleId = "<scheduleId>",
        ///     scheduleName = "<scheduleName>",
        ///     description = "<description>",
        ///     recurrence = new {
        ///         frequency = "<frequency>",
        ///         interval = 1234,
        ///         startTime = "2022-05-10T18:57:31.2311892Z",
        ///         endTime = "2022-05-10T18:57:31.2311892Z",
        ///         schedule = new {},
        ///         timezone = "<timezone>",
        ///     },
        ///     datasources = new[] {
        ///         new {
        ///             datasourceKind = "<datasourceKind>",
        ///             datasourceName = "<datasourceName>",
        ///             includes = new[] {
        ///                 "<String>"
        ///             },
        ///             properties = new {},
        ///             credentials = new {
        ///                 credentialType = "AccountKey",
        ///                 referenceName = "<referenceName>",
        ///                 credentialProperties = new {},
        ///             },
        ///         }
        ///     },
        ///     scheduleStatus = "RUNNING",
        ///     runOnce = true,
        /// };
        /// 
        /// Response response = client.UpdateScheduledAssessmentsPost("<accountId>", "<scheduleId>", RequestContent.Create(data), true);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("scheduleId").ToString());
        /// Console.WriteLine(result.GetProperty("scheduleName").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("recurrence").GetProperty("frequency").ToString());
        /// Console.WriteLine(result.GetProperty("recurrence").GetProperty("interval").ToString());
        /// Console.WriteLine(result.GetProperty("recurrence").GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("recurrence").GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("recurrence").GetProperty("schedule").ToString());
        /// Console.WriteLine(result.GetProperty("recurrence").GetProperty("timezone").ToString());
        /// Console.WriteLine(result.GetProperty("datasources")[0].GetProperty("datasourceKind").ToString());
        /// Console.WriteLine(result.GetProperty("datasources")[0].GetProperty("datasourceName").ToString());
        /// Console.WriteLine(result.GetProperty("datasources")[0].GetProperty("includes")[0].ToString());
        /// Console.WriteLine(result.GetProperty("datasources")[0].GetProperty("properties").ToString());
        /// Console.WriteLine(result.GetProperty("datasources")[0].GetProperty("credentials").GetProperty("credentialType").ToString());
        /// Console.WriteLine(result.GetProperty("datasources")[0].GetProperty("credentials").GetProperty("referenceName").ToString());
        /// Console.WriteLine(result.GetProperty("datasources")[0].GetProperty("credentials").GetProperty("credentialProperties").ToString());
        /// Console.WriteLine(result.GetProperty("scheduleStatus").ToString());
        /// Console.WriteLine(result.GetProperty("runOnce").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>ScheduleMetadataAutoGenerated</c>:
        /// <code>{
        ///   scheduleId: string, # Optional.
        ///   scheduleName: string, # Optional.
        ///   description: string, # Optional.
        ///   recurrence: {
        ///     frequency: string, # Optional.
        ///     interval: number, # Optional.
        ///     startTime: string (ISO 8601 Format), # Optional.
        ///     endTime: string (ISO 8601 Format), # Optional.
        ///     schedule: any, # Optional. Anything
        ///     timezone: string, # Optional.
        ///   }, # Optional.
        ///   datasources: [
        ///     {
        ///       datasourceKind: string, # Optional.
        ///       datasourceName: string, # Optional.
        ///       includes: [string], # Optional.
        ///       properties: any, # Optional. Anything
        ///       credentials: {
        ///         credentialType: &quot;AccountKey&quot; | &quot;ServicePrincipal&quot; | &quot;BasicAuth&quot; | &quot;SqlAuth&quot; | &quot;AmazonARN&quot; | &quot;ConsumerKeyAuth&quot; | &quot;DelegatedAuth&quot; | &quot;ManagedIdentity&quot;, # Optional.
        ///         referenceName: string, # Optional.
        ///         credentialProperties: any, # Optional. Anything
        ///       }, # Optional.
        ///     }
        ///   ], # Optional.
        ///   scheduleStatus: &quot;RUNNING&quot; | &quot;PAUSED&quot; | &quot;DELETED&quot; | &quot;DELETING&quot; | &quot;TRIGGER_DELETED&quot; | &quot;PIPELINE_DELETED&quot;, # Optional.
        ///   runOnce: boolean, # Optional.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ScheduleMetadataAutoGenerated</c>:
        /// <code>{
        ///   scheduleId: string, # Optional.
        ///   scheduleName: string, # Optional.
        ///   description: string, # Optional.
        ///   recurrence: {
        ///     frequency: string, # Optional.
        ///     interval: number, # Optional.
        ///     startTime: string (ISO 8601 Format), # Optional.
        ///     endTime: string (ISO 8601 Format), # Optional.
        ///     schedule: any, # Optional. Anything
        ///     timezone: string, # Optional.
        ///   }, # Optional.
        ///   datasources: [
        ///     {
        ///       datasourceKind: string, # Optional.
        ///       datasourceName: string, # Optional.
        ///       includes: [string], # Optional.
        ///       properties: any, # Optional. Anything
        ///       credentials: {
        ///         credentialType: &quot;AccountKey&quot; | &quot;ServicePrincipal&quot; | &quot;BasicAuth&quot; | &quot;SqlAuth&quot; | &quot;AmazonARN&quot; | &quot;ConsumerKeyAuth&quot; | &quot;DelegatedAuth&quot; | &quot;ManagedIdentity&quot;, # Optional.
        ///         referenceName: string, # Optional.
        ///         credentialProperties: any, # Optional. Anything
        ///       }, # Optional.
        ///     }
        ///   ], # Optional.
        ///   scheduleStatus: &quot;RUNNING&quot; | &quot;PAUSED&quot; | &quot;DELETED&quot; | &quot;DELETING&quot; | &quot;TRIGGER_DELETED&quot; | &quot;PIPELINE_DELETED&quot;, # Optional.
        ///   runOnce: boolean, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response UpdateScheduledAssessmentsPost(string accountId, string scheduleId, RequestContent content, bool? runNow = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(scheduleId, nameof(scheduleId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.UpdateScheduledAssessmentsPost");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateScheduledAssessmentsPostRequest(accountId, scheduleId, content, runNow, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="scheduleId"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="scheduleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="scheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetScheduledAssessmentMetadataAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// Response response = await client.GetScheduledAssessmentMetadataAsync("<accountId>", "<scheduleId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("scheduleId").ToString());
        /// Console.WriteLine(result.GetProperty("scheduleName").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("recurrence").GetProperty("frequency").ToString());
        /// Console.WriteLine(result.GetProperty("recurrence").GetProperty("interval").ToString());
        /// Console.WriteLine(result.GetProperty("recurrence").GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("recurrence").GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("recurrence").GetProperty("schedule").ToString());
        /// Console.WriteLine(result.GetProperty("recurrence").GetProperty("timezone").ToString());
        /// Console.WriteLine(result.GetProperty("datasources")[0].GetProperty("datasourceKind").ToString());
        /// Console.WriteLine(result.GetProperty("datasources")[0].GetProperty("datasourceName").ToString());
        /// Console.WriteLine(result.GetProperty("datasources")[0].GetProperty("includes")[0].ToString());
        /// Console.WriteLine(result.GetProperty("datasources")[0].GetProperty("properties").ToString());
        /// Console.WriteLine(result.GetProperty("datasources")[0].GetProperty("credentials").GetProperty("credentialType").ToString());
        /// Console.WriteLine(result.GetProperty("datasources")[0].GetProperty("credentials").GetProperty("referenceName").ToString());
        /// Console.WriteLine(result.GetProperty("datasources")[0].GetProperty("credentials").GetProperty("credentialProperties").ToString());
        /// Console.WriteLine(result.GetProperty("scheduleStatus").ToString());
        /// Console.WriteLine(result.GetProperty("runOnce").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ScheduleMetadataAutoGenerated</c>:
        /// <code>{
        ///   scheduleId: string, # Optional.
        ///   scheduleName: string, # Optional.
        ///   description: string, # Optional.
        ///   recurrence: {
        ///     frequency: string, # Optional.
        ///     interval: number, # Optional.
        ///     startTime: string (ISO 8601 Format), # Optional.
        ///     endTime: string (ISO 8601 Format), # Optional.
        ///     schedule: any, # Optional. Anything
        ///     timezone: string, # Optional.
        ///   }, # Optional.
        ///   datasources: [
        ///     {
        ///       datasourceKind: string, # Optional.
        ///       datasourceName: string, # Optional.
        ///       includes: [string], # Optional.
        ///       properties: any, # Optional. Anything
        ///       credentials: {
        ///         credentialType: &quot;AccountKey&quot; | &quot;ServicePrincipal&quot; | &quot;BasicAuth&quot; | &quot;SqlAuth&quot; | &quot;AmazonARN&quot; | &quot;ConsumerKeyAuth&quot; | &quot;DelegatedAuth&quot; | &quot;ManagedIdentity&quot;, # Optional.
        ///         referenceName: string, # Optional.
        ///         credentialProperties: any, # Optional. Anything
        ///       }, # Optional.
        ///     }
        ///   ], # Optional.
        ///   scheduleStatus: &quot;RUNNING&quot; | &quot;PAUSED&quot; | &quot;DELETED&quot; | &quot;DELETING&quot; | &quot;TRIGGER_DELETED&quot; | &quot;PIPELINE_DELETED&quot;, # Optional.
        ///   runOnce: boolean, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetScheduledAssessmentMetadataAsync(string accountId, string scheduleId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(scheduleId, nameof(scheduleId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.GetScheduledAssessmentMetadata");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetScheduledAssessmentMetadataRequest(accountId, scheduleId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="scheduleId"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="scheduleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="scheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetScheduledAssessmentMetadata with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// Response response = client.GetScheduledAssessmentMetadata("<accountId>", "<scheduleId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("scheduleId").ToString());
        /// Console.WriteLine(result.GetProperty("scheduleName").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("recurrence").GetProperty("frequency").ToString());
        /// Console.WriteLine(result.GetProperty("recurrence").GetProperty("interval").ToString());
        /// Console.WriteLine(result.GetProperty("recurrence").GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("recurrence").GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("recurrence").GetProperty("schedule").ToString());
        /// Console.WriteLine(result.GetProperty("recurrence").GetProperty("timezone").ToString());
        /// Console.WriteLine(result.GetProperty("datasources")[0].GetProperty("datasourceKind").ToString());
        /// Console.WriteLine(result.GetProperty("datasources")[0].GetProperty("datasourceName").ToString());
        /// Console.WriteLine(result.GetProperty("datasources")[0].GetProperty("includes")[0].ToString());
        /// Console.WriteLine(result.GetProperty("datasources")[0].GetProperty("properties").ToString());
        /// Console.WriteLine(result.GetProperty("datasources")[0].GetProperty("credentials").GetProperty("credentialType").ToString());
        /// Console.WriteLine(result.GetProperty("datasources")[0].GetProperty("credentials").GetProperty("referenceName").ToString());
        /// Console.WriteLine(result.GetProperty("datasources")[0].GetProperty("credentials").GetProperty("credentialProperties").ToString());
        /// Console.WriteLine(result.GetProperty("scheduleStatus").ToString());
        /// Console.WriteLine(result.GetProperty("runOnce").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ScheduleMetadataAutoGenerated</c>:
        /// <code>{
        ///   scheduleId: string, # Optional.
        ///   scheduleName: string, # Optional.
        ///   description: string, # Optional.
        ///   recurrence: {
        ///     frequency: string, # Optional.
        ///     interval: number, # Optional.
        ///     startTime: string (ISO 8601 Format), # Optional.
        ///     endTime: string (ISO 8601 Format), # Optional.
        ///     schedule: any, # Optional. Anything
        ///     timezone: string, # Optional.
        ///   }, # Optional.
        ///   datasources: [
        ///     {
        ///       datasourceKind: string, # Optional.
        ///       datasourceName: string, # Optional.
        ///       includes: [string], # Optional.
        ///       properties: any, # Optional. Anything
        ///       credentials: {
        ///         credentialType: &quot;AccountKey&quot; | &quot;ServicePrincipal&quot; | &quot;BasicAuth&quot; | &quot;SqlAuth&quot; | &quot;AmazonARN&quot; | &quot;ConsumerKeyAuth&quot; | &quot;DelegatedAuth&quot; | &quot;ManagedIdentity&quot;, # Optional.
        ///         referenceName: string, # Optional.
        ///         credentialProperties: any, # Optional. Anything
        ///       }, # Optional.
        ///     }
        ///   ], # Optional.
        ///   scheduleStatus: &quot;RUNNING&quot; | &quot;PAUSED&quot; | &quot;DELETED&quot; | &quot;DELETING&quot; | &quot;TRIGGER_DELETED&quot; | &quot;PIPELINE_DELETED&quot;, # Optional.
        ///   runOnce: boolean, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetScheduledAssessmentMetadata(string accountId, string scheduleId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(scheduleId, nameof(scheduleId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.GetScheduledAssessmentMetadata");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetScheduledAssessmentMetadataRequest(accountId, scheduleId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="scheduleId"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="scheduleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="scheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteScheduledAssessmentsAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// Response response = await client.DeleteScheduledAssessmentsAsync("<accountId>", "<scheduleId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> DeleteScheduledAssessmentsAsync(string accountId, string scheduleId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(scheduleId, nameof(scheduleId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.DeleteScheduledAssessments");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteScheduledAssessmentsRequest(accountId, scheduleId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="scheduleId"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="scheduleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="scheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteScheduledAssessments with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// Response response = client.DeleteScheduledAssessments("<accountId>", "<scheduleId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// </example>
        public virtual Response DeleteScheduledAssessments(string accountId, string scheduleId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(scheduleId, nameof(scheduleId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.DeleteScheduledAssessments");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteScheduledAssessmentsRequest(accountId, scheduleId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="scheduleId"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="scheduleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="scheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call RunScheduledAssessmentsExternalAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// Response response = await client.RunScheduledAssessmentsExternalAsync("<accountId>", "<scheduleId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> RunScheduledAssessmentsExternalAsync(string accountId, string scheduleId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(scheduleId, nameof(scheduleId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.RunScheduledAssessmentsExternal");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRunScheduledAssessmentsExternalRequest(accountId, scheduleId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="scheduleId"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="scheduleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="scheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call RunScheduledAssessmentsExternal with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// Response response = client.RunScheduledAssessmentsExternal("<accountId>", "<scheduleId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// </example>
        public virtual Response RunScheduledAssessmentsExternal(string accountId, string scheduleId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(scheduleId, nameof(scheduleId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.RunScheduledAssessmentsExternal");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRunScheduledAssessmentsExternalRequest(accountId, scheduleId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetScheduledAssessmentsRunsFilteredAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.GetScheduledAssessmentsRunsFilteredAsync("<accountId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].ToString());
        /// ]]></code>
        /// This sample shows how to call GetScheduledAssessmentsRunsFilteredAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {
        ///     filters = new[] {
        ///         new {
        ///             operand = "<operand>",
        ///             operator = "<operator>",
        ///             values = new[] {
        ///                 "<String>"
        ///             },
        ///         }
        ///     },
        ///     lastUpdatedAfter = "2022-05-10T18:57:31.2311892Z",
        ///     lastUpdatedBefore = "2022-05-10T18:57:31.2311892Z",
        /// };
        /// 
        /// Response response = await client.GetScheduledAssessmentsRunsFilteredAsync("<accountId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("scheduleId").ToString());
        /// Console.WriteLine(result[0].GetProperty("scheduleName").ToString());
        /// Console.WriteLine(result[0].GetProperty("triggerRunId").ToString());
        /// Console.WriteLine(result[0].GetProperty("triggerStatus").ToString());
        /// Console.WriteLine(result[0].GetProperty("triggerStartTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("triggerLastUpdateTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("assessmentType").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>TableRepositoryQueryPayloadModel</c>:
        /// <code>{
        ///   filters: [
        ///     {
        ///       operand: string, # Optional.
        ///       operator: string, # Optional.
        ///       values: [string], # Optional.
        ///     }
        ///   ], # Optional.
        ///   lastUpdatedAfter: string (ISO 8601 Format), # Optional.
        ///   lastUpdatedBefore: string (ISO 8601 Format), # Optional.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ScheduleTriggerRunEntity</c>:
        /// <code>{
        ///   scheduleId: string, # Optional.
        ///   scheduleName: string, # Optional.
        ///   triggerRunId: string, # Optional.
        ///   triggerStatus: string, # Optional.
        ///   triggerStartTime: string (ISO 8601 Format), # Optional.
        ///   triggerLastUpdateTime: string (ISO 8601 Format), # Optional.
        ///   assessmentType: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetScheduledAssessmentsRunsFilteredAsync(string accountId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.GetScheduledAssessmentsRunsFiltered");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetScheduledAssessmentsRunsFilteredRequest(accountId, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetScheduledAssessmentsRunsFiltered with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.GetScheduledAssessmentsRunsFiltered("<accountId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].ToString());
        /// ]]></code>
        /// This sample shows how to call GetScheduledAssessmentsRunsFiltered with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {
        ///     filters = new[] {
        ///         new {
        ///             operand = "<operand>",
        ///             operator = "<operator>",
        ///             values = new[] {
        ///                 "<String>"
        ///             },
        ///         }
        ///     },
        ///     lastUpdatedAfter = "2022-05-10T18:57:31.2311892Z",
        ///     lastUpdatedBefore = "2022-05-10T18:57:31.2311892Z",
        /// };
        /// 
        /// Response response = client.GetScheduledAssessmentsRunsFiltered("<accountId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("scheduleId").ToString());
        /// Console.WriteLine(result[0].GetProperty("scheduleName").ToString());
        /// Console.WriteLine(result[0].GetProperty("triggerRunId").ToString());
        /// Console.WriteLine(result[0].GetProperty("triggerStatus").ToString());
        /// Console.WriteLine(result[0].GetProperty("triggerStartTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("triggerLastUpdateTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("assessmentType").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>TableRepositoryQueryPayloadModel</c>:
        /// <code>{
        ///   filters: [
        ///     {
        ///       operand: string, # Optional.
        ///       operator: string, # Optional.
        ///       values: [string], # Optional.
        ///     }
        ///   ], # Optional.
        ///   lastUpdatedAfter: string (ISO 8601 Format), # Optional.
        ///   lastUpdatedBefore: string (ISO 8601 Format), # Optional.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ScheduleTriggerRunEntity</c>:
        /// <code>{
        ///   scheduleId: string, # Optional.
        ///   scheduleName: string, # Optional.
        ///   triggerRunId: string, # Optional.
        ///   triggerStatus: string, # Optional.
        ///   triggerStartTime: string (ISO 8601 Format), # Optional.
        ///   triggerLastUpdateTime: string (ISO 8601 Format), # Optional.
        ///   assessmentType: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetScheduledAssessmentsRunsFiltered(string accountId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.GetScheduledAssessmentsRunsFiltered");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetScheduledAssessmentsRunsFilteredRequest(accountId, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="assetId"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;application/json-patch+json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="assetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="assetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetRulesTrendingsAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.GetRulesTrendingsAsync("<accountId>", "<assetId>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].ToString());
        /// ]]></code>
        /// This sample shows how to call GetRulesTrendingsAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {
        ///     jobCount = 1234,
        ///     ruleId = "<ruleId>",
        ///     start = 1234L,
        ///     end = 1234L,
        /// };
        /// 
        /// Response response = await client.GetRulesTrendingsAsync("<accountId>", "<assetId>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("ruleId").ToString());
        /// Console.WriteLine(result[0].GetProperty("scores")[0].GetProperty("jobTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("scores")[0].GetProperty("jobId").ToString());
        /// Console.WriteLine(result[0].GetProperty("scores")[0].GetProperty("score").ToString());
        /// Console.WriteLine(result[0].GetProperty("scores")[0].GetProperty("totalRows").ToString());
        /// Console.WriteLine(result[0].GetProperty("scores")[0].GetProperty("failedRows").ToString());
        /// Console.WriteLine(result[0].GetProperty("scores")[0].GetProperty("passedRows").ToString());
        /// Console.WriteLine(result[0].GetProperty("scores")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("scores")[0].GetProperty("status").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>RuleTrendingQueryPayload</c>:
        /// <code>{
        ///   jobCount: number, # Optional.
        ///   ruleId: string, # Optional.
        ///   start: number, # Optional.
        ///   end: number, # Optional.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>RuleTrending</c>:
        /// <code>{
        ///   ruleId: string, # Optional.
        ///   scores: [
        ///     {
        ///       jobTime: string (ISO 8601 Format), # Optional.
        ///       jobId: string, # Optional.
        ///       score: number, # Optional.
        ///       totalRows: number, # Optional.
        ///       failedRows: number, # Optional.
        ///       passedRows: number, # Optional.
        ///       description: string, # Optional.
        ///       status: string, # Optional.
        ///     }
        ///   ], # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetRulesTrendingsAsync(string accountId, string assetId, RequestContent content, ContentType contentType, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(assetId, nameof(assetId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.GetRulesTrendings");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetRulesTrendingsRequest(accountId, assetId, content, contentType, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="assetId"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;application/json-patch+json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="assetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="assetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetRulesTrendings with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.GetRulesTrendings("<accountId>", "<assetId>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].ToString());
        /// ]]></code>
        /// This sample shows how to call GetRulesTrendings with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {
        ///     jobCount = 1234,
        ///     ruleId = "<ruleId>",
        ///     start = 1234L,
        ///     end = 1234L,
        /// };
        /// 
        /// Response response = client.GetRulesTrendings("<accountId>", "<assetId>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("ruleId").ToString());
        /// Console.WriteLine(result[0].GetProperty("scores")[0].GetProperty("jobTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("scores")[0].GetProperty("jobId").ToString());
        /// Console.WriteLine(result[0].GetProperty("scores")[0].GetProperty("score").ToString());
        /// Console.WriteLine(result[0].GetProperty("scores")[0].GetProperty("totalRows").ToString());
        /// Console.WriteLine(result[0].GetProperty("scores")[0].GetProperty("failedRows").ToString());
        /// Console.WriteLine(result[0].GetProperty("scores")[0].GetProperty("passedRows").ToString());
        /// Console.WriteLine(result[0].GetProperty("scores")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("scores")[0].GetProperty("status").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>RuleTrendingQueryPayload</c>:
        /// <code>{
        ///   jobCount: number, # Optional.
        ///   ruleId: string, # Optional.
        ///   start: number, # Optional.
        ///   end: number, # Optional.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>RuleTrending</c>:
        /// <code>{
        ///   ruleId: string, # Optional.
        ///   scores: [
        ///     {
        ///       jobTime: string (ISO 8601 Format), # Optional.
        ///       jobId: string, # Optional.
        ///       score: number, # Optional.
        ///       totalRows: number, # Optional.
        ///       failedRows: number, # Optional.
        ///       passedRows: number, # Optional.
        ///       description: string, # Optional.
        ///       status: string, # Optional.
        ///     }
        ///   ], # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetRulesTrendings(string accountId, string assetId, RequestContent content, ContentType contentType, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(assetId, nameof(assetId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.GetRulesTrendings");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetRulesTrendingsRequest(accountId, assetId, content, contentType, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="assetId"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;application/json-patch+json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="assetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="assetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetRulesTrendingsByRuleIdAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.GetRulesTrendingsByRuleIdAsync("<accountId>", "<assetId>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call GetRulesTrendingsByRuleIdAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {
        ///     jobCount = 1234,
        ///     ruleId = "<ruleId>",
        ///     start = 1234L,
        ///     end = 1234L,
        /// };
        /// 
        /// Response response = await client.GetRulesTrendingsByRuleIdAsync("<accountId>", "<assetId>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("ruleId").ToString());
        /// Console.WriteLine(result.GetProperty("scores")[0].GetProperty("jobTime").ToString());
        /// Console.WriteLine(result.GetProperty("scores")[0].GetProperty("jobId").ToString());
        /// Console.WriteLine(result.GetProperty("scores")[0].GetProperty("score").ToString());
        /// Console.WriteLine(result.GetProperty("scores")[0].GetProperty("totalRows").ToString());
        /// Console.WriteLine(result.GetProperty("scores")[0].GetProperty("failedRows").ToString());
        /// Console.WriteLine(result.GetProperty("scores")[0].GetProperty("passedRows").ToString());
        /// Console.WriteLine(result.GetProperty("scores")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("scores")[0].GetProperty("status").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>RuleTrendingQueryPayload</c>:
        /// <code>{
        ///   jobCount: number, # Optional.
        ///   ruleId: string, # Optional.
        ///   start: number, # Optional.
        ///   end: number, # Optional.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>RuleTrending</c>:
        /// <code>{
        ///   ruleId: string, # Optional.
        ///   scores: [
        ///     {
        ///       jobTime: string (ISO 8601 Format), # Optional.
        ///       jobId: string, # Optional.
        ///       score: number, # Optional.
        ///       totalRows: number, # Optional.
        ///       failedRows: number, # Optional.
        ///       passedRows: number, # Optional.
        ///       description: string, # Optional.
        ///       status: string, # Optional.
        ///     }
        ///   ], # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetRulesTrendingsByRuleIdAsync(string accountId, string assetId, RequestContent content, ContentType contentType, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(assetId, nameof(assetId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.GetRulesTrendingsByRuleId");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetRulesTrendingsByRuleIdRequest(accountId, assetId, content, contentType, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="assetId"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;application/json-patch+json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="assetId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="assetId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetRulesTrendingsByRuleId with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.GetRulesTrendingsByRuleId("<accountId>", "<assetId>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call GetRulesTrendingsByRuleId with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {
        ///     jobCount = 1234,
        ///     ruleId = "<ruleId>",
        ///     start = 1234L,
        ///     end = 1234L,
        /// };
        /// 
        /// Response response = client.GetRulesTrendingsByRuleId("<accountId>", "<assetId>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("ruleId").ToString());
        /// Console.WriteLine(result.GetProperty("scores")[0].GetProperty("jobTime").ToString());
        /// Console.WriteLine(result.GetProperty("scores")[0].GetProperty("jobId").ToString());
        /// Console.WriteLine(result.GetProperty("scores")[0].GetProperty("score").ToString());
        /// Console.WriteLine(result.GetProperty("scores")[0].GetProperty("totalRows").ToString());
        /// Console.WriteLine(result.GetProperty("scores")[0].GetProperty("failedRows").ToString());
        /// Console.WriteLine(result.GetProperty("scores")[0].GetProperty("passedRows").ToString());
        /// Console.WriteLine(result.GetProperty("scores")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("scores")[0].GetProperty("status").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>RuleTrendingQueryPayload</c>:
        /// <code>{
        ///   jobCount: number, # Optional.
        ///   ruleId: string, # Optional.
        ///   start: number, # Optional.
        ///   end: number, # Optional.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>RuleTrending</c>:
        /// <code>{
        ///   ruleId: string, # Optional.
        ///   scores: [
        ///     {
        ///       jobTime: string (ISO 8601 Format), # Optional.
        ///       jobId: string, # Optional.
        ///       score: number, # Optional.
        ///       totalRows: number, # Optional.
        ///       failedRows: number, # Optional.
        ///       passedRows: number, # Optional.
        ///       description: string, # Optional.
        ///       status: string, # Optional.
        ///     }
        ///   ], # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetRulesTrendingsByRuleId(string accountId, string assetId, RequestContent content, ContentType contentType, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(assetId, nameof(assetId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.GetRulesTrendingsByRuleId");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetRulesTrendingsByRuleIdRequest(accountId, assetId, content, contentType, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;application/json-patch+json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call ValidateAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.ValidateAsync("<accountId>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call ValidateAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {
        ///     type = "<type>",
        ///     properties = new {
        ///         query = "<query>",
        ///         inputSchemas = new[] {
        ///             new {
        ///                 name = "<name>",
        ///                 columns = new[] {
        ///                     new {
        ///                         name = "<name>",
        ///                         type = "<type>",
        ///                     }
        ///                 },
        ///             }
        ///         },
        ///     },
        /// };
        /// 
        /// Response response = await client.ValidateAsync("<accountId>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("outputSchema")[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("outputSchema")[0].GetProperty("type").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>ViewSchemaRequest</c>:
        /// <code>{
        ///   type: string, # Optional.
        ///   properties: {
        ///     query: string, # Optional.
        ///     inputSchemas: [
        ///       {
        ///         name: string, # Optional.
        ///         columns: [
        ///           {
        ///             name: string, # Optional.
        ///             type: string, # Optional.
        ///           }
        ///         ], # Optional.
        ///       }
        ///     ], # Optional.
        ///   }, # Optional.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ViewSchemaResponse</c>:
        /// <code>{
        ///   outputSchema: [
        ///     {
        ///       name: string, # Optional.
        ///       type: string, # Optional.
        ///     }
        ///   ], # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> ValidateAsync(string accountId, RequestContent content, ContentType contentType, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.Validate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateValidateRequest(accountId, content, contentType, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;application/json-patch+json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call Validate with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.Validate("<accountId>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call Validate with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {
        ///     type = "<type>",
        ///     properties = new {
        ///         query = "<query>",
        ///         inputSchemas = new[] {
        ///             new {
        ///                 name = "<name>",
        ///                 columns = new[] {
        ///                     new {
        ///                         name = "<name>",
        ///                         type = "<type>",
        ///                     }
        ///                 },
        ///             }
        ///         },
        ///     },
        /// };
        /// 
        /// Response response = client.Validate("<accountId>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("outputSchema")[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("outputSchema")[0].GetProperty("type").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>ViewSchemaRequest</c>:
        /// <code>{
        ///   type: string, # Optional.
        ///   properties: {
        ///     query: string, # Optional.
        ///     inputSchemas: [
        ///       {
        ///         name: string, # Optional.
        ///         columns: [
        ///           {
        ///             name: string, # Optional.
        ///             type: string, # Optional.
        ///           }
        ///         ], # Optional.
        ///       }
        ///     ], # Optional.
        ///   }, # Optional.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ViewSchemaResponse</c>:
        /// <code>{
        ///   outputSchema: [
        ///     {
        ///       name: string, # Optional.
        ///       type: string, # Optional.
        ///     }
        ///   ], # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response Validate(string accountId, RequestContent content, ContentType contentType, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.Validate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateValidateRequest(accountId, content, contentType, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="viewSourceName"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="viewSourceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="viewSourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call CreateViewAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.CreateViewAsync("<accountId>", "<viewSourceName>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call CreateViewAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {
        ///     attributes = new {
        ///         name = "<name>",
        ///         description = "<description>",
        ///     },
        ///     scriptType = "DSL",
        ///     script = "<script>",
        ///     assets = new[] {
        ///         new {
        ///             guid = "<guid>",
        ///             name = "<name>",
        ///             schema = new[] {
        ///                 new {
        ///                     name = "<name>",
        ///                     type = "<type>",
        ///                 }
        ///             },
        ///         }
        ///     },
        ///     schema = new[] {
        ///         new {
        ///             name = "<name>",
        ///             type = "<type>",
        ///         }
        ///     },
        ///     guid = "<guid>",
        /// };
        /// 
        /// Response response = await client.CreateViewAsync("<accountId>", "<viewSourceName>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>DataQualityViewAutoGenerated</c>:
        /// <code>{
        ///   attributes: {
        ///     name: string, # Optional.
        ///     description: string, # Optional.
        ///     qualifiedName: string, # Optional.
        ///   }, # Optional.
        ///   scriptType: &quot;DSL&quot; | &quot;SQL&quot;, # Optional.
        ///   script: string, # Optional.
        ///   assets: [
        ///     {
        ///       guid: string, # Optional.
        ///       name: string, # Optional.
        ///       schema: [
        ///         {
        ///           name: string, # Optional.
        ///           type: string, # Optional.
        ///         }
        ///       ], # Optional.
        ///     }
        ///   ], # Optional.
        ///   schema: [Schema], # Optional.
        ///   guid: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> CreateViewAsync(string accountId, string viewSourceName, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(viewSourceName, nameof(viewSourceName));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.CreateView");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateViewRequest(accountId, viewSourceName, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="viewSourceName"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="viewSourceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="viewSourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call CreateView with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.CreateView("<accountId>", "<viewSourceName>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call CreateView with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {
        ///     attributes = new {
        ///         name = "<name>",
        ///         description = "<description>",
        ///     },
        ///     scriptType = "DSL",
        ///     script = "<script>",
        ///     assets = new[] {
        ///         new {
        ///             guid = "<guid>",
        ///             name = "<name>",
        ///             schema = new[] {
        ///                 new {
        ///                     name = "<name>",
        ///                     type = "<type>",
        ///                 }
        ///             },
        ///         }
        ///     },
        ///     schema = new[] {
        ///         new {
        ///             name = "<name>",
        ///             type = "<type>",
        ///         }
        ///     },
        ///     guid = "<guid>",
        /// };
        /// 
        /// Response response = client.CreateView("<accountId>", "<viewSourceName>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>DataQualityViewAutoGenerated</c>:
        /// <code>{
        ///   attributes: {
        ///     name: string, # Optional.
        ///     description: string, # Optional.
        ///     qualifiedName: string, # Optional.
        ///   }, # Optional.
        ///   scriptType: &quot;DSL&quot; | &quot;SQL&quot;, # Optional.
        ///   script: string, # Optional.
        ///   assets: [
        ///     {
        ///       guid: string, # Optional.
        ///       name: string, # Optional.
        ///       schema: [
        ///         {
        ///           name: string, # Optional.
        ///           type: string, # Optional.
        ///         }
        ///       ], # Optional.
        ///     }
        ///   ], # Optional.
        ///   schema: [Schema], # Optional.
        ///   guid: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response CreateView(string accountId, string viewSourceName, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(viewSourceName, nameof(viewSourceName));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.CreateView");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateViewRequest(accountId, viewSourceName, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="viewId"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="viewId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="viewId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetViewAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// Response response = await client.GetViewAsync("<accountId>", "<viewId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("attributes").GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("attributes").GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("attributes").GetProperty("qualifiedName").ToString());
        /// Console.WriteLine(result.GetProperty("scriptType").ToString());
        /// Console.WriteLine(result.GetProperty("script").ToString());
        /// Console.WriteLine(result.GetProperty("assets")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("assets")[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("assets")[0].GetProperty("schema")[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("assets")[0].GetProperty("schema")[0].GetProperty("type").ToString());
        /// Console.WriteLine(result.GetProperty("schema")[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("schema")[0].GetProperty("type").ToString());
        /// Console.WriteLine(result.GetProperty("guid").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>DataQualityViewAutoGenerated</c>:
        /// <code>{
        ///   attributes: {
        ///     name: string, # Optional.
        ///     description: string, # Optional.
        ///     qualifiedName: string, # Optional.
        ///   }, # Optional.
        ///   scriptType: &quot;DSL&quot; | &quot;SQL&quot;, # Optional.
        ///   script: string, # Optional.
        ///   assets: [
        ///     {
        ///       guid: string, # Optional.
        ///       name: string, # Optional.
        ///       schema: [
        ///         {
        ///           name: string, # Optional.
        ///           type: string, # Optional.
        ///         }
        ///       ], # Optional.
        ///     }
        ///   ], # Optional.
        ///   schema: [Schema], # Optional.
        ///   guid: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetViewAsync(string accountId, string viewId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(viewId, nameof(viewId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.GetView");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetViewRequest(accountId, viewId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="viewId"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="viewId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="viewId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetView with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// Response response = client.GetView("<accountId>", "<viewId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("attributes").GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("attributes").GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("attributes").GetProperty("qualifiedName").ToString());
        /// Console.WriteLine(result.GetProperty("scriptType").ToString());
        /// Console.WriteLine(result.GetProperty("script").ToString());
        /// Console.WriteLine(result.GetProperty("assets")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("assets")[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("assets")[0].GetProperty("schema")[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("assets")[0].GetProperty("schema")[0].GetProperty("type").ToString());
        /// Console.WriteLine(result.GetProperty("schema")[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("schema")[0].GetProperty("type").ToString());
        /// Console.WriteLine(result.GetProperty("guid").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>DataQualityViewAutoGenerated</c>:
        /// <code>{
        ///   attributes: {
        ///     name: string, # Optional.
        ///     description: string, # Optional.
        ///     qualifiedName: string, # Optional.
        ///   }, # Optional.
        ///   scriptType: &quot;DSL&quot; | &quot;SQL&quot;, # Optional.
        ///   script: string, # Optional.
        ///   assets: [
        ///     {
        ///       guid: string, # Optional.
        ///       name: string, # Optional.
        ///       schema: [
        ///         {
        ///           name: string, # Optional.
        ///           type: string, # Optional.
        ///         }
        ///       ], # Optional.
        ///     }
        ///   ], # Optional.
        ///   schema: [Schema], # Optional.
        ///   guid: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetView(string accountId, string viewId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(viewId, nameof(viewId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.GetView");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetViewRequest(accountId, viewId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="viewId"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="viewId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="viewId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteViewAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// Response response = await client.DeleteViewAsync("<accountId>", "<viewId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> DeleteViewAsync(string accountId, string viewId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(viewId, nameof(viewId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.DeleteView");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteViewRequest(accountId, viewId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="viewId"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="viewId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="viewId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteView with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// Response response = client.DeleteView("<accountId>", "<viewId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// </example>
        public virtual Response DeleteView(string accountId, string viewId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(viewId, nameof(viewId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.DeleteView");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteViewRequest(accountId, viewId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="viewId"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="viewId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="viewId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call UpdateViewAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.UpdateViewAsync("<accountId>", "<viewId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call UpdateViewAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {
        ///     attributes = new {
        ///         name = "<name>",
        ///         description = "<description>",
        ///     },
        ///     scriptType = "DSL",
        ///     script = "<script>",
        ///     assets = new[] {
        ///         new {
        ///             guid = "<guid>",
        ///             name = "<name>",
        ///             schema = new[] {
        ///                 new {
        ///                     name = "<name>",
        ///                     type = "<type>",
        ///                 }
        ///             },
        ///         }
        ///     },
        ///     schema = new[] {
        ///         new {
        ///             name = "<name>",
        ///             type = "<type>",
        ///         }
        ///     },
        ///     guid = "<guid>",
        /// };
        /// 
        /// Response response = await client.UpdateViewAsync("<accountId>", "<viewId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>DataQualityViewAutoGenerated</c>:
        /// <code>{
        ///   attributes: {
        ///     name: string, # Optional.
        ///     description: string, # Optional.
        ///     qualifiedName: string, # Optional.
        ///   }, # Optional.
        ///   scriptType: &quot;DSL&quot; | &quot;SQL&quot;, # Optional.
        ///   script: string, # Optional.
        ///   assets: [
        ///     {
        ///       guid: string, # Optional.
        ///       name: string, # Optional.
        ///       schema: [
        ///         {
        ///           name: string, # Optional.
        ///           type: string, # Optional.
        ///         }
        ///       ], # Optional.
        ///     }
        ///   ], # Optional.
        ///   schema: [Schema], # Optional.
        ///   guid: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> UpdateViewAsync(string accountId, string viewId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(viewId, nameof(viewId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.UpdateView");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateViewRequest(accountId, viewId, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="viewId"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="viewId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="viewId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call UpdateView with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.UpdateView("<accountId>", "<viewId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call UpdateView with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {
        ///     attributes = new {
        ///         name = "<name>",
        ///         description = "<description>",
        ///     },
        ///     scriptType = "DSL",
        ///     script = "<script>",
        ///     assets = new[] {
        ///         new {
        ///             guid = "<guid>",
        ///             name = "<name>",
        ///             schema = new[] {
        ///                 new {
        ///                     name = "<name>",
        ///                     type = "<type>",
        ///                 }
        ///             },
        ///         }
        ///     },
        ///     schema = new[] {
        ///         new {
        ///             name = "<name>",
        ///             type = "<type>",
        ///         }
        ///     },
        ///     guid = "<guid>",
        /// };
        /// 
        /// Response response = client.UpdateView("<accountId>", "<viewId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>DataQualityViewAutoGenerated</c>:
        /// <code>{
        ///   attributes: {
        ///     name: string, # Optional.
        ///     description: string, # Optional.
        ///     qualifiedName: string, # Optional.
        ///   }, # Optional.
        ///   scriptType: &quot;DSL&quot; | &quot;SQL&quot;, # Optional.
        ///   script: string, # Optional.
        ///   assets: [
        ///     {
        ///       guid: string, # Optional.
        ///       name: string, # Optional.
        ///       schema: [
        ///         {
        ///           name: string, # Optional.
        ///           type: string, # Optional.
        ///         }
        ///       ], # Optional.
        ///     }
        ///   ], # Optional.
        ///   schema: [Schema], # Optional.
        ///   guid: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response UpdateView(string accountId, string viewId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(viewId, nameof(viewId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.UpdateView");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateViewRequest(accountId, viewId, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call CreateViewSourceAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.CreateViewSourceAsync("<accountId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call CreateViewSourceAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {
        ///     kind = "<kind>",
        ///     name = "<name>",
        ///     properties = new {
        ///         description = "<description>",
        ///         collection = new {
        ///             type = "<type>",
        ///             referenceName = "<referenceName>",
        ///         },
        ///     },
        /// };
        /// 
        /// Response response = await client.CreateViewSourceAsync("<accountId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>ViewSource</c>:
        /// <code>{
        ///   kind: string, # Optional.
        ///   name: string, # Optional.
        ///   properties: {
        ///     description: string, # Optional.
        ///     collection: {
        ///       type: string, # Optional.
        ///       referenceName: string, # Optional.
        ///     }, # Optional.
        ///   }, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> CreateViewSourceAsync(string accountId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.CreateViewSource");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateViewSourceRequest(accountId, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call CreateViewSource with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.CreateViewSource("<accountId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call CreateViewSource with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// var data = new {
        ///     kind = "<kind>",
        ///     name = "<name>",
        ///     properties = new {
        ///         description = "<description>",
        ///         collection = new {
        ///             type = "<type>",
        ///             referenceName = "<referenceName>",
        ///         },
        ///     },
        /// };
        /// 
        /// Response response = client.CreateViewSource("<accountId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>ViewSource</c>:
        /// <code>{
        ///   kind: string, # Optional.
        ///   name: string, # Optional.
        ///   properties: {
        ///     description: string, # Optional.
        ///     collection: {
        ///       type: string, # Optional.
        ///       referenceName: string, # Optional.
        ///     }, # Optional.
        ///   }, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response CreateViewSource(string accountId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.CreateViewSource");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateViewSourceRequest(accountId, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetViewSourcesAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// Response response = await client.GetViewSourcesAsync("<accountId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("name").ToString());
        /// Console.WriteLine(result[0].GetProperty("parentCollection").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ViewSourceDTO</c>:
        /// <code>{
        ///   name: string, # Optional.
        ///   parentCollection: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetViewSourcesAsync(string accountId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.GetViewSources");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetViewSourcesRequest(accountId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetViewSources with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// Response response = client.GetViewSources("<accountId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("name").ToString());
        /// Console.WriteLine(result[0].GetProperty("parentCollection").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ViewSourceDTO</c>:
        /// <code>{
        ///   name: string, # Optional.
        ///   parentCollection: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetViewSources(string accountId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.GetViewSources");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetViewSourcesRequest(accountId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="source"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="source"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="source"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call CheckViewSourceNameAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// Response response = await client.CheckViewSourceNameAsync("<accountId>", "<source>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> CheckViewSourceNameAsync(string accountId, string source, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(source, nameof(source));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.CheckViewSourceName");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCheckViewSourceNameRequest(accountId, source, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="source"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="source"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="source"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call CheckViewSourceName with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// Response response = client.CheckViewSourceName("<accountId>", "<source>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// </example>
        public virtual Response CheckViewSourceName(string accountId, string source, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(source, nameof(source));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.CheckViewSourceName");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCheckViewSourceNameRequest(accountId, source, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="source"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="source"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="source"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetViewSourceAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// Response response = await client.GetViewSourceAsync("<accountId>", "<source>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("views")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("views")[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("views")[0].GetProperty("updatedTime").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("createdAt").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("lastModifiedAt").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("collection").GetProperty("type").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("collection").GetProperty("referenceName").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ViewSourceDetail</c>:
        /// <code>{
        ///   views: [
        ///     {
        ///       id: string, # Optional.
        ///       name: string, # Optional.
        ///       updatedTime: number, # Optional.
        ///     }
        ///   ], # Optional.
        ///   name: string, # Optional.
        ///   properties: {
        ///     createdAt: string, # Optional.
        ///     lastModifiedAt: string, # Optional.
        ///     description: string, # Optional.
        ///     collection: {
        ///       type: string, # Optional.
        ///       referenceName: string, # Optional.
        ///     }, # Optional.
        ///   }, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetViewSourceAsync(string accountId, string source, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(source, nameof(source));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.GetViewSource");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetViewSourceRequest(accountId, source, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="source"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="source"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="source"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetViewSource with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// Response response = client.GetViewSource("<accountId>", "<source>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("views")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("views")[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("views")[0].GetProperty("updatedTime").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("createdAt").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("lastModifiedAt").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("collection").GetProperty("type").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("collection").GetProperty("referenceName").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ViewSourceDetail</c>:
        /// <code>{
        ///   views: [
        ///     {
        ///       id: string, # Optional.
        ///       name: string, # Optional.
        ///       updatedTime: number, # Optional.
        ///     }
        ///   ], # Optional.
        ///   name: string, # Optional.
        ///   properties: {
        ///     createdAt: string, # Optional.
        ///     lastModifiedAt: string, # Optional.
        ///     description: string, # Optional.
        ///     collection: {
        ///       type: string, # Optional.
        ///       referenceName: string, # Optional.
        ///     }, # Optional.
        ///   }, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetViewSource(string accountId, string source, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(source, nameof(source));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.GetViewSource");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetViewSourceRequest(accountId, source, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="viewSourceName"> The String to use. </param>
        /// <param name="viewName"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/>, <paramref name="viewSourceName"/> or <paramref name="viewName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/>, <paramref name="viewSourceName"/> or <paramref name="viewName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call CheckUniqueViewNameAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// Response response = await client.CheckUniqueViewNameAsync("<accountId>", "<viewSourceName>", "<viewName>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> CheckUniqueViewNameAsync(string accountId, string viewSourceName, string viewName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(viewSourceName, nameof(viewSourceName));
            Argument.AssertNotNullOrEmpty(viewName, nameof(viewName));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.CheckUniqueViewName");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCheckUniqueViewNameRequest(accountId, viewSourceName, viewName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="accountId"> The String to use. </param>
        /// <param name="viewSourceName"> The String to use. </param>
        /// <param name="viewName"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/>, <paramref name="viewSourceName"/> or <paramref name="viewName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/>, <paramref name="viewSourceName"/> or <paramref name="viewName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call CheckUniqueViewName with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PurviewShareClient(credential);
        /// 
        /// Response response = client.CheckUniqueViewName("<accountId>", "<viewSourceName>", "<viewName>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// </example>
        public virtual Response CheckUniqueViewName(string accountId, string viewSourceName, string viewName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(viewSourceName, nameof(viewSourceName));
            Argument.AssertNotNullOrEmpty(viewName, nameof(viewName));

            using var scope = ClientDiagnostics.CreateScope("PurviewShareClient.CheckUniqueViewName");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCheckUniqueViewNameRequest(accountId, viewSourceName, viewName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateCreateAlertRequest(string accountId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier201);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/alerts", false);
            uri.AppendQuery("api-version", "2022-09-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetAllMatchedAlertsRequest(string accountId, string level, string scopeId, bool? skipDetails, string skipToken, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/alerts", false);
            if (level != null)
            {
                uri.AppendQuery("Level", level, true);
            }
            if (scopeId != null)
            {
                uri.AppendQuery("ScopeId", scopeId, true);
            }
            if (skipDetails != null)
            {
                uri.AppendQuery("SkipDetails", skipDetails.Value, true);
            }
            if (skipToken != null)
            {
                uri.AppendQuery("SkipToken", skipToken, true);
            }
            uri.AppendQuery("api-version", "2022-09-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetAlertDetailsRequest(string accountId, string alertId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/alerts/", false);
            uri.AppendPath(alertId, true);
            uri.AppendQuery("api-version", "2022-09-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateUpdateAlertRequest(string accountId, string alertId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/alerts/", false);
            uri.AppendPath(alertId, true);
            uri.AppendQuery("api-version", "2022-09-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteAlertRequest(string accountId, string alertId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/alerts/", false);
            uri.AppendPath(alertId, true);
            uri.AppendQuery("api-version", "2022-09-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCheckAlertNameScopeUniquenessRequest(string accountId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/alerts/exist", false);
            uri.AppendQuery("api-version", "2022-09-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateCreateRulesRequest(string accountId, string assetId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/assets/", false);
            uri.AppendPath(assetId, true);
            uri.AppendPath("/rules", false);
            uri.AppendQuery("api-version", "2022-09-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetRulesRequest(string accountId, string assetId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/assets/", false);
            uri.AppendPath(assetId, true);
            uri.AppendPath("/rules", false);
            uri.AppendQuery("api-version", "2022-09-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateUpdateRulesRequest(string accountId, string assetId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/assets/", false);
            uri.AppendPath(assetId, true);
            uri.AppendPath("/rules", false);
            uri.AppendQuery("api-version", "2022-09-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateSetFavouriteFieldsRequest(string accountId, string assetId, RequestContent content, string dataSourceFQN, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/assets/", false);
            uri.AppendPath(assetId, true);
            uri.AppendPath("/favourite-fields", false);
            if (dataSourceFQN != null)
            {
                uri.AppendQuery("DataSourceFQN", dataSourceFQN, true);
            }
            uri.AppendQuery("api-version", "2022-09-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateSubmitJobRequest(string accountId, string assetId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/assets/", false);
            uri.AppendPath(assetId, true);
            uri.AppendPath("/assessments", false);
            uri.AppendQuery("api-version", "2022-09-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetAssetRunMetadataRequest(string accountId, string assetId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/assets/", false);
            uri.AppendPath(assetId, true);
            uri.AppendPath("/assessments", false);
            uri.AppendQuery("api-version", "2022-09-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetJobStatusRequest(string accountId, string assetId, Guid assessmentId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/assets/", false);
            uri.AppendPath(assetId, true);
            uri.AppendPath("/assessments/", false);
            uri.AppendPath(assessmentId, true);
            uri.AppendPath("/status", false);
            uri.AppendQuery("api-version", "2022-09-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetJobRunRequest(string accountId, string assetId, string assessmentId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/assets/", false);
            uri.AppendPath(assetId, true);
            uri.AppendPath("/assessments/", false);
            uri.AppendPath(assessmentId, true);
            uri.AppendPath("/scores", false);
            uri.AppendQuery("api-version", "2022-09-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetJobRulesRequest(string accountId, string assetId, string assessmentId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/assets/", false);
            uri.AppendPath(assetId, true);
            uri.AppendPath("/assessments/", false);
            uri.AppendPath(assessmentId, true);
            uri.AppendPath("/rules", false);
            uri.AppendQuery("api-version", "2022-09-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateDownloadJobErrorFileRequest(string accountId, string assetId, string assessmentId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/assets/", false);
            uri.AppendPath(assetId, true);
            uri.AppendPath("/assessments/", false);
            uri.AppendPath(assessmentId, true);
            uri.AppendPath("/errorfile", false);
            uri.AppendQuery("api-version", "2022-09-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "text/csv, application/json");
            return message;
        }

        internal HttpMessage CreateCancelJobRequest(string accountId, string assetId, Guid assessmentId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/assets/", false);
            uri.AppendPath(assetId, true);
            uri.AppendPath("/assessments/", false);
            uri.AppendPath(assessmentId, true);
            uri.AppendPath("/cancel", false);
            uri.AppendQuery("api-version", "2022-09-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCreateScheduledAssessmentsRequest(string accountId, RequestContent content, bool? runNow, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier201);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/assessments/schedules", false);
            if (runNow != null)
            {
                uri.AppendQuery("runNow", runNow.Value, true);
            }
            uri.AppendQuery("api-version", "2022-09-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetScheduledAssessmentsRequest(string accountId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/assessments/schedules", false);
            uri.AppendQuery("api-version", "2022-09-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateExistsScheduledAssessmentRequest(string accountId, string scheduleName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Head;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/assessments/schedules/names/", false);
            uri.AppendPath(scheduleName, true);
            uri.AppendQuery("api-version", "2022-09-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetAllScheduleNamesRequest(string accountId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/assessments/schedules/scheduleNames", false);
            uri.AppendQuery("api-version", "2022-09-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetScheduledAssessmentsRunsRequest(string accountId, string scheduleId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/assessments/schedules/", false);
            uri.AppendPath(scheduleId, true);
            uri.AppendPath("/runs", false);
            uri.AppendQuery("api-version", "2022-09-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetScheduledAssessmentsRunsBulkStatusRequest(string accountId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/assessments/schedules/runs", false);
            uri.AppendQuery("api-version", "2022-09-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetScheduledAssessmentRunDetailsRequest(string accountId, string scheduleId, string runId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/assessments/schedules/", false);
            uri.AppendPath(scheduleId, true);
            uri.AppendPath("/runs/", false);
            uri.AppendPath(runId, true);
            uri.AppendQuery("api-version", "2022-09-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCancelScheduledAssessmentRunRequest(string accountId, string scheduleId, string runId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/assessments/schedules/", false);
            uri.AppendPath(scheduleId, true);
            uri.AppendPath("/runs/", false);
            uri.AppendPath(runId, true);
            uri.AppendPath("/cancel", false);
            uri.AppendQuery("api-version", "2022-09-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateUpdateScheduledAssessmentsPostRequest(string accountId, string scheduleId, RequestContent content, bool? runNow, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/assessments/schedules/", false);
            uri.AppendPath(scheduleId, true);
            if (runNow != null)
            {
                uri.AppendQuery("runNow", runNow.Value, true);
            }
            uri.AppendQuery("api-version", "2022-09-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetScheduledAssessmentMetadataRequest(string accountId, string scheduleId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/assessments/schedules/", false);
            uri.AppendPath(scheduleId, true);
            uri.AppendQuery("api-version", "2022-09-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateDeleteScheduledAssessmentsRequest(string accountId, string scheduleId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/assessments/schedules/", false);
            uri.AppendPath(scheduleId, true);
            uri.AppendQuery("api-version", "2022-09-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateRunScheduledAssessmentsExternalRequest(string accountId, string scheduleId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/assessments/schedules/", false);
            uri.AppendPath(scheduleId, true);
            uri.AppendPath("/trigger", false);
            uri.AppendQuery("api-version", "2022-09-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetScheduledAssessmentsRunsFilteredRequest(string accountId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/assessments/schedules/queryFilterRuns", false);
            uri.AppendQuery("api-version", "2022-09-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetRulesTrendingsRequest(string accountId, string assetId, RequestContent content, ContentType contentType, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/assets/", false);
            uri.AppendPath(assetId, true);
            uri.AppendPath("/trends", false);
            uri.AppendQuery("api-version", "2022-09-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            request.Headers.Add("Content-Type", contentType.ToString());
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetRulesTrendingsByRuleIdRequest(string accountId, string assetId, RequestContent content, ContentType contentType, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/assets/", false);
            uri.AppendPath(assetId, true);
            uri.AppendPath("/trends/rules", false);
            uri.AppendQuery("api-version", "2022-09-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            request.Headers.Add("Content-Type", contentType.ToString());
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateValidateRequest(string accountId, RequestContent content, ContentType contentType, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/validation", false);
            uri.AppendQuery("api-version", "2022-09-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            request.Headers.Add("Content-Type", contentType.ToString());
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateCreateViewRequest(string accountId, string viewSourceName, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier201);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/views/viewsource/", false);
            uri.AppendPath(viewSourceName, true);
            uri.AppendQuery("api-version", "2022-09-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetViewRequest(string accountId, string viewId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/views/", false);
            uri.AppendPath(viewId, true);
            uri.AppendQuery("api-version", "2022-09-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateDeleteViewRequest(string accountId, string viewId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/views/", false);
            uri.AppendPath(viewId, true);
            uri.AppendQuery("api-version", "2022-09-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateUpdateViewRequest(string accountId, string viewId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/views/", false);
            uri.AppendPath(viewId, true);
            uri.AppendQuery("api-version", "2022-09-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateCreateViewSourceRequest(string accountId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier201);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/viewsources", false);
            uri.AppendQuery("api-version", "2022-09-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetViewSourcesRequest(string accountId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/viewsources", false);
            uri.AppendQuery("api-version", "2022-09-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCheckViewSourceNameRequest(string accountId, string source, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Head;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/viewsources/", false);
            uri.AppendPath(source, true);
            uri.AppendQuery("api-version", "2022-09-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetViewSourceRequest(string accountId, string source, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/viewsources/", false);
            uri.AppendPath(source, true);
            uri.AppendQuery("api-version", "2022-09-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCheckUniqueViewNameRequest(string accountId, string viewSourceName, string viewName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Head;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/viewsources/", false);
            uri.AppendPath(viewSourceName, true);
            uri.AppendPath("/views/", false);
            uri.AppendPath(viewName, true);
            uri.AppendPath("/validation", false);
            uri.AppendQuery("api-version", "2022-09-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static ResponseClassifier _responseClassifier201;
        private static ResponseClassifier ResponseClassifier201 => _responseClassifier201 ??= new StatusCodeClassifier(stackalloc ushort[] { 201 });
        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier202;
        private static ResponseClassifier ResponseClassifier202 => _responseClassifier202 ??= new StatusCodeClassifier(stackalloc ushort[] { 202 });
    }
}
