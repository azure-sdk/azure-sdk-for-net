// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Analytics.Purview.DataMap
{
    /// <summary> The request payload of Navigation API. </summary>
    public partial class NavigationRequest
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="NavigationRequest"/>. </summary>
        /// <param name="itemPath"> The identifier of navigation request. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="itemPath"/> is null. </exception>
        public NavigationRequest(ItemPath itemPath)
        {
            Argument.AssertNotNull(itemPath, nameof(itemPath));

            ItemPath = itemPath;
            Properties = new ChangeTrackingDictionary<string, BinaryData>();
        }

        /// <summary> Initializes a new instance of <see cref="NavigationRequest"/>. </summary>
        /// <param name="navigationMode"> The enum of navigation mode. </param>
        /// <param name="itemPath"> The identifier of navigation request. </param>
        /// <param name="includeNextLevelAssetCount"> Whether to return the next level asset count. </param>
        /// <param name="properties"> The additional properties of the request. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal NavigationRequest(NavigationMode? navigationMode, ItemPath itemPath, bool? includeNextLevelAssetCount, IDictionary<string, BinaryData> properties, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            NavigationMode = navigationMode;
            ItemPath = itemPath;
            IncludeNextLevelAssetCount = includeNextLevelAssetCount;
            Properties = properties;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="NavigationRequest"/> for deserialization. </summary>
        internal NavigationRequest()
        {
        }

        /// <summary> The enum of navigation mode. </summary>
        public NavigationMode? NavigationMode { get; set; }
        /// <summary> The identifier of navigation request. </summary>
        public ItemPath ItemPath { get; }
        /// <summary> Whether to return the next level asset count. </summary>
        public bool? IncludeNextLevelAssetCount { get; set; }
        /// <summary>
        /// The additional properties of the request.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IDictionary<string, BinaryData> Properties { get; }
    }
}
