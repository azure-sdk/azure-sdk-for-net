// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Analytics.Purview.DataMap
{
    /// <summary> The item payload of the NavigationResult. </summary>
    public partial class NavigationElement
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="NavigationElement"/>. </summary>
        internal NavigationElement()
        {
            Properties = new ChangeTrackingDictionary<string, BinaryData>();
        }

        /// <summary> Initializes a new instance of <see cref="NavigationElement"/>. </summary>
        /// <param name="name"> The name of the item. </param>
        /// <param name="itemPath"> The identifier of navigation request. </param>
        /// <param name="type"> The type name of the item. Eg. EntityType. </param>
        /// <param name="isEntity"> Whether the item is Entity. If yes, can get complete definition of an entity given its itemPath. </param>
        /// <param name="isLeafNode"> Indicates whether the item is a leaf node. If it is, further navigation is not possible. </param>
        /// <param name="count"> The count of the top level asset. Won't return if request payload 'includeNextLevelAssetCount' is false. </param>
        /// <param name="properties"> The additional properties of the navigation element. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal NavigationElement(string name, ItemPath itemPath, string type, bool? isEntity, bool? isLeafNode, int? count, IReadOnlyDictionary<string, BinaryData> properties, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Name = name;
            ItemPath = itemPath;
            Type = type;
            IsEntity = isEntity;
            IsLeafNode = isLeafNode;
            Count = count;
            Properties = properties;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The name of the item. </summary>
        public string Name { get; }
        /// <summary> The identifier of navigation request. </summary>
        public ItemPath ItemPath { get; }
        /// <summary> The type name of the item. Eg. EntityType. </summary>
        public string Type { get; }
        /// <summary> Whether the item is Entity. If yes, can get complete definition of an entity given its itemPath. </summary>
        public bool? IsEntity { get; }
        /// <summary> Indicates whether the item is a leaf node. If it is, further navigation is not possible. </summary>
        public bool? IsLeafNode { get; }
        /// <summary> The count of the top level asset. Won't return if request payload 'includeNextLevelAssetCount' is false. </summary>
        public int? Count { get; }
        /// <summary>
        /// The additional properties of the navigation element.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IReadOnlyDictionary<string, BinaryData> Properties { get; }
    }
}
