<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="ValidateAsync(String,RequestContent,ContentType,RequestContext)">
<example>
This sample shows how to call ValidateAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ViewSchemaClient(endpoint, credential);

var data = new {};

Response response = await client.ValidateAsync("<accountId>", RequestContent.Create(data), ContentType.ApplicationOctetStream);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call ValidateAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ViewSchemaClient(endpoint, credential);

var data = new {
    type = "<type>",
    properties = new {
        query = "<query>",
        inputSchemas = new[] {
            new {
                name = "<name>",
                columns = new[] {
                    new {
                        name = "<name>",
                        type = "<type>",
                    }
                },
            }
        },
    },
};

Response response = await client.ValidateAsync("<accountId>", RequestContent.Create(data), ContentType.ApplicationOctetStream);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("outputSchema")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("outputSchema")[0].GetProperty("type").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>ViewSchemaRequest</c>:
<code>{
  type: string, # Optional. The ViewSchemaRequest Type
  properties: {
    query: string, # Optional. The QuerySchema Query
    inputSchemas: [
      {
        name: string, # Optional. The InputSchema Name
        columns: [
          {
            name: string, # Optional. The QueryColumn Name
            type: string, # Optional. The QueryColumn Type
          }
        ], # Optional.
      }
    ], # Optional. The QuerySchema InputSchemas
  }, # Optional. The QuerySchema Model
}
</code>

Response Body:

Schema for <c>ViewSchemaResponse</c>:
<code>{
  outputSchema: [
    {
      name: string, # Optional. The ViewColumn name
      type: string, # Optional. The ViewColumn type
    }
  ], # Optional. The ViewSchemaResponse OutputSchema
}
</code>

</remarks>
    </member>
    <member name="Validate(String,RequestContent,ContentType,RequestContext)">
<example>
This sample shows how to call Validate with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ViewSchemaClient(endpoint, credential);

var data = new {};

Response response = client.Validate("<accountId>", RequestContent.Create(data), ContentType.ApplicationOctetStream);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call Validate with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ViewSchemaClient(endpoint, credential);

var data = new {
    type = "<type>",
    properties = new {
        query = "<query>",
        inputSchemas = new[] {
            new {
                name = "<name>",
                columns = new[] {
                    new {
                        name = "<name>",
                        type = "<type>",
                    }
                },
            }
        },
    },
};

Response response = client.Validate("<accountId>", RequestContent.Create(data), ContentType.ApplicationOctetStream);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("outputSchema")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("outputSchema")[0].GetProperty("type").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>ViewSchemaRequest</c>:
<code>{
  type: string, # Optional. The ViewSchemaRequest Type
  properties: {
    query: string, # Optional. The QuerySchema Query
    inputSchemas: [
      {
        name: string, # Optional. The InputSchema Name
        columns: [
          {
            name: string, # Optional. The QueryColumn Name
            type: string, # Optional. The QueryColumn Type
          }
        ], # Optional.
      }
    ], # Optional. The QuerySchema InputSchemas
  }, # Optional. The QuerySchema Model
}
</code>

Response Body:

Schema for <c>ViewSchemaResponse</c>:
<code>{
  outputSchema: [
    {
      name: string, # Optional. The ViewColumn name
      type: string, # Optional. The ViewColumn type
    }
  ], # Optional. The ViewSchemaResponse OutputSchema
}
</code>

</remarks>
    </member>
  </members>
</doc>