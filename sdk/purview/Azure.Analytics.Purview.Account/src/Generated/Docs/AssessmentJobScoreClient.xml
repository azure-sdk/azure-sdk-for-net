<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetAssessmentJobScoreAsync(String,String,String,RequestContext)">
<example>
This sample shows how to call GetAssessmentJobScoreAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AssessmentJobScoreClient(endpoint, credential);

Response response = await client.GetAssessmentJobScoreAsync("<accountId>", "<assetId>", "<assessmentId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("scores")[0].GetProperty("ruleLookupIdentifier").ToString());
Console.WriteLine(result.GetProperty("scores")[0].GetProperty("failingRows").ToString());
Console.WriteLine(result.GetProperty("scores")[0].GetProperty("passingRows").ToString());
Console.WriteLine(result.GetProperty("scores")[0].GetProperty("score").ToString());
Console.WriteLine(result.GetProperty("scores")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("scores")[0].GetProperty("ruleType").ToString());
Console.WriteLine(result.GetProperty("goodRowCount").ToString());
Console.WriteLine(result.GetProperty("totalRows").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DQRunResult</c>:
<code>{
  scores: [
    {
      ruleLookupIdentifier: string, # Optional. The DQRuleScore Rule Lookup Identifier
      failingRows: number, # Optional. The DQRuleScore FailingRows
      passingRows: number, # Optional. The DQRuleScore PassingRows
      score: number, # Optional. The DQRuleScore Score
      status: &quot;INCOMPLETE&quot; | &quot;DRAFT&quot; | &quot;PUBLISHED&quot;, # Optional. The DQRuleScore Status
      ruleType: string, # Optional. The DQRuleScore Rule Type
    }
  ], # Optional. The DQRunResult Scores
  goodRowCount: number, # Optional. The DQRunResult Good Row Count
  totalRows: number, # Optional. The DQRunResult Total Rows
}
</code>

</remarks>
    </member>
    <member name="GetAssessmentJobScore(String,String,String,RequestContext)">
<example>
This sample shows how to call GetAssessmentJobScore with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AssessmentJobScoreClient(endpoint, credential);

Response response = client.GetAssessmentJobScore("<accountId>", "<assetId>", "<assessmentId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("scores")[0].GetProperty("ruleLookupIdentifier").ToString());
Console.WriteLine(result.GetProperty("scores")[0].GetProperty("failingRows").ToString());
Console.WriteLine(result.GetProperty("scores")[0].GetProperty("passingRows").ToString());
Console.WriteLine(result.GetProperty("scores")[0].GetProperty("score").ToString());
Console.WriteLine(result.GetProperty("scores")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("scores")[0].GetProperty("ruleType").ToString());
Console.WriteLine(result.GetProperty("goodRowCount").ToString());
Console.WriteLine(result.GetProperty("totalRows").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DQRunResult</c>:
<code>{
  scores: [
    {
      ruleLookupIdentifier: string, # Optional. The DQRuleScore Rule Lookup Identifier
      failingRows: number, # Optional. The DQRuleScore FailingRows
      passingRows: number, # Optional. The DQRuleScore PassingRows
      score: number, # Optional. The DQRuleScore Score
      status: &quot;INCOMPLETE&quot; | &quot;DRAFT&quot; | &quot;PUBLISHED&quot;, # Optional. The DQRuleScore Status
      ruleType: string, # Optional. The DQRuleScore Rule Type
    }
  ], # Optional. The DQRunResult Scores
  goodRowCount: number, # Optional. The DQRunResult Good Row Count
  totalRows: number, # Optional. The DQRunResult Total Rows
}
</code>

</remarks>
    </member>
  </members>
</doc>