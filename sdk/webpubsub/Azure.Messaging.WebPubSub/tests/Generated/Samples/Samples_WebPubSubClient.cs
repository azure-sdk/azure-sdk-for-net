// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Messaging.WebPubSub.Samples
{
    public partial class Samples_WebPubSubClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AddConnectionsToGroups_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            WebPubSubClient client = new WebPubSubClient(endpoint);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.AddConnectionsToGroups("<hub>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AddConnectionsToGroups_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            WebPubSubClient client = new WebPubSubClient(endpoint);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.AddConnectionsToGroupsAsync("<hub>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AddConnectionsToGroups_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            WebPubSubClient client = new WebPubSubClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                groups = new object[]
            {
"<groups>"
            },
                filter = "<filter>",
            });
            Response response = client.AddConnectionsToGroups("<hub>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AddConnectionsToGroups_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            WebPubSubClient client = new WebPubSubClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                groups = new object[]
            {
"<groups>"
            },
                filter = "<filter>",
            });
            Response response = await client.AddConnectionsToGroupsAsync("<hub>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RemoveConnectionsFromGroups_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            WebPubSubClient client = new WebPubSubClient(endpoint);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.RemoveConnectionsFromGroups("<hub>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RemoveConnectionsFromGroups_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            WebPubSubClient client = new WebPubSubClient(endpoint);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.RemoveConnectionsFromGroupsAsync("<hub>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RemoveConnectionsFromGroups_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            WebPubSubClient client = new WebPubSubClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                groups = new object[]
            {
"<groups>"
            },
                filter = "<filter>",
            });
            Response response = client.RemoveConnectionsFromGroups("<hub>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RemoveConnectionsFromGroups_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            WebPubSubClient client = new WebPubSubClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                groups = new object[]
            {
"<groups>"
            },
                filter = "<filter>",
            });
            Response response = await client.RemoveConnectionsFromGroupsAsync("<hub>", content);

            Console.WriteLine(response.Status);
        }
    }
}
