// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.ComputeSchedule.Models
{
    /// <summary> Resource creation data model. </summary>
    public partial class ResourceProvisionPayload
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ResourceProvisionPayload"/>. </summary>
        /// <param name="resourceCount"> Number of resources to be created. </param>
        public ResourceProvisionPayload(int resourceCount)
        {
            ResourceOverrides = new ChangeTrackingList<byte[]>();
            ResourceCount = resourceCount;
        }

        /// <summary> Initializes a new instance of <see cref="ResourceProvisionPayload"/>. </summary>
        /// <param name="baseProfile"> baseProfile, Resource properties that common across all resources. </param>
        /// <param name="resourceOverrides"> resourceOverrides, properties per resource that needs to be overwritted from baseProfile. </param>
        /// <param name="resourceCount"> Number of resources to be created. </param>
        /// <param name="resourcePrefix"> if resourceOverrides doesn't contain "name", service will create name based of prefix and ResourceCount e.g. resourceprefix-0,resourceprefix-1.. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ResourceProvisionPayload(byte[] baseProfile, IList<byte[]> resourceOverrides, int resourceCount, string resourcePrefix, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            BaseProfile = baseProfile;
            ResourceOverrides = resourceOverrides;
            ResourceCount = resourceCount;
            ResourcePrefix = resourcePrefix;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="ResourceProvisionPayload"/> for deserialization. </summary>
        internal ResourceProvisionPayload()
        {
        }

        /// <summary> baseProfile, Resource properties that common across all resources. </summary>
        public byte[] BaseProfile { get; set; }
        /// <summary> resourceOverrides, properties per resource that needs to be overwritted from baseProfile. </summary>
        public IList<byte[]> ResourceOverrides { get; }
        /// <summary> Number of resources to be created. </summary>
        public int ResourceCount { get; }
        /// <summary> if resourceOverrides doesn't contain "name", service will create name based of prefix and ResourceCount e.g. resourceprefix-0,resourceprefix-1.. </summary>
        public string ResourcePrefix { get; set; }
    }
}
