// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Microsoft.LoadTestService.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmMicrosoftLoadTestServiceModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="LoadTestService.PlaywrightWorkspaceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="kind"> Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value. </param>
        /// <returns> A new <see cref="LoadTestService.PlaywrightWorkspaceData"/> instance for mocking. </returns>
        public static PlaywrightWorkspaceData PlaywrightWorkspaceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, PlaywrightWorkspaceProperties properties = null, string kind = null)
        {
            tags ??= new Dictionary<string, string>();

            return new PlaywrightWorkspaceData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                kind,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.PlaywrightWorkspaceProperties"/>. </summary>
        /// <param name="provisioningState"> The status of the last resource operation. </param>
        /// <param name="dataplaneUri"> The workspace data plane URI. </param>
        /// <param name="regionalAffinity"> This property sets the connection region for client workers to cloud-hosted browsers. If enabled, workers connect to browsers in the closest Azure region, ensuring lower latency. If disabled, workers connect to browsers in the Azure region in which the workspace was initially created. </param>
        /// <param name="localAuth"> When enabled, this feature allows the workspace to use local auth (through service access token) for executing operations. </param>
        /// <returns> A new <see cref="Models.PlaywrightWorkspaceProperties"/> instance for mocking. </returns>
        public static PlaywrightWorkspaceProperties PlaywrightWorkspaceProperties(ProvisioningState? provisioningState = null, Uri dataplaneUri = null, EnablementStatus? regionalAffinity = null, EnablementStatus? localAuth = null)
        {
            return new PlaywrightWorkspaceProperties(provisioningState, dataplaneUri, regionalAffinity, localAuth, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CheckNameAvailabilityResponse"/>. </summary>
        /// <param name="nameAvailable"> Indicates if the resource name is available. </param>
        /// <param name="reason"> The reason why the given name is not available. </param>
        /// <param name="message"> Detailed reason why the given name is not available. </param>
        /// <returns> A new <see cref="Models.CheckNameAvailabilityResponse"/> instance for mocking. </returns>
        public static CheckNameAvailabilityResponse CheckNameAvailabilityResponse(bool? nameAvailable = null, CheckNameAvailabilityReason? reason = null, string message = null)
        {
            return new CheckNameAvailabilityResponse(nameAvailable, reason, message, serializedAdditionalRawData: null);
        }
    }
}
