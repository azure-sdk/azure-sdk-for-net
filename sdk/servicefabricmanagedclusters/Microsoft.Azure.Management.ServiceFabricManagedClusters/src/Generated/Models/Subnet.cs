// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ServiceFabricManagedClusters.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Describes a Subnet.
    /// </summary>
    public partial class Subnet
    {
        /// <summary>
        /// Initializes a new instance of the Subnet class.
        /// </summary>
        public Subnet()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Subnet class.
        /// </summary>
        /// <param name="name">Subnet name.</param>
        /// <param name="enableIpv6">Indicates wether to enable Ipv6 or not. If
        /// not provided, it will take the same configuration as the
        /// cluster.</param>
        /// <param name="privateEndpointNetworkPolicies">Enable or Disable
        /// apply network policies on private end point in the subnet. Possible
        /// values include: 'enabled', 'disabled'</param>
        /// <param name="privateLinkServiceNetworkPolicies">Enable or Disable
        /// apply network policies on private link service in the subnet.
        /// Possible values include: 'enabled', 'disabled'</param>
        /// <param name="networkSecurityGroupId">Full resource id for the
        /// network security group.</param>
        public Subnet(string name, bool? enableIpv6 = default(bool?), string privateEndpointNetworkPolicies = default(string), string privateLinkServiceNetworkPolicies = default(string), string networkSecurityGroupId = default(string))
        {
            Name = name;
            EnableIpv6 = enableIpv6;
            PrivateEndpointNetworkPolicies = privateEndpointNetworkPolicies;
            PrivateLinkServiceNetworkPolicies = privateLinkServiceNetworkPolicies;
            NetworkSecurityGroupId = networkSecurityGroupId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets subnet name.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets indicates wether to enable Ipv6 or not. If not
        /// provided, it will take the same configuration as the cluster.
        /// </summary>
        [JsonProperty(PropertyName = "enableIpv6")]
        public bool? EnableIpv6 { get; set; }

        /// <summary>
        /// Gets or sets enable or Disable apply network policies on private
        /// end point in the subnet. Possible values include: 'enabled',
        /// 'disabled'
        /// </summary>
        [JsonProperty(PropertyName = "privateEndpointNetworkPolicies")]
        public string PrivateEndpointNetworkPolicies { get; set; }

        /// <summary>
        /// Gets or sets enable or Disable apply network policies on private
        /// link service in the subnet. Possible values include: 'enabled',
        /// 'disabled'
        /// </summary>
        [JsonProperty(PropertyName = "privateLinkServiceNetworkPolicies")]
        public string PrivateLinkServiceNetworkPolicies { get; set; }

        /// <summary>
        /// Gets or sets full resource id for the network security group.
        /// </summary>
        [JsonProperty(PropertyName = "networkSecurityGroupId")]
        public string NetworkSecurityGroupId { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
        }
    }
}
