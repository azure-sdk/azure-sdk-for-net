// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.ServiceFabricManagedClusters
{
    /// <summary>
    /// A class representing a collection of <see cref="ServiceFabricManagedUnsupportedVmSizeResource"/> and their operations.
    /// Each <see cref="ServiceFabricManagedUnsupportedVmSizeResource"/> in the collection will belong to the same instance of <see cref="SubscriptionResource"/>.
    /// To get a <see cref="ServiceFabricManagedUnsupportedVmSizeCollection"/> instance call the GetServiceFabricManagedUnsupportedVmSizes method from an instance of <see cref="SubscriptionResource"/>.
    /// </summary>
    public partial class ServiceFabricManagedUnsupportedVmSizeCollection : ArmCollection, IEnumerable<ServiceFabricManagedUnsupportedVmSizeResource>, IAsyncEnumerable<ServiceFabricManagedUnsupportedVmSizeResource>
    {
        private readonly ClientDiagnostics _serviceFabricManagedUnsupportedVmSizeManagedUnsupportedVmSizesClientDiagnostics;
        private readonly ManagedUnsupportedVMSizesRestOperations _serviceFabricManagedUnsupportedVmSizeManagedUnsupportedVmSizesRestClient;
        private readonly string _location;

        /// <summary> Initializes a new instance of the <see cref="ServiceFabricManagedUnsupportedVmSizeCollection"/> class for mocking. </summary>
        protected ServiceFabricManagedUnsupportedVmSizeCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="ServiceFabricManagedUnsupportedVmSizeCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        /// <param name="location"> The location for the cluster code versions. This is different from cluster location. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is an empty string, and was expected to be non-empty. </exception>
        internal ServiceFabricManagedUnsupportedVmSizeCollection(ArmClient client, ResourceIdentifier id, string location) : base(client, id)
        {
            _location = location;
            _serviceFabricManagedUnsupportedVmSizeManagedUnsupportedVmSizesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.ServiceFabricManagedClusters", ServiceFabricManagedUnsupportedVmSizeResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ServiceFabricManagedUnsupportedVmSizeResource.ResourceType, out string serviceFabricManagedUnsupportedVmSizeManagedUnsupportedVmSizesApiVersion);
            _serviceFabricManagedUnsupportedVmSizeManagedUnsupportedVmSizesRestClient = new ManagedUnsupportedVMSizesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, serviceFabricManagedUnsupportedVmSizeManagedUnsupportedVmSizesApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != SubscriptionResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, SubscriptionResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Get unsupported vm size for Service Fabric Managed Clusters.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.ServiceFabric/locations/{location}/managedUnsupportedVMSizes/{vmSize}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ManagedUnsupportedVMSizes_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-11-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ServiceFabricManagedUnsupportedVmSizeResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="vmSize"> VM Size name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="vmSize"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="vmSize"/> is null. </exception>
        public virtual async Task<Response<ServiceFabricManagedUnsupportedVmSizeResource>> GetAsync(string vmSize, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(vmSize, nameof(vmSize));

            using var scope = _serviceFabricManagedUnsupportedVmSizeManagedUnsupportedVmSizesClientDiagnostics.CreateScope("ServiceFabricManagedUnsupportedVmSizeCollection.Get");
            scope.Start();
            try
            {
                var response = await _serviceFabricManagedUnsupportedVmSizeManagedUnsupportedVmSizesRestClient.GetAsync(Id.SubscriptionId, _location, vmSize, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ServiceFabricManagedUnsupportedVmSizeResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get unsupported vm size for Service Fabric Managed Clusters.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.ServiceFabric/locations/{location}/managedUnsupportedVMSizes/{vmSize}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ManagedUnsupportedVMSizes_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-11-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ServiceFabricManagedUnsupportedVmSizeResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="vmSize"> VM Size name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="vmSize"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="vmSize"/> is null. </exception>
        public virtual Response<ServiceFabricManagedUnsupportedVmSizeResource> Get(string vmSize, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(vmSize, nameof(vmSize));

            using var scope = _serviceFabricManagedUnsupportedVmSizeManagedUnsupportedVmSizesClientDiagnostics.CreateScope("ServiceFabricManagedUnsupportedVmSizeCollection.Get");
            scope.Start();
            try
            {
                var response = _serviceFabricManagedUnsupportedVmSizeManagedUnsupportedVmSizesRestClient.Get(Id.SubscriptionId, _location, vmSize, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ServiceFabricManagedUnsupportedVmSizeResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get the lists of unsupported vm sizes for Service Fabric Managed Clusters.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.ServiceFabric/locations/{location}/managedUnsupportedVMSizes</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ManagedUnsupportedVMSizes_List</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-11-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ServiceFabricManagedUnsupportedVmSizeResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ServiceFabricManagedUnsupportedVmSizeResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ServiceFabricManagedUnsupportedVmSizeResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _serviceFabricManagedUnsupportedVmSizeManagedUnsupportedVmSizesRestClient.CreateListRequest(Id.SubscriptionId, _location);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _serviceFabricManagedUnsupportedVmSizeManagedUnsupportedVmSizesRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId, _location);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new ServiceFabricManagedUnsupportedVmSizeResource(Client, ServiceFabricManagedUnsupportedVmSizeData.DeserializeServiceFabricManagedUnsupportedVmSizeData(e)), _serviceFabricManagedUnsupportedVmSizeManagedUnsupportedVmSizesClientDiagnostics, Pipeline, "ServiceFabricManagedUnsupportedVmSizeCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Get the lists of unsupported vm sizes for Service Fabric Managed Clusters.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.ServiceFabric/locations/{location}/managedUnsupportedVMSizes</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ManagedUnsupportedVMSizes_List</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-11-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ServiceFabricManagedUnsupportedVmSizeResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ServiceFabricManagedUnsupportedVmSizeResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ServiceFabricManagedUnsupportedVmSizeResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _serviceFabricManagedUnsupportedVmSizeManagedUnsupportedVmSizesRestClient.CreateListRequest(Id.SubscriptionId, _location);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _serviceFabricManagedUnsupportedVmSizeManagedUnsupportedVmSizesRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId, _location);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new ServiceFabricManagedUnsupportedVmSizeResource(Client, ServiceFabricManagedUnsupportedVmSizeData.DeserializeServiceFabricManagedUnsupportedVmSizeData(e)), _serviceFabricManagedUnsupportedVmSizeManagedUnsupportedVmSizesClientDiagnostics, Pipeline, "ServiceFabricManagedUnsupportedVmSizeCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.ServiceFabric/locations/{location}/managedUnsupportedVMSizes/{vmSize}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ManagedUnsupportedVMSizes_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-11-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ServiceFabricManagedUnsupportedVmSizeResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="vmSize"> VM Size name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="vmSize"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="vmSize"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string vmSize, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(vmSize, nameof(vmSize));

            using var scope = _serviceFabricManagedUnsupportedVmSizeManagedUnsupportedVmSizesClientDiagnostics.CreateScope("ServiceFabricManagedUnsupportedVmSizeCollection.Exists");
            scope.Start();
            try
            {
                var response = await _serviceFabricManagedUnsupportedVmSizeManagedUnsupportedVmSizesRestClient.GetAsync(Id.SubscriptionId, _location, vmSize, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.ServiceFabric/locations/{location}/managedUnsupportedVMSizes/{vmSize}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ManagedUnsupportedVMSizes_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-11-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ServiceFabricManagedUnsupportedVmSizeResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="vmSize"> VM Size name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="vmSize"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="vmSize"/> is null. </exception>
        public virtual Response<bool> Exists(string vmSize, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(vmSize, nameof(vmSize));

            using var scope = _serviceFabricManagedUnsupportedVmSizeManagedUnsupportedVmSizesClientDiagnostics.CreateScope("ServiceFabricManagedUnsupportedVmSizeCollection.Exists");
            scope.Start();
            try
            {
                var response = _serviceFabricManagedUnsupportedVmSizeManagedUnsupportedVmSizesRestClient.Get(Id.SubscriptionId, _location, vmSize, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.ServiceFabric/locations/{location}/managedUnsupportedVMSizes/{vmSize}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ManagedUnsupportedVMSizes_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-11-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ServiceFabricManagedUnsupportedVmSizeResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="vmSize"> VM Size name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="vmSize"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="vmSize"/> is null. </exception>
        public virtual async Task<NullableResponse<ServiceFabricManagedUnsupportedVmSizeResource>> GetIfExistsAsync(string vmSize, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(vmSize, nameof(vmSize));

            using var scope = _serviceFabricManagedUnsupportedVmSizeManagedUnsupportedVmSizesClientDiagnostics.CreateScope("ServiceFabricManagedUnsupportedVmSizeCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _serviceFabricManagedUnsupportedVmSizeManagedUnsupportedVmSizesRestClient.GetAsync(Id.SubscriptionId, _location, vmSize, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<ServiceFabricManagedUnsupportedVmSizeResource>(response.GetRawResponse());
                return Response.FromValue(new ServiceFabricManagedUnsupportedVmSizeResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.ServiceFabric/locations/{location}/managedUnsupportedVMSizes/{vmSize}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ManagedUnsupportedVMSizes_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-11-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ServiceFabricManagedUnsupportedVmSizeResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="vmSize"> VM Size name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="vmSize"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="vmSize"/> is null. </exception>
        public virtual NullableResponse<ServiceFabricManagedUnsupportedVmSizeResource> GetIfExists(string vmSize, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(vmSize, nameof(vmSize));

            using var scope = _serviceFabricManagedUnsupportedVmSizeManagedUnsupportedVmSizesClientDiagnostics.CreateScope("ServiceFabricManagedUnsupportedVmSizeCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _serviceFabricManagedUnsupportedVmSizeManagedUnsupportedVmSizesRestClient.Get(Id.SubscriptionId, _location, vmSize, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<ServiceFabricManagedUnsupportedVmSizeResource>(response.GetRawResponse());
                return Response.FromValue(new ServiceFabricManagedUnsupportedVmSizeResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<ServiceFabricManagedUnsupportedVmSizeResource> IEnumerable<ServiceFabricManagedUnsupportedVmSizeResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<ServiceFabricManagedUnsupportedVmSizeResource> IAsyncEnumerable<ServiceFabricManagedUnsupportedVmSizeResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
