// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.SecurityCenter
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.SecurityCenter. </summary>
    public static partial class SecurityCenterExtensions
    {
        private static SubscriptionResourceExtensionClient GetExtensionClient(SubscriptionResource subscriptionResource)
        {
            return subscriptionResource.GetCachedClient((client) =>
            {
                return new SubscriptionResourceExtensionClient(client, subscriptionResource.Id);
            }
            );
        }

        /// <summary>
        /// Get a list of all relevant security standards over a subscription level scope.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Security/standards</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Standards_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="StandardResource" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<StandardResource> GetStandardsAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetStandardsAsync(cancellationToken);
        }

        /// <summary>
        /// Get a list of all relevant security standards over a subscription level scope.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Security/standards</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Standards_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="StandardResource" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<StandardResource> GetStandards(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetStandards(cancellationToken);
        }

        /// <summary>
        /// Get a list of all relevant standardAssignments over a subscription level scope
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Security/assignments</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Assignments_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AssignmentResource" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<AssignmentResource> GetAssignmentsAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetAssignmentsAsync(cancellationToken);
        }

        /// <summary>
        /// Get a list of all relevant standardAssignments over a subscription level scope
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Security/assignments</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Assignments_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AssignmentResource" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<AssignmentResource> GetAssignments(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetAssignments(cancellationToken);
        }

        private static ResourceGroupResourceExtensionClient GetExtensionClient(ResourceGroupResource resourceGroupResource)
        {
            return resourceGroupResource.GetCachedClient((client) =>
            {
                return new ResourceGroupResourceExtensionClient(client, resourceGroupResource.Id);
            }
            );
        }

        /// <summary> Gets a collection of StandardResources in the ResourceGroupResource. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of StandardResources and their operations over a StandardResource. </returns>
        public static StandardCollection GetStandards(this ResourceGroupResource resourceGroupResource)
        {
            return GetExtensionClient(resourceGroupResource).GetStandards();
        }

        /// <summary>
        /// Get a specific security standard for the requested scope
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/standards/{standardId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Standards_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="standardId"> The Security Standard key - unique key for the standard type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="standardId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="standardId"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<StandardResource>> GetStandardAsync(this ResourceGroupResource resourceGroupResource, string standardId, CancellationToken cancellationToken = default)
        {
            return await resourceGroupResource.GetStandards().GetAsync(standardId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a specific security standard for the requested scope
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/standards/{standardId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Standards_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="standardId"> The Security Standard key - unique key for the standard type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="standardId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="standardId"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<StandardResource> GetStandard(this ResourceGroupResource resourceGroupResource, string standardId, CancellationToken cancellationToken = default)
        {
            return resourceGroupResource.GetStandards().Get(standardId, cancellationToken);
        }

        /// <summary> Gets a collection of AssignmentResources in the ResourceGroupResource. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of AssignmentResources and their operations over a AssignmentResource. </returns>
        public static AssignmentCollection GetAssignments(this ResourceGroupResource resourceGroupResource)
        {
            return GetExtensionClient(resourceGroupResource).GetAssignments();
        }

        /// <summary>
        /// Get a specific standard assignment for the requested scope by resourceId
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/assignments/{assignmentId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Assignments_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="assignmentId"> The security assignment key - unique key for the standard assignment. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="assignmentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="assignmentId"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<AssignmentResource>> GetAssignmentAsync(this ResourceGroupResource resourceGroupResource, string assignmentId, CancellationToken cancellationToken = default)
        {
            return await resourceGroupResource.GetAssignments().GetAsync(assignmentId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a specific standard assignment for the requested scope by resourceId
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/assignments/{assignmentId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Assignments_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="assignmentId"> The security assignment key - unique key for the standard assignment. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="assignmentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="assignmentId"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<AssignmentResource> GetAssignment(this ResourceGroupResource resourceGroupResource, string assignmentId, CancellationToken cancellationToken = default)
        {
            return resourceGroupResource.GetAssignments().Get(assignmentId, cancellationToken);
        }

        #region StandardResource
        /// <summary>
        /// Gets an object representing a <see cref="StandardResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="StandardResource.CreateResourceIdentifier" /> to create a <see cref="StandardResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="StandardResource" /> object. </returns>
        public static StandardResource GetStandardResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                StandardResource.ValidateResourceId(id);
                return new StandardResource(client, id);
            }
            );
        }
        #endregion

        #region AssignmentResource
        /// <summary>
        /// Gets an object representing an <see cref="AssignmentResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="AssignmentResource.CreateResourceIdentifier" /> to create an <see cref="AssignmentResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="AssignmentResource" /> object. </returns>
        public static AssignmentResource GetAssignmentResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                AssignmentResource.ValidateResourceId(id);
                return new AssignmentResource(client, id);
            }
            );
        }
        #endregion
    }
}
