// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.SecurityCenter
{
    /// <summary>
    /// A class representing a collection of <see cref="ScanV2Resource" /> and their operations.
    /// Each <see cref="ScanV2Resource" /> in the collection will belong to the same instance of <see cref="ArmResource" />.
    /// To get a <see cref="ScanV2Collection" /> instance call the GetScanV2s method from an instance of <see cref="ArmResource" />.
    /// </summary>
    public partial class ScanV2Collection : ArmCollection
    {
        private readonly ClientDiagnostics _scanV2SqlVulnerabilityAssessmentScansClientDiagnostics;
        private readonly SqlVulnerabilityAssessmentScansRestOperations _scanV2SqlVulnerabilityAssessmentScansRestClient;

        /// <summary> Initializes a new instance of the <see cref="ScanV2Collection"/> class for mocking. </summary>
        protected ScanV2Collection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="ScanV2Collection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal ScanV2Collection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _scanV2SqlVulnerabilityAssessmentScansClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", ScanV2Resource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ScanV2Resource.ResourceType, out string scanV2SqlVulnerabilityAssessmentScansApiVersion);
            _scanV2SqlVulnerabilityAssessmentScansRestClient = new SqlVulnerabilityAssessmentScansRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, scanV2SqlVulnerabilityAssessmentScansApiVersion);
        }

        /// <summary>
        /// Gets the scan details of a single scan record.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceId}/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/scans/{scanId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SqlVulnerabilityAssessmentScans_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scanId"> The scan Id. Type &apos;latest&apos; to get the scan record for the latest scan. </param>
        /// <param name="workspaceId"> The workspace Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scanId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scanId"/> is null. </exception>
        public virtual async Task<Response<ScanV2Resource>> GetAsync(string scanId, Guid workspaceId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scanId, nameof(scanId));

            using var scope = _scanV2SqlVulnerabilityAssessmentScansClientDiagnostics.CreateScope("ScanV2Collection.Get");
            scope.Start();
            try
            {
                var response = await _scanV2SqlVulnerabilityAssessmentScansRestClient.GetAsync(Id, scanId, workspaceId, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ScanV2Resource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the scan details of a single scan record.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceId}/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/scans/{scanId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SqlVulnerabilityAssessmentScans_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scanId"> The scan Id. Type &apos;latest&apos; to get the scan record for the latest scan. </param>
        /// <param name="workspaceId"> The workspace Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scanId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scanId"/> is null. </exception>
        public virtual Response<ScanV2Resource> Get(string scanId, Guid workspaceId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scanId, nameof(scanId));

            using var scope = _scanV2SqlVulnerabilityAssessmentScansClientDiagnostics.CreateScope("ScanV2Collection.Get");
            scope.Start();
            try
            {
                var response = _scanV2SqlVulnerabilityAssessmentScansRestClient.Get(Id, scanId, workspaceId, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ScanV2Resource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a list of scan records.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceId}/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/scans</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SqlVulnerabilityAssessmentScans_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="workspaceId"> The workspace Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ScanV2Resource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ScanV2Resource> GetAllAsync(Guid workspaceId, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _scanV2SqlVulnerabilityAssessmentScansRestClient.CreateListRequest(Id, workspaceId);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, null, e => new ScanV2Resource(Client, ScanV2Data.DeserializeScanV2Data(e)), _scanV2SqlVulnerabilityAssessmentScansClientDiagnostics, Pipeline, "ScanV2Collection.GetAll", "value", null, cancellationToken);
        }

        /// <summary>
        /// Gets a list of scan records.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceId}/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/scans</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SqlVulnerabilityAssessmentScans_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="workspaceId"> The workspace Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ScanV2Resource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ScanV2Resource> GetAll(Guid workspaceId, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _scanV2SqlVulnerabilityAssessmentScansRestClient.CreateListRequest(Id, workspaceId);
            return PageableHelpers.CreatePageable(FirstPageRequest, null, e => new ScanV2Resource(Client, ScanV2Data.DeserializeScanV2Data(e)), _scanV2SqlVulnerabilityAssessmentScansClientDiagnostics, Pipeline, "ScanV2Collection.GetAll", "value", null, cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceId}/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/scans/{scanId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SqlVulnerabilityAssessmentScans_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scanId"> The scan Id. Type &apos;latest&apos; to get the scan record for the latest scan. </param>
        /// <param name="workspaceId"> The workspace Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scanId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scanId"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string scanId, Guid workspaceId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scanId, nameof(scanId));

            using var scope = _scanV2SqlVulnerabilityAssessmentScansClientDiagnostics.CreateScope("ScanV2Collection.Exists");
            scope.Start();
            try
            {
                var response = await _scanV2SqlVulnerabilityAssessmentScansRestClient.GetAsync(Id, scanId, workspaceId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceId}/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/scans/{scanId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SqlVulnerabilityAssessmentScans_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scanId"> The scan Id. Type &apos;latest&apos; to get the scan record for the latest scan. </param>
        /// <param name="workspaceId"> The workspace Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scanId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scanId"/> is null. </exception>
        public virtual Response<bool> Exists(string scanId, Guid workspaceId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scanId, nameof(scanId));

            using var scope = _scanV2SqlVulnerabilityAssessmentScansClientDiagnostics.CreateScope("ScanV2Collection.Exists");
            scope.Start();
            try
            {
                var response = _scanV2SqlVulnerabilityAssessmentScansRestClient.Get(Id, scanId, workspaceId, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
