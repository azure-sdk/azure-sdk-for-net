// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.SecurityCenter.Models
{
    /// <summary> A vulnerability assessment scan record properties. </summary>
    public partial class ScanPropertiesV2
    {
        /// <summary> Initializes a new instance of ScanPropertiesV2. </summary>
        internal ScanPropertiesV2()
        {
        }

        /// <summary> Initializes a new instance of ScanPropertiesV2. </summary>
        /// <param name="triggerType"> The scan trigger type. </param>
        /// <param name="state"> The scan status. </param>
        /// <param name="server"> The server name. </param>
        /// <param name="database"> The database name. </param>
        /// <param name="sqlVersion"> The SQL version. </param>
        /// <param name="startOn"> The scan start time (UTC). </param>
        /// <param name="endOn"> Scan results are valid until end time (UTC). </param>
        /// <param name="highSeverityFailedRulesCount"> The number of failed rules with high severity. </param>
        /// <param name="mediumSeverityFailedRulesCount"> The number of failed rules with medium severity. </param>
        /// <param name="lowSeverityFailedRulesCount"> The number of failed rules with low severity. </param>
        /// <param name="totalPassedRulesCount"> The number of total passed rules. </param>
        /// <param name="totalFailedRulesCount"> The number of total failed rules. </param>
        /// <param name="totalRulesCount"> The number of total rules assessed. </param>
        /// <param name="isBaselineApplied"> Baseline created for this database, and has one or more rules. </param>
        /// <param name="lastScanOn"> Last scan time. </param>
        internal ScanPropertiesV2(SqlVulnerabilityAssessmentScanTriggerType? triggerType, SqlVulnerabilityAssessmentScanState? state, string server, string database, string sqlVersion, DateTimeOffset? startOn, DateTimeOffset? endOn, int? highSeverityFailedRulesCount, int? mediumSeverityFailedRulesCount, int? lowSeverityFailedRulesCount, int? totalPassedRulesCount, int? totalFailedRulesCount, int? totalRulesCount, bool? isBaselineApplied, DateTimeOffset? lastScanOn)
        {
            TriggerType = triggerType;
            State = state;
            Server = server;
            Database = database;
            SqlVersion = sqlVersion;
            StartOn = startOn;
            EndOn = endOn;
            HighSeverityFailedRulesCount = highSeverityFailedRulesCount;
            MediumSeverityFailedRulesCount = mediumSeverityFailedRulesCount;
            LowSeverityFailedRulesCount = lowSeverityFailedRulesCount;
            TotalPassedRulesCount = totalPassedRulesCount;
            TotalFailedRulesCount = totalFailedRulesCount;
            TotalRulesCount = totalRulesCount;
            IsBaselineApplied = isBaselineApplied;
            LastScanOn = lastScanOn;
        }

        /// <summary> The scan trigger type. </summary>
        public SqlVulnerabilityAssessmentScanTriggerType? TriggerType { get; }
        /// <summary> The scan status. </summary>
        public SqlVulnerabilityAssessmentScanState? State { get; }
        /// <summary> The server name. </summary>
        public string Server { get; }
        /// <summary> The database name. </summary>
        public string Database { get; }
        /// <summary> The SQL version. </summary>
        public string SqlVersion { get; }
        /// <summary> The scan start time (UTC). </summary>
        public DateTimeOffset? StartOn { get; }
        /// <summary> Scan results are valid until end time (UTC). </summary>
        public DateTimeOffset? EndOn { get; }
        /// <summary> The number of failed rules with high severity. </summary>
        public int? HighSeverityFailedRulesCount { get; }
        /// <summary> The number of failed rules with medium severity. </summary>
        public int? MediumSeverityFailedRulesCount { get; }
        /// <summary> The number of failed rules with low severity. </summary>
        public int? LowSeverityFailedRulesCount { get; }
        /// <summary> The number of total passed rules. </summary>
        public int? TotalPassedRulesCount { get; }
        /// <summary> The number of total failed rules. </summary>
        public int? TotalFailedRulesCount { get; }
        /// <summary> The number of total rules assessed. </summary>
        public int? TotalRulesCount { get; }
        /// <summary> Baseline created for this database, and has one or more rules. </summary>
        public bool? IsBaselineApplied { get; }
        /// <summary> Last scan time. </summary>
        public DateTimeOffset? LastScanOn { get; }
    }
}
