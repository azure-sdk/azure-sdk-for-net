// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.SecurityCenter.Models
{
    /// <summary> Defender for Storage resource properties. </summary>
    public partial class DefenderForStorageSettingProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="DefenderForStorageSettingProperties"/>. </summary>
        public DefenderForStorageSettingProperties()
        {
        }

        /// <summary> Initializes a new instance of <see cref="DefenderForStorageSettingProperties"/>. </summary>
        /// <param name="isEnabled"> Indicates whether Defender for Storage is enabled on this storage account. </param>
        /// <param name="malwareScanning"> Properties of Malware Scanning. </param>
        /// <param name="sensitiveDataDiscovery"> Properties of Sensitive Data Discovery. </param>
        /// <param name="overrideSubscriptionLevelSettings"> Indicates whether the settings defined for this storage account should override the settings defined for the subscription. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal DefenderForStorageSettingProperties(bool? isEnabled, MalwareScanningProperties malwareScanning, SensitiveDataDiscoveryProperties sensitiveDataDiscovery, bool? overrideSubscriptionLevelSettings, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            IsEnabled = isEnabled;
            MalwareScanning = malwareScanning;
            SensitiveDataDiscovery = sensitiveDataDiscovery;
            OverrideSubscriptionLevelSettings = overrideSubscriptionLevelSettings;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Indicates whether Defender for Storage is enabled on this storage account. </summary>
        public bool? IsEnabled { get; set; }
        /// <summary> Properties of Malware Scanning. </summary>
        public MalwareScanningProperties MalwareScanning { get; set; }
        /// <summary> Properties of Sensitive Data Discovery. </summary>
        public SensitiveDataDiscoveryProperties SensitiveDataDiscovery { get; set; }
        /// <summary> Indicates whether the settings defined for this storage account should override the settings defined for the subscription. </summary>
        public bool? OverrideSubscriptionLevelSettings { get; set; }
    }
}
