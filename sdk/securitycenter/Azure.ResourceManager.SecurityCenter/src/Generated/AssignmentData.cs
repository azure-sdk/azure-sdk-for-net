// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.SecurityCenter.Models;

namespace Azure.ResourceManager.SecurityCenter
{
    /// <summary>
    /// A class representing the Assignment data model.
    /// Security Assignment on a resource group over a given scope
    /// </summary>
    public partial class AssignmentData : TrackedResourceData
    {
        /// <summary> Initializes a new instance of AssignmentData. </summary>
        /// <param name="location"> The location. </param>
        public AssignmentData(AzureLocation location) : base(location)
        {
        }

        /// <summary> Initializes a new instance of AssignmentData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="displayName"> display name of the standardAssignment. </param>
        /// <param name="description"> description of the standardAssignment. </param>
        /// <param name="assignedStandard"> Standard item with key as applied to this standard assignment over the given scope. </param>
        /// <param name="assignedComponent"> Component item with key as applied to this standard assignment over the given scope. </param>
        /// <param name="scope"> Scope to which the standardAssignment applies - can be a subscription path or a resource group under that subscription. </param>
        /// <param name="effect"> expected effect of this assignment (Disable/Exempt/etc). </param>
        /// <param name="expiresOn"> Expiration date of this assignment as a full ISO date. </param>
        /// <param name="additionalData"> Additional data about the assignment. </param>
        /// <param name="metadata"> The assignment metadata. Metadata is an open ended object and is typically a collection of key value pairs. </param>
        /// <param name="kind"> Kind of the resource. </param>
        /// <param name="eTag"> Entity tag is used for comparing two or more entities from the same requested resource. </param>
        internal AssignmentData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, IDictionary<string, string> tags, AzureLocation location, string displayName, string description, WritableSubResource assignedStandard, AssignedComponentItem assignedComponent, string scope, string effect, DateTimeOffset? expiresOn, AssignmentPropertiesAdditionalData additionalData, BinaryData metadata, string kind, ETag? eTag) : base(id, name, resourceType, systemData, tags, location)
        {
            DisplayName = displayName;
            Description = description;
            AssignedStandard = assignedStandard;
            AssignedComponent = assignedComponent;
            Scope = scope;
            Effect = effect;
            ExpiresOn = expiresOn;
            AdditionalData = additionalData;
            Metadata = metadata;
            Kind = kind;
            ETag = eTag;
        }

        /// <summary> display name of the standardAssignment. </summary>
        public string DisplayName { get; set; }
        /// <summary> description of the standardAssignment. </summary>
        public string Description { get; set; }
        /// <summary> Standard item with key as applied to this standard assignment over the given scope. </summary>
        internal WritableSubResource AssignedStandard { get; set; }
        /// <summary> Gets or sets Id. </summary>
        public ResourceIdentifier AssignedStandardId
        {
            get => AssignedStandard is null ? default : AssignedStandard.Id;
            set
            {
                if (AssignedStandard is null)
                    AssignedStandard = new WritableSubResource();
                AssignedStandard.Id = value;
            }
        }

        /// <summary> Component item with key as applied to this standard assignment over the given scope. </summary>
        internal AssignedComponentItem AssignedComponent { get; set; }
        /// <summary> unique key to a security assessment object. </summary>
        public string AssignedComponentKey
        {
            get => AssignedComponent is null ? default : AssignedComponent.Key;
            set
            {
                if (AssignedComponent is null)
                    AssignedComponent = new AssignedComponentItem();
                AssignedComponent.Key = value;
            }
        }

        /// <summary> Scope to which the standardAssignment applies - can be a subscription path or a resource group under that subscription. </summary>
        public string Scope { get; set; }
        /// <summary> expected effect of this assignment (Disable/Exempt/etc). </summary>
        public string Effect { get; set; }
        /// <summary> Expiration date of this assignment as a full ISO date. </summary>
        public DateTimeOffset? ExpiresOn { get; set; }
        /// <summary> Additional data about the assignment. </summary>
        internal AssignmentPropertiesAdditionalData AdditionalData { get; set; }
        /// <summary> Exemption category of this assignment. </summary>
        public string AdditionalDataExemptionCategory
        {
            get => AdditionalData is null ? default : AdditionalData.ExemptionCategory;
            set
            {
                if (AdditionalData is null)
                    AdditionalData = new AssignmentPropertiesAdditionalData();
                AdditionalData.ExemptionCategory = value;
            }
        }

        /// <summary>
        /// The assignment metadata. Metadata is an open ended object and is typically a collection of key value pairs.
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formated json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData Metadata { get; set; }
        /// <summary> Kind of the resource. </summary>
        public string Kind { get; set; }
        /// <summary> Entity tag is used for comparing two or more entities from the same requested resource. </summary>
        public ETag? ETag { get; set; }
    }
}
