// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.ManagementGroups;
using Azure.ResourceManager.SecurityCenter.Models;

namespace Azure.ResourceManager.SecurityCenter
{
    /// <summary>
    /// A Class representing a ManagementGroupGovernanceRule along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier" /> you can construct a <see cref="ManagementGroupGovernanceRuleResource" />
    /// from an instance of <see cref="ArmClient" /> using the GetManagementGroupGovernanceRuleResource method.
    /// Otherwise you can get one from its parent resource <see cref="ManagementGroupResource" /> using the GetManagementGroupGovernanceRule method.
    /// </summary>
    public partial class ManagementGroupGovernanceRuleResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="ManagementGroupGovernanceRuleResource"/> instance. </summary>
        public static ResourceIdentifier CreateResourceIdentifier(string managementGroupId, string ruleId)
        {
            var resourceId = $"/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Security/governanceRules/{ruleId}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _managementGroupGovernanceRulemanagementGroupGovernanceRulesClientDiagnostics;
        private readonly ManagementGroupGovernanceRulesRestOperations _managementGroupGovernanceRulemanagementGroupGovernanceRulesRestClient;
        private readonly ClientDiagnostics _subscriptionGovernanceRuleGovernanceRulesClientDiagnostics;
        private readonly GovernanceRulesRestOperations _subscriptionGovernanceRuleGovernanceRulesRestClient;
        private readonly ClientDiagnostics _managementGroupGovernanceRulesExecuteStatusClientDiagnostics;
        private readonly ManagementGroupGovernanceRulesExecuteStatusRestOperations _managementGroupGovernanceRulesExecuteStatusRestClient;
        private readonly ClientDiagnostics _managementGroupGovernanceRulesDeleteStatusClientDiagnostics;
        private readonly ManagementGroupGovernanceRulesDeleteStatusRestOperations _managementGroupGovernanceRulesDeleteStatusRestClient;
        private readonly GovernanceRuleData _data;

        /// <summary> Initializes a new instance of the <see cref="ManagementGroupGovernanceRuleResource"/> class for mocking. </summary>
        protected ManagementGroupGovernanceRuleResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "ManagementGroupGovernanceRuleResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal ManagementGroupGovernanceRuleResource(ArmClient client, GovernanceRuleData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="ManagementGroupGovernanceRuleResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal ManagementGroupGovernanceRuleResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _managementGroupGovernanceRulemanagementGroupGovernanceRulesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string managementGroupGovernanceRulemanagementGroupGovernanceRulesApiVersion);
            _managementGroupGovernanceRulemanagementGroupGovernanceRulesRestClient = new ManagementGroupGovernanceRulesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, managementGroupGovernanceRulemanagementGroupGovernanceRulesApiVersion);
            _subscriptionGovernanceRuleGovernanceRulesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", SubscriptionGovernanceRuleResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(SubscriptionGovernanceRuleResource.ResourceType, out string subscriptionGovernanceRuleGovernanceRulesApiVersion);
            _subscriptionGovernanceRuleGovernanceRulesRestClient = new GovernanceRulesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, subscriptionGovernanceRuleGovernanceRulesApiVersion);
            _managementGroupGovernanceRulesExecuteStatusClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", ProviderConstants.DefaultProviderNamespace, Diagnostics);
            _managementGroupGovernanceRulesExecuteStatusRestClient = new ManagementGroupGovernanceRulesExecuteStatusRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
            _managementGroupGovernanceRulesDeleteStatusClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", ProviderConstants.DefaultProviderNamespace, Diagnostics);
            _managementGroupGovernanceRulesDeleteStatusRestClient = new ManagementGroupGovernanceRulesDeleteStatusRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Security/governanceRules";

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual GovernanceRuleData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary>
        /// Get a specific governance rule for the requested scope by ruleId
        /// Request Path: /providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Security/governanceRules/{ruleId}
        /// Operation Id: managementGroupGovernanceRules_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ManagementGroupGovernanceRuleResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _managementGroupGovernanceRulemanagementGroupGovernanceRulesClientDiagnostics.CreateScope("ManagementGroupGovernanceRuleResource.Get");
            scope.Start();
            try
            {
                var response = await _managementGroupGovernanceRulemanagementGroupGovernanceRulesRestClient.GetAsync(Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ManagementGroupGovernanceRuleResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a specific governance rule for the requested scope by ruleId
        /// Request Path: /providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Security/governanceRules/{ruleId}
        /// Operation Id: managementGroupGovernanceRules_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ManagementGroupGovernanceRuleResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _managementGroupGovernanceRulemanagementGroupGovernanceRulesClientDiagnostics.CreateScope("ManagementGroupGovernanceRuleResource.Get");
            scope.Start();
            try
            {
                var response = _managementGroupGovernanceRulemanagementGroupGovernanceRulesRestClient.Get(Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ManagementGroupGovernanceRuleResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete a Governance rule over a given scope
        /// Request Path: /providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Security/governanceRules/{ruleId}
        /// Operation Id: ManagementGroupGovernanceRules_Delete
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeleteAsync(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _managementGroupGovernanceRulemanagementGroupGovernanceRulesClientDiagnostics.CreateScope("ManagementGroupGovernanceRuleResource.Delete");
            scope.Start();
            try
            {
                var response = await _managementGroupGovernanceRulemanagementGroupGovernanceRulesRestClient.DeleteAsync(Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new SecurityCenterArmOperation(_managementGroupGovernanceRulemanagementGroupGovernanceRulesClientDiagnostics, Pipeline, _managementGroupGovernanceRulemanagementGroupGovernanceRulesRestClient.CreateDeleteRequest(Id.Name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete a Governance rule over a given scope
        /// Request Path: /providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Security/governanceRules/{ruleId}
        /// Operation Id: ManagementGroupGovernanceRules_Delete
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation Delete(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _managementGroupGovernanceRulemanagementGroupGovernanceRulesClientDiagnostics.CreateScope("ManagementGroupGovernanceRuleResource.Delete");
            scope.Start();
            try
            {
                var response = _managementGroupGovernanceRulemanagementGroupGovernanceRulesRestClient.Delete(Id.Name, cancellationToken);
                var operation = new SecurityCenterArmOperation(_managementGroupGovernanceRulemanagementGroupGovernanceRulesClientDiagnostics, Pipeline, _managementGroupGovernanceRulemanagementGroupGovernanceRulesRestClient.CreateDeleteRequest(Id.Name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates or updates governance rule on the given management group
        /// Request Path: /providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Security/governanceRules/{ruleId}
        /// Operation Id: ManagementGroupGovernanceRules_CreateOrUpdate
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="data"> Governance rule over a given scope. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<ManagementGroupGovernanceRuleResource>> UpdateAsync(WaitUntil waitUntil, GovernanceRuleData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _managementGroupGovernanceRulemanagementGroupGovernanceRulesClientDiagnostics.CreateScope("ManagementGroupGovernanceRuleResource.Update");
            scope.Start();
            try
            {
                var response = await _managementGroupGovernanceRulemanagementGroupGovernanceRulesRestClient.CreateOrUpdateAsync(Id.Name, data, cancellationToken).ConfigureAwait(false);
                var operation = new SecurityCenterArmOperation<ManagementGroupGovernanceRuleResource>(Response.FromValue(new ManagementGroupGovernanceRuleResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates or updates governance rule on the given management group
        /// Request Path: /providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Security/governanceRules/{ruleId}
        /// Operation Id: ManagementGroupGovernanceRules_CreateOrUpdate
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="data"> Governance rule over a given scope. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<ManagementGroupGovernanceRuleResource> Update(WaitUntil waitUntil, GovernanceRuleData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _managementGroupGovernanceRulemanagementGroupGovernanceRulesClientDiagnostics.CreateScope("ManagementGroupGovernanceRuleResource.Update");
            scope.Start();
            try
            {
                var response = _managementGroupGovernanceRulemanagementGroupGovernanceRulesRestClient.CreateOrUpdate(Id.Name, data, cancellationToken);
                var operation = new SecurityCenterArmOperation<ManagementGroupGovernanceRuleResource>(Response.FromValue(new ManagementGroupGovernanceRuleResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Execute governance rule on the given management group
        /// Request Path: /providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Security/governanceRules/{ruleId}/execute
        /// Operation Id: GovernanceRules_RuleIdExecuteSingleManagementGroup
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="executeGovernanceRuleParams"> Execute governance rule over a given scope. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> RuleIdExecuteSingleManagementGroupGovernanceRuleAsync(WaitUntil waitUntil, ExecuteGovernanceRuleParams executeGovernanceRuleParams = null, CancellationToken cancellationToken = default)
        {
            using var scope = _subscriptionGovernanceRuleGovernanceRulesClientDiagnostics.CreateScope("ManagementGroupGovernanceRuleResource.RuleIdExecuteSingleManagementGroupGovernanceRule");
            scope.Start();
            try
            {
                var response = await _subscriptionGovernanceRuleGovernanceRulesRestClient.RuleIdExecuteSingleManagementGroupAsync(Id.Name, executeGovernanceRuleParams, cancellationToken).ConfigureAwait(false);
                var operation = new SecurityCenterArmOperation(_subscriptionGovernanceRuleGovernanceRulesClientDiagnostics, Pipeline, _subscriptionGovernanceRuleGovernanceRulesRestClient.CreateRuleIdExecuteSingleManagementGroupRequest(Id.Name, executeGovernanceRuleParams).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Execute governance rule on the given management group
        /// Request Path: /providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Security/governanceRules/{ruleId}/execute
        /// Operation Id: GovernanceRules_RuleIdExecuteSingleManagementGroup
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="executeGovernanceRuleParams"> Execute governance rule over a given scope. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation RuleIdExecuteSingleManagementGroupGovernanceRule(WaitUntil waitUntil, ExecuteGovernanceRuleParams executeGovernanceRuleParams = null, CancellationToken cancellationToken = default)
        {
            using var scope = _subscriptionGovernanceRuleGovernanceRulesClientDiagnostics.CreateScope("ManagementGroupGovernanceRuleResource.RuleIdExecuteSingleManagementGroupGovernanceRule");
            scope.Start();
            try
            {
                var response = _subscriptionGovernanceRuleGovernanceRulesRestClient.RuleIdExecuteSingleManagementGroup(Id.Name, executeGovernanceRuleParams, cancellationToken);
                var operation = new SecurityCenterArmOperation(_subscriptionGovernanceRuleGovernanceRulesClientDiagnostics, Pipeline, _subscriptionGovernanceRuleGovernanceRulesRestClient.CreateRuleIdExecuteSingleManagementGroupRequest(Id.Name, executeGovernanceRuleParams).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a specific governance rule execution status for the requested scope by ruleId and operationId
        /// Request Path: /providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Security/governanceRules/{ruleId}/execute/operationResults/{operationId}
        /// Operation Id: ManagementGroupGovernanceRulesExecuteStatus_Get
        /// </summary>
        /// <param name="operationId"> The governance rule execution key - unique key for the execution of governance rule. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="operationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/> is null. </exception>
        public virtual async Task<Response<ExecuteRuleStatus>> GetManagementGroupGovernanceRulesExecuteStatuAsync(string operationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(operationId, nameof(operationId));

            using var scope = _managementGroupGovernanceRulesExecuteStatusClientDiagnostics.CreateScope("ManagementGroupGovernanceRuleResource.GetManagementGroupGovernanceRulesExecuteStatu");
            scope.Start();
            try
            {
                var response = await _managementGroupGovernanceRulesExecuteStatusRestClient.GetAsync(Id.Name, operationId, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a specific governance rule execution status for the requested scope by ruleId and operationId
        /// Request Path: /providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Security/governanceRules/{ruleId}/execute/operationResults/{operationId}
        /// Operation Id: ManagementGroupGovernanceRulesExecuteStatus_Get
        /// </summary>
        /// <param name="operationId"> The governance rule execution key - unique key for the execution of governance rule. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="operationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/> is null. </exception>
        public virtual Response<ExecuteRuleStatus> GetManagementGroupGovernanceRulesExecuteStatu(string operationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(operationId, nameof(operationId));

            using var scope = _managementGroupGovernanceRulesExecuteStatusClientDiagnostics.CreateScope("ManagementGroupGovernanceRuleResource.GetManagementGroupGovernanceRulesExecuteStatu");
            scope.Start();
            try
            {
                var response = _managementGroupGovernanceRulesExecuteStatusRestClient.Get(Id.Name, operationId, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a specific governance rule deletion status for the requested scope by rule ID and operation ID
        /// Request Path: /providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Security/governanceRules/{ruleId}/delete/operationResults/{operationId}
        /// Operation Id: ManagementGroupGovernanceRulesDeleteStatus_Get
        /// </summary>
        /// <param name="operationId"> The governance rule execution key - unique key for the execution of governance rule. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="operationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/> is null. </exception>
        public virtual async Task<Response> GetManagementGroupGovernanceRulesDeleteStatuAsync(string operationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(operationId, nameof(operationId));

            using var scope = _managementGroupGovernanceRulesDeleteStatusClientDiagnostics.CreateScope("ManagementGroupGovernanceRuleResource.GetManagementGroupGovernanceRulesDeleteStatu");
            scope.Start();
            try
            {
                var response = await _managementGroupGovernanceRulesDeleteStatusRestClient.GetAsync(Id.Name, operationId, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a specific governance rule deletion status for the requested scope by rule ID and operation ID
        /// Request Path: /providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Security/governanceRules/{ruleId}/delete/operationResults/{operationId}
        /// Operation Id: ManagementGroupGovernanceRulesDeleteStatus_Get
        /// </summary>
        /// <param name="operationId"> The governance rule execution key - unique key for the execution of governance rule. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="operationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/> is null. </exception>
        public virtual Response GetManagementGroupGovernanceRulesDeleteStatu(string operationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(operationId, nameof(operationId));

            using var scope = _managementGroupGovernanceRulesDeleteStatusClientDiagnostics.CreateScope("ManagementGroupGovernanceRuleResource.GetManagementGroupGovernanceRulesDeleteStatu");
            scope.Start();
            try
            {
                var response = _managementGroupGovernanceRulesDeleteStatusRestClient.Get(Id.Name, operationId, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
