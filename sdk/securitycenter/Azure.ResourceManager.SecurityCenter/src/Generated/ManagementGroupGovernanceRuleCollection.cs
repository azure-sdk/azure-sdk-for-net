// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.ManagementGroups;

namespace Azure.ResourceManager.SecurityCenter
{
    /// <summary>
    /// A class representing a collection of <see cref="ManagementGroupGovernanceRuleResource" /> and their operations.
    /// Each <see cref="ManagementGroupGovernanceRuleResource" /> in the collection will belong to the same instance of <see cref="ManagementGroupResource" />.
    /// To get a <see cref="ManagementGroupGovernanceRuleCollection" /> instance call the GetManagementGroupGovernanceRules method from an instance of <see cref="ManagementGroupResource" />.
    /// </summary>
    public partial class ManagementGroupGovernanceRuleCollection : ArmCollection, IEnumerable<ManagementGroupGovernanceRuleResource>, IAsyncEnumerable<ManagementGroupGovernanceRuleResource>
    {
        private readonly ClientDiagnostics _managementGroupGovernanceRulemanagementGroupGovernanceRulesClientDiagnostics;
        private readonly ManagementGroupGovernanceRulesRestOperations _managementGroupGovernanceRulemanagementGroupGovernanceRulesRestClient;
        private readonly ClientDiagnostics _managementGroupGovernanceRuleClientDiagnostics;
        private readonly ManagementGroupGovernanceRuleRestOperations _managementGroupGovernanceRuleRestClient;

        /// <summary> Initializes a new instance of the <see cref="ManagementGroupGovernanceRuleCollection"/> class for mocking. </summary>
        protected ManagementGroupGovernanceRuleCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="ManagementGroupGovernanceRuleCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal ManagementGroupGovernanceRuleCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _managementGroupGovernanceRulemanagementGroupGovernanceRulesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", ManagementGroupGovernanceRuleResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ManagementGroupGovernanceRuleResource.ResourceType, out string managementGroupGovernanceRulemanagementGroupGovernanceRulesApiVersion);
            _managementGroupGovernanceRulemanagementGroupGovernanceRulesRestClient = new ManagementGroupGovernanceRulesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, managementGroupGovernanceRulemanagementGroupGovernanceRulesApiVersion);
            _managementGroupGovernanceRuleClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", ManagementGroupGovernanceRuleResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ManagementGroupGovernanceRuleResource.ResourceType, out string managementGroupGovernanceRuleApiVersion);
            _managementGroupGovernanceRuleRestClient = new ManagementGroupGovernanceRuleRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, managementGroupGovernanceRuleApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ManagementGroupResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ManagementGroupResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Creates or updates governance rule on the given management group
        /// Request Path: /providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Security/governanceRules/{ruleId}
        /// Operation Id: ManagementGroupGovernanceRules_CreateOrUpdate
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="ruleId"> The governance rule key - unique key for the standard governance rule (GUID). </param>
        /// <param name="data"> Governance rule over a given scope. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ruleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ruleId"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<ManagementGroupGovernanceRuleResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string ruleId, GovernanceRuleData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(ruleId, nameof(ruleId));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _managementGroupGovernanceRulemanagementGroupGovernanceRulesClientDiagnostics.CreateScope("ManagementGroupGovernanceRuleCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _managementGroupGovernanceRulemanagementGroupGovernanceRulesRestClient.CreateOrUpdateAsync(ruleId, data, cancellationToken).ConfigureAwait(false);
                var operation = new SecurityCenterArmOperation<ManagementGroupGovernanceRuleResource>(Response.FromValue(new ManagementGroupGovernanceRuleResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates or updates governance rule on the given management group
        /// Request Path: /providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Security/governanceRules/{ruleId}
        /// Operation Id: ManagementGroupGovernanceRules_CreateOrUpdate
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="ruleId"> The governance rule key - unique key for the standard governance rule (GUID). </param>
        /// <param name="data"> Governance rule over a given scope. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ruleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ruleId"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<ManagementGroupGovernanceRuleResource> CreateOrUpdate(WaitUntil waitUntil, string ruleId, GovernanceRuleData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(ruleId, nameof(ruleId));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _managementGroupGovernanceRulemanagementGroupGovernanceRulesClientDiagnostics.CreateScope("ManagementGroupGovernanceRuleCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _managementGroupGovernanceRulemanagementGroupGovernanceRulesRestClient.CreateOrUpdate(ruleId, data, cancellationToken);
                var operation = new SecurityCenterArmOperation<ManagementGroupGovernanceRuleResource>(Response.FromValue(new ManagementGroupGovernanceRuleResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a specific governance rule for the requested scope by ruleId
        /// Request Path: /providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Security/governanceRules/{ruleId}
        /// Operation Id: managementGroupGovernanceRules_Get
        /// </summary>
        /// <param name="ruleId"> The governance rule key - unique key for the standard governance rule (GUID). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ruleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ruleId"/> is null. </exception>
        public virtual async Task<Response<ManagementGroupGovernanceRuleResource>> GetAsync(string ruleId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(ruleId, nameof(ruleId));

            using var scope = _managementGroupGovernanceRulemanagementGroupGovernanceRulesClientDiagnostics.CreateScope("ManagementGroupGovernanceRuleCollection.Get");
            scope.Start();
            try
            {
                var response = await _managementGroupGovernanceRulemanagementGroupGovernanceRulesRestClient.GetAsync(ruleId, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ManagementGroupGovernanceRuleResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a specific governance rule for the requested scope by ruleId
        /// Request Path: /providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Security/governanceRules/{ruleId}
        /// Operation Id: managementGroupGovernanceRules_Get
        /// </summary>
        /// <param name="ruleId"> The governance rule key - unique key for the standard governance rule (GUID). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ruleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ruleId"/> is null. </exception>
        public virtual Response<ManagementGroupGovernanceRuleResource> Get(string ruleId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(ruleId, nameof(ruleId));

            using var scope = _managementGroupGovernanceRulemanagementGroupGovernanceRulesClientDiagnostics.CreateScope("ManagementGroupGovernanceRuleCollection.Get");
            scope.Start();
            try
            {
                var response = _managementGroupGovernanceRulemanagementGroupGovernanceRulesRestClient.Get(ruleId, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ManagementGroupGovernanceRuleResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a list of all relevant governance rules over a management group level scope
        /// Request Path: /providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Security/governanceRules
        /// Operation Id: ManagementGroupGovernanceRule_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ManagementGroupGovernanceRuleResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ManagementGroupGovernanceRuleResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ManagementGroupGovernanceRuleResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _managementGroupGovernanceRuleClientDiagnostics.CreateScope("ManagementGroupGovernanceRuleCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _managementGroupGovernanceRuleRestClient.ListAsync(cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ManagementGroupGovernanceRuleResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ManagementGroupGovernanceRuleResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _managementGroupGovernanceRuleClientDiagnostics.CreateScope("ManagementGroupGovernanceRuleCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _managementGroupGovernanceRuleRestClient.ListNextPageAsync(nextLink, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ManagementGroupGovernanceRuleResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Get a list of all relevant governance rules over a management group level scope
        /// Request Path: /providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Security/governanceRules
        /// Operation Id: ManagementGroupGovernanceRule_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ManagementGroupGovernanceRuleResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ManagementGroupGovernanceRuleResource> GetAll(CancellationToken cancellationToken = default)
        {
            Page<ManagementGroupGovernanceRuleResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _managementGroupGovernanceRuleClientDiagnostics.CreateScope("ManagementGroupGovernanceRuleCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _managementGroupGovernanceRuleRestClient.List(cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ManagementGroupGovernanceRuleResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ManagementGroupGovernanceRuleResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _managementGroupGovernanceRuleClientDiagnostics.CreateScope("ManagementGroupGovernanceRuleCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _managementGroupGovernanceRuleRestClient.ListNextPage(nextLink, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ManagementGroupGovernanceRuleResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Security/governanceRules/{ruleId}
        /// Operation Id: managementGroupGovernanceRules_Get
        /// </summary>
        /// <param name="ruleId"> The governance rule key - unique key for the standard governance rule (GUID). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ruleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ruleId"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string ruleId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(ruleId, nameof(ruleId));

            using var scope = _managementGroupGovernanceRulemanagementGroupGovernanceRulesClientDiagnostics.CreateScope("ManagementGroupGovernanceRuleCollection.Exists");
            scope.Start();
            try
            {
                var response = await _managementGroupGovernanceRulemanagementGroupGovernanceRulesRestClient.GetAsync(ruleId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Security/governanceRules/{ruleId}
        /// Operation Id: managementGroupGovernanceRules_Get
        /// </summary>
        /// <param name="ruleId"> The governance rule key - unique key for the standard governance rule (GUID). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ruleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ruleId"/> is null. </exception>
        public virtual Response<bool> Exists(string ruleId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(ruleId, nameof(ruleId));

            using var scope = _managementGroupGovernanceRulemanagementGroupGovernanceRulesClientDiagnostics.CreateScope("ManagementGroupGovernanceRuleCollection.Exists");
            scope.Start();
            try
            {
                var response = _managementGroupGovernanceRulemanagementGroupGovernanceRulesRestClient.Get(ruleId, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<ManagementGroupGovernanceRuleResource> IEnumerable<ManagementGroupGovernanceRuleResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<ManagementGroupGovernanceRuleResource> IAsyncEnumerable<ManagementGroupGovernanceRuleResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
