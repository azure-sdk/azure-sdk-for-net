// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;

namespace Azure.ResourceManager.SecurityCenter.Samples
{
    public partial class Sample_DataScannerResource
    {
        // Get a specific security scanner by scope and scannerName
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetASpecificSecurityScannerByScopeAndScannerName()
        {
            // Generated from example definition: specification/security/resource-manager/Microsoft.Security/preview/2024-01-01-preview/examples/GetDataScanner_example.json
            // this example is just showing the usage of "DataScanners_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DataScannerResource created on azure
            // for more information of creating DataScannerResource, please refer to the document of DataScannerResource
            string subscriptionId = "20ff7fc3-e762-44dd-bd96-b71116dcdc23";
            string dataScannerName = "datascanner";
            ResourceIdentifier dataScannerResourceId = DataScannerResource.CreateResourceIdentifier(subscriptionId, dataScannerName);
            DataScannerResource dataScanner = client.GetDataScannerResource(dataScannerResourceId);

            // invoke the operation
            DataScannerResource result = await dataScanner.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DataScannerData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create a security data scanner
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_CreateASecurityDataScanner()
        {
            // Generated from example definition: specification/security/resource-manager/Microsoft.Security/preview/2024-01-01-preview/examples/PutDataScanner_example.json
            // this example is just showing the usage of "DataScanners_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DataScannerResource created on azure
            // for more information of creating DataScannerResource, please refer to the document of DataScannerResource
            string subscriptionId = "20ff7fc3-e762-44dd-bd96-b71116dcdc23";
            string dataScannerName = "datascanner";
            ResourceIdentifier dataScannerResourceId = DataScannerResource.CreateResourceIdentifier(subscriptionId, dataScannerName);
            DataScannerResource dataScanner = client.GetDataScannerResource(dataScannerResourceId);

            // invoke the operation
            ArmOperation<DataScannerResource> lro = await dataScanner.UpdateAsync(WaitUntil.Completed);
            DataScannerResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DataScannerData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Delete a security data scanner
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DeleteASecurityDataScanner()
        {
            // Generated from example definition: specification/security/resource-manager/Microsoft.Security/preview/2024-01-01-preview/examples/DeleteDataScanner_example.json
            // this example is just showing the usage of "DataScanners_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DataScannerResource created on azure
            // for more information of creating DataScannerResource, please refer to the document of DataScannerResource
            string subscriptionId = "20ff7fc3-e762-44dd-bd96-b71116dcdc23";
            string dataScannerName = "datascanner";
            ResourceIdentifier dataScannerResourceId = DataScannerResource.CreateResourceIdentifier(subscriptionId, dataScannerName);
            DataScannerResource dataScanner = client.GetDataScannerResource(dataScannerResourceId);

            // invoke the operation
            await dataScanner.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }
    }
}
