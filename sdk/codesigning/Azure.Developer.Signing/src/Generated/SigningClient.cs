// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Developer.Signing
{
    // Data plane generated client.
    /// <summary> The Signing service client. </summary>
    public partial class SigningClient
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://codesigning.azure.net/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly string _region;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of SigningClient for mocking. </summary>
        protected SigningClient()
        {
        }

        /// <summary> Initializes a new instance of SigningClient. </summary>
        /// <param name="region"> The Azure region wherein requests for signing will be sent. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="region"/> or <paramref name="credential"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="region"/> is an empty string, and was expected to be non-empty. </exception>
        public SigningClient(string region, TokenCredential credential) : this(region, credential, new SigningClientOptions())
        {
        }

        /// <summary> Initializes a new instance of SigningClient. </summary>
        /// <param name="region"> The Azure region wherein requests for signing will be sent. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="region"/> or <paramref name="credential"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="region"/> is an empty string, and was expected to be non-empty. </exception>
        public SigningClient(string region, TokenCredential credential, SigningClientOptions options)
        {
            Argument.AssertNotNullOrEmpty(region, nameof(region));
            Argument.AssertNotNull(credential, nameof(credential));
            options ??= new SigningClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) }, new ResponseClassifier());
            _region = region;
            _apiVersion = options.Version;
        }

        /// <summary> Gets the signing root certificate on the certificate chain for that account and profile name. </summary>
        /// <param name="accountName"> Signing account name. </param>
        /// <param name="certificateProfile"> Signing Certificate profile name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> or <paramref name="certificateProfile"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> or <paramref name="certificateProfile"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> The root certificate is generated as part of the initial account creation and it is used to sign the bits for the profile provided. </remarks>
        /// <include file="Docs/SigningClient.xml" path="doc/members/member[@name='GetSignRootCertificateAsync(string,string,CancellationToken)']/*" />
        public virtual async Task<Response<BinaryData>> GetSignRootCertificateAsync(string accountName, string certificateProfile, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));
            Argument.AssertNotNullOrEmpty(certificateProfile, nameof(certificateProfile));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetSignRootCertificateAsync(accountName, certificateProfile, context).ConfigureAwait(false);
            return Response.FromValue(response.Content, response);
        }

        /// <summary> Gets the signing root certificate on the certificate chain for that account and profile name. </summary>
        /// <param name="accountName"> Signing account name. </param>
        /// <param name="certificateProfile"> Signing Certificate profile name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> or <paramref name="certificateProfile"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> or <paramref name="certificateProfile"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> The root certificate is generated as part of the initial account creation and it is used to sign the bits for the profile provided. </remarks>
        /// <include file="Docs/SigningClient.xml" path="doc/members/member[@name='GetSignRootCertificate(string,string,CancellationToken)']/*" />
        public virtual Response<BinaryData> GetSignRootCertificate(string accountName, string certificateProfile, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));
            Argument.AssertNotNullOrEmpty(certificateProfile, nameof(certificateProfile));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetSignRootCertificate(accountName, certificateProfile, context);
            return Response.FromValue(response.Content, response);
        }

        /// <summary>
        /// [Protocol Method] Gets the signing root certificate on the certificate chain for that account and profile name.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetSignRootCertificateAsync(string,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountName"> Signing account name. </param>
        /// <param name="certificateProfile"> Signing Certificate profile name. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> or <paramref name="certificateProfile"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> or <paramref name="certificateProfile"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SigningClient.xml" path="doc/members/member[@name='GetSignRootCertificateAsync(string,string,RequestContext)']/*" />
        public virtual async Task<Response> GetSignRootCertificateAsync(string accountName, string certificateProfile, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));
            Argument.AssertNotNullOrEmpty(certificateProfile, nameof(certificateProfile));

            using var scope = ClientDiagnostics.CreateScope("SigningClient.GetSignRootCertificate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSignRootCertificateRequest(accountName, certificateProfile, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets the signing root certificate on the certificate chain for that account and profile name.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetSignRootCertificate(string,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountName"> Signing account name. </param>
        /// <param name="certificateProfile"> Signing Certificate profile name. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> or <paramref name="certificateProfile"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> or <paramref name="certificateProfile"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SigningClient.xml" path="doc/members/member[@name='GetSignRootCertificate(string,string,RequestContext)']/*" />
        public virtual Response GetSignRootCertificate(string accountName, string certificateProfile, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));
            Argument.AssertNotNullOrEmpty(certificateProfile, nameof(certificateProfile));

            using var scope = ClientDiagnostics.CreateScope("SigningClient.GetSignRootCertificate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSignRootCertificateRequest(accountName, certificateProfile, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a list of extended key usage object identifiers that are allowed for this account and profile combination. </summary>
        /// <param name="accountName"> Azure Developer Signing account name. </param>
        /// <param name="certificateProfile"> Azure Developer Signing certificate profile name under an account. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> or <paramref name="certificateProfile"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> or <paramref name="certificateProfile"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> The list of extended key usages are used to determine the purpose of the certificate usage as part of the signing operation. </remarks>
        /// <include file="Docs/SigningClient.xml" path="doc/members/member[@name='GetExtendedKeyUsagesAsync(string,string,CancellationToken)']/*" />
        public virtual AsyncPageable<ExtendedKeyUsage> GetExtendedKeyUsagesAsync(string accountName, string certificateProfile, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));
            Argument.AssertNotNullOrEmpty(certificateProfile, nameof(certificateProfile));

            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetExtendedKeyUsagesRequest(accountName, certificateProfile, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetExtendedKeyUsagesNextPageRequest(nextLink, accountName, certificateProfile, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, ExtendedKeyUsage.DeserializeExtendedKeyUsage, ClientDiagnostics, _pipeline, "SigningClient.GetExtendedKeyUsages", "value", "nextLink", context);
        }

        /// <summary> Gets a list of extended key usage object identifiers that are allowed for this account and profile combination. </summary>
        /// <param name="accountName"> Azure Developer Signing account name. </param>
        /// <param name="certificateProfile"> Azure Developer Signing certificate profile name under an account. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> or <paramref name="certificateProfile"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> or <paramref name="certificateProfile"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> The list of extended key usages are used to determine the purpose of the certificate usage as part of the signing operation. </remarks>
        /// <include file="Docs/SigningClient.xml" path="doc/members/member[@name='GetExtendedKeyUsages(string,string,CancellationToken)']/*" />
        public virtual Pageable<ExtendedKeyUsage> GetExtendedKeyUsages(string accountName, string certificateProfile, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));
            Argument.AssertNotNullOrEmpty(certificateProfile, nameof(certificateProfile));

            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetExtendedKeyUsagesRequest(accountName, certificateProfile, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetExtendedKeyUsagesNextPageRequest(nextLink, accountName, certificateProfile, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, ExtendedKeyUsage.DeserializeExtendedKeyUsage, ClientDiagnostics, _pipeline, "SigningClient.GetExtendedKeyUsages", "value", "nextLink", context);
        }

        /// <summary>
        /// [Protocol Method] Gets a list of extended key usage object identifiers that are allowed for this account and profile combination.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetExtendedKeyUsagesAsync(string,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountName"> Azure Developer Signing account name. </param>
        /// <param name="certificateProfile"> Azure Developer Signing certificate profile name under an account. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> or <paramref name="certificateProfile"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> or <paramref name="certificateProfile"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/SigningClient.xml" path="doc/members/member[@name='GetExtendedKeyUsagesAsync(string,string,RequestContext)']/*" />
        public virtual AsyncPageable<BinaryData> GetExtendedKeyUsagesAsync(string accountName, string certificateProfile, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));
            Argument.AssertNotNullOrEmpty(certificateProfile, nameof(certificateProfile));

            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetExtendedKeyUsagesRequest(accountName, certificateProfile, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetExtendedKeyUsagesNextPageRequest(nextLink, accountName, certificateProfile, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "SigningClient.GetExtendedKeyUsages", "value", "nextLink", context);
        }

        /// <summary>
        /// [Protocol Method] Gets a list of extended key usage object identifiers that are allowed for this account and profile combination.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetExtendedKeyUsages(string,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountName"> Azure Developer Signing account name. </param>
        /// <param name="certificateProfile"> Azure Developer Signing certificate profile name under an account. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> or <paramref name="certificateProfile"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> or <paramref name="certificateProfile"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/SigningClient.xml" path="doc/members/member[@name='GetExtendedKeyUsages(string,string,RequestContext)']/*" />
        public virtual Pageable<BinaryData> GetExtendedKeyUsages(string accountName, string certificateProfile, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));
            Argument.AssertNotNullOrEmpty(certificateProfile, nameof(certificateProfile));

            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetExtendedKeyUsagesRequest(accountName, certificateProfile, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetExtendedKeyUsagesNextPageRequest(nextLink, accountName, certificateProfile, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "SigningClient.GetExtendedKeyUsages", "value", "nextLink", context);
        }

        /// <summary> Submit a sign operation. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="accountName"> Azure Developer Signing account name. </param>
        /// <param name="certificateProfile"> Azure Developer Signing certificate profile name under an account. </param>
        /// <param name="signingPayloadOptions"> The artifact request information to be signed by the service. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/>, <paramref name="certificateProfile"/> or <paramref name="signingPayloadOptions"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> or <paramref name="certificateProfile"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Submit a sign operation under the created account and profile name provided. </remarks>
        /// <include file="Docs/SigningClient.xml" path="doc/members/member[@name='SignAsync(WaitUntil,string,string,SigningPayloadOptions,CancellationToken)']/*" />
        public virtual async Task<Operation<ResourceOperationStatusCertificateProfileNameSignResultError>> SignAsync(WaitUntil waitUntil, string accountName, string certificateProfile, SigningPayloadOptions signingPayloadOptions, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));
            Argument.AssertNotNullOrEmpty(certificateProfile, nameof(certificateProfile));
            Argument.AssertNotNull(signingPayloadOptions, nameof(signingPayloadOptions));

            RequestContext context = FromCancellationToken(cancellationToken);
            using RequestContent content = signingPayloadOptions.ToRequestContent();
            Operation<BinaryData> response = await SignAsync(waitUntil, accountName, certificateProfile, content, context).ConfigureAwait(false);
            return ProtocolOperationHelpers.Convert(response, ResourceOperationStatusCertificateProfileNameSignResultError.FromResponse, ClientDiagnostics, "SigningClient.Sign");
        }

        /// <summary> Submit a sign operation. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="accountName"> Azure Developer Signing account name. </param>
        /// <param name="certificateProfile"> Azure Developer Signing certificate profile name under an account. </param>
        /// <param name="signingPayloadOptions"> The artifact request information to be signed by the service. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/>, <paramref name="certificateProfile"/> or <paramref name="signingPayloadOptions"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> or <paramref name="certificateProfile"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Submit a sign operation under the created account and profile name provided. </remarks>
        /// <include file="Docs/SigningClient.xml" path="doc/members/member[@name='Sign(WaitUntil,string,string,SigningPayloadOptions,CancellationToken)']/*" />
        public virtual Operation<ResourceOperationStatusCertificateProfileNameSignResultError> Sign(WaitUntil waitUntil, string accountName, string certificateProfile, SigningPayloadOptions signingPayloadOptions, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));
            Argument.AssertNotNullOrEmpty(certificateProfile, nameof(certificateProfile));
            Argument.AssertNotNull(signingPayloadOptions, nameof(signingPayloadOptions));

            RequestContext context = FromCancellationToken(cancellationToken);
            using RequestContent content = signingPayloadOptions.ToRequestContent();
            Operation<BinaryData> response = Sign(waitUntil, accountName, certificateProfile, content, context);
            return ProtocolOperationHelpers.Convert(response, ResourceOperationStatusCertificateProfileNameSignResultError.FromResponse, ClientDiagnostics, "SigningClient.Sign");
        }

        /// <summary>
        /// [Protocol Method] Submit a sign operation.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="SignAsync(WaitUntil,string,string,SigningPayloadOptions,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="accountName"> Azure Developer Signing account name. </param>
        /// <param name="certificateProfile"> Azure Developer Signing certificate profile name under an account. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/>, <paramref name="certificateProfile"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> or <paramref name="certificateProfile"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation"/> representing an asynchronous operation on the service. </returns>
        /// <include file="Docs/SigningClient.xml" path="doc/members/member[@name='SignAsync(WaitUntil,string,string,RequestContent,RequestContext)']/*" />
        public virtual async Task<Operation<BinaryData>> SignAsync(WaitUntil waitUntil, string accountName, string certificateProfile, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));
            Argument.AssertNotNullOrEmpty(certificateProfile, nameof(certificateProfile));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SigningClient.Sign");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSignRequest(accountName, certificateProfile, content, context);
                return await ProtocolOperationHelpers.ProcessMessageAsync(_pipeline, message, ClientDiagnostics, "SigningClient.Sign", OperationFinalStateVia.Location, context, waitUntil).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Submit a sign operation.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="Sign(WaitUntil,string,string,SigningPayloadOptions,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="accountName"> Azure Developer Signing account name. </param>
        /// <param name="certificateProfile"> Azure Developer Signing certificate profile name under an account. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/>, <paramref name="certificateProfile"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> or <paramref name="certificateProfile"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation"/> representing an asynchronous operation on the service. </returns>
        /// <include file="Docs/SigningClient.xml" path="doc/members/member[@name='Sign(WaitUntil,string,string,RequestContent,RequestContext)']/*" />
        public virtual Operation<BinaryData> Sign(WaitUntil waitUntil, string accountName, string certificateProfile, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));
            Argument.AssertNotNullOrEmpty(certificateProfile, nameof(certificateProfile));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SigningClient.Sign");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSignRequest(accountName, certificateProfile, content, context);
                return ProtocolOperationHelpers.ProcessMessage(_pipeline, message, ClientDiagnostics, "SigningClient.Sign", OperationFinalStateVia.Location, context, waitUntil);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateGetSignRootCertificateRequest(string accountName, string certificateProfile, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region, true);
            uri.AppendRaw(".codesigning.azure.net/", false);
            uri.AppendPath("/codesigningaccounts/", false);
            uri.AppendPath(accountName, true);
            uri.AppendPath("/certificateprofiles/", false);
            uri.AppendPath(certificateProfile, true);
            uri.AppendPath("/sign/rootcert", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetExtendedKeyUsagesRequest(string accountName, string certificateProfile, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region, true);
            uri.AppendRaw(".codesigning.azure.net/", false);
            uri.AppendPath("/codesigningaccounts/", false);
            uri.AppendPath(accountName, true);
            uri.AppendPath("/certificateprofiles/", false);
            uri.AppendPath(certificateProfile, true);
            uri.AppendPath("/sign/eku", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateSignRequest(string accountName, string certificateProfile, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region, true);
            uri.AppendRaw(".codesigning.azure.net/", false);
            uri.AppendPath("/codesigningaccounts/", false);
            uri.AppendPath(accountName, true);
            uri.AppendPath("/certificateprofiles/", false);
            uri.AppendPath(certificateProfile, true);
            uri.AppendPath(":sign", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetExtendedKeyUsagesNextPageRequest(string nextLink, string accountName, string certificateProfile, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_region, true);
            uri.AppendRaw(".codesigning.azure.net/", false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier202;
        private static ResponseClassifier ResponseClassifier202 => _responseClassifier202 ??= new StatusCodeClassifier(stackalloc ushort[] { 202 });
    }
}
