// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Codesigning.Models;

namespace Azure.ResourceManager.Codesigning
{
    /// <summary> A class to add extension methods to SubscriptionResource. </summary>
    internal partial class SubscriptionResourceExtensionClient : ArmResource
    {
        private ClientDiagnostics _codeSigningAccountClientDiagnostics;
        private CodeSigningAccountRestOperations _codeSigningAccountRestClient;

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class for mocking. </summary>
        protected SubscriptionResourceExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal SubscriptionResourceExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics CodeSigningAccountClientDiagnostics => _codeSigningAccountClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Codesigning", CodeSigningAccountResource.ResourceType.Namespace, Diagnostics);
        private CodeSigningAccountRestOperations CodeSigningAccountRestClient => _codeSigningAccountRestClient ??= new CodeSigningAccountRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(CodeSigningAccountResource.ResourceType));

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// Lists Code Signing Accounts within a subscription
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.CodeSigning/codeSigningAccounts</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CodeSigningAccount_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="CodeSigningAccountResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<CodeSigningAccountResource> GetCodeSigningAccountsAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => CodeSigningAccountRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CodeSigningAccountRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new CodeSigningAccountResource(Client, CodeSigningAccountData.DeserializeCodeSigningAccountData(e)), CodeSigningAccountClientDiagnostics, Pipeline, "SubscriptionResourceExtensionClient.GetCodeSigningAccounts", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists Code Signing Accounts within a subscription
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.CodeSigning/codeSigningAccounts</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CodeSigningAccount_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="CodeSigningAccountResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<CodeSigningAccountResource> GetCodeSigningAccounts(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => CodeSigningAccountRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CodeSigningAccountRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new CodeSigningAccountResource(Client, CodeSigningAccountData.DeserializeCodeSigningAccountData(e)), CodeSigningAccountClientDiagnostics, Pipeline, "SubscriptionResourceExtensionClient.GetCodeSigningAccounts", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks that the code signing account name is valid and is not already in use.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.CodeSigning/checkNameAvailability</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CodeSigningAccount_CheckNameAvailability</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountName"> The name of the code signing account. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<CheckNameAvailabilityResult>> CheckNameAvailabilityCodeSigningAccountAsync(CheckNameAvailability accountName, CancellationToken cancellationToken = default)
        {
            using var scope = CodeSigningAccountClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.CheckNameAvailabilityCodeSigningAccount");
            scope.Start();
            try
            {
                var response = await CodeSigningAccountRestClient.CheckNameAvailabilityAsync(Id.SubscriptionId, accountName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks that the code signing account name is valid and is not already in use.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.CodeSigning/checkNameAvailability</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CodeSigningAccount_CheckNameAvailability</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountName"> The name of the code signing account. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<CheckNameAvailabilityResult> CheckNameAvailabilityCodeSigningAccount(CheckNameAvailability accountName, CancellationToken cancellationToken = default)
        {
            using var scope = CodeSigningAccountClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.CheckNameAvailabilityCodeSigningAccount");
            scope.Start();
            try
            {
                var response = CodeSigningAccountRestClient.CheckNameAvailability(Id.SubscriptionId, accountName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
