// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.CodeSigning;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.CodeSigning.Samples
{
    public partial class Samples_CodeSigningClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSignRootCertificate_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CodeSigningClient client = new CodeSigningClient("<region>", credential);

            Response response = client.GetSignRootCertificate("<codeSigningAccountName>", "<certificateProfileName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSignRootCertificate_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CodeSigningClient client = new CodeSigningClient("<region>", credential);

            Response response = await client.GetSignRootCertificateAsync("<codeSigningAccountName>", "<certificateProfileName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSignRootCertificate_ShortVersion_Convenience()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CodeSigningClient client = new CodeSigningClient("<region>", credential);

            Response<BinaryData> response = client.GetSignRootCertificate("<codeSigningAccountName>", "<certificateProfileName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSignRootCertificate_ShortVersion_Convenience_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CodeSigningClient client = new CodeSigningClient("<region>", credential);

            Response<BinaryData> response = await client.GetSignRootCertificateAsync("<codeSigningAccountName>", "<certificateProfileName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSignRootCertificate_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CodeSigningClient client = new CodeSigningClient("<region>", credential);

            Response response = client.GetSignRootCertificate("<codeSigningAccountName>", "<certificateProfileName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSignRootCertificate_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CodeSigningClient client = new CodeSigningClient("<region>", credential);

            Response response = await client.GetSignRootCertificateAsync("<codeSigningAccountName>", "<certificateProfileName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSignRootCertificate_AllParameters_Convenience()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CodeSigningClient client = new CodeSigningClient("<region>", credential);

            Response<BinaryData> response = client.GetSignRootCertificate("<codeSigningAccountName>", "<certificateProfileName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSignRootCertificate_AllParameters_Convenience_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CodeSigningClient client = new CodeSigningClient("<region>", credential);

            Response<BinaryData> response = await client.GetSignRootCertificateAsync("<codeSigningAccountName>", "<certificateProfileName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSignEkus_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CodeSigningClient client = new CodeSigningClient("<region>", credential);

            foreach (BinaryData item in client.GetSignEkus("<codeSigningAccountName>", "<certificateProfileName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("ekus")[0].ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSignEkus_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CodeSigningClient client = new CodeSigningClient("<region>", credential);

            await foreach (BinaryData item in client.GetSignEkusAsync("<codeSigningAccountName>", "<certificateProfileName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("ekus")[0].ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSignEkus_ShortVersion_Convenience()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CodeSigningClient client = new CodeSigningClient("<region>", credential);

            foreach (ExtendedKeyUsage item in client.GetSignEkus("<codeSigningAccountName>", "<certificateProfileName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSignEkus_ShortVersion_Convenience_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CodeSigningClient client = new CodeSigningClient("<region>", credential);

            await foreach (ExtendedKeyUsage item in client.GetSignEkusAsync("<codeSigningAccountName>", "<certificateProfileName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSignEkus_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CodeSigningClient client = new CodeSigningClient("<region>", credential);

            foreach (BinaryData item in client.GetSignEkus("<codeSigningAccountName>", "<certificateProfileName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("ekus")[0].ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSignEkus_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CodeSigningClient client = new CodeSigningClient("<region>", credential);

            await foreach (BinaryData item in client.GetSignEkusAsync("<codeSigningAccountName>", "<certificateProfileName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("ekus")[0].ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSignEkus_AllParameters_Convenience()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CodeSigningClient client = new CodeSigningClient("<region>", credential);

            foreach (ExtendedKeyUsage item in client.GetSignEkus("<codeSigningAccountName>", "<certificateProfileName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSignEkus_AllParameters_Convenience_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CodeSigningClient client = new CodeSigningClient("<region>", credential);

            await foreach (ExtendedKeyUsage item in client.GetSignEkusAsync("<codeSigningAccountName>", "<certificateProfileName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Sign_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CodeSigningClient client = new CodeSigningClient("<region>", credential);

            RequestContent content = RequestContent.Create(new
            {
                signatureAlgorithm = "RS256",
                digest = new object(),
            });
            Operation<BinaryData> operation = client.Sign(WaitUntil.Completed, "<codeSigningAccountName>", "<certificateProfileName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Sign_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CodeSigningClient client = new CodeSigningClient("<region>", credential);

            RequestContent content = RequestContent.Create(new
            {
                signatureAlgorithm = "RS256",
                digest = new object(),
            });
            Operation<BinaryData> operation = await client.SignAsync(WaitUntil.Completed, "<codeSigningAccountName>", "<certificateProfileName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Sign_ShortVersion_Convenience()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CodeSigningClient client = new CodeSigningClient("<region>", credential);

            CodeSigningSubmissionOptions codeSigningSubmissionOptions = new CodeSigningSubmissionOptions(SignatureAlgorithm.RS256, BinaryData.FromObjectAsJson(new object()));
            Operation<ResourceOperationStatusCertificateProfileCodeSignOperationStatusError> operation = client.Sign(WaitUntil.Completed, "<codeSigningAccountName>", "<certificateProfileName>", codeSigningSubmissionOptions);
            ResourceOperationStatusCertificateProfileCodeSignOperationStatusError responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Sign_ShortVersion_Convenience_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CodeSigningClient client = new CodeSigningClient("<region>", credential);

            CodeSigningSubmissionOptions codeSigningSubmissionOptions = new CodeSigningSubmissionOptions(SignatureAlgorithm.RS256, BinaryData.FromObjectAsJson(new object()));
            Operation<ResourceOperationStatusCertificateProfileCodeSignOperationStatusError> operation = await client.SignAsync(WaitUntil.Completed, "<codeSigningAccountName>", "<certificateProfileName>", codeSigningSubmissionOptions);
            ResourceOperationStatusCertificateProfileCodeSignOperationStatusError responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Sign_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CodeSigningClient client = new CodeSigningClient("<region>", credential);

            RequestContent content = RequestContent.Create(new
            {
                signatureAlgorithm = "RS256",
                digest = new object(),
                fileHashList = new object[]
            {
new object()
            },
                authenticodeHashList = new object[]
            {
new object()
            },
            });
            Operation<BinaryData> operation = client.Sign(WaitUntil.Completed, "<codeSigningAccountName>", "<certificateProfileName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("signResult").GetProperty("operationId").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("signResult").GetProperty("signature").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("signResult").GetProperty("signingCertificate").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Sign_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CodeSigningClient client = new CodeSigningClient("<region>", credential);

            RequestContent content = RequestContent.Create(new
            {
                signatureAlgorithm = "RS256",
                digest = new object(),
                fileHashList = new object[]
            {
new object()
            },
                authenticodeHashList = new object[]
            {
new object()
            },
            });
            Operation<BinaryData> operation = await client.SignAsync(WaitUntil.Completed, "<codeSigningAccountName>", "<certificateProfileName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("signResult").GetProperty("operationId").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("signResult").GetProperty("signature").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("signResult").GetProperty("signingCertificate").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Sign_AllParameters_Convenience()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CodeSigningClient client = new CodeSigningClient("<region>", credential);

            CodeSigningSubmissionOptions codeSigningSubmissionOptions = new CodeSigningSubmissionOptions(SignatureAlgorithm.RS256, BinaryData.FromObjectAsJson(new object()))
            {
                FileHashList = { BinaryData.FromObjectAsJson(new object()) },
                AuthenticodeHashList = { BinaryData.FromObjectAsJson(new object()) },
            };
            Operation<ResourceOperationStatusCertificateProfileCodeSignOperationStatusError> operation = client.Sign(WaitUntil.Completed, "<codeSigningAccountName>", "<certificateProfileName>", codeSigningSubmissionOptions);
            ResourceOperationStatusCertificateProfileCodeSignOperationStatusError responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Sign_AllParameters_Convenience_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CodeSigningClient client = new CodeSigningClient("<region>", credential);

            CodeSigningSubmissionOptions codeSigningSubmissionOptions = new CodeSigningSubmissionOptions(SignatureAlgorithm.RS256, BinaryData.FromObjectAsJson(new object()))
            {
                FileHashList = { BinaryData.FromObjectAsJson(new object()) },
                AuthenticodeHashList = { BinaryData.FromObjectAsJson(new object()) },
            };
            Operation<ResourceOperationStatusCertificateProfileCodeSignOperationStatusError> operation = await client.SignAsync(WaitUntil.Completed, "<codeSigningAccountName>", "<certificateProfileName>", codeSigningSubmissionOptions);
            ResourceOperationStatusCertificateProfileCodeSignOperationStatusError responseData = operation.Value;
        }
    }
}
