// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.Communication.ProgrammableConnectivity
{
    /// <summary> Model factory for models. </summary>
    public static partial class CommunicationProgrammableConnectivityModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="ProgrammableConnectivity.DeviceLocationVerificationResult"/>. </summary>
        /// <param name="verificationResult"> True if the location is in the specified area, False otherwise. </param>
        /// <returns> A new <see cref="ProgrammableConnectivity.DeviceLocationVerificationResult"/> instance for mocking. </returns>
        public static DeviceLocationVerificationResult DeviceLocationVerificationResult(bool verificationResult = default)
        {
            return new DeviceLocationVerificationResult(verificationResult);
        }

        /// <summary> Initializes a new instance of <see cref="ProgrammableConnectivity.NetworkRetrievalResult"/>. </summary>
        /// <param name="networkCode"> The identifier for the network. This can be used as the networkIdentifier for the service APIs. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="networkCode"/> is null. </exception>
        /// <returns> A new <see cref="ProgrammableConnectivity.NetworkRetrievalResult"/> instance for mocking. </returns>
        public static NetworkRetrievalResult NetworkRetrievalResult(string networkCode = null)
        {
            if (networkCode == null)
            {
                throw new ArgumentNullException(nameof(networkCode));
            }

            return new NetworkRetrievalResult(networkCode);
        }

        /// <summary> Initializes a new instance of <see cref="ProgrammableConnectivity.NumberVerificationResult"/>. </summary>
        /// <param name="verificationResult"> True if number if the phone number matches the device, False otherwise. </param>
        /// <returns> A new <see cref="ProgrammableConnectivity.NumberVerificationResult"/> instance for mocking. </returns>
        public static NumberVerificationResult NumberVerificationResult(bool verificationResult = default)
        {
            return new NumberVerificationResult(verificationResult);
        }

        /// <summary> Initializes a new instance of <see cref="ProgrammableConnectivity.NumberRetrievalResult"/>. </summary>
        /// <param name="phoneNumber"> Phone number in E.164 format (starting with country code), and optionally prefixed with '+'. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="phoneNumber"/> is null. </exception>
        /// <returns> A new <see cref="ProgrammableConnectivity.NumberRetrievalResult"/> instance for mocking. </returns>
        public static NumberRetrievalResult NumberRetrievalResult(string phoneNumber = null)
        {
            if (phoneNumber == null)
            {
                throw new ArgumentNullException(nameof(phoneNumber));
            }

            return new NumberRetrievalResult(phoneNumber);
        }

        /// <summary> Initializes a new instance of <see cref="ProgrammableConnectivity.SimSwapRetrievalResult"/>. </summary>
        /// <param name="date"> Datetime of most recent swap for SIM. </param>
        /// <returns> A new <see cref="ProgrammableConnectivity.SimSwapRetrievalResult"/> instance for mocking. </returns>
        public static SimSwapRetrievalResult SimSwapRetrievalResult(DateTimeOffset date = default)
        {
            return new SimSwapRetrievalResult(date);
        }

        /// <summary> Initializes a new instance of <see cref="ProgrammableConnectivity.SimSwapVerificationResult"/>. </summary>
        /// <param name="verificationResult"> True if the SIM has swapped in the specified period, False otherwise. </param>
        /// <returns> A new <see cref="ProgrammableConnectivity.SimSwapVerificationResult"/> instance for mocking. </returns>
        public static SimSwapVerificationResult SimSwapVerificationResult(bool verificationResult = default)
        {
            return new SimSwapVerificationResult(verificationResult);
        }
    }
}
