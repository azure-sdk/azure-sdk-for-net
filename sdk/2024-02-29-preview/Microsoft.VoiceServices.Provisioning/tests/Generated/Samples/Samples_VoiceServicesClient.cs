// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Microsoft.VoiceServices.Provisioning.Samples
{
    public partial class Samples_VoiceServicesClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NumberResource_GetNumbers_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            VoiceServicesClient client = new VoiceServicesClient(endpoint, credential);

            Response response = client.GetNumbers(null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("telephoneNumber").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("accountName").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceDetails").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NumberResource_GetNumbers_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            VoiceServicesClient client = new VoiceServicesClient(endpoint, credential);

            Response response = await client.GetNumbersAsync(null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("telephoneNumber").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("accountName").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceDetails").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NumberResource_GetNumbers_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            VoiceServicesClient client = new VoiceServicesClient(endpoint, credential);

            Response<PagedNumberList> response = client.GetNumbers();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NumberResource_GetNumbers_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            VoiceServicesClient client = new VoiceServicesClient(endpoint, credential);

            Response<PagedNumberList> response = await client.GetNumbersAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NumberResource_GetNumbers_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            VoiceServicesClient client = new VoiceServicesClient(endpoint, credential);

            Response response = client.GetNumbers(1234, 1234, 1234, "<filter>", true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceProvisioningStatus").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceProvisioningErrors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceProvisioningErrors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceProvisioningErrors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceProvisioningErrors")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("telephoneNumber").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("accountName").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("assignmentStatus").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("choosableCapabilities")[0].ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("acquiredCapabilities")[0].ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("availableCapabilities")[0].ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("additionalUsages")[0].ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("civicAddressId").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("locationId").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("allowTenantAddressUpdate").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("displayedCountryCode").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("assignmentStatus").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("choosableCapabilities")[0].ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("acquiredCapabilities")[0].ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("availableCapabilities")[0].ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("additionalUsages")[0].ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("civicAddressId").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("locationId").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("allowTenantAddressUpdate").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("displayedCountryCode").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceDetails").GetProperty("zoomPhoneCloudPeering").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceDetails").GetProperty("azureOperatorCallProtection").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("configuration").GetProperty("customSipHeader").ToString());
            Console.WriteLine(result.GetProperty("nextLink").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NumberResource_GetNumbers_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            VoiceServicesClient client = new VoiceServicesClient(endpoint, credential);

            Response response = await client.GetNumbersAsync(1234, 1234, 1234, "<filter>", true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceProvisioningStatus").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceProvisioningErrors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceProvisioningErrors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceProvisioningErrors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceProvisioningErrors")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("telephoneNumber").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("accountName").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("assignmentStatus").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("choosableCapabilities")[0].ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("acquiredCapabilities")[0].ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("availableCapabilities")[0].ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("additionalUsages")[0].ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("civicAddressId").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("locationId").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("allowTenantAddressUpdate").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("displayedCountryCode").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("assignmentStatus").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("choosableCapabilities")[0].ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("acquiredCapabilities")[0].ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("availableCapabilities")[0].ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("additionalUsages")[0].ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("civicAddressId").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("locationId").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("allowTenantAddressUpdate").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("displayedCountryCode").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceDetails").GetProperty("zoomPhoneCloudPeering").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("serviceDetails").GetProperty("azureOperatorCallProtection").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("configuration").GetProperty("customSipHeader").ToString());
            Console.WriteLine(result.GetProperty("nextLink").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NumberResource_GetNumbers_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            VoiceServicesClient client = new VoiceServicesClient(endpoint, credential);

            Response<PagedNumberList> response = client.GetNumbers(top: 1234, skip: 1234, maxpagesize: 1234, filter: "<filter>", countRecords: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NumberResource_GetNumbers_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            VoiceServicesClient client = new VoiceServicesClient(endpoint, credential);

            Response<PagedNumberList> response = await client.GetNumbersAsync(top: 1234, skip: 1234, maxpagesize: 1234, filter: "<filter>", countRecords: true);
        }
    }
}
