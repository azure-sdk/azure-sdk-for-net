// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Microsoft.VoiceServices.Provisioning.Samples
{
    public partial class Samples_Accounts
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AccountResource_GetAccountResource_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response response = client.GetAccountResource("<accountName>", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AccountResource_GetAccountResource_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response response = await client.GetAccountResourceAsync("<accountName>", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AccountResource_GetAccountResource_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response<AccountResource> response = client.GetAccountResource("<accountName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AccountResource_GetAccountResource_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response<AccountResource> response = await client.GetAccountResourceAsync("<accountName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AccountResource_GetAccountResource_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response response = client.GetAccountResource("<accountName>", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("serviceProvisioningStatus").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("correlationId").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsTenantId").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("syncEnabled").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("numberCount").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("syncEnabled").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("numberCount").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("configuration").GetProperty("callScreening").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("configuration").GetProperty("subdomain").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("configuration").GetProperty("subdomainTokens").GetProperty("region1Token").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("configuration").GetProperty("subdomainTokens").GetProperty("region2Token").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("subdomainStatus").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("syncEnabled").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("numberCount").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("zoomPhoneCloudPeering").GetProperty("syncEnabled").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("zoomPhoneCloudPeering").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("zoomPhoneCloudPeering").GetProperty("numberCount").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("azureOperatorCallProtection").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("azureOperatorCallProtection").GetProperty("numberCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AccountResource_GetAccountResource_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response response = await client.GetAccountResourceAsync("<accountName>", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("serviceProvisioningStatus").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("correlationId").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsTenantId").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("syncEnabled").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("numberCount").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("syncEnabled").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("numberCount").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("configuration").GetProperty("callScreening").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("configuration").GetProperty("subdomain").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("configuration").GetProperty("subdomainTokens").GetProperty("region1Token").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("configuration").GetProperty("subdomainTokens").GetProperty("region2Token").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("subdomainStatus").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("syncEnabled").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("numberCount").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("zoomPhoneCloudPeering").GetProperty("syncEnabled").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("zoomPhoneCloudPeering").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("zoomPhoneCloudPeering").GetProperty("numberCount").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("azureOperatorCallProtection").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("azureOperatorCallProtection").GetProperty("numberCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AccountResource_GetAccountResource_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response<AccountResource> response = client.GetAccountResource("<accountName>", requestConditions: null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AccountResource_GetAccountResource_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response<AccountResource> response = await client.GetAccountResourceAsync("<accountName>", requestConditions: null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AccountResource_CreateOrReplace_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = client.CreateOrReplace("<accountName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AccountResource_CreateOrReplace_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.CreateOrReplaceAsync("<accountName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AccountResource_CreateOrReplace_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            AccountResource resource = new AccountResource("<name>");
            Response<AccountResource> response = client.CreateOrReplace("<accountName>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AccountResource_CreateOrReplace_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            AccountResource resource = new AccountResource("<name>");
            Response<AccountResource> response = await client.CreateOrReplaceAsync("<accountName>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AccountResource_CreateOrReplace_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                correlationId = "<correlationId>",
                serviceDetails = new
                {
                    teamsTenantId = "<teamsTenantId>",
                    teamsOperatorConnect = new
                    {
                        syncEnabled = true,
                        enabled = true,
                    },
                    teamsDirectRouting = new
                    {
                        syncEnabled = true,
                        enabled = true,
                        configuration = new
                        {
                            callScreening = true,
                            subdomain = "<subdomain>",
                            subdomainTokens = new
                            {
                                region1Token = "<region1Token>",
                                region2Token = "<region2Token>",
                            },
                        },
                    },
                    teamsPhoneMobile = new
                    {
                        syncEnabled = true,
                        enabled = true,
                    },
                    zoomPhoneCloudPeering = new
                    {
                        syncEnabled = true,
                        enabled = true,
                    },
                    azureOperatorCallProtection = new
                    {
                        enabled = true,
                    },
                },
            });
            Response response = client.CreateOrReplace("<accountName>", content, requestConditions: null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("serviceProvisioningStatus").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("correlationId").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsTenantId").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("syncEnabled").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("numberCount").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("syncEnabled").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("numberCount").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("configuration").GetProperty("callScreening").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("configuration").GetProperty("subdomain").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("configuration").GetProperty("subdomainTokens").GetProperty("region1Token").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("configuration").GetProperty("subdomainTokens").GetProperty("region2Token").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("subdomainStatus").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("syncEnabled").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("numberCount").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("zoomPhoneCloudPeering").GetProperty("syncEnabled").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("zoomPhoneCloudPeering").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("zoomPhoneCloudPeering").GetProperty("numberCount").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("azureOperatorCallProtection").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("azureOperatorCallProtection").GetProperty("numberCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AccountResource_CreateOrReplace_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                correlationId = "<correlationId>",
                serviceDetails = new
                {
                    teamsTenantId = "<teamsTenantId>",
                    teamsOperatorConnect = new
                    {
                        syncEnabled = true,
                        enabled = true,
                    },
                    teamsDirectRouting = new
                    {
                        syncEnabled = true,
                        enabled = true,
                        configuration = new
                        {
                            callScreening = true,
                            subdomain = "<subdomain>",
                            subdomainTokens = new
                            {
                                region1Token = "<region1Token>",
                                region2Token = "<region2Token>",
                            },
                        },
                    },
                    teamsPhoneMobile = new
                    {
                        syncEnabled = true,
                        enabled = true,
                    },
                    zoomPhoneCloudPeering = new
                    {
                        syncEnabled = true,
                        enabled = true,
                    },
                    azureOperatorCallProtection = new
                    {
                        enabled = true,
                    },
                },
            });
            Response response = await client.CreateOrReplaceAsync("<accountName>", content, requestConditions: null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("serviceProvisioningStatus").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("correlationId").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsTenantId").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("syncEnabled").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("numberCount").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("syncEnabled").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("numberCount").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("configuration").GetProperty("callScreening").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("configuration").GetProperty("subdomain").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("configuration").GetProperty("subdomainTokens").GetProperty("region1Token").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("configuration").GetProperty("subdomainTokens").GetProperty("region2Token").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("subdomainStatus").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("syncEnabled").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("numberCount").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("zoomPhoneCloudPeering").GetProperty("syncEnabled").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("zoomPhoneCloudPeering").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("zoomPhoneCloudPeering").GetProperty("numberCount").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("azureOperatorCallProtection").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("azureOperatorCallProtection").GetProperty("numberCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AccountResource_CreateOrReplace_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            AccountResource resource = new AccountResource("<name>")
            {
                CorrelationId = "<correlationId>",
                ServiceDetails = new AccountServiceDetails
                {
                    TeamsTenantId = "<teamsTenantId>",
                    TeamsOperatorConnect = new TeamsOperatorConnectAccountDetails(true, true),
                    TeamsDirectRouting = new TeamsDirectRoutingAccountDetails(true, true)
                    {
                        Configuration = new TeamsDirectRoutingAccountConfig(true, "<subdomain>", new TeamsDirectRoutingSubdomainTokens("<region1Token>", "<region2Token>")),
                    },
                    TeamsPhoneMobile = new TeamsPhoneMobileAccountDetails(true, true),
                    ZoomPhoneCloudPeering = new ZoomPhoneCloudPeeringAccountDetails(true, true),
                    AzureOperatorCallProtection = new AzureOperatorCallProtectionAccountDetails(true),
                },
            };
            Response<AccountResource> response = client.CreateOrReplace("<accountName>", resource, requestConditions: null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AccountResource_CreateOrReplace_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            AccountResource resource = new AccountResource("<name>")
            {
                CorrelationId = "<correlationId>",
                ServiceDetails = new AccountServiceDetails
                {
                    TeamsTenantId = "<teamsTenantId>",
                    TeamsOperatorConnect = new TeamsOperatorConnectAccountDetails(true, true),
                    TeamsDirectRouting = new TeamsDirectRoutingAccountDetails(true, true)
                    {
                        Configuration = new TeamsDirectRoutingAccountConfig(true, "<subdomain>", new TeamsDirectRoutingSubdomainTokens("<region1Token>", "<region2Token>")),
                    },
                    TeamsPhoneMobile = new TeamsPhoneMobileAccountDetails(true, true),
                    ZoomPhoneCloudPeering = new ZoomPhoneCloudPeeringAccountDetails(true, true),
                    AzureOperatorCallProtection = new AzureOperatorCallProtectionAccountDetails(true),
                },
            };
            Response<AccountResource> response = await client.CreateOrReplaceAsync("<accountName>", resource, requestConditions: null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AccountResource_Delete_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response response = client.Delete("<accountName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AccountResource_Delete_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response response = await client.DeleteAsync("<accountName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AccountResource_Delete_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response response = client.Delete("<accountName>", deleteNumbers: true, requestConditions: null);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AccountResource_Delete_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response response = await client.DeleteAsync("<accountName>", deleteNumbers: true, requestConditions: null);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Accounts_CreateOrUpdateNumbers_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            using RequestContent content = RequestContent.Create(new
            {
                numbers = new object[]
            {
new
{
telephoneNumber = "<telephoneNumber>",
accountName = "<accountName>",
serviceDetails = new object(),
}
            },
            });
            Response response = client.CreateOrUpdateNumbers("<accountName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("telephoneNumber").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("accountName").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Accounts_CreateOrUpdateNumbers_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            using RequestContent content = RequestContent.Create(new
            {
                numbers = new object[]
            {
new
{
telephoneNumber = "<telephoneNumber>",
accountName = "<accountName>",
serviceDetails = new object(),
}
            },
            });
            Response response = await client.CreateOrUpdateNumbersAsync("<accountName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("telephoneNumber").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("accountName").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Accounts_CreateOrUpdateNumbers_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            BatchNumbers body = new BatchNumbers(new NumberResource[]
            {
new NumberResource("<telephoneNumber>", "<accountName>", new NumberServiceDetails())
            });
            Response<BatchNumbers> response = client.CreateOrUpdateNumbers("<accountName>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Accounts_CreateOrUpdateNumbers_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            BatchNumbers body = new BatchNumbers(new NumberResource[]
            {
new NumberResource("<telephoneNumber>", "<accountName>", new NumberServiceDetails())
            });
            Response<BatchNumbers> response = await client.CreateOrUpdateNumbersAsync("<accountName>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Accounts_CreateOrUpdateNumbers_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            using RequestContent content = RequestContent.Create(new
            {
                numbers = new object[]
            {
new
{
telephoneNumber = "<telephoneNumber>",
accountName = "<accountName>",
serviceDetails = new
{
teamsOperatorConnect = new
{
enabled = true,
assignmentStatus = "assigned",
configuration = new
{
usage = "<usage>",
choosableCapabilities = new object[]
{
"<choosableCapabilities>"
},
additionalUsages = new object[]
{
"<additionalUsages>"
},
civicAddressId = "<civicAddressId>",
locationId = "<locationId>",
allowTenantAddressUpdate = true,
displayedCountryCode = "<displayedCountryCode>",
},
},
teamsDirectRouting = new
{
enabled = true,
},
teamsPhoneMobile = new
{
enabled = true,
assignmentStatus = "assigned",
configuration = new
{
usage = "<usage>",
choosableCapabilities = new object[]
{
"<choosableCapabilities>"
},
additionalUsages = new object[]
{
"<additionalUsages>"
},
civicAddressId = "<civicAddressId>",
locationId = "<locationId>",
allowTenantAddressUpdate = true,
displayedCountryCode = "<displayedCountryCode>",
},
},
zoomPhoneCloudPeering = new
{
enabled = true,
},
azureOperatorCallProtection = new
{
enabled = true,
},
},
configuration = new
{
customSipHeader = "<customSipHeader>",
},
}
            },
            });
            Response response = client.CreateOrUpdateNumbers("<accountName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceProvisioningStatus").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceProvisioningErrors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceProvisioningErrors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceProvisioningErrors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceProvisioningErrors")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("telephoneNumber").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("accountName").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("assignmentStatus").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("choosableCapabilities")[0].ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("acquiredCapabilities")[0].ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("availableCapabilities")[0].ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("additionalUsages")[0].ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("civicAddressId").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("locationId").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("allowTenantAddressUpdate").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("displayedCountryCode").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("assignmentStatus").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("choosableCapabilities")[0].ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("acquiredCapabilities")[0].ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("availableCapabilities")[0].ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("additionalUsages")[0].ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("civicAddressId").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("locationId").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("allowTenantAddressUpdate").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("displayedCountryCode").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("zoomPhoneCloudPeering").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("azureOperatorCallProtection").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("configuration").GetProperty("customSipHeader").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Accounts_CreateOrUpdateNumbers_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            using RequestContent content = RequestContent.Create(new
            {
                numbers = new object[]
            {
new
{
telephoneNumber = "<telephoneNumber>",
accountName = "<accountName>",
serviceDetails = new
{
teamsOperatorConnect = new
{
enabled = true,
assignmentStatus = "assigned",
configuration = new
{
usage = "<usage>",
choosableCapabilities = new object[]
{
"<choosableCapabilities>"
},
additionalUsages = new object[]
{
"<additionalUsages>"
},
civicAddressId = "<civicAddressId>",
locationId = "<locationId>",
allowTenantAddressUpdate = true,
displayedCountryCode = "<displayedCountryCode>",
},
},
teamsDirectRouting = new
{
enabled = true,
},
teamsPhoneMobile = new
{
enabled = true,
assignmentStatus = "assigned",
configuration = new
{
usage = "<usage>",
choosableCapabilities = new object[]
{
"<choosableCapabilities>"
},
additionalUsages = new object[]
{
"<additionalUsages>"
},
civicAddressId = "<civicAddressId>",
locationId = "<locationId>",
allowTenantAddressUpdate = true,
displayedCountryCode = "<displayedCountryCode>",
},
},
zoomPhoneCloudPeering = new
{
enabled = true,
},
azureOperatorCallProtection = new
{
enabled = true,
},
},
configuration = new
{
customSipHeader = "<customSipHeader>",
},
}
            },
            });
            Response response = await client.CreateOrUpdateNumbersAsync("<accountName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceProvisioningStatus").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceProvisioningErrors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceProvisioningErrors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceProvisioningErrors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceProvisioningErrors")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("telephoneNumber").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("accountName").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("assignmentStatus").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("choosableCapabilities")[0].ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("acquiredCapabilities")[0].ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("availableCapabilities")[0].ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("additionalUsages")[0].ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("civicAddressId").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("locationId").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("allowTenantAddressUpdate").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("displayedCountryCode").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("assignmentStatus").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("choosableCapabilities")[0].ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("acquiredCapabilities")[0].ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("availableCapabilities")[0].ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("additionalUsages")[0].ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("civicAddressId").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("locationId").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("allowTenantAddressUpdate").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("displayedCountryCode").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("zoomPhoneCloudPeering").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("azureOperatorCallProtection").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("configuration").GetProperty("customSipHeader").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Accounts_CreateOrUpdateNumbers_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            BatchNumbers body = new BatchNumbers(new NumberResource[]
            {
new NumberResource("<telephoneNumber>", "<accountName>", new NumberServiceDetails
{
TeamsOperatorConnect = new TeamsOperatorConnectNumberDetails(true)
{
AssignmentStatus = TelephoneNumberAssignmentStatus.Assigned,
Configuration = new TeamsOperatorConnectNumberConfig("<usage>", new string[]{"<choosableCapabilities>"})
{
AdditionalUsages = {"<additionalUsages>"},
CivicAddressId = "<civicAddressId>",
LocationId = "<locationId>",
AllowTenantAddressUpdate = true,
DisplayedCountryCode = "<displayedCountryCode>",
},
},
TeamsDirectRouting = new TeamsDirectRoutingNumberDetails(true),
TeamsPhoneMobile = new TeamsPhoneMobileNumberDetails(true)
{
AssignmentStatus = TelephoneNumberAssignmentStatus.Assigned,
Configuration = new TeamsPhoneMobileNumberConfig("<usage>", new string[]{"<choosableCapabilities>"})
{
AdditionalUsages = {"<additionalUsages>"},
CivicAddressId = "<civicAddressId>",
LocationId = "<locationId>",
AllowTenantAddressUpdate = true,
DisplayedCountryCode = "<displayedCountryCode>",
},
},
ZoomPhoneCloudPeering = new ZoomPhoneCloudPeeringNumberDetails(true),
AzureOperatorCallProtection = new AzureOperatorCallProtectionNumberDetails(true),
})
{
Configuration = new NumberConfiguration
{
CustomSipHeader = "<customSipHeader>",
},
}
            });
            Response<BatchNumbers> response = client.CreateOrUpdateNumbers("<accountName>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Accounts_CreateOrUpdateNumbers_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            BatchNumbers body = new BatchNumbers(new NumberResource[]
            {
new NumberResource("<telephoneNumber>", "<accountName>", new NumberServiceDetails
{
TeamsOperatorConnect = new TeamsOperatorConnectNumberDetails(true)
{
AssignmentStatus = TelephoneNumberAssignmentStatus.Assigned,
Configuration = new TeamsOperatorConnectNumberConfig("<usage>", new string[]{"<choosableCapabilities>"})
{
AdditionalUsages = {"<additionalUsages>"},
CivicAddressId = "<civicAddressId>",
LocationId = "<locationId>",
AllowTenantAddressUpdate = true,
DisplayedCountryCode = "<displayedCountryCode>",
},
},
TeamsDirectRouting = new TeamsDirectRoutingNumberDetails(true),
TeamsPhoneMobile = new TeamsPhoneMobileNumberDetails(true)
{
AssignmentStatus = TelephoneNumberAssignmentStatus.Assigned,
Configuration = new TeamsPhoneMobileNumberConfig("<usage>", new string[]{"<choosableCapabilities>"})
{
AdditionalUsages = {"<additionalUsages>"},
CivicAddressId = "<civicAddressId>",
LocationId = "<locationId>",
AllowTenantAddressUpdate = true,
DisplayedCountryCode = "<displayedCountryCode>",
},
},
ZoomPhoneCloudPeering = new ZoomPhoneCloudPeeringNumberDetails(true),
AzureOperatorCallProtection = new AzureOperatorCallProtectionNumberDetails(true),
})
{
Configuration = new NumberConfiguration
{
CustomSipHeader = "<customSipHeader>",
},
}
            });
            Response<BatchNumbers> response = await client.CreateOrUpdateNumbersAsync("<accountName>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Accounts_DeleteNumbers_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            using RequestContent content = RequestContent.Create(new
            {
                numbers = new object[]
            {
new
{
telephoneNumber = "<telephoneNumber>",
}
            },
            });
            Response response = client.DeleteNumbers("<accountName>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Accounts_DeleteNumbers_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            using RequestContent content = RequestContent.Create(new
            {
                numbers = new object[]
            {
new
{
telephoneNumber = "<telephoneNumber>",
}
            },
            });
            Response response = await client.DeleteNumbersAsync("<accountName>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Accounts_DeleteNumbers_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            BatchNumbersDelete body = new BatchNumbersDelete(new NumberIdentifier[]
            {
new NumberIdentifier("<telephoneNumber>")
            });
            Response response = client.DeleteNumbers("<accountName>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Accounts_DeleteNumbers_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            BatchNumbersDelete body = new BatchNumbersDelete(new NumberIdentifier[]
            {
new NumberIdentifier("<telephoneNumber>")
            });
            Response response = await client.DeleteNumbersAsync("<accountName>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Accounts_DeleteNumbers_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            using RequestContent content = RequestContent.Create(new
            {
                numbers = new object[]
            {
new
{
telephoneNumber = "<telephoneNumber>",
}
            },
            });
            Response response = client.DeleteNumbers("<accountName>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Accounts_DeleteNumbers_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            using RequestContent content = RequestContent.Create(new
            {
                numbers = new object[]
            {
new
{
telephoneNumber = "<telephoneNumber>",
}
            },
            });
            Response response = await client.DeleteNumbersAsync("<accountName>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Accounts_DeleteNumbers_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            BatchNumbersDelete body = new BatchNumbersDelete(new NumberIdentifier[]
            {
new NumberIdentifier("<telephoneNumber>")
            });
            Response response = client.DeleteNumbers("<accountName>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Accounts_DeleteNumbers_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            BatchNumbersDelete body = new BatchNumbersDelete(new NumberIdentifier[]
            {
new NumberIdentifier("<telephoneNumber>")
            });
            Response response = await client.DeleteNumbersAsync("<accountName>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NumberResource_GetNumber_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response response = client.GetNumber("<accountName>", "<telephoneNumber>", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("telephoneNumber").ToString());
            Console.WriteLine(result.GetProperty("accountName").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NumberResource_GetNumber_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response response = await client.GetNumberAsync("<accountName>", "<telephoneNumber>", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("telephoneNumber").ToString());
            Console.WriteLine(result.GetProperty("accountName").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NumberResource_GetNumber_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response<NumberResource> response = client.GetNumber("<accountName>", "<telephoneNumber>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NumberResource_GetNumber_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response<NumberResource> response = await client.GetNumberAsync("<accountName>", "<telephoneNumber>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NumberResource_GetNumber_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response response = client.GetNumber("<accountName>", "<telephoneNumber>", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("serviceProvisioningStatus").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("telephoneNumber").ToString());
            Console.WriteLine(result.GetProperty("accountName").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("assignmentStatus").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("choosableCapabilities")[0].ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("acquiredCapabilities")[0].ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("availableCapabilities")[0].ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("additionalUsages")[0].ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("civicAddressId").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("locationId").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("allowTenantAddressUpdate").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("displayedCountryCode").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("assignmentStatus").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("choosableCapabilities")[0].ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("acquiredCapabilities")[0].ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("availableCapabilities")[0].ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("additionalUsages")[0].ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("civicAddressId").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("locationId").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("allowTenantAddressUpdate").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("displayedCountryCode").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("zoomPhoneCloudPeering").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("azureOperatorCallProtection").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("configuration").GetProperty("customSipHeader").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NumberResource_GetNumber_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response response = await client.GetNumberAsync("<accountName>", "<telephoneNumber>", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("serviceProvisioningStatus").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("telephoneNumber").ToString());
            Console.WriteLine(result.GetProperty("accountName").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("assignmentStatus").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("choosableCapabilities")[0].ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("acquiredCapabilities")[0].ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("availableCapabilities")[0].ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("additionalUsages")[0].ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("civicAddressId").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("locationId").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("allowTenantAddressUpdate").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("displayedCountryCode").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("assignmentStatus").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("choosableCapabilities")[0].ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("acquiredCapabilities")[0].ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("availableCapabilities")[0].ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("additionalUsages")[0].ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("civicAddressId").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("locationId").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("allowTenantAddressUpdate").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("displayedCountryCode").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("zoomPhoneCloudPeering").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("azureOperatorCallProtection").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("configuration").GetProperty("customSipHeader").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NumberResource_GetNumber_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response<NumberResource> response = client.GetNumber("<accountName>", "<telephoneNumber>", requestConditions: null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NumberResource_GetNumber_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response<NumberResource> response = await client.GetNumberAsync("<accountName>", "<telephoneNumber>", requestConditions: null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NumberResource_CreateOrReplaceNumber_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            using RequestContent content = RequestContent.Create(new
            {
                telephoneNumber = "<telephoneNumber>",
                accountName = "<accountName>",
                serviceDetails = new object(),
            });
            Response response = client.CreateOrReplaceNumber("<accountName>", "<telephoneNumber>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("telephoneNumber").ToString());
            Console.WriteLine(result.GetProperty("accountName").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NumberResource_CreateOrReplaceNumber_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            using RequestContent content = RequestContent.Create(new
            {
                telephoneNumber = "<telephoneNumber>",
                accountName = "<accountName>",
                serviceDetails = new object(),
            });
            Response response = await client.CreateOrReplaceNumberAsync("<accountName>", "<telephoneNumber>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("telephoneNumber").ToString());
            Console.WriteLine(result.GetProperty("accountName").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NumberResource_CreateOrReplaceNumber_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            NumberResource resource = new NumberResource("<telephoneNumber>", "<accountName>", new NumberServiceDetails());
            Response<NumberResource> response = client.CreateOrReplaceNumber("<accountName>", "<telephoneNumber>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NumberResource_CreateOrReplaceNumber_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            NumberResource resource = new NumberResource("<telephoneNumber>", "<accountName>", new NumberServiceDetails());
            Response<NumberResource> response = await client.CreateOrReplaceNumberAsync("<accountName>", "<telephoneNumber>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NumberResource_CreateOrReplaceNumber_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            using RequestContent content = RequestContent.Create(new
            {
                telephoneNumber = "<telephoneNumber>",
                accountName = "<accountName>",
                serviceDetails = new
                {
                    teamsOperatorConnect = new
                    {
                        enabled = true,
                        assignmentStatus = "assigned",
                        configuration = new
                        {
                            usage = "<usage>",
                            choosableCapabilities = new object[]
            {
"<choosableCapabilities>"
            },
                            additionalUsages = new object[]
            {
"<additionalUsages>"
            },
                            civicAddressId = "<civicAddressId>",
                            locationId = "<locationId>",
                            allowTenantAddressUpdate = true,
                            displayedCountryCode = "<displayedCountryCode>",
                        },
                    },
                    teamsDirectRouting = new
                    {
                        enabled = true,
                    },
                    teamsPhoneMobile = new
                    {
                        enabled = true,
                        assignmentStatus = "assigned",
                        configuration = new
                        {
                            usage = "<usage>",
                            choosableCapabilities = new object[]
            {
"<choosableCapabilities>"
            },
                            additionalUsages = new object[]
            {
"<additionalUsages>"
            },
                            civicAddressId = "<civicAddressId>",
                            locationId = "<locationId>",
                            allowTenantAddressUpdate = true,
                            displayedCountryCode = "<displayedCountryCode>",
                        },
                    },
                    zoomPhoneCloudPeering = new
                    {
                        enabled = true,
                    },
                    azureOperatorCallProtection = new
                    {
                        enabled = true,
                    },
                },
                configuration = new
                {
                    customSipHeader = "<customSipHeader>",
                },
            });
            Response response = client.CreateOrReplaceNumber("<accountName>", "<telephoneNumber>", content, requestConditions: null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("serviceProvisioningStatus").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("telephoneNumber").ToString());
            Console.WriteLine(result.GetProperty("accountName").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("assignmentStatus").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("choosableCapabilities")[0].ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("acquiredCapabilities")[0].ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("availableCapabilities")[0].ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("additionalUsages")[0].ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("civicAddressId").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("locationId").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("allowTenantAddressUpdate").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("displayedCountryCode").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("assignmentStatus").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("choosableCapabilities")[0].ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("acquiredCapabilities")[0].ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("availableCapabilities")[0].ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("additionalUsages")[0].ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("civicAddressId").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("locationId").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("allowTenantAddressUpdate").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("displayedCountryCode").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("zoomPhoneCloudPeering").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("azureOperatorCallProtection").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("configuration").GetProperty("customSipHeader").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NumberResource_CreateOrReplaceNumber_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            using RequestContent content = RequestContent.Create(new
            {
                telephoneNumber = "<telephoneNumber>",
                accountName = "<accountName>",
                serviceDetails = new
                {
                    teamsOperatorConnect = new
                    {
                        enabled = true,
                        assignmentStatus = "assigned",
                        configuration = new
                        {
                            usage = "<usage>",
                            choosableCapabilities = new object[]
            {
"<choosableCapabilities>"
            },
                            additionalUsages = new object[]
            {
"<additionalUsages>"
            },
                            civicAddressId = "<civicAddressId>",
                            locationId = "<locationId>",
                            allowTenantAddressUpdate = true,
                            displayedCountryCode = "<displayedCountryCode>",
                        },
                    },
                    teamsDirectRouting = new
                    {
                        enabled = true,
                    },
                    teamsPhoneMobile = new
                    {
                        enabled = true,
                        assignmentStatus = "assigned",
                        configuration = new
                        {
                            usage = "<usage>",
                            choosableCapabilities = new object[]
            {
"<choosableCapabilities>"
            },
                            additionalUsages = new object[]
            {
"<additionalUsages>"
            },
                            civicAddressId = "<civicAddressId>",
                            locationId = "<locationId>",
                            allowTenantAddressUpdate = true,
                            displayedCountryCode = "<displayedCountryCode>",
                        },
                    },
                    zoomPhoneCloudPeering = new
                    {
                        enabled = true,
                    },
                    azureOperatorCallProtection = new
                    {
                        enabled = true,
                    },
                },
                configuration = new
                {
                    customSipHeader = "<customSipHeader>",
                },
            });
            Response response = await client.CreateOrReplaceNumberAsync("<accountName>", "<telephoneNumber>", content, requestConditions: null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("serviceProvisioningStatus").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("telephoneNumber").ToString());
            Console.WriteLine(result.GetProperty("accountName").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("assignmentStatus").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("choosableCapabilities")[0].ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("acquiredCapabilities")[0].ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("availableCapabilities")[0].ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("additionalUsages")[0].ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("civicAddressId").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("locationId").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("allowTenantAddressUpdate").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("displayedCountryCode").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("assignmentStatus").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("choosableCapabilities")[0].ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("acquiredCapabilities")[0].ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("availableCapabilities")[0].ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("additionalUsages")[0].ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("civicAddressId").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("locationId").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("allowTenantAddressUpdate").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("displayedCountryCode").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("zoomPhoneCloudPeering").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("azureOperatorCallProtection").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("configuration").GetProperty("customSipHeader").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NumberResource_CreateOrReplaceNumber_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            NumberResource resource = new NumberResource("<telephoneNumber>", "<accountName>", new NumberServiceDetails
            {
                TeamsOperatorConnect = new TeamsOperatorConnectNumberDetails(true)
                {
                    AssignmentStatus = TelephoneNumberAssignmentStatus.Assigned,
                    Configuration = new TeamsOperatorConnectNumberConfig("<usage>", new string[] { "<choosableCapabilities>" })
                    {
                        AdditionalUsages = { "<additionalUsages>" },
                        CivicAddressId = "<civicAddressId>",
                        LocationId = "<locationId>",
                        AllowTenantAddressUpdate = true,
                        DisplayedCountryCode = "<displayedCountryCode>",
                    },
                },
                TeamsDirectRouting = new TeamsDirectRoutingNumberDetails(true),
                TeamsPhoneMobile = new TeamsPhoneMobileNumberDetails(true)
                {
                    AssignmentStatus = TelephoneNumberAssignmentStatus.Assigned,
                    Configuration = new TeamsPhoneMobileNumberConfig("<usage>", new string[] { "<choosableCapabilities>" })
                    {
                        AdditionalUsages = { "<additionalUsages>" },
                        CivicAddressId = "<civicAddressId>",
                        LocationId = "<locationId>",
                        AllowTenantAddressUpdate = true,
                        DisplayedCountryCode = "<displayedCountryCode>",
                    },
                },
                ZoomPhoneCloudPeering = new ZoomPhoneCloudPeeringNumberDetails(true),
                AzureOperatorCallProtection = new AzureOperatorCallProtectionNumberDetails(true),
            })
            {
                Configuration = new NumberConfiguration
                {
                    CustomSipHeader = "<customSipHeader>",
                },
            };
            Response<NumberResource> response = client.CreateOrReplaceNumber("<accountName>", "<telephoneNumber>", resource, requestConditions: null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NumberResource_CreateOrReplaceNumber_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            NumberResource resource = new NumberResource("<telephoneNumber>", "<accountName>", new NumberServiceDetails
            {
                TeamsOperatorConnect = new TeamsOperatorConnectNumberDetails(true)
                {
                    AssignmentStatus = TelephoneNumberAssignmentStatus.Assigned,
                    Configuration = new TeamsOperatorConnectNumberConfig("<usage>", new string[] { "<choosableCapabilities>" })
                    {
                        AdditionalUsages = { "<additionalUsages>" },
                        CivicAddressId = "<civicAddressId>",
                        LocationId = "<locationId>",
                        AllowTenantAddressUpdate = true,
                        DisplayedCountryCode = "<displayedCountryCode>",
                    },
                },
                TeamsDirectRouting = new TeamsDirectRoutingNumberDetails(true),
                TeamsPhoneMobile = new TeamsPhoneMobileNumberDetails(true)
                {
                    AssignmentStatus = TelephoneNumberAssignmentStatus.Assigned,
                    Configuration = new TeamsPhoneMobileNumberConfig("<usage>", new string[] { "<choosableCapabilities>" })
                    {
                        AdditionalUsages = { "<additionalUsages>" },
                        CivicAddressId = "<civicAddressId>",
                        LocationId = "<locationId>",
                        AllowTenantAddressUpdate = true,
                        DisplayedCountryCode = "<displayedCountryCode>",
                    },
                },
                ZoomPhoneCloudPeering = new ZoomPhoneCloudPeeringNumberDetails(true),
                AzureOperatorCallProtection = new AzureOperatorCallProtectionNumberDetails(true),
            })
            {
                Configuration = new NumberConfiguration
                {
                    CustomSipHeader = "<customSipHeader>",
                },
            };
            Response<NumberResource> response = await client.CreateOrReplaceNumberAsync("<accountName>", "<telephoneNumber>", resource, requestConditions: null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NumberResource_DeleteNumber_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response response = client.DeleteNumber("<accountName>", "<telephoneNumber>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NumberResource_DeleteNumber_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response response = await client.DeleteNumberAsync("<accountName>", "<telephoneNumber>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NumberResource_DeleteNumber_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response response = client.DeleteNumber("<accountName>", "<telephoneNumber>", requestConditions: null);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NumberResource_DeleteNumber_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response response = await client.DeleteNumberAsync("<accountName>", "<telephoneNumber>", requestConditions: null);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Accounts_GetTeamsCapabilityPlans_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response response = client.GetTeamsCapabilityPlans("<accountName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("capabilityPlans")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("capabilityPlans")[0].GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("capabilityPlans")[0].GetProperty("supportsTollFree").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Accounts_GetTeamsCapabilityPlans_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response response = await client.GetTeamsCapabilityPlansAsync("<accountName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("capabilityPlans")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("capabilityPlans")[0].GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("capabilityPlans")[0].GetProperty("supportsTollFree").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Accounts_GetTeamsCapabilityPlans_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response<TeamsCapabilityPlans> response = client.GetTeamsCapabilityPlans("<accountName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Accounts_GetTeamsCapabilityPlans_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response<TeamsCapabilityPlans> response = await client.GetTeamsCapabilityPlansAsync("<accountName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Accounts_GetTeamsCapabilityPlans_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response response = client.GetTeamsCapabilityPlans("<accountName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("capabilityPlans")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("capabilityPlans")[0].GetProperty("offerTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("capabilityPlans")[0].GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("capabilityPlans")[0].GetProperty("mandatoryCapabilities")[0].ToString());
            Console.WriteLine(result.GetProperty("capabilityPlans")[0].GetProperty("choosableCapabilities")[0].ToString());
            Console.WriteLine(result.GetProperty("capabilityPlans")[0].GetProperty("supportsTollFree").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Accounts_GetTeamsCapabilityPlans_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response response = await client.GetTeamsCapabilityPlansAsync("<accountName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("capabilityPlans")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("capabilityPlans")[0].GetProperty("offerTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("capabilityPlans")[0].GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("capabilityPlans")[0].GetProperty("mandatoryCapabilities")[0].ToString());
            Console.WriteLine(result.GetProperty("capabilityPlans")[0].GetProperty("choosableCapabilities")[0].ToString());
            Console.WriteLine(result.GetProperty("capabilityPlans")[0].GetProperty("supportsTollFree").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Accounts_GetTeamsCapabilityPlans_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response<TeamsCapabilityPlans> response = client.GetTeamsCapabilityPlans("<accountName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Accounts_GetTeamsCapabilityPlans_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response<TeamsCapabilityPlans> response = await client.GetTeamsCapabilityPlansAsync("<accountName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Accounts_GetTeamsAvailableCapabilities_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            using RequestContent content = RequestContent.Create(new
            {
                numbers = new object[]
            {
new
{
telephoneNumber = "<telephoneNumber>",
}
            },
            });
            Response response = client.GetTeamsAvailableCapabilities("<accountName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("availableCapabilities")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Accounts_GetTeamsAvailableCapabilities_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            using RequestContent content = RequestContent.Create(new
            {
                numbers = new object[]
            {
new
{
telephoneNumber = "<telephoneNumber>",
}
            },
            });
            Response response = await client.GetTeamsAvailableCapabilitiesAsync("<accountName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("availableCapabilities")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Accounts_GetTeamsAvailableCapabilities_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            NumberIdentifiers body = new NumberIdentifiers(new NumberIdentifier[]
            {
new NumberIdentifier("<telephoneNumber>")
            });
            Response<TeamsAvailableCapabilities> response = client.GetTeamsAvailableCapabilities("<accountName>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Accounts_GetTeamsAvailableCapabilities_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            NumberIdentifiers body = new NumberIdentifiers(new NumberIdentifier[]
            {
new NumberIdentifier("<telephoneNumber>")
            });
            Response<TeamsAvailableCapabilities> response = await client.GetTeamsAvailableCapabilitiesAsync("<accountName>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Accounts_GetTeamsAvailableCapabilities_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            using RequestContent content = RequestContent.Create(new
            {
                numbers = new object[]
            {
new
{
telephoneNumber = "<telephoneNumber>",
}
            },
            });
            Response response = client.GetTeamsAvailableCapabilities("<accountName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("availableCapabilities")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Accounts_GetTeamsAvailableCapabilities_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            using RequestContent content = RequestContent.Create(new
            {
                numbers = new object[]
            {
new
{
telephoneNumber = "<telephoneNumber>",
}
            },
            });
            Response response = await client.GetTeamsAvailableCapabilitiesAsync("<accountName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("availableCapabilities")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Accounts_GetTeamsAvailableCapabilities_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            NumberIdentifiers body = new NumberIdentifiers(new NumberIdentifier[]
            {
new NumberIdentifier("<telephoneNumber>")
            });
            Response<TeamsAvailableCapabilities> response = client.GetTeamsAvailableCapabilities("<accountName>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Accounts_GetTeamsAvailableCapabilities_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            NumberIdentifiers body = new NumberIdentifiers(new NumberIdentifier[]
            {
new NumberIdentifier("<telephoneNumber>")
            });
            Response<TeamsAvailableCapabilities> response = await client.GetTeamsAvailableCapabilitiesAsync("<accountName>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TeamsCivicAddressResource_GetTeamsCivicAddress_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response response = client.GetTeamsCivicAddress("<accountName>", "<civicAddressId>", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("defaultLocationId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TeamsCivicAddressResource_GetTeamsCivicAddress_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response response = await client.GetTeamsCivicAddressAsync("<accountName>", "<civicAddressId>", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("defaultLocationId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TeamsCivicAddressResource_GetTeamsCivicAddress_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response<TeamsCivicAddressResource> response = client.GetTeamsCivicAddress("<accountName>", "<civicAddressId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TeamsCivicAddressResource_GetTeamsCivicAddress_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response<TeamsCivicAddressResource> response = await client.GetTeamsCivicAddressAsync("<accountName>", "<civicAddressId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TeamsCivicAddressResource_GetTeamsCivicAddress_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response response = client.GetTeamsCivicAddress("<accountName>", "<civicAddressId>", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("country").ToString());
            Console.WriteLine(result.GetProperty("houseNumber").ToString());
            Console.WriteLine(result.GetProperty("houseNumberSuffix").ToString());
            Console.WriteLine(result.GetProperty("preDirectional").ToString());
            Console.WriteLine(result.GetProperty("streetName").ToString());
            Console.WriteLine(result.GetProperty("streetSuffix").ToString());
            Console.WriteLine(result.GetProperty("postDirectional").ToString());
            Console.WriteLine(result.GetProperty("stateOrProvince").ToString());
            Console.WriteLine(result.GetProperty("countyOrDistrict").ToString());
            Console.WriteLine(result.GetProperty("cityOrTown").ToString());
            Console.WriteLine(result.GetProperty("cityOrTownAlias").ToString());
            Console.WriteLine(result.GetProperty("postalOrZipCode").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("companyName").ToString());
            Console.WriteLine(result.GetProperty("companyId").ToString());
            Console.WriteLine(result.GetProperty("defaultLocationId").ToString());
            Console.WriteLine(result.GetProperty("validationStatus").ToString());
            Console.WriteLine(result.GetProperty("tenantId").ToString());
            Console.WriteLine(result.GetProperty("partnerId").ToString());
            Console.WriteLine(result.GetProperty("locations")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("locations")[0].GetProperty("civicAddressId").ToString());
            Console.WriteLine(result.GetProperty("locations")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("locations")[0].GetProperty("additionalInfo").ToString());
            Console.WriteLine(result.GetProperty("locations")[0].GetProperty("isDefault").ToString());
            Console.WriteLine(result.GetProperty("locations")[0].GetProperty("elin").ToString());
            Console.WriteLine(result.GetProperty("latitude").ToString());
            Console.WriteLine(result.GetProperty("longitude").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TeamsCivicAddressResource_GetTeamsCivicAddress_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response response = await client.GetTeamsCivicAddressAsync("<accountName>", "<civicAddressId>", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("country").ToString());
            Console.WriteLine(result.GetProperty("houseNumber").ToString());
            Console.WriteLine(result.GetProperty("houseNumberSuffix").ToString());
            Console.WriteLine(result.GetProperty("preDirectional").ToString());
            Console.WriteLine(result.GetProperty("streetName").ToString());
            Console.WriteLine(result.GetProperty("streetSuffix").ToString());
            Console.WriteLine(result.GetProperty("postDirectional").ToString());
            Console.WriteLine(result.GetProperty("stateOrProvince").ToString());
            Console.WriteLine(result.GetProperty("countyOrDistrict").ToString());
            Console.WriteLine(result.GetProperty("cityOrTown").ToString());
            Console.WriteLine(result.GetProperty("cityOrTownAlias").ToString());
            Console.WriteLine(result.GetProperty("postalOrZipCode").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("companyName").ToString());
            Console.WriteLine(result.GetProperty("companyId").ToString());
            Console.WriteLine(result.GetProperty("defaultLocationId").ToString());
            Console.WriteLine(result.GetProperty("validationStatus").ToString());
            Console.WriteLine(result.GetProperty("tenantId").ToString());
            Console.WriteLine(result.GetProperty("partnerId").ToString());
            Console.WriteLine(result.GetProperty("locations")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("locations")[0].GetProperty("civicAddressId").ToString());
            Console.WriteLine(result.GetProperty("locations")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("locations")[0].GetProperty("additionalInfo").ToString());
            Console.WriteLine(result.GetProperty("locations")[0].GetProperty("isDefault").ToString());
            Console.WriteLine(result.GetProperty("locations")[0].GetProperty("elin").ToString());
            Console.WriteLine(result.GetProperty("latitude").ToString());
            Console.WriteLine(result.GetProperty("longitude").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TeamsCivicAddressResource_GetTeamsCivicAddress_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response<TeamsCivicAddressResource> response = client.GetTeamsCivicAddress("<accountName>", "<civicAddressId>", requestConditions: null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TeamsCivicAddressResource_GetTeamsCivicAddress_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response<TeamsCivicAddressResource> response = await client.GetTeamsCivicAddressAsync("<accountName>", "<civicAddressId>", requestConditions: null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AccountResource_GetAccountResources_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            foreach (BinaryData item in client.GetAccountResources(null, null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AccountResource_GetAccountResources_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            await foreach (BinaryData item in client.GetAccountResourcesAsync(null, null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AccountResource_GetAccountResources_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            foreach (AccountResource item in client.GetAccountResources())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AccountResource_GetAccountResources_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            await foreach (AccountResource item in client.GetAccountResourcesAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AccountResource_GetAccountResources_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            foreach (BinaryData item in client.GetAccountResources(1234, 1234, 1234, "<filter>", true, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("serviceProvisioningStatus").ToString());
                Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("innererror").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("correlationId").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsTenantId").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("syncEnabled").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("enabled").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("numberCount").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("syncEnabled").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("enabled").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("numberCount").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("configuration").GetProperty("callScreening").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("configuration").GetProperty("subdomain").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("configuration").GetProperty("subdomainTokens").GetProperty("region1Token").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("configuration").GetProperty("subdomainTokens").GetProperty("region2Token").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("subdomainStatus").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("syncEnabled").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("enabled").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("numberCount").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("zoomPhoneCloudPeering").GetProperty("syncEnabled").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("zoomPhoneCloudPeering").GetProperty("enabled").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("zoomPhoneCloudPeering").GetProperty("numberCount").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("azureOperatorCallProtection").GetProperty("enabled").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("azureOperatorCallProtection").GetProperty("numberCount").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AccountResource_GetAccountResources_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            await foreach (BinaryData item in client.GetAccountResourcesAsync(1234, 1234, 1234, "<filter>", true, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("serviceProvisioningStatus").ToString());
                Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("innererror").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("correlationId").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsTenantId").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("syncEnabled").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("enabled").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("numberCount").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("syncEnabled").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("enabled").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("numberCount").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("configuration").GetProperty("callScreening").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("configuration").GetProperty("subdomain").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("configuration").GetProperty("subdomainTokens").GetProperty("region1Token").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("configuration").GetProperty("subdomainTokens").GetProperty("region2Token").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("subdomainStatus").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("syncEnabled").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("enabled").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("numberCount").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("zoomPhoneCloudPeering").GetProperty("syncEnabled").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("zoomPhoneCloudPeering").GetProperty("enabled").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("zoomPhoneCloudPeering").GetProperty("numberCount").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("azureOperatorCallProtection").GetProperty("enabled").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("azureOperatorCallProtection").GetProperty("numberCount").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AccountResource_GetAccountResources_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            foreach (AccountResource item in client.GetAccountResources(maxCount: 1234, skip: 1234, maxpagesize: 1234, filter: "<filter>", countRecords: true))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AccountResource_GetAccountResources_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            await foreach (AccountResource item in client.GetAccountResourcesAsync(maxCount: 1234, skip: 1234, maxpagesize: 1234, filter: "<filter>", countRecords: true))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NumberResource_GetNumbers_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            foreach (BinaryData item in client.GetNumbers("<accountName>", null, null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("telephoneNumber").ToString());
                Console.WriteLine(result.GetProperty("accountName").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NumberResource_GetNumbers_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            await foreach (BinaryData item in client.GetNumbersAsync("<accountName>", null, null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("telephoneNumber").ToString());
                Console.WriteLine(result.GetProperty("accountName").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NumberResource_GetNumbers_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            foreach (NumberResource item in client.GetNumbers("<accountName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NumberResource_GetNumbers_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            await foreach (NumberResource item in client.GetNumbersAsync("<accountName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NumberResource_GetNumbers_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            foreach (BinaryData item in client.GetNumbers("<accountName>", 1234, 1234, 1234, "<filter>", true, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("serviceProvisioningStatus").ToString());
                Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("innererror").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("telephoneNumber").ToString());
                Console.WriteLine(result.GetProperty("accountName").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("enabled").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("assignmentStatus").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("usage").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("choosableCapabilities")[0].ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("acquiredCapabilities")[0].ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("availableCapabilities")[0].ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("additionalUsages")[0].ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("civicAddressId").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("locationId").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("allowTenantAddressUpdate").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("displayedCountryCode").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("enabled").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("enabled").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("assignmentStatus").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("usage").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("choosableCapabilities")[0].ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("acquiredCapabilities")[0].ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("availableCapabilities")[0].ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("additionalUsages")[0].ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("civicAddressId").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("locationId").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("allowTenantAddressUpdate").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("displayedCountryCode").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("zoomPhoneCloudPeering").GetProperty("enabled").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("azureOperatorCallProtection").GetProperty("enabled").ToString());
                Console.WriteLine(result.GetProperty("configuration").GetProperty("customSipHeader").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NumberResource_GetNumbers_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            await foreach (BinaryData item in client.GetNumbersAsync("<accountName>", 1234, 1234, 1234, "<filter>", true, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("serviceProvisioningStatus").ToString());
                Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("innererror").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("telephoneNumber").ToString());
                Console.WriteLine(result.GetProperty("accountName").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("enabled").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("assignmentStatus").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("usage").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("choosableCapabilities")[0].ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("acquiredCapabilities")[0].ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("availableCapabilities")[0].ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("additionalUsages")[0].ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("civicAddressId").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("locationId").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("allowTenantAddressUpdate").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("displayedCountryCode").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("enabled").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("enabled").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("assignmentStatus").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("usage").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("choosableCapabilities")[0].ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("acquiredCapabilities")[0].ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("availableCapabilities")[0].ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("additionalUsages")[0].ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("civicAddressId").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("locationId").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("allowTenantAddressUpdate").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("displayedCountryCode").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("zoomPhoneCloudPeering").GetProperty("enabled").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("azureOperatorCallProtection").GetProperty("enabled").ToString());
                Console.WriteLine(result.GetProperty("configuration").GetProperty("customSipHeader").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NumberResource_GetNumbers_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            foreach (NumberResource item in client.GetNumbers("<accountName>", maxCount: 1234, skip: 1234, maxpagesize: 1234, filter: "<filter>", countRecords: true))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NumberResource_GetNumbers_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            await foreach (NumberResource item in client.GetNumbersAsync("<accountName>", maxCount: 1234, skip: 1234, maxpagesize: 1234, filter: "<filter>", countRecords: true))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TeamsCivicAddressResource_GetTeamsCivicAddresses_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            foreach (BinaryData item in client.GetTeamsCivicAddresses("<accountName>", null, null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("defaultLocationId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TeamsCivicAddressResource_GetTeamsCivicAddresses_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            await foreach (BinaryData item in client.GetTeamsCivicAddressesAsync("<accountName>", null, null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("defaultLocationId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TeamsCivicAddressResource_GetTeamsCivicAddresses_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            foreach (TeamsCivicAddressResource item in client.GetTeamsCivicAddresses("<accountName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TeamsCivicAddressResource_GetTeamsCivicAddresses_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            await foreach (TeamsCivicAddressResource item in client.GetTeamsCivicAddressesAsync("<accountName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TeamsCivicAddressResource_GetTeamsCivicAddresses_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            foreach (BinaryData item in client.GetTeamsCivicAddresses("<accountName>", 1234, 1234, 1234, "<filter>", true, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("country").ToString());
                Console.WriteLine(result.GetProperty("houseNumber").ToString());
                Console.WriteLine(result.GetProperty("houseNumberSuffix").ToString());
                Console.WriteLine(result.GetProperty("preDirectional").ToString());
                Console.WriteLine(result.GetProperty("streetName").ToString());
                Console.WriteLine(result.GetProperty("streetSuffix").ToString());
                Console.WriteLine(result.GetProperty("postDirectional").ToString());
                Console.WriteLine(result.GetProperty("stateOrProvince").ToString());
                Console.WriteLine(result.GetProperty("countyOrDistrict").ToString());
                Console.WriteLine(result.GetProperty("cityOrTown").ToString());
                Console.WriteLine(result.GetProperty("cityOrTownAlias").ToString());
                Console.WriteLine(result.GetProperty("postalOrZipCode").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("companyName").ToString());
                Console.WriteLine(result.GetProperty("companyId").ToString());
                Console.WriteLine(result.GetProperty("defaultLocationId").ToString());
                Console.WriteLine(result.GetProperty("validationStatus").ToString());
                Console.WriteLine(result.GetProperty("tenantId").ToString());
                Console.WriteLine(result.GetProperty("partnerId").ToString());
                Console.WriteLine(result.GetProperty("locations")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("locations")[0].GetProperty("civicAddressId").ToString());
                Console.WriteLine(result.GetProperty("locations")[0].GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("locations")[0].GetProperty("additionalInfo").ToString());
                Console.WriteLine(result.GetProperty("locations")[0].GetProperty("isDefault").ToString());
                Console.WriteLine(result.GetProperty("locations")[0].GetProperty("elin").ToString());
                Console.WriteLine(result.GetProperty("latitude").ToString());
                Console.WriteLine(result.GetProperty("longitude").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TeamsCivicAddressResource_GetTeamsCivicAddresses_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            await foreach (BinaryData item in client.GetTeamsCivicAddressesAsync("<accountName>", 1234, 1234, 1234, "<filter>", true, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("country").ToString());
                Console.WriteLine(result.GetProperty("houseNumber").ToString());
                Console.WriteLine(result.GetProperty("houseNumberSuffix").ToString());
                Console.WriteLine(result.GetProperty("preDirectional").ToString());
                Console.WriteLine(result.GetProperty("streetName").ToString());
                Console.WriteLine(result.GetProperty("streetSuffix").ToString());
                Console.WriteLine(result.GetProperty("postDirectional").ToString());
                Console.WriteLine(result.GetProperty("stateOrProvince").ToString());
                Console.WriteLine(result.GetProperty("countyOrDistrict").ToString());
                Console.WriteLine(result.GetProperty("cityOrTown").ToString());
                Console.WriteLine(result.GetProperty("cityOrTownAlias").ToString());
                Console.WriteLine(result.GetProperty("postalOrZipCode").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("companyName").ToString());
                Console.WriteLine(result.GetProperty("companyId").ToString());
                Console.WriteLine(result.GetProperty("defaultLocationId").ToString());
                Console.WriteLine(result.GetProperty("validationStatus").ToString());
                Console.WriteLine(result.GetProperty("tenantId").ToString());
                Console.WriteLine(result.GetProperty("partnerId").ToString());
                Console.WriteLine(result.GetProperty("locations")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("locations")[0].GetProperty("civicAddressId").ToString());
                Console.WriteLine(result.GetProperty("locations")[0].GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("locations")[0].GetProperty("additionalInfo").ToString());
                Console.WriteLine(result.GetProperty("locations")[0].GetProperty("isDefault").ToString());
                Console.WriteLine(result.GetProperty("locations")[0].GetProperty("elin").ToString());
                Console.WriteLine(result.GetProperty("latitude").ToString());
                Console.WriteLine(result.GetProperty("longitude").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TeamsCivicAddressResource_GetTeamsCivicAddresses_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            foreach (TeamsCivicAddressResource item in client.GetTeamsCivicAddresses("<accountName>", maxCount: 1234, skip: 1234, maxpagesize: 1234, filter: "<filter>", countRecords: true))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TeamsCivicAddressResource_GetTeamsCivicAddresses_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            await foreach (TeamsCivicAddressResource item in client.GetTeamsCivicAddressesAsync("<accountName>", maxCount: 1234, skip: 1234, maxpagesize: 1234, filter: "<filter>", countRecords: true))
            {
            }
        }
    }
}
