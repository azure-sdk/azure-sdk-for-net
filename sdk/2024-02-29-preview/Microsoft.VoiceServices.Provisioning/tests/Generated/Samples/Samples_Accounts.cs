// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Microsoft.VoiceServices.Provisioning.Samples
{
    public partial class Samples_Accounts
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AccountResource_GetAccountResource_GetAccount()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response response = client.GetAccountResource("contoso", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AccountResource_GetAccountResource_GetAccount_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response response = await client.GetAccountResourceAsync("contoso", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AccountResource_GetAccountResource_GetAccount_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response<AccountResource> response = client.GetAccountResource("contoso");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AccountResource_GetAccountResource_GetAccount_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response<AccountResource> response = await client.GetAccountResourceAsync("contoso");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AccountResource_CreateOrReplace_CreateOrReplaceAccount()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "contoso",
                correlationId = "c7aa0070-3956-11eb-8d59-4d9d2e7a4a8d",
                serviceDetails = new
                {
                    teamsTenantId = "a7f4bd5c-cc01-40f4-8baa-2b6bdb272b8a",
                    teamsOperatorConnect = new
                    {
                        enabled = true,
                        syncEnabled = true,
                    },
                },
            });
            Response response = client.CreateOrReplace("contoso", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AccountResource_CreateOrReplace_CreateOrReplaceAccount_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "contoso",
                correlationId = "c7aa0070-3956-11eb-8d59-4d9d2e7a4a8d",
                serviceDetails = new
                {
                    teamsTenantId = "a7f4bd5c-cc01-40f4-8baa-2b6bdb272b8a",
                    teamsOperatorConnect = new
                    {
                        enabled = true,
                        syncEnabled = true,
                    },
                },
            });
            Response response = await client.CreateOrReplaceAsync("contoso", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AccountResource_CreateOrReplace_CreateOrReplaceAccount_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            AccountResource resource = new AccountResource("contoso")
            {
                CorrelationId = "c7aa0070-3956-11eb-8d59-4d9d2e7a4a8d",
                ServiceDetails = new AccountServiceDetails
                {
                    TeamsTenantId = "a7f4bd5c-cc01-40f4-8baa-2b6bdb272b8a",
                    TeamsOperatorConnect = new TeamsOperatorConnectAccountDetails(true, true),
                },
            };
            Response<AccountResource> response = client.CreateOrReplace("contoso", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AccountResource_CreateOrReplace_CreateOrReplaceAccount_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            AccountResource resource = new AccountResource("contoso")
            {
                CorrelationId = "c7aa0070-3956-11eb-8d59-4d9d2e7a4a8d",
                ServiceDetails = new AccountServiceDetails
                {
                    TeamsTenantId = "a7f4bd5c-cc01-40f4-8baa-2b6bdb272b8a",
                    TeamsOperatorConnect = new TeamsOperatorConnectAccountDetails(true, true),
                },
            };
            Response<AccountResource> response = await client.CreateOrReplaceAsync("contoso", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AccountResource_Delete_DeleteAccount()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response response = client.Delete("contoso");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AccountResource_Delete_DeleteAccount_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response response = await client.DeleteAsync("contoso");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Accounts_CreateOrUpdateNumbers_CreateOrUpdateNumbers()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            using RequestContent content = RequestContent.Create(new
            {
                numbers = new object[]
            {
new
{
telephoneNumber = "+15105850321",
accountName = "contoso",
serviceDetails = new
{
teamsOperatorConnect = new
{
enabled = true,
assignmentStatus = "assigned",
configuration = new
{
usage = "CallingUserAssignment",
choosableCapabilities = new object[]
{
"InboundCalling"
},
},
},
},
configuration = new
{
customSipHeader = "contoso-commsgw",
},
}
            },
            });
            Response response = client.CreateOrUpdateNumbers("contoso", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("telephoneNumber").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("accountName").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Accounts_CreateOrUpdateNumbers_CreateOrUpdateNumbers_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            using RequestContent content = RequestContent.Create(new
            {
                numbers = new object[]
            {
new
{
telephoneNumber = "+15105850321",
accountName = "contoso",
serviceDetails = new
{
teamsOperatorConnect = new
{
enabled = true,
assignmentStatus = "assigned",
configuration = new
{
usage = "CallingUserAssignment",
choosableCapabilities = new object[]
{
"InboundCalling"
},
},
},
},
configuration = new
{
customSipHeader = "contoso-commsgw",
},
}
            },
            });
            Response response = await client.CreateOrUpdateNumbersAsync("contoso", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("telephoneNumber").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("accountName").ToString());
            Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Accounts_CreateOrUpdateNumbers_CreateOrUpdateNumbers_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            BatchNumbers body = new BatchNumbers(new NumberResource[]
            {
new NumberResource("+15105850321", "contoso", new NumberServiceDetails
{
TeamsOperatorConnect = new TeamsOperatorConnectNumberDetails(true)
{
AssignmentStatus = TelephoneNumberAssignmentStatus.Assigned,
Configuration = new TeamsOperatorConnectNumberConfig("CallingUserAssignment", new string[]{"InboundCalling"}),
},
})
{
Configuration = new NumberConfiguration
{
CustomSipHeader = "contoso-commsgw",
},
}
            });
            Response<BatchNumbers> response = client.CreateOrUpdateNumbers("contoso", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Accounts_CreateOrUpdateNumbers_CreateOrUpdateNumbers_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            BatchNumbers body = new BatchNumbers(new NumberResource[]
            {
new NumberResource("+15105850321", "contoso", new NumberServiceDetails
{
TeamsOperatorConnect = new TeamsOperatorConnectNumberDetails(true)
{
AssignmentStatus = TelephoneNumberAssignmentStatus.Assigned,
Configuration = new TeamsOperatorConnectNumberConfig("CallingUserAssignment", new string[]{"InboundCalling"}),
},
})
{
Configuration = new NumberConfiguration
{
CustomSipHeader = "contoso-commsgw",
},
}
            });
            Response<BatchNumbers> response = await client.CreateOrUpdateNumbersAsync("contoso", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Accounts_DeleteNumbers_DeleteBatchesOfNumbers()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            using RequestContent content = RequestContent.Create(new
            {
                numbers = new object[]
            {
new
{
telephoneNumber = "+15105850321",
}
            },
            });
            Response response = client.DeleteNumbers("contoso", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Accounts_DeleteNumbers_DeleteBatchesOfNumbers_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            using RequestContent content = RequestContent.Create(new
            {
                numbers = new object[]
            {
new
{
telephoneNumber = "+15105850321",
}
            },
            });
            Response response = await client.DeleteNumbersAsync("contoso", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Accounts_DeleteNumbers_DeleteBatchesOfNumbers_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            BatchNumbersDelete body = new BatchNumbersDelete(new NumberIdentifier[]
            {
new NumberIdentifier("+15105850321")
            });
            Response response = client.DeleteNumbers("contoso", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Accounts_DeleteNumbers_DeleteBatchesOfNumbers_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            BatchNumbersDelete body = new BatchNumbersDelete(new NumberIdentifier[]
            {
new NumberIdentifier("+15105850321")
            });
            Response response = await client.DeleteNumbersAsync("contoso", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NumberResource_GetNumber_GetANumberFromAnAccount()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response response = client.GetNumber("contoso", "+15105850321", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("telephoneNumber").ToString());
            Console.WriteLine(result.GetProperty("accountName").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NumberResource_GetNumber_GetANumberFromAnAccount_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response response = await client.GetNumberAsync("contoso", "+15105850321", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("telephoneNumber").ToString());
            Console.WriteLine(result.GetProperty("accountName").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NumberResource_GetNumber_GetANumberFromAnAccount_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response<NumberResource> response = client.GetNumber("contoso", "+15105850321");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NumberResource_GetNumber_GetANumberFromAnAccount_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response<NumberResource> response = await client.GetNumberAsync("contoso", "+15105850321");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NumberResource_CreateOrReplaceNumber_CreateOrReplaceANumber()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            using RequestContent content = RequestContent.Create(new
            {
                telephoneNumber = "+15105850321",
                accountName = "contoso",
                serviceDetails = new
                {
                    teamsOperatorConnect = new
                    {
                        enabled = true,
                        assignmentStatus = "assigned",
                        configuration = new
                        {
                            usage = "CallingUserAssignment",
                            choosableCapabilities = new object[]
            {
"InboundCalling"
            },
                        },
                    },
                },
                configuration = new
                {
                    customSipHeader = "contoso-commsgw",
                },
            });
            Response response = client.CreateOrReplaceNumber("contoso", "+15105850321", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("telephoneNumber").ToString());
            Console.WriteLine(result.GetProperty("accountName").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NumberResource_CreateOrReplaceNumber_CreateOrReplaceANumber_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            using RequestContent content = RequestContent.Create(new
            {
                telephoneNumber = "+15105850321",
                accountName = "contoso",
                serviceDetails = new
                {
                    teamsOperatorConnect = new
                    {
                        enabled = true,
                        assignmentStatus = "assigned",
                        configuration = new
                        {
                            usage = "CallingUserAssignment",
                            choosableCapabilities = new object[]
            {
"InboundCalling"
            },
                        },
                    },
                },
                configuration = new
                {
                    customSipHeader = "contoso-commsgw",
                },
            });
            Response response = await client.CreateOrReplaceNumberAsync("contoso", "+15105850321", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("telephoneNumber").ToString());
            Console.WriteLine(result.GetProperty("accountName").ToString());
            Console.WriteLine(result.GetProperty("serviceDetails").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NumberResource_CreateOrReplaceNumber_CreateOrReplaceANumber_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            NumberResource resource = new NumberResource("+15105850321", "contoso", new NumberServiceDetails
            {
                TeamsOperatorConnect = new TeamsOperatorConnectNumberDetails(true)
                {
                    AssignmentStatus = TelephoneNumberAssignmentStatus.Assigned,
                    Configuration = new TeamsOperatorConnectNumberConfig("CallingUserAssignment", new string[] { "InboundCalling" }),
                },
            })
            {
                Configuration = new NumberConfiguration
                {
                    CustomSipHeader = "contoso-commsgw",
                },
            };
            Response<NumberResource> response = client.CreateOrReplaceNumber("contoso", "+15105850321", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NumberResource_CreateOrReplaceNumber_CreateOrReplaceANumber_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            NumberResource resource = new NumberResource("+15105850321", "contoso", new NumberServiceDetails
            {
                TeamsOperatorConnect = new TeamsOperatorConnectNumberDetails(true)
                {
                    AssignmentStatus = TelephoneNumberAssignmentStatus.Assigned,
                    Configuration = new TeamsOperatorConnectNumberConfig("CallingUserAssignment", new string[] { "InboundCalling" }),
                },
            })
            {
                Configuration = new NumberConfiguration
                {
                    CustomSipHeader = "contoso-commsgw",
                },
            };
            Response<NumberResource> response = await client.CreateOrReplaceNumberAsync("contoso", "+15105850321", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NumberResource_DeleteNumber_DeleteNumberFromAccount()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response response = client.DeleteNumber("contoso", "+15105850321");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NumberResource_DeleteNumber_DeleteNumberFromAccount_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response response = await client.DeleteNumberAsync("contoso", "+15105850321");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Accounts_GetTeamsCapabilityPlans_GetTheListOfCapabilityPlansAvailableToThisAccount()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response response = client.GetTeamsCapabilityPlans("contoso", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("capabilityPlans")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("capabilityPlans")[0].GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("capabilityPlans")[0].GetProperty("supportsTollFree").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Accounts_GetTeamsCapabilityPlans_GetTheListOfCapabilityPlansAvailableToThisAccount_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response response = await client.GetTeamsCapabilityPlansAsync("contoso", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("capabilityPlans")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("capabilityPlans")[0].GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("capabilityPlans")[0].GetProperty("supportsTollFree").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Accounts_GetTeamsCapabilityPlans_GetTheListOfCapabilityPlansAvailableToThisAccount_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response<TeamsCapabilityPlans> response = client.GetTeamsCapabilityPlans("contoso");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Accounts_GetTeamsCapabilityPlans_GetTheListOfCapabilityPlansAvailableToThisAccount_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response<TeamsCapabilityPlans> response = await client.GetTeamsCapabilityPlansAsync("contoso");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Accounts_GetTeamsAvailableCapabilities_GetTheTeamsCapabilitiesAvailableToTheNumbersProvided()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            using RequestContent content = RequestContent.Create(new
            {
                numbers = new object[]
            {
new
{
telephoneNumber = "+15105850321",
}
            },
            });
            Response response = client.GetTeamsAvailableCapabilities("contoso", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("availableCapabilities")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Accounts_GetTeamsAvailableCapabilities_GetTheTeamsCapabilitiesAvailableToTheNumbersProvided_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            using RequestContent content = RequestContent.Create(new
            {
                numbers = new object[]
            {
new
{
telephoneNumber = "+15105850321",
}
            },
            });
            Response response = await client.GetTeamsAvailableCapabilitiesAsync("contoso", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("availableCapabilities")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Accounts_GetTeamsAvailableCapabilities_GetTheTeamsCapabilitiesAvailableToTheNumbersProvided_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            NumberIdentifiers body = new NumberIdentifiers(new NumberIdentifier[]
            {
new NumberIdentifier("+15105850321")
            });
            Response<TeamsAvailableCapabilities> response = client.GetTeamsAvailableCapabilities("contoso", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Accounts_GetTeamsAvailableCapabilities_GetTheTeamsCapabilitiesAvailableToTheNumbersProvided_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            NumberIdentifiers body = new NumberIdentifiers(new NumberIdentifier[]
            {
new NumberIdentifier("+15105850321")
            });
            Response<TeamsAvailableCapabilities> response = await client.GetTeamsAvailableCapabilitiesAsync("contoso", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TeamsCivicAddressResource_GetTeamsCivicAddress_GetACivicAddress()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response response = client.GetTeamsCivicAddress("contoso", "ebfee340-a791-11ed-9bfa-ed8bb5c41be4", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("defaultLocationId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TeamsCivicAddressResource_GetTeamsCivicAddress_GetACivicAddress_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response response = await client.GetTeamsCivicAddressAsync("contoso", "ebfee340-a791-11ed-9bfa-ed8bb5c41be4", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("defaultLocationId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TeamsCivicAddressResource_GetTeamsCivicAddress_GetACivicAddress_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response<TeamsCivicAddressResource> response = client.GetTeamsCivicAddress("contoso", "ebfee340-a791-11ed-9bfa-ed8bb5c41be4");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TeamsCivicAddressResource_GetTeamsCivicAddress_GetACivicAddress_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            Response<TeamsCivicAddressResource> response = await client.GetTeamsCivicAddressAsync("contoso", "ebfee340-a791-11ed-9bfa-ed8bb5c41be4");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AccountResource_GetAccountResources_GetListOfAccounts()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            foreach (BinaryData item in client.GetAccountResources(null, null, null, null, true, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AccountResource_GetAccountResources_GetListOfAccounts_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            await foreach (BinaryData item in client.GetAccountResourcesAsync(null, null, null, null, true, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AccountResource_GetAccountResources_GetListOfAccounts_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            foreach (AccountResource item in client.GetAccountResources())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AccountResource_GetAccountResources_GetListOfAccounts_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            await foreach (AccountResource item in client.GetAccountResourcesAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NumberResource_GetNumbers_GetListOfNumbersOnAnAccount()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            foreach (BinaryData item in client.GetNumbers("contoso", null, null, null, null, true, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("telephoneNumber").ToString());
                Console.WriteLine(result.GetProperty("accountName").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NumberResource_GetNumbers_GetListOfNumbersOnAnAccount_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            await foreach (BinaryData item in client.GetNumbersAsync("contoso", null, null, null, null, true, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("telephoneNumber").ToString());
                Console.WriteLine(result.GetProperty("accountName").ToString());
                Console.WriteLine(result.GetProperty("serviceDetails").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NumberResource_GetNumbers_GetListOfNumbersOnAnAccount_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            foreach (NumberResource item in client.GetNumbers("contoso"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NumberResource_GetNumbers_GetListOfNumbersOnAnAccount_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            await foreach (NumberResource item in client.GetNumbersAsync("contoso"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TeamsCivicAddressResource_GetTeamsCivicAddresses_GetAListOfCivicAddresses()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            foreach (BinaryData item in client.GetTeamsCivicAddresses("contoso", null, null, null, null, true, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("defaultLocationId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TeamsCivicAddressResource_GetTeamsCivicAddresses_GetAListOfCivicAddresses_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            await foreach (BinaryData item in client.GetTeamsCivicAddressesAsync("contoso", null, null, null, null, true, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("defaultLocationId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TeamsCivicAddressResource_GetTeamsCivicAddresses_GetAListOfCivicAddresses_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            foreach (TeamsCivicAddressResource item in client.GetTeamsCivicAddresses("contoso"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TeamsCivicAddressResource_GetTeamsCivicAddresses_GetAListOfCivicAddresses_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

            await foreach (TeamsCivicAddressResource item in client.GetTeamsCivicAddressesAsync("contoso"))
            {
            }
        }
    }
}
