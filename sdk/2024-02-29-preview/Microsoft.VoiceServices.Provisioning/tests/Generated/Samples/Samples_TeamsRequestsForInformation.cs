// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Microsoft.VoiceServices.Provisioning.Samples
{
    public partial class Samples_TeamsRequestsForInformation
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RequestForInformationResource_GetRequestForInformation_GetAnRFIByTenantID()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TeamsRequestsForInformation client = new VoiceServicesClient(endpoint, credential).GetTeamsRequestsForInformationClient();

            Response response = client.GetRequestForInformation("a7f4bd5c-cc01-40f4-8baa-2b6bdb272b8a", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("tenantId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RequestForInformationResource_GetRequestForInformation_GetAnRFIByTenantID_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TeamsRequestsForInformation client = new VoiceServicesClient(endpoint, credential).GetTeamsRequestsForInformationClient();

            Response response = await client.GetRequestForInformationAsync("a7f4bd5c-cc01-40f4-8baa-2b6bdb272b8a", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("tenantId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RequestForInformationResource_GetRequestForInformation_GetAnRFIByTenantID_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TeamsRequestsForInformation client = new VoiceServicesClient(endpoint, credential).GetTeamsRequestsForInformationClient();

            Response<RequestForInformationResource> response = client.GetRequestForInformation("a7f4bd5c-cc01-40f4-8baa-2b6bdb272b8a");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RequestForInformationResource_GetRequestForInformation_GetAnRFIByTenantID_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TeamsRequestsForInformation client = new VoiceServicesClient(endpoint, credential).GetTeamsRequestsForInformationClient();

            Response<RequestForInformationResource> response = await client.GetRequestForInformationAsync("a7f4bd5c-cc01-40f4-8baa-2b6bdb272b8a");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RequestForInformationResource_CreateOrUpdateRequestForInformation_CreateOrUpdateATeamsRequestForInformation()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TeamsRequestsForInformation client = new VoiceServicesClient(endpoint, credential).GetTeamsRequestsForInformationClient();

            using RequestContent content = RequestContent.Create(new
            {
                customerRelationship = new
                {
                    status = "ConsentAcknowledged",
                    comment = "Consent has been accepted on 2024-01-12",
                },
            });
            Response response = client.CreateOrUpdateRequestForInformation("a7f4bd5c-cc01-40f4-8baa-2b6bdb272b8a", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("tenantId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RequestForInformationResource_CreateOrUpdateRequestForInformation_CreateOrUpdateATeamsRequestForInformation_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TeamsRequestsForInformation client = new VoiceServicesClient(endpoint, credential).GetTeamsRequestsForInformationClient();

            using RequestContent content = RequestContent.Create(new
            {
                customerRelationship = new
                {
                    status = "ConsentAcknowledged",
                    comment = "Consent has been accepted on 2024-01-12",
                },
            });
            Response response = await client.CreateOrUpdateRequestForInformationAsync("a7f4bd5c-cc01-40f4-8baa-2b6bdb272b8a", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("tenantId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RequestForInformationResource_GetRequestForInformationResources_GetListOfRequestsForInformationConsents()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TeamsRequestsForInformation client = new VoiceServicesClient(endpoint, credential).GetTeamsRequestsForInformationClient();

            foreach (BinaryData item in client.GetRequestForInformationResources(null, null, null, null, true, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("tenantId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RequestForInformationResource_GetRequestForInformationResources_GetListOfRequestsForInformationConsents_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TeamsRequestsForInformation client = new VoiceServicesClient(endpoint, credential).GetTeamsRequestsForInformationClient();

            await foreach (BinaryData item in client.GetRequestForInformationResourcesAsync(null, null, null, null, true, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("tenantId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RequestForInformationResource_GetRequestForInformationResources_GetListOfRequestsForInformationConsents_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TeamsRequestsForInformation client = new VoiceServicesClient(endpoint, credential).GetTeamsRequestsForInformationClient();

            foreach (RequestForInformationResource item in client.GetRequestForInformationResources())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RequestForInformationResource_GetRequestForInformationResources_GetListOfRequestsForInformationConsents_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TeamsRequestsForInformation client = new VoiceServicesClient(endpoint, credential).GetTeamsRequestsForInformationClient();

            await foreach (RequestForInformationResource item in client.GetRequestForInformationResourcesAsync())
            {
            }
        }
    }
}
