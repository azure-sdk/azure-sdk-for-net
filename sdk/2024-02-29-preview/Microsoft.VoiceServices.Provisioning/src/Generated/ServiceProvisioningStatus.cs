// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Microsoft.VoiceServices.Provisioning
{
    /// <summary> The provisioning states of an object on any relevant backend service. </summary>
    public readonly partial struct ServiceProvisioningStatus : IEquatable<ServiceProvisioningStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ServiceProvisioningStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ServiceProvisioningStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PendingValue = "pending";
        private const string SyncedValue = "synced";
        private const string FailedValue = "failed";

        /// <summary> The object is pending provisioning. </summary>
        public static ServiceProvisioningStatus Pending { get; } = new ServiceProvisioningStatus(PendingValue);
        /// <summary> The object has been synced with the relevant backend service. </summary>
        public static ServiceProvisioningStatus Synced { get; } = new ServiceProvisioningStatus(SyncedValue);
        /// <summary> The object provisioning operation failed with the relevant backend service. </summary>
        public static ServiceProvisioningStatus Failed { get; } = new ServiceProvisioningStatus(FailedValue);
        /// <summary> Determines if two <see cref="ServiceProvisioningStatus"/> values are the same. </summary>
        public static bool operator ==(ServiceProvisioningStatus left, ServiceProvisioningStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ServiceProvisioningStatus"/> values are not the same. </summary>
        public static bool operator !=(ServiceProvisioningStatus left, ServiceProvisioningStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ServiceProvisioningStatus"/>. </summary>
        public static implicit operator ServiceProvisioningStatus(string value) => new ServiceProvisioningStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ServiceProvisioningStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ServiceProvisioningStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
