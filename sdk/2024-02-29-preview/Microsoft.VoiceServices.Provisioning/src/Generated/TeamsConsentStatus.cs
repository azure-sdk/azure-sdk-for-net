// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Microsoft.VoiceServices.Provisioning
{
    /// <summary> The possible state for an Operator Consent. </summary>
    public readonly partial struct TeamsConsentStatus : IEquatable<TeamsConsentStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="TeamsConsentStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TeamsConsentStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ActiveValue = "active";
        private const string SuspendedValue = "suspended";
        private const string RemovedValue = "removed";

        /// <summary> The Operator Consent is active. </summary>
        public static TeamsConsentStatus Active { get; } = new TeamsConsentStatus(ActiveValue);
        /// <summary> The Operator Consent is suspended. </summary>
        public static TeamsConsentStatus Suspended { get; } = new TeamsConsentStatus(SuspendedValue);
        /// <summary> The Operator Consent is removed. </summary>
        public static TeamsConsentStatus Removed { get; } = new TeamsConsentStatus(RemovedValue);
        /// <summary> Determines if two <see cref="TeamsConsentStatus"/> values are the same. </summary>
        public static bool operator ==(TeamsConsentStatus left, TeamsConsentStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TeamsConsentStatus"/> values are not the same. </summary>
        public static bool operator !=(TeamsConsentStatus left, TeamsConsentStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="TeamsConsentStatus"/>. </summary>
        public static implicit operator TeamsConsentStatus(string value) => new TeamsConsentStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TeamsConsentStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TeamsConsentStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
