// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Microsoft.VoiceServices.Provisioning
{
    /// <summary> A location used by Team Operator Connect or Teams Phone Mobile telephone numbers. </summary>
    public partial class Location
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="Location"/>. </summary>
        internal Location()
        {
        }

        /// <summary> Initializes a new instance of <see cref="Location"/>. </summary>
        /// <param name="id"> The ID of the location. </param>
        /// <param name="civicAddressId"> The civic address ID of the location. </param>
        /// <param name="description"> The description of the location. </param>
        /// <param name="additionalInfo"> The additional information of the location. </param>
        /// <param name="isDefault"> Flag indicating whether the location is default or not. </param>
        /// <param name="elin"> The elin (Emergency Location Identification Number) of the location. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal Location(string id, string civicAddressId, string description, string additionalInfo, bool? isDefault, string elin, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Id = id;
            CivicAddressId = civicAddressId;
            Description = description;
            AdditionalInfo = additionalInfo;
            IsDefault = isDefault;
            Elin = elin;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The ID of the location. </summary>
        public string Id { get; }
        /// <summary> The civic address ID of the location. </summary>
        public string CivicAddressId { get; }
        /// <summary> The description of the location. </summary>
        public string Description { get; }
        /// <summary> The additional information of the location. </summary>
        public string AdditionalInfo { get; }
        /// <summary> Flag indicating whether the location is default or not. </summary>
        public bool? IsDefault { get; }
        /// <summary> The elin (Emergency Location Identification Number) of the location. </summary>
        public string Elin { get; }
    }
}
