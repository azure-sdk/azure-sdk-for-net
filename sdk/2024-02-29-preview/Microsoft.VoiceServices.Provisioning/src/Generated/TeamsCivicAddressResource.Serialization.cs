// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Microsoft.VoiceServices.Provisioning
{
    public partial class TeamsCivicAddressResource : IUtf8JsonSerializable, IJsonModel<TeamsCivicAddressResource>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<TeamsCivicAddressResource>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<TeamsCivicAddressResource>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TeamsCivicAddressResource>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(TeamsCivicAddressResource)} does not support writing '{format}' format.");
            }

            writer.WriteStartObject();
            if (options.Format != "W")
            {
                writer.WritePropertyName("id"u8);
                writer.WriteStringValue(Id);
            }
            if (options.Format != "W" && Optional.IsDefined(Country))
            {
                writer.WritePropertyName("country"u8);
                writer.WriteStringValue(Country);
            }
            if (options.Format != "W" && Optional.IsDefined(HouseNumber))
            {
                writer.WritePropertyName("houseNumber"u8);
                writer.WriteStringValue(HouseNumber);
            }
            if (options.Format != "W" && Optional.IsDefined(HouseNumberSuffix))
            {
                writer.WritePropertyName("houseNumberSuffix"u8);
                writer.WriteStringValue(HouseNumberSuffix);
            }
            if (options.Format != "W" && Optional.IsDefined(PreDirectional))
            {
                writer.WritePropertyName("preDirectional"u8);
                writer.WriteStringValue(PreDirectional);
            }
            if (options.Format != "W" && Optional.IsDefined(StreetName))
            {
                writer.WritePropertyName("streetName"u8);
                writer.WriteStringValue(StreetName);
            }
            if (options.Format != "W" && Optional.IsDefined(StreetSuffix))
            {
                writer.WritePropertyName("streetSuffix"u8);
                writer.WriteStringValue(StreetSuffix);
            }
            if (options.Format != "W" && Optional.IsDefined(PostDirectional))
            {
                writer.WritePropertyName("postDirectional"u8);
                writer.WriteStringValue(PostDirectional);
            }
            if (options.Format != "W" && Optional.IsDefined(StateOrProvince))
            {
                writer.WritePropertyName("stateOrProvince"u8);
                writer.WriteStringValue(StateOrProvince);
            }
            if (options.Format != "W" && Optional.IsDefined(CountyOrDistrict))
            {
                writer.WritePropertyName("countyOrDistrict"u8);
                writer.WriteStringValue(CountyOrDistrict);
            }
            if (options.Format != "W" && Optional.IsDefined(CityOrTown))
            {
                writer.WritePropertyName("cityOrTown"u8);
                writer.WriteStringValue(CityOrTown);
            }
            if (options.Format != "W" && Optional.IsDefined(CityOrTownAlias))
            {
                writer.WritePropertyName("cityOrTownAlias"u8);
                writer.WriteStringValue(CityOrTownAlias);
            }
            if (options.Format != "W" && Optional.IsDefined(PostalOrZipCode))
            {
                writer.WritePropertyName("postalOrZipCode"u8);
                writer.WriteStringValue(PostalOrZipCode);
            }
            if (options.Format != "W" && Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            if (options.Format != "W" && Optional.IsDefined(CompanyName))
            {
                writer.WritePropertyName("companyName"u8);
                writer.WriteStringValue(CompanyName);
            }
            if (options.Format != "W" && Optional.IsDefined(CompanyId))
            {
                writer.WritePropertyName("companyId"u8);
                writer.WriteStringValue(CompanyId);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("defaultLocationId"u8);
                writer.WriteStringValue(DefaultLocationId);
            }
            if (options.Format != "W" && Optional.IsDefined(ValidationStatus))
            {
                writer.WritePropertyName("validationStatus"u8);
                writer.WriteStringValue(ValidationStatus.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(TenantId))
            {
                writer.WritePropertyName("tenantId"u8);
                writer.WriteStringValue(TenantId);
            }
            if (options.Format != "W" && Optional.IsDefined(PartnerId))
            {
                writer.WritePropertyName("partnerId"u8);
                writer.WriteStringValue(PartnerId);
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(Locations))
            {
                writer.WritePropertyName("locations"u8);
                writer.WriteStartArray();
                foreach (var item in Locations)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsDefined(Latitude))
            {
                writer.WritePropertyName("latitude"u8);
                writer.WriteStringValue(Latitude);
            }
            if (options.Format != "W" && Optional.IsDefined(Longitude))
            {
                writer.WritePropertyName("longitude"u8);
                writer.WriteStringValue(Longitude);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        TeamsCivicAddressResource IJsonModel<TeamsCivicAddressResource>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TeamsCivicAddressResource>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(TeamsCivicAddressResource)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeTeamsCivicAddressResource(document.RootElement, options);
        }

        internal static TeamsCivicAddressResource DeserializeTeamsCivicAddressResource(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string id = default;
            string country = default;
            string houseNumber = default;
            string houseNumberSuffix = default;
            string preDirectional = default;
            string streetName = default;
            string streetSuffix = default;
            string postDirectional = default;
            string stateOrProvince = default;
            string countyOrDistrict = default;
            string cityOrTown = default;
            string cityOrTownAlias = default;
            string postalOrZipCode = default;
            string description = default;
            string companyName = default;
            string companyId = default;
            string defaultLocationId = default;
            ValidationStatus? validationStatus = default;
            string tenantId = default;
            string partnerId = default;
            IReadOnlyList<Location> locations = default;
            string latitude = default;
            string longitude = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("country"u8))
                {
                    country = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("houseNumber"u8))
                {
                    houseNumber = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("houseNumberSuffix"u8))
                {
                    houseNumberSuffix = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("preDirectional"u8))
                {
                    preDirectional = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("streetName"u8))
                {
                    streetName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("streetSuffix"u8))
                {
                    streetSuffix = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("postDirectional"u8))
                {
                    postDirectional = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("stateOrProvince"u8))
                {
                    stateOrProvince = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("countyOrDistrict"u8))
                {
                    countyOrDistrict = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("cityOrTown"u8))
                {
                    cityOrTown = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("cityOrTownAlias"u8))
                {
                    cityOrTownAlias = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("postalOrZipCode"u8))
                {
                    postalOrZipCode = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("companyName"u8))
                {
                    companyName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("companyId"u8))
                {
                    companyId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("defaultLocationId"u8))
                {
                    defaultLocationId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("validationStatus"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    validationStatus = new ValidationStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("tenantId"u8))
                {
                    tenantId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("partnerId"u8))
                {
                    partnerId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("locations"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<Location> array = new List<Location>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Location.DeserializeLocation(item, options));
                    }
                    locations = array;
                    continue;
                }
                if (property.NameEquals("latitude"u8))
                {
                    latitude = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("longitude"u8))
                {
                    longitude = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new TeamsCivicAddressResource(
                id,
                country,
                houseNumber,
                houseNumberSuffix,
                preDirectional,
                streetName,
                streetSuffix,
                postDirectional,
                stateOrProvince,
                countyOrDistrict,
                cityOrTown,
                cityOrTownAlias,
                postalOrZipCode,
                description,
                companyName,
                companyId,
                defaultLocationId,
                validationStatus,
                tenantId,
                partnerId,
                locations ?? new ChangeTrackingList<Location>(),
                latitude,
                longitude,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<TeamsCivicAddressResource>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TeamsCivicAddressResource>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(TeamsCivicAddressResource)} does not support writing '{options.Format}' format.");
            }
        }

        TeamsCivicAddressResource IPersistableModel<TeamsCivicAddressResource>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TeamsCivicAddressResource>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeTeamsCivicAddressResource(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(TeamsCivicAddressResource)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<TeamsCivicAddressResource>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static TeamsCivicAddressResource FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeTeamsCivicAddressResource(document.RootElement);
        }

        /// <summary> Convert into a <see cref="RequestContent"/>. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this, ModelSerializationExtensions.WireOptions);
            return content;
        }
    }
}
