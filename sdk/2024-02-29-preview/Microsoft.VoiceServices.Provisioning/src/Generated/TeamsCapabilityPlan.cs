// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Microsoft.VoiceServices.Provisioning
{
    /// <summary> A teams capability plan for a given usage. </summary>
    public partial class TeamsCapabilityPlan
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="TeamsCapabilityPlan"/>. </summary>
        internal TeamsCapabilityPlan()
        {
            OfferTypes = new ChangeTrackingList<string>();
            MandatoryCapabilities = new ChangeTrackingList<string>();
            ChoosableCapabilities = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="TeamsCapabilityPlan"/>. </summary>
        /// <param name="name"> The capability plan name. </param>
        /// <param name="offerTypes"> The offer types available. </param>
        /// <param name="usage"> The telephone number usage. </param>
        /// <param name="mandatoryCapabilities"> Mandatory capabilities for telephone numbers. </param>
        /// <param name="choosableCapabilities"> Choosable capabilities for telephone numbers. </param>
        /// <param name="supportsTollFree"> Boolean indicating if Toll free is supported. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal TeamsCapabilityPlan(string name, IReadOnlyList<string> offerTypes, string usage, IReadOnlyList<string> mandatoryCapabilities, IReadOnlyList<string> choosableCapabilities, bool supportsTollFree, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Name = name;
            OfferTypes = offerTypes;
            Usage = usage;
            MandatoryCapabilities = mandatoryCapabilities;
            ChoosableCapabilities = choosableCapabilities;
            SupportsTollFree = supportsTollFree;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The capability plan name. </summary>
        public string Name { get; }
        /// <summary> The offer types available. </summary>
        public IReadOnlyList<string> OfferTypes { get; }
        /// <summary> The telephone number usage. </summary>
        public string Usage { get; }
        /// <summary> Mandatory capabilities for telephone numbers. </summary>
        public IReadOnlyList<string> MandatoryCapabilities { get; }
        /// <summary> Choosable capabilities for telephone numbers. </summary>
        public IReadOnlyList<string> ChoosableCapabilities { get; }
        /// <summary> Boolean indicating if Toll free is supported. </summary>
        public bool SupportsTollFree { get; }
    }
}
