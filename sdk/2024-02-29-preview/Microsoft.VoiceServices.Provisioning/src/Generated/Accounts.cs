// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Internal;
using System.ClientModel.Primitives;
using System.ClientModel.Primitives.Pipeline;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure;
using Azure.Core;

namespace Microsoft.VoiceServices.Provisioning
{
    // Data plane generated sub-client.
    /// <summary> The Accounts sub-client. </summary>
    public partial class Accounts
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://func-voiceservice-rp-prod-eastuseuap.azurewebsites.net/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly MessagePipeline _pipeline;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal TelemetrySource ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual MessagePipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of Accounts for mocking. </summary>
        protected Accounts()
        {
        }

        /// <summary> Initializes a new instance of Accounts. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="tokenCredential"> The token credential to copy. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        internal Accounts(TelemetrySource clientDiagnostics, MessagePipeline pipeline, TokenCredential tokenCredential, string apiVersion)
        {
            ClientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
            _tokenCredential = tokenCredential;
            _apiVersion = apiVersion;
        }

        /// <summary> Get Account. </summary>
        /// <param name="accountName"> Name of the account. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Get details of a specific Account using its Name. An Account represents an Enterprise or collection of users. </remarks>
        public virtual async Task<Result<AccountResource>> GetAccountResourceAsync(string accountName, RequestConditions requestConditions = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));

            RequestOptions context = FromCancellationToken(cancellationToken);
            Result result = await GetAccountResourceAsync(accountName, requestConditions, context).ConfigureAwait(false);
            return Result.FromValue(AccountResource.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary> Get Account. </summary>
        /// <param name="accountName"> Name of the account. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Get details of a specific Account using its Name. An Account represents an Enterprise or collection of users. </remarks>
        public virtual Result<AccountResource> GetAccountResource(string accountName, RequestConditions requestConditions = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));

            RequestOptions context = FromCancellationToken(cancellationToken);
            Result result = GetAccountResource(accountName, requestConditions, context);
            return Result.FromValue(AccountResource.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Get Account.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetAccountResourceAsync(string,RequestConditions,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountName"> Name of the account. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Result> GetAccountResourceAsync(string accountName, RequestConditions requestConditions, RequestOptions context)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));

            using var scope = ClientDiagnostics.CreateSpan("Accounts.GetAccountResource");
            scope.Start();
            try
            {
                using PipelineMessage message = CreateGetAccountResourceRequest(accountName, requestConditions, context);
                return Result.FromResponse(await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false));
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get Account.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetAccountResource(string,RequestConditions,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountName"> Name of the account. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Result GetAccountResource(string accountName, RequestConditions requestConditions, RequestOptions context)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));

            using var scope = ClientDiagnostics.CreateSpan("Accounts.GetAccountResource");
            scope.Start();
            try
            {
                using PipelineMessage message = CreateGetAccountResourceRequest(accountName, requestConditions, context);
                return Result.FromResponse(_pipeline.ProcessMessage(message, context));
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or Replace Account. </summary>
        /// <param name="accountName"> Name of the account. </param>
        /// <param name="resource"> The resource instance. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> or <paramref name="resource"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Create or replace the details of an Account. </remarks>
        public virtual async Task<Result<AccountResource>> CreateOrReplaceAsync(string accountName, AccountResource resource, RequestConditions requestConditions = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));
            Argument.AssertNotNull(resource, nameof(resource));

            RequestOptions context = FromCancellationToken(cancellationToken);
            using RequestBody content = resource.ToRequestBody();
            Result result = await CreateOrReplaceAsync(accountName, content, requestConditions, context).ConfigureAwait(false);
            return Result.FromValue(AccountResource.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary> Create or Replace Account. </summary>
        /// <param name="accountName"> Name of the account. </param>
        /// <param name="resource"> The resource instance. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> or <paramref name="resource"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Create or replace the details of an Account. </remarks>
        public virtual Result<AccountResource> CreateOrReplace(string accountName, AccountResource resource, RequestConditions requestConditions = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));
            Argument.AssertNotNull(resource, nameof(resource));

            RequestOptions context = FromCancellationToken(cancellationToken);
            using RequestBody content = resource.ToRequestBody();
            Result result = CreateOrReplace(accountName, content, requestConditions, context);
            return Result.FromValue(AccountResource.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Create or Replace Account.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateOrReplaceAsync(string,AccountResource,RequestConditions,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountName"> Name of the account. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Result> CreateOrReplaceAsync(string accountName, RequestBody content, RequestConditions requestConditions = null, RequestOptions context = null)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateSpan("Accounts.CreateOrReplace");
            scope.Start();
            try
            {
                using PipelineMessage message = CreateCreateOrReplaceRequest(accountName, content, requestConditions, context);
                return Result.FromResponse(await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false));
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Create or Replace Account.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateOrReplace(string,AccountResource,RequestConditions,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountName"> Name of the account. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Result CreateOrReplace(string accountName, RequestBody content, RequestConditions requestConditions = null, RequestOptions context = null)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateSpan("Accounts.CreateOrReplace");
            scope.Start();
            try
            {
                using PipelineMessage message = CreateCreateOrReplaceRequest(accountName, content, requestConditions, context);
                return Result.FromResponse(_pipeline.ProcessMessage(message, context));
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] Delete Account.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountName"> Name of the account. </param>
        /// <param name="deleteNumbers"> Whether to delete the child Number resources of the Account, defaults to false. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Result> DeleteAsync(string accountName, bool? deleteNumbers = null, RequestConditions requestConditions = null, RequestOptions context = null)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));

            using var scope = ClientDiagnostics.CreateSpan("Accounts.Delete");
            scope.Start();
            try
            {
                using PipelineMessage message = CreateDeleteRequest(accountName, deleteNumbers, requestConditions, context);
                return Result.FromResponse(await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false));
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] Delete Account.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountName"> Name of the account. </param>
        /// <param name="deleteNumbers"> Whether to delete the child Number resources of the Account, defaults to false. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Result Delete(string accountName, bool? deleteNumbers = null, RequestConditions requestConditions = null, RequestOptions context = null)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));

            using var scope = ClientDiagnostics.CreateSpan("Accounts.Delete");
            scope.Start();
            try
            {
                using PipelineMessage message = CreateDeleteRequest(accountName, deleteNumbers, requestConditions, context);
                return Result.FromResponse(_pipeline.ProcessMessage(message, context));
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update Numbers. </summary>
        /// <param name="accountName"> Name of the account. </param>
        /// <param name="batchNumbers"> List of telephone numbers to be uploaded to an account via a PUT request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> or <paramref name="batchNumbers"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Create or update up to 100 Numbers on the specified account. </remarks>
        public virtual async Task<Result<BatchNumbers>> CreateOrUpdateNumbersAsync(string accountName, BatchNumbers batchNumbers, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));
            Argument.AssertNotNull(batchNumbers, nameof(batchNumbers));

            RequestOptions context = FromCancellationToken(cancellationToken);
            using RequestBody content = batchNumbers.ToRequestBody();
            Result result = await CreateOrUpdateNumbersAsync(accountName, content, context).ConfigureAwait(false);
            return Result.FromValue(BatchNumbers.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary> Create or update Numbers. </summary>
        /// <param name="accountName"> Name of the account. </param>
        /// <param name="batchNumbers"> List of telephone numbers to be uploaded to an account via a PUT request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> or <paramref name="batchNumbers"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Create or update up to 100 Numbers on the specified account. </remarks>
        public virtual Result<BatchNumbers> CreateOrUpdateNumbers(string accountName, BatchNumbers batchNumbers, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));
            Argument.AssertNotNull(batchNumbers, nameof(batchNumbers));

            RequestOptions context = FromCancellationToken(cancellationToken);
            using RequestBody content = batchNumbers.ToRequestBody();
            Result result = CreateOrUpdateNumbers(accountName, content, context);
            return Result.FromValue(BatchNumbers.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Create or update Numbers.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateOrUpdateNumbersAsync(string,BatchNumbers,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountName"> Name of the account. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Result> CreateOrUpdateNumbersAsync(string accountName, RequestBody content, RequestOptions context = null)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateSpan("Accounts.CreateOrUpdateNumbers");
            scope.Start();
            try
            {
                using PipelineMessage message = CreateCreateOrUpdateNumbersRequest(accountName, content, context);
                return Result.FromResponse(await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false));
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Create or update Numbers.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateOrUpdateNumbers(string,BatchNumbers,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountName"> Name of the account. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Result CreateOrUpdateNumbers(string accountName, RequestBody content, RequestOptions context = null)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateSpan("Accounts.CreateOrUpdateNumbers");
            scope.Start();
            try
            {
                using PipelineMessage message = CreateCreateOrUpdateNumbersRequest(accountName, content, context);
                return Result.FromResponse(_pipeline.ProcessMessage(message, context));
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete Numbers. </summary>
        /// <param name="accountName"> Name of the account. </param>
        /// <param name="batchNumbersDelete"> A list of telephone numbers to delete. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> or <paramref name="batchNumbersDelete"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Delete up to 100 Numbers on the specified account. </remarks>
        public virtual async Task<Result> DeleteNumbersAsync(string accountName, BatchNumbersDelete batchNumbersDelete, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));
            Argument.AssertNotNull(batchNumbersDelete, nameof(batchNumbersDelete));

            RequestOptions context = FromCancellationToken(cancellationToken);
            using RequestBody content = batchNumbersDelete.ToRequestBody();
            Result result = await DeleteNumbersAsync(accountName, content, context).ConfigureAwait(false);
            return result;
        }

        /// <summary> Delete Numbers. </summary>
        /// <param name="accountName"> Name of the account. </param>
        /// <param name="batchNumbersDelete"> A list of telephone numbers to delete. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> or <paramref name="batchNumbersDelete"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Delete up to 100 Numbers on the specified account. </remarks>
        public virtual Result DeleteNumbers(string accountName, BatchNumbersDelete batchNumbersDelete, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));
            Argument.AssertNotNull(batchNumbersDelete, nameof(batchNumbersDelete));

            RequestOptions context = FromCancellationToken(cancellationToken);
            using RequestBody content = batchNumbersDelete.ToRequestBody();
            Result result = DeleteNumbers(accountName, content, context);
            return result;
        }

        /// <summary>
        /// [Protocol Method] Delete Numbers.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="DeleteNumbersAsync(string,BatchNumbersDelete,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountName"> Name of the account. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Result> DeleteNumbersAsync(string accountName, RequestBody content, RequestOptions context = null)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateSpan("Accounts.DeleteNumbers");
            scope.Start();
            try
            {
                using PipelineMessage message = CreateDeleteNumbersRequest(accountName, content, context);
                return Result.FromResponse(await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false));
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Delete Numbers.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="DeleteNumbers(string,BatchNumbersDelete,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountName"> Name of the account. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Result DeleteNumbers(string accountName, RequestBody content, RequestOptions context = null)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateSpan("Accounts.DeleteNumbers");
            scope.Start();
            try
            {
                using PipelineMessage message = CreateDeleteNumbersRequest(accountName, content, context);
                return Result.FromResponse(_pipeline.ProcessMessage(message, context));
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get Number. </summary>
        /// <param name="accountName"> Name of the account. </param>
        /// <param name="telephoneNumber"> Telephone number in E.164 format. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> or <paramref name="telephoneNumber"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> or <paramref name="telephoneNumber"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Get details of a specific Number using its telephone number. </remarks>
        public virtual async Task<Result<NumberResource>> GetNumberAsync(string accountName, string telephoneNumber, RequestConditions requestConditions = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));
            Argument.AssertNotNullOrEmpty(telephoneNumber, nameof(telephoneNumber));

            RequestOptions context = FromCancellationToken(cancellationToken);
            Result result = await GetNumberAsync(accountName, telephoneNumber, requestConditions, context).ConfigureAwait(false);
            return Result.FromValue(NumberResource.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary> Get Number. </summary>
        /// <param name="accountName"> Name of the account. </param>
        /// <param name="telephoneNumber"> Telephone number in E.164 format. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> or <paramref name="telephoneNumber"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> or <paramref name="telephoneNumber"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Get details of a specific Number using its telephone number. </remarks>
        public virtual Result<NumberResource> GetNumber(string accountName, string telephoneNumber, RequestConditions requestConditions = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));
            Argument.AssertNotNullOrEmpty(telephoneNumber, nameof(telephoneNumber));

            RequestOptions context = FromCancellationToken(cancellationToken);
            Result result = GetNumber(accountName, telephoneNumber, requestConditions, context);
            return Result.FromValue(NumberResource.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Get Number.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetNumberAsync(string,string,RequestConditions,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountName"> Name of the account. </param>
        /// <param name="telephoneNumber"> Telephone number in E.164 format. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> or <paramref name="telephoneNumber"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> or <paramref name="telephoneNumber"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Result> GetNumberAsync(string accountName, string telephoneNumber, RequestConditions requestConditions, RequestOptions context)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));
            Argument.AssertNotNullOrEmpty(telephoneNumber, nameof(telephoneNumber));

            using var scope = ClientDiagnostics.CreateSpan("Accounts.GetNumber");
            scope.Start();
            try
            {
                using PipelineMessage message = CreateGetNumberRequest(accountName, telephoneNumber, requestConditions, context);
                return Result.FromResponse(await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false));
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get Number.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetNumber(string,string,RequestConditions,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountName"> Name of the account. </param>
        /// <param name="telephoneNumber"> Telephone number in E.164 format. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> or <paramref name="telephoneNumber"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> or <paramref name="telephoneNumber"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Result GetNumber(string accountName, string telephoneNumber, RequestConditions requestConditions, RequestOptions context)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));
            Argument.AssertNotNullOrEmpty(telephoneNumber, nameof(telephoneNumber));

            using var scope = ClientDiagnostics.CreateSpan("Accounts.GetNumber");
            scope.Start();
            try
            {
                using PipelineMessage message = CreateGetNumberRequest(accountName, telephoneNumber, requestConditions, context);
                return Result.FromResponse(_pipeline.ProcessMessage(message, context));
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or replace Number. </summary>
        /// <param name="accountName"> Name of the account. </param>
        /// <param name="telephoneNumber"> Telephone number in E.164 format. </param>
        /// <param name="resource"> The resource instance. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/>, <paramref name="telephoneNumber"/> or <paramref name="resource"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> or <paramref name="telephoneNumber"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Create or replace the details of a Number. </remarks>
        public virtual async Task<Result<NumberResource>> CreateOrReplaceNumberAsync(string accountName, string telephoneNumber, NumberResource resource, RequestConditions requestConditions = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));
            Argument.AssertNotNullOrEmpty(telephoneNumber, nameof(telephoneNumber));
            Argument.AssertNotNull(resource, nameof(resource));

            RequestOptions context = FromCancellationToken(cancellationToken);
            using RequestBody content = resource.ToRequestBody();
            Result result = await CreateOrReplaceNumberAsync(accountName, telephoneNumber, content, requestConditions, context).ConfigureAwait(false);
            return Result.FromValue(NumberResource.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary> Create or replace Number. </summary>
        /// <param name="accountName"> Name of the account. </param>
        /// <param name="telephoneNumber"> Telephone number in E.164 format. </param>
        /// <param name="resource"> The resource instance. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/>, <paramref name="telephoneNumber"/> or <paramref name="resource"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> or <paramref name="telephoneNumber"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Create or replace the details of a Number. </remarks>
        public virtual Result<NumberResource> CreateOrReplaceNumber(string accountName, string telephoneNumber, NumberResource resource, RequestConditions requestConditions = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));
            Argument.AssertNotNullOrEmpty(telephoneNumber, nameof(telephoneNumber));
            Argument.AssertNotNull(resource, nameof(resource));

            RequestOptions context = FromCancellationToken(cancellationToken);
            using RequestBody content = resource.ToRequestBody();
            Result result = CreateOrReplaceNumber(accountName, telephoneNumber, content, requestConditions, context);
            return Result.FromValue(NumberResource.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Create or replace Number.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateOrReplaceNumberAsync(string,string,NumberResource,RequestConditions,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountName"> Name of the account. </param>
        /// <param name="telephoneNumber"> Telephone number in E.164 format. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/>, <paramref name="telephoneNumber"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> or <paramref name="telephoneNumber"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Result> CreateOrReplaceNumberAsync(string accountName, string telephoneNumber, RequestBody content, RequestConditions requestConditions = null, RequestOptions context = null)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));
            Argument.AssertNotNullOrEmpty(telephoneNumber, nameof(telephoneNumber));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateSpan("Accounts.CreateOrReplaceNumber");
            scope.Start();
            try
            {
                using PipelineMessage message = CreateCreateOrReplaceNumberRequest(accountName, telephoneNumber, content, requestConditions, context);
                return Result.FromResponse(await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false));
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Create or replace Number.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateOrReplaceNumber(string,string,NumberResource,RequestConditions,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountName"> Name of the account. </param>
        /// <param name="telephoneNumber"> Telephone number in E.164 format. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/>, <paramref name="telephoneNumber"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> or <paramref name="telephoneNumber"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Result CreateOrReplaceNumber(string accountName, string telephoneNumber, RequestBody content, RequestConditions requestConditions = null, RequestOptions context = null)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));
            Argument.AssertNotNullOrEmpty(telephoneNumber, nameof(telephoneNumber));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateSpan("Accounts.CreateOrReplaceNumber");
            scope.Start();
            try
            {
                using PipelineMessage message = CreateCreateOrReplaceNumberRequest(accountName, telephoneNumber, content, requestConditions, context);
                return Result.FromResponse(_pipeline.ProcessMessage(message, context));
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] Delete Number.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountName"> Name of the account. </param>
        /// <param name="telephoneNumber"> Telephone number in E.164 format. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> or <paramref name="telephoneNumber"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> or <paramref name="telephoneNumber"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Result> DeleteNumberAsync(string accountName, string telephoneNumber, RequestConditions requestConditions = null, RequestOptions context = null)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));
            Argument.AssertNotNullOrEmpty(telephoneNumber, nameof(telephoneNumber));

            using var scope = ClientDiagnostics.CreateSpan("Accounts.DeleteNumber");
            scope.Start();
            try
            {
                using PipelineMessage message = CreateDeleteNumberRequest(accountName, telephoneNumber, requestConditions, context);
                return Result.FromResponse(await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false));
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] Delete Number.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountName"> Name of the account. </param>
        /// <param name="telephoneNumber"> Telephone number in E.164 format. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> or <paramref name="telephoneNumber"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> or <paramref name="telephoneNumber"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Result DeleteNumber(string accountName, string telephoneNumber, RequestConditions requestConditions = null, RequestOptions context = null)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));
            Argument.AssertNotNullOrEmpty(telephoneNumber, nameof(telephoneNumber));

            using var scope = ClientDiagnostics.CreateSpan("Accounts.DeleteNumber");
            scope.Start();
            try
            {
                using PipelineMessage message = CreateDeleteNumberRequest(accountName, telephoneNumber, requestConditions, context);
                return Result.FromResponse(_pipeline.ProcessMessage(message, context));
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get Teams Usages. </summary>
        /// <param name="accountName"> Name of the account. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Get a list of Teams capability plans on the specified account. </remarks>
        public virtual async Task<Result<TeamsCapabilityPlans>> GetTeamsCapabilityPlansAsync(string accountName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));

            RequestOptions context = FromCancellationToken(cancellationToken);
            Result result = await GetTeamsCapabilityPlansAsync(accountName, context).ConfigureAwait(false);
            return Result.FromValue(TeamsCapabilityPlans.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary> Get Teams Usages. </summary>
        /// <param name="accountName"> Name of the account. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Get a list of Teams capability plans on the specified account. </remarks>
        public virtual Result<TeamsCapabilityPlans> GetTeamsCapabilityPlans(string accountName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));

            RequestOptions context = FromCancellationToken(cancellationToken);
            Result result = GetTeamsCapabilityPlans(accountName, context);
            return Result.FromValue(TeamsCapabilityPlans.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Get Teams Usages.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetTeamsCapabilityPlansAsync(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountName"> Name of the account. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Result> GetTeamsCapabilityPlansAsync(string accountName, RequestOptions context)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));

            using var scope = ClientDiagnostics.CreateSpan("Accounts.GetTeamsCapabilityPlans");
            scope.Start();
            try
            {
                using PipelineMessage message = CreateGetTeamsCapabilityPlansRequest(accountName, context);
                return Result.FromResponse(await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false));
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get Teams Usages.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetTeamsCapabilityPlans(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountName"> Name of the account. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Result GetTeamsCapabilityPlans(string accountName, RequestOptions context)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));

            using var scope = ClientDiagnostics.CreateSpan("Accounts.GetTeamsCapabilityPlans");
            scope.Start();
            try
            {
                using PipelineMessage message = CreateGetTeamsCapabilityPlansRequest(accountName, context);
                return Result.FromResponse(_pipeline.ProcessMessage(message, context));
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get Teams Available Capabilities. </summary>
        /// <param name="accountName"> Name of the account. </param>
        /// <param name="numberIdentifiers"> A list identifiers for a Number resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> or <paramref name="numberIdentifiers"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Get a list of Teams Available Capabilities on the specified account. </remarks>
        public virtual async Task<Result<TeamsAvailableCapabilities>> GetTeamsAvailableCapabilitiesAsync(string accountName, NumberIdentifiers numberIdentifiers, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));
            Argument.AssertNotNull(numberIdentifiers, nameof(numberIdentifiers));

            RequestOptions context = FromCancellationToken(cancellationToken);
            using RequestBody content = numberIdentifiers.ToRequestBody();
            Result result = await GetTeamsAvailableCapabilitiesAsync(accountName, content, context).ConfigureAwait(false);
            return Result.FromValue(TeamsAvailableCapabilities.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary> Get Teams Available Capabilities. </summary>
        /// <param name="accountName"> Name of the account. </param>
        /// <param name="numberIdentifiers"> A list identifiers for a Number resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> or <paramref name="numberIdentifiers"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Get a list of Teams Available Capabilities on the specified account. </remarks>
        public virtual Result<TeamsAvailableCapabilities> GetTeamsAvailableCapabilities(string accountName, NumberIdentifiers numberIdentifiers, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));
            Argument.AssertNotNull(numberIdentifiers, nameof(numberIdentifiers));

            RequestOptions context = FromCancellationToken(cancellationToken);
            using RequestBody content = numberIdentifiers.ToRequestBody();
            Result result = GetTeamsAvailableCapabilities(accountName, content, context);
            return Result.FromValue(TeamsAvailableCapabilities.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Get Teams Available Capabilities.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetTeamsAvailableCapabilitiesAsync(string,NumberIdentifiers,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountName"> Name of the account. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Result> GetTeamsAvailableCapabilitiesAsync(string accountName, RequestBody content, RequestOptions context = null)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateSpan("Accounts.GetTeamsAvailableCapabilities");
            scope.Start();
            try
            {
                using PipelineMessage message = CreateGetTeamsAvailableCapabilitiesRequest(accountName, content, context);
                return Result.FromResponse(await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false));
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get Teams Available Capabilities.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetTeamsAvailableCapabilities(string,NumberIdentifiers,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountName"> Name of the account. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Result GetTeamsAvailableCapabilities(string accountName, RequestBody content, RequestOptions context = null)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateSpan("Accounts.GetTeamsAvailableCapabilities");
            scope.Start();
            try
            {
                using PipelineMessage message = CreateGetTeamsAvailableCapabilitiesRequest(accountName, content, context);
                return Result.FromResponse(_pipeline.ProcessMessage(message, context));
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get Teams Civic Address. </summary>
        /// <param name="accountName"> Name of the account. </param>
        /// <param name="civicAddressId"> The ID of the civic address. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> or <paramref name="civicAddressId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> or <paramref name="civicAddressId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Get details of a specific Teams Civic Address using its ID. </remarks>
        public virtual async Task<Result<TeamsCivicAddressResource>> GetTeamsCivicAddressAsync(string accountName, string civicAddressId, RequestConditions requestConditions = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));
            Argument.AssertNotNullOrEmpty(civicAddressId, nameof(civicAddressId));

            RequestOptions context = FromCancellationToken(cancellationToken);
            Result result = await GetTeamsCivicAddressAsync(accountName, civicAddressId, requestConditions, context).ConfigureAwait(false);
            return Result.FromValue(TeamsCivicAddressResource.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary> Get Teams Civic Address. </summary>
        /// <param name="accountName"> Name of the account. </param>
        /// <param name="civicAddressId"> The ID of the civic address. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> or <paramref name="civicAddressId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> or <paramref name="civicAddressId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Get details of a specific Teams Civic Address using its ID. </remarks>
        public virtual Result<TeamsCivicAddressResource> GetTeamsCivicAddress(string accountName, string civicAddressId, RequestConditions requestConditions = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));
            Argument.AssertNotNullOrEmpty(civicAddressId, nameof(civicAddressId));

            RequestOptions context = FromCancellationToken(cancellationToken);
            Result result = GetTeamsCivicAddress(accountName, civicAddressId, requestConditions, context);
            return Result.FromValue(TeamsCivicAddressResource.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Get Teams Civic Address.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetTeamsCivicAddressAsync(string,string,RequestConditions,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountName"> Name of the account. </param>
        /// <param name="civicAddressId"> The ID of the civic address. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> or <paramref name="civicAddressId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> or <paramref name="civicAddressId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Result> GetTeamsCivicAddressAsync(string accountName, string civicAddressId, RequestConditions requestConditions, RequestOptions context)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));
            Argument.AssertNotNullOrEmpty(civicAddressId, nameof(civicAddressId));

            using var scope = ClientDiagnostics.CreateSpan("Accounts.GetTeamsCivicAddress");
            scope.Start();
            try
            {
                using PipelineMessage message = CreateGetTeamsCivicAddressRequest(accountName, civicAddressId, requestConditions, context);
                return Result.FromResponse(await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false));
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get Teams Civic Address.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetTeamsCivicAddress(string,string,RequestConditions,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountName"> Name of the account. </param>
        /// <param name="civicAddressId"> The ID of the civic address. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> or <paramref name="civicAddressId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> or <paramref name="civicAddressId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Result GetTeamsCivicAddress(string accountName, string civicAddressId, RequestConditions requestConditions, RequestOptions context)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));
            Argument.AssertNotNullOrEmpty(civicAddressId, nameof(civicAddressId));

            using var scope = ClientDiagnostics.CreateSpan("Accounts.GetTeamsCivicAddress");
            scope.Start();
            try
            {
                using PipelineMessage message = CreateGetTeamsCivicAddressRequest(accountName, civicAddressId, requestConditions, context);
                return Result.FromResponse(_pipeline.ProcessMessage(message, context));
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get list of Accounts. </summary>
        /// <param name="maxCount"> The number of result items to return. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="filter"> Filter the result list using the given expression. </param>
        /// <param name="countRecords"> Whether to return a count of the total number of records available for this request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Get list of Accounts with details. An Account represents an Enterprise or collection of users. </remarks>
        public virtual AsyncPageable<AccountResource> GetAccountResourcesAsync(int? maxCount = null, int? skip = null, int? maxpagesize = null, string filter = null, bool? countRecords = null, CancellationToken cancellationToken = default)
        {
            RequestOptions context = cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null;
            PipelineMessage FirstPageRequest(int? pageSizeHint) => CreateGetAccountResourcesRequest(maxCount, skip, maxpagesize, filter, countRecords, context);
            PipelineMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetAccountResourcesNextPageRequest(nextLink, maxCount, skip, maxpagesize, filter, countRecords, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => AccountResource.DeserializeAccountResource(e), ClientDiagnostics, _pipeline, "Accounts.GetAccountResources", "value", "nextLink", context);
        }

        /// <summary> Get list of Accounts. </summary>
        /// <param name="maxCount"> The number of result items to return. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="filter"> Filter the result list using the given expression. </param>
        /// <param name="countRecords"> Whether to return a count of the total number of records available for this request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Get list of Accounts with details. An Account represents an Enterprise or collection of users. </remarks>
        public virtual Pageable<AccountResource> GetAccountResources(int? maxCount = null, int? skip = null, int? maxpagesize = null, string filter = null, bool? countRecords = null, CancellationToken cancellationToken = default)
        {
            RequestOptions context = cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null;
            PipelineMessage FirstPageRequest(int? pageSizeHint) => CreateGetAccountResourcesRequest(maxCount, skip, maxpagesize, filter, countRecords, context);
            PipelineMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetAccountResourcesNextPageRequest(nextLink, maxCount, skip, maxpagesize, filter, countRecords, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => AccountResource.DeserializeAccountResource(e), ClientDiagnostics, _pipeline, "Accounts.GetAccountResources", "value", "nextLink", context);
        }

        /// <summary>
        /// [Protocol Method] Get list of Accounts
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetAccountResourcesAsync(int?,int?,int?,string,bool?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="maxCount"> The number of result items to return. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="filter"> Filter the result list using the given expression. </param>
        /// <param name="countRecords"> Whether to return a count of the total number of records available for this request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        public virtual AsyncPageable<BinaryData> GetAccountResourcesAsync(int? maxCount, int? skip, int? maxpagesize, string filter, bool? countRecords, RequestOptions context)
        {
            PipelineMessage FirstPageRequest(int? pageSizeHint) => CreateGetAccountResourcesRequest(maxCount, skip, maxpagesize, filter, countRecords, context);
            PipelineMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetAccountResourcesNextPageRequest(nextLink, maxCount, skip, maxpagesize, filter, countRecords, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "Accounts.GetAccountResources", "value", "nextLink", context);
        }

        /// <summary>
        /// [Protocol Method] Get list of Accounts
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetAccountResources(int?,int?,int?,string,bool?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="maxCount"> The number of result items to return. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="filter"> Filter the result list using the given expression. </param>
        /// <param name="countRecords"> Whether to return a count of the total number of records available for this request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        public virtual Pageable<BinaryData> GetAccountResources(int? maxCount, int? skip, int? maxpagesize, string filter, bool? countRecords, RequestOptions context)
        {
            PipelineMessage FirstPageRequest(int? pageSizeHint) => CreateGetAccountResourcesRequest(maxCount, skip, maxpagesize, filter, countRecords, context);
            PipelineMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetAccountResourcesNextPageRequest(nextLink, maxCount, skip, maxpagesize, filter, countRecords, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "Accounts.GetAccountResources", "value", "nextLink", context);
        }

        /// <summary> Get Numbers. </summary>
        /// <param name="accountName"> Name of the account. </param>
        /// <param name="maxCount"> The number of result items to return. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="filter"> Filter the result list using the given expression. </param>
        /// <param name="countRecords"> Whether to return a count of the total number of records available for this request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Get a list of Numbers on the specified account. </remarks>
        public virtual AsyncPageable<NumberResource> GetNumbersAsync(string accountName, int? maxCount = null, int? skip = null, int? maxpagesize = null, string filter = null, bool? countRecords = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));

            RequestOptions context = cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null;
            PipelineMessage FirstPageRequest(int? pageSizeHint) => CreateGetNumbersRequest(accountName, maxCount, skip, maxpagesize, filter, countRecords, context);
            PipelineMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetNumbersNextPageRequest(nextLink, accountName, maxCount, skip, maxpagesize, filter, countRecords, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => NumberResource.DeserializeNumberResource(e), ClientDiagnostics, _pipeline, "Accounts.GetNumbers", "value", "nextLink", context);
        }

        /// <summary> Get Numbers. </summary>
        /// <param name="accountName"> Name of the account. </param>
        /// <param name="maxCount"> The number of result items to return. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="filter"> Filter the result list using the given expression. </param>
        /// <param name="countRecords"> Whether to return a count of the total number of records available for this request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Get a list of Numbers on the specified account. </remarks>
        public virtual Pageable<NumberResource> GetNumbers(string accountName, int? maxCount = null, int? skip = null, int? maxpagesize = null, string filter = null, bool? countRecords = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));

            RequestOptions context = cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null;
            PipelineMessage FirstPageRequest(int? pageSizeHint) => CreateGetNumbersRequest(accountName, maxCount, skip, maxpagesize, filter, countRecords, context);
            PipelineMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetNumbersNextPageRequest(nextLink, accountName, maxCount, skip, maxpagesize, filter, countRecords, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => NumberResource.DeserializeNumberResource(e), ClientDiagnostics, _pipeline, "Accounts.GetNumbers", "value", "nextLink", context);
        }

        /// <summary>
        /// [Protocol Method] Get Numbers.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetNumbersAsync(string,int?,int?,int?,string,bool?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountName"> Name of the account. </param>
        /// <param name="maxCount"> The number of result items to return. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="filter"> Filter the result list using the given expression. </param>
        /// <param name="countRecords"> Whether to return a count of the total number of records available for this request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        public virtual AsyncPageable<BinaryData> GetNumbersAsync(string accountName, int? maxCount, int? skip, int? maxpagesize, string filter, bool? countRecords, RequestOptions context)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));

            PipelineMessage FirstPageRequest(int? pageSizeHint) => CreateGetNumbersRequest(accountName, maxCount, skip, maxpagesize, filter, countRecords, context);
            PipelineMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetNumbersNextPageRequest(nextLink, accountName, maxCount, skip, maxpagesize, filter, countRecords, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "Accounts.GetNumbers", "value", "nextLink", context);
        }

        /// <summary>
        /// [Protocol Method] Get Numbers.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetNumbers(string,int?,int?,int?,string,bool?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountName"> Name of the account. </param>
        /// <param name="maxCount"> The number of result items to return. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="filter"> Filter the result list using the given expression. </param>
        /// <param name="countRecords"> Whether to return a count of the total number of records available for this request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        public virtual Pageable<BinaryData> GetNumbers(string accountName, int? maxCount, int? skip, int? maxpagesize, string filter, bool? countRecords, RequestOptions context)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));

            PipelineMessage FirstPageRequest(int? pageSizeHint) => CreateGetNumbersRequest(accountName, maxCount, skip, maxpagesize, filter, countRecords, context);
            PipelineMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetNumbersNextPageRequest(nextLink, accountName, maxCount, skip, maxpagesize, filter, countRecords, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "Accounts.GetNumbers", "value", "nextLink", context);
        }

        /// <summary> Get Teams Civic Addresses. </summary>
        /// <param name="accountName"> Name of the account. </param>
        /// <param name="maxCount"> The number of result items to return. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="filter"> Filter the result list using the given expression. </param>
        /// <param name="countRecords"> Whether to return a count of the total number of records available for this request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Get a list of Teams Civic Addresses on the specified account. </remarks>
        public virtual AsyncPageable<TeamsCivicAddressResource> GetTeamsCivicAddressesAsync(string accountName, int? maxCount = null, int? skip = null, int? maxpagesize = null, string filter = null, bool? countRecords = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));

            RequestOptions context = cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null;
            PipelineMessage FirstPageRequest(int? pageSizeHint) => CreateGetTeamsCivicAddressesRequest(accountName, maxCount, skip, maxpagesize, filter, countRecords, context);
            PipelineMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetTeamsCivicAddressesNextPageRequest(nextLink, accountName, maxCount, skip, maxpagesize, filter, countRecords, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => TeamsCivicAddressResource.DeserializeTeamsCivicAddressResource(e), ClientDiagnostics, _pipeline, "Accounts.GetTeamsCivicAddresses", "value", "nextLink", context);
        }

        /// <summary> Get Teams Civic Addresses. </summary>
        /// <param name="accountName"> Name of the account. </param>
        /// <param name="maxCount"> The number of result items to return. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="filter"> Filter the result list using the given expression. </param>
        /// <param name="countRecords"> Whether to return a count of the total number of records available for this request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Get a list of Teams Civic Addresses on the specified account. </remarks>
        public virtual Pageable<TeamsCivicAddressResource> GetTeamsCivicAddresses(string accountName, int? maxCount = null, int? skip = null, int? maxpagesize = null, string filter = null, bool? countRecords = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));

            RequestOptions context = cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null;
            PipelineMessage FirstPageRequest(int? pageSizeHint) => CreateGetTeamsCivicAddressesRequest(accountName, maxCount, skip, maxpagesize, filter, countRecords, context);
            PipelineMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetTeamsCivicAddressesNextPageRequest(nextLink, accountName, maxCount, skip, maxpagesize, filter, countRecords, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => TeamsCivicAddressResource.DeserializeTeamsCivicAddressResource(e), ClientDiagnostics, _pipeline, "Accounts.GetTeamsCivicAddresses", "value", "nextLink", context);
        }

        /// <summary>
        /// [Protocol Method] Get Teams Civic Addresses.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetTeamsCivicAddressesAsync(string,int?,int?,int?,string,bool?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountName"> Name of the account. </param>
        /// <param name="maxCount"> The number of result items to return. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="filter"> Filter the result list using the given expression. </param>
        /// <param name="countRecords"> Whether to return a count of the total number of records available for this request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        public virtual AsyncPageable<BinaryData> GetTeamsCivicAddressesAsync(string accountName, int? maxCount, int? skip, int? maxpagesize, string filter, bool? countRecords, RequestOptions context)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));

            PipelineMessage FirstPageRequest(int? pageSizeHint) => CreateGetTeamsCivicAddressesRequest(accountName, maxCount, skip, maxpagesize, filter, countRecords, context);
            PipelineMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetTeamsCivicAddressesNextPageRequest(nextLink, accountName, maxCount, skip, maxpagesize, filter, countRecords, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "Accounts.GetTeamsCivicAddresses", "value", "nextLink", context);
        }

        /// <summary>
        /// [Protocol Method] Get Teams Civic Addresses.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetTeamsCivicAddresses(string,int?,int?,int?,string,bool?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountName"> Name of the account. </param>
        /// <param name="maxCount"> The number of result items to return. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="filter"> Filter the result list using the given expression. </param>
        /// <param name="countRecords"> Whether to return a count of the total number of records available for this request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        public virtual Pageable<BinaryData> GetTeamsCivicAddresses(string accountName, int? maxCount, int? skip, int? maxpagesize, string filter, bool? countRecords, RequestOptions context)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));

            PipelineMessage FirstPageRequest(int? pageSizeHint) => CreateGetTeamsCivicAddressesRequest(accountName, maxCount, skip, maxpagesize, filter, countRecords, context);
            PipelineMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetTeamsCivicAddressesNextPageRequest(nextLink, accountName, maxCount, skip, maxpagesize, filter, countRecords, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "Accounts.GetTeamsCivicAddresses", "value", "nextLink", context);
        }

        internal PipelineMessage CreateGetAccountResourcesRequest(int? maxCount, int? skip, int? maxpagesize, string filter, bool? countRecords, RequestOptions context)
        {
            var message = _pipeline.CreateMessage(context, ResponseErrorClassifier200);
            var request = message.Request;
            request.SetMethod("GET");
            var uri = new RequestUri();
            uri.AppendPath("/accounts", false);
            if (maxCount != null)
            {
                uri.AppendQuery("top", maxCount.Value, true);
            }
            if (skip != null)
            {
                uri.AppendQuery("skip", skip.Value, true);
            }
            if (maxpagesize != null)
            {
                uri.AppendQuery("maxpagesize", maxpagesize.Value, true);
            }
            if (filter != null)
            {
                uri.AppendQuery("filter", filter, true);
            }
            if (countRecords != null)
            {
                uri.AppendQuery("countRecords", countRecords.Value, true);
            }
            request.Uri = uri.ToUri();
            request.SetHeaderValue("Accept", "application/json");
            return message;
        }

        internal PipelineMessage CreateGetAccountResourceRequest(string accountName, RequestConditions requestConditions, RequestOptions context)
        {
            var message = _pipeline.CreateMessage(context, ResponseErrorClassifier200);
            var request = message.Request;
            request.SetMethod("GET");
            var uri = new RequestUri();
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountName, true);
            request.Uri = uri.ToUri();
            request.SetHeaderValue("Accept", "application/json");
            if (requestConditions != null)
            {
                request.SetHeaderValue("requestConditions", requestConditions.ToString("R"));
            }
            return message;
        }

        internal PipelineMessage CreateCreateOrReplaceRequest(string accountName, RequestBody content, RequestConditions requestConditions, RequestOptions context)
        {
            var message = _pipeline.CreateMessage(context, ResponseErrorClassifier200201);
            var request = message.Request;
            request.SetMethod("PUT");
            var uri = new RequestUri();
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountName, true);
            request.Uri = uri.ToUri();
            request.SetHeaderValue("Accept", "application/json");
            request.SetHeaderValue("Repeatability-Request-ID", Guid.NewGuid());
            request.SetHeaderValue("Repeatability-First-Sent", DateTimeOffset.Now.ToString("R"));
            if (requestConditions != null)
            {
                request.SetHeaderValue("requestConditions", requestConditions.ToString("R"));
            }
            request.SetHeaderValue("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal PipelineMessage CreateDeleteRequest(string accountName, bool? deleteNumbers, RequestConditions requestConditions, RequestOptions context)
        {
            var message = _pipeline.CreateMessage(context, ResponseErrorClassifier204);
            var request = message.Request;
            request.SetMethod("DELETE");
            var uri = new RequestUri();
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountName, true);
            if (deleteNumbers != null)
            {
                uri.AppendQuery("deleteNumbers", deleteNumbers.Value, true);
            }
            request.Uri = uri.ToUri();
            request.SetHeaderValue("Accept", "application/json");
            request.SetHeaderValue("Repeatability-Request-ID", Guid.NewGuid());
            request.SetHeaderValue("Repeatability-First-Sent", DateTimeOffset.Now.ToString("R"));
            if (requestConditions != null)
            {
                request.SetHeaderValue("requestConditions", requestConditions.ToString("R"));
            }
            return message;
        }

        internal PipelineMessage CreateCreateOrUpdateNumbersRequest(string accountName, RequestBody content, RequestOptions context)
        {
            var message = _pipeline.CreateMessage(context, ResponseErrorClassifier200);
            var request = message.Request;
            request.SetMethod("POST");
            var uri = new RequestUri();
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountName, true);
            uri.AppendPath(":createOrUpdateNumbers", false);
            request.Uri = uri.ToUri();
            request.SetHeaderValue("Accept", "application/json");
            request.SetHeaderValue("Repeatability-Request-ID", Guid.NewGuid());
            request.SetHeaderValue("Repeatability-First-Sent", DateTimeOffset.Now.ToString("R"));
            request.SetHeaderValue("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal PipelineMessage CreateDeleteNumbersRequest(string accountName, RequestBody content, RequestOptions context)
        {
            var message = _pipeline.CreateMessage(context, ResponseErrorClassifier204);
            var request = message.Request;
            request.SetMethod("POST");
            var uri = new RequestUri();
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountName, true);
            uri.AppendPath(":deleteNumbers", false);
            request.Uri = uri.ToUri();
            request.SetHeaderValue("Accept", "application/json");
            request.SetHeaderValue("Repeatability-Request-ID", Guid.NewGuid());
            request.SetHeaderValue("Repeatability-First-Sent", DateTimeOffset.Now.ToString("R"));
            request.SetHeaderValue("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal PipelineMessage CreateGetNumbersRequest(string accountName, int? maxCount, int? skip, int? maxpagesize, string filter, bool? countRecords, RequestOptions context)
        {
            var message = _pipeline.CreateMessage(context, ResponseErrorClassifier200);
            var request = message.Request;
            request.SetMethod("GET");
            var uri = new RequestUri();
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountName, true);
            uri.AppendPath("/numbers", false);
            if (maxCount != null)
            {
                uri.AppendQuery("top", maxCount.Value, true);
            }
            if (skip != null)
            {
                uri.AppendQuery("skip", skip.Value, true);
            }
            if (maxpagesize != null)
            {
                uri.AppendQuery("maxpagesize", maxpagesize.Value, true);
            }
            if (filter != null)
            {
                uri.AppendQuery("filter", filter, true);
            }
            if (countRecords != null)
            {
                uri.AppendQuery("countRecords", countRecords.Value, true);
            }
            request.Uri = uri.ToUri();
            request.SetHeaderValue("Accept", "application/json");
            return message;
        }

        internal PipelineMessage CreateGetNumberRequest(string accountName, string telephoneNumber, RequestConditions requestConditions, RequestOptions context)
        {
            var message = _pipeline.CreateMessage(context, ResponseErrorClassifier200);
            var request = message.Request;
            request.SetMethod("GET");
            var uri = new RequestUri();
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountName, true);
            uri.AppendPath("/numbers/", false);
            uri.AppendPath(telephoneNumber, true);
            request.Uri = uri.ToUri();
            request.SetHeaderValue("Accept", "application/json");
            if (requestConditions != null)
            {
                request.SetHeaderValue("requestConditions", requestConditions.ToString("R"));
            }
            return message;
        }

        internal PipelineMessage CreateCreateOrReplaceNumberRequest(string accountName, string telephoneNumber, RequestBody content, RequestConditions requestConditions, RequestOptions context)
        {
            var message = _pipeline.CreateMessage(context, ResponseErrorClassifier200201);
            var request = message.Request;
            request.SetMethod("PUT");
            var uri = new RequestUri();
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountName, true);
            uri.AppendPath("/numbers/", false);
            uri.AppendPath(telephoneNumber, true);
            request.Uri = uri.ToUri();
            request.SetHeaderValue("Accept", "application/json");
            request.SetHeaderValue("Repeatability-Request-ID", Guid.NewGuid());
            request.SetHeaderValue("Repeatability-First-Sent", DateTimeOffset.Now.ToString("R"));
            if (requestConditions != null)
            {
                request.SetHeaderValue("requestConditions", requestConditions.ToString("R"));
            }
            request.SetHeaderValue("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal PipelineMessage CreateDeleteNumberRequest(string accountName, string telephoneNumber, RequestConditions requestConditions, RequestOptions context)
        {
            var message = _pipeline.CreateMessage(context, ResponseErrorClassifier204);
            var request = message.Request;
            request.SetMethod("DELETE");
            var uri = new RequestUri();
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountName, true);
            uri.AppendPath("/numbers/", false);
            uri.AppendPath(telephoneNumber, true);
            request.Uri = uri.ToUri();
            request.SetHeaderValue("Accept", "application/json");
            request.SetHeaderValue("Repeatability-Request-ID", Guid.NewGuid());
            request.SetHeaderValue("Repeatability-First-Sent", DateTimeOffset.Now.ToString("R"));
            if (requestConditions != null)
            {
                request.SetHeaderValue("requestConditions", requestConditions.ToString("R"));
            }
            return message;
        }

        internal PipelineMessage CreateGetTeamsCapabilityPlansRequest(string accountName, RequestOptions context)
        {
            var message = _pipeline.CreateMessage(context, ResponseErrorClassifier200);
            var request = message.Request;
            request.SetMethod("POST");
            var uri = new RequestUri();
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountName, true);
            uri.AppendPath(":getTeamsCapabilityPlans", false);
            request.Uri = uri.ToUri();
            request.SetHeaderValue("Accept", "application/json");
            request.SetHeaderValue("Repeatability-Request-ID", Guid.NewGuid());
            request.SetHeaderValue("Repeatability-First-Sent", DateTimeOffset.Now.ToString("R"));
            return message;
        }

        internal PipelineMessage CreateGetTeamsAvailableCapabilitiesRequest(string accountName, RequestBody content, RequestOptions context)
        {
            var message = _pipeline.CreateMessage(context, ResponseErrorClassifier200);
            var request = message.Request;
            request.SetMethod("POST");
            var uri = new RequestUri();
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountName, true);
            uri.AppendPath(":getTeamsAvailableCapabilities", false);
            request.Uri = uri.ToUri();
            request.SetHeaderValue("Accept", "application/json");
            request.SetHeaderValue("Repeatability-Request-ID", Guid.NewGuid());
            request.SetHeaderValue("Repeatability-First-Sent", DateTimeOffset.Now.ToString("R"));
            request.SetHeaderValue("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal PipelineMessage CreateGetTeamsCivicAddressesRequest(string accountName, int? maxCount, int? skip, int? maxpagesize, string filter, bool? countRecords, RequestOptions context)
        {
            var message = _pipeline.CreateMessage(context, ResponseErrorClassifier200);
            var request = message.Request;
            request.SetMethod("GET");
            var uri = new RequestUri();
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountName, true);
            uri.AppendPath("/teamsCivicAddresses", false);
            if (maxCount != null)
            {
                uri.AppendQuery("top", maxCount.Value, true);
            }
            if (skip != null)
            {
                uri.AppendQuery("skip", skip.Value, true);
            }
            if (maxpagesize != null)
            {
                uri.AppendQuery("maxpagesize", maxpagesize.Value, true);
            }
            if (filter != null)
            {
                uri.AppendQuery("filter", filter, true);
            }
            if (countRecords != null)
            {
                uri.AppendQuery("countRecords", countRecords.Value, true);
            }
            request.Uri = uri.ToUri();
            request.SetHeaderValue("Accept", "application/json");
            return message;
        }

        internal PipelineMessage CreateGetTeamsCivicAddressRequest(string accountName, string civicAddressId, RequestConditions requestConditions, RequestOptions context)
        {
            var message = _pipeline.CreateMessage(context, ResponseErrorClassifier200);
            var request = message.Request;
            request.SetMethod("GET");
            var uri = new RequestUri();
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountName, true);
            uri.AppendPath("/teamsCivicAddresses/", false);
            uri.AppendPath(civicAddressId, true);
            request.Uri = uri.ToUri();
            request.SetHeaderValue("Accept", "application/json");
            if (requestConditions != null)
            {
                request.SetHeaderValue("requestConditions", requestConditions.ToString("R"));
            }
            return message;
        }

        internal PipelineMessage CreateGetAccountResourcesNextPageRequest(string nextLink, int? maxCount, int? skip, int? maxpagesize, string filter, bool? countRecords, RequestOptions context)
        {
            var message = _pipeline.CreateMessage(context, ResponseErrorClassifier200);
            var request = message.Request;
            request.SetMethod("GET");
            var uri = new RequestUri();
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri.ToUri();
            request.SetHeaderValue("Accept", "application/json");
            return message;
        }

        internal PipelineMessage CreateGetNumbersNextPageRequest(string nextLink, string accountName, int? maxCount, int? skip, int? maxpagesize, string filter, bool? countRecords, RequestOptions context)
        {
            var message = _pipeline.CreateMessage(context, ResponseErrorClassifier200);
            var request = message.Request;
            request.SetMethod("GET");
            var uri = new RequestUri();
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri.ToUri();
            request.SetHeaderValue("Accept", "application/json");
            return message;
        }

        internal PipelineMessage CreateGetTeamsCivicAddressesNextPageRequest(string nextLink, string accountName, int? maxCount, int? skip, int? maxpagesize, string filter, bool? countRecords, RequestOptions context)
        {
            var message = _pipeline.CreateMessage(context, ResponseErrorClassifier200);
            var request = message.Request;
            request.SetMethod("GET");
            var uri = new RequestUri();
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri.ToUri();
            request.SetHeaderValue("Accept", "application/json");
            return message;
        }

        private static RequestOptions DefaultRequestContext = new RequestOptions();
        internal static RequestOptions FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestOptions() { CancellationToken = cancellationToken };
        }

        private static ResponseErrorClassifier _responseErrorClassifier200;
        private static ResponseErrorClassifier ResponseErrorClassifier200 => _responseErrorClassifier200 ??= new StatusResponseClassifier(stackalloc ushort[] { 200 });
        private static ResponseErrorClassifier _responseErrorClassifier200201;
        private static ResponseErrorClassifier ResponseErrorClassifier200201 => _responseErrorClassifier200201 ??= new StatusResponseClassifier(stackalloc ushort[] { 200, 201 });
        private static ResponseErrorClassifier _responseErrorClassifier204;
        private static ResponseErrorClassifier ResponseErrorClassifier204 => _responseErrorClassifier204 ??= new StatusResponseClassifier(stackalloc ushort[] { 204 });
    }
}
