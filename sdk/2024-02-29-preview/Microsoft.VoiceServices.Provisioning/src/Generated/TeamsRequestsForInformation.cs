// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Microsoft.VoiceServices.Provisioning
{
    // Data plane generated sub-client.
    /// <summary> The TeamsRequestsForInformation sub-client. </summary>
    public partial class TeamsRequestsForInformation
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://func-voiceservice-rp-prod-eastuseuap.azurewebsites.net/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of TeamsRequestsForInformation for mocking. </summary>
        protected TeamsRequestsForInformation()
        {
        }

        /// <summary> Initializes a new instance of TeamsRequestsForInformation. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="tokenCredential"> The token credential to copy. </param>
        /// <param name="endpoint"> The <see cref="Uri"/> to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        internal TeamsRequestsForInformation(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, TokenCredential tokenCredential, Uri endpoint, string apiVersion)
        {
            ClientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
            _tokenCredential = tokenCredential;
            _endpoint = endpoint;
            _apiVersion = apiVersion;
        }

        /// <summary> Get Request for Information. </summary>
        /// <param name="tenantId"> The Teams tenant ID which generated this Request for Information. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="tenantId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Get details of a specific Request for Information using its ID. </remarks>
        /// <include file="Docs/TeamsRequestsForInformation.xml" path="doc/members/member[@name='GetRequestForInformationAsync(string,RequestConditions,CancellationToken)']/*" />
        public virtual async Task<Response<RequestForInformationResource>> GetRequestForInformationAsync(string tenantId, RequestConditions requestConditions = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(tenantId, nameof(tenantId));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetRequestForInformationAsync(tenantId, requestConditions, context).ConfigureAwait(false);
            return Response.FromValue(RequestForInformationResource.FromResponse(response), response);
        }

        /// <summary> Get Request for Information. </summary>
        /// <param name="tenantId"> The Teams tenant ID which generated this Request for Information. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="tenantId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Get details of a specific Request for Information using its ID. </remarks>
        /// <include file="Docs/TeamsRequestsForInformation.xml" path="doc/members/member[@name='GetRequestForInformation(string,RequestConditions,CancellationToken)']/*" />
        public virtual Response<RequestForInformationResource> GetRequestForInformation(string tenantId, RequestConditions requestConditions = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(tenantId, nameof(tenantId));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetRequestForInformation(tenantId, requestConditions, context);
            return Response.FromValue(RequestForInformationResource.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Get Request for Information.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetRequestForInformationAsync(string,RequestConditions,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="tenantId"> The Teams tenant ID which generated this Request for Information. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="tenantId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/TeamsRequestsForInformation.xml" path="doc/members/member[@name='GetRequestForInformationAsync(string,RequestConditions,RequestContext)']/*" />
        public virtual async Task<Response> GetRequestForInformationAsync(string tenantId, RequestConditions requestConditions, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(tenantId, nameof(tenantId));

            using var scope = ClientDiagnostics.CreateScope("TeamsRequestsForInformation.GetRequestForInformation");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetRequestForInformationRequest(tenantId, requestConditions, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get Request for Information.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetRequestForInformation(string,RequestConditions,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="tenantId"> The Teams tenant ID which generated this Request for Information. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="tenantId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/TeamsRequestsForInformation.xml" path="doc/members/member[@name='GetRequestForInformation(string,RequestConditions,RequestContext)']/*" />
        public virtual Response GetRequestForInformation(string tenantId, RequestConditions requestConditions, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(tenantId, nameof(tenantId));

            using var scope = ClientDiagnostics.CreateScope("TeamsRequestsForInformation.GetRequestForInformation");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetRequestForInformationRequest(tenantId, requestConditions, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Create or update Request for Information.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="tenantId"> The Teams tenant ID which generated this Request for Information. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="tenantId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/TeamsRequestsForInformation.xml" path="doc/members/member[@name='CreateOrUpdateRequestForInformationAsync(string,RequestContent,RequestConditions,RequestContext)']/*" />
        public virtual async Task<Response> CreateOrUpdateRequestForInformationAsync(string tenantId, RequestContent content, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(tenantId, nameof(tenantId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("TeamsRequestsForInformation.CreateOrUpdateRequestForInformation");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateRequestForInformationRequest(tenantId, content, requestConditions, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Create or update Request for Information.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="tenantId"> The Teams tenant ID which generated this Request for Information. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="tenantId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/TeamsRequestsForInformation.xml" path="doc/members/member[@name='CreateOrUpdateRequestForInformation(string,RequestContent,RequestConditions,RequestContext)']/*" />
        public virtual Response CreateOrUpdateRequestForInformation(string tenantId, RequestContent content, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(tenantId, nameof(tenantId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("TeamsRequestsForInformation.CreateOrUpdateRequestForInformation");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateRequestForInformationRequest(tenantId, content, requestConditions, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get list of Requests for Information. </summary>
        /// <param name="maxCount"> The number of result items to return. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="filter"> Filter the result list using the given expression. </param>
        /// <param name="countRecords"> Whether to return a count of the total number of records available for this request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Get list of Requests for Information with details. </remarks>
        /// <include file="Docs/TeamsRequestsForInformation.xml" path="doc/members/member[@name='GetRequestForInformationResourcesAsync(int?,int?,int?,string,bool?,CancellationToken)']/*" />
        public virtual AsyncPageable<RequestForInformationResource> GetRequestForInformationResourcesAsync(int? maxCount = null, int? skip = null, int? maxpagesize = null, string filter = null, bool? countRecords = null, CancellationToken cancellationToken = default)
        {
            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetRequestForInformationResourcesRequest(maxCount, skip, maxpagesize, filter, countRecords, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetRequestForInformationResourcesNextPageRequest(nextLink, maxCount, skip, maxpagesize, filter, countRecords, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => RequestForInformationResource.DeserializeRequestForInformationResource(e), ClientDiagnostics, _pipeline, "TeamsRequestsForInformation.GetRequestForInformationResources", "value", "nextLink", context);
        }

        /// <summary> Get list of Requests for Information. </summary>
        /// <param name="maxCount"> The number of result items to return. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="filter"> Filter the result list using the given expression. </param>
        /// <param name="countRecords"> Whether to return a count of the total number of records available for this request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Get list of Requests for Information with details. </remarks>
        /// <include file="Docs/TeamsRequestsForInformation.xml" path="doc/members/member[@name='GetRequestForInformationResources(int?,int?,int?,string,bool?,CancellationToken)']/*" />
        public virtual Pageable<RequestForInformationResource> GetRequestForInformationResources(int? maxCount = null, int? skip = null, int? maxpagesize = null, string filter = null, bool? countRecords = null, CancellationToken cancellationToken = default)
        {
            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetRequestForInformationResourcesRequest(maxCount, skip, maxpagesize, filter, countRecords, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetRequestForInformationResourcesNextPageRequest(nextLink, maxCount, skip, maxpagesize, filter, countRecords, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => RequestForInformationResource.DeserializeRequestForInformationResource(e), ClientDiagnostics, _pipeline, "TeamsRequestsForInformation.GetRequestForInformationResources", "value", "nextLink", context);
        }

        /// <summary>
        /// [Protocol Method] Get list of Requests for Information
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetRequestForInformationResourcesAsync(int?,int?,int?,string,bool?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="maxCount"> The number of result items to return. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="filter"> Filter the result list using the given expression. </param>
        /// <param name="countRecords"> Whether to return a count of the total number of records available for this request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/TeamsRequestsForInformation.xml" path="doc/members/member[@name='GetRequestForInformationResourcesAsync(int?,int?,int?,string,bool?,RequestContext)']/*" />
        public virtual AsyncPageable<BinaryData> GetRequestForInformationResourcesAsync(int? maxCount, int? skip, int? maxpagesize, string filter, bool? countRecords, RequestContext context)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetRequestForInformationResourcesRequest(maxCount, skip, maxpagesize, filter, countRecords, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetRequestForInformationResourcesNextPageRequest(nextLink, maxCount, skip, maxpagesize, filter, countRecords, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "TeamsRequestsForInformation.GetRequestForInformationResources", "value", "nextLink", context);
        }

        /// <summary>
        /// [Protocol Method] Get list of Requests for Information
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetRequestForInformationResources(int?,int?,int?,string,bool?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="maxCount"> The number of result items to return. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="filter"> Filter the result list using the given expression. </param>
        /// <param name="countRecords"> Whether to return a count of the total number of records available for this request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/TeamsRequestsForInformation.xml" path="doc/members/member[@name='GetRequestForInformationResources(int?,int?,int?,string,bool?,RequestContext)']/*" />
        public virtual Pageable<BinaryData> GetRequestForInformationResources(int? maxCount, int? skip, int? maxpagesize, string filter, bool? countRecords, RequestContext context)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetRequestForInformationResourcesRequest(maxCount, skip, maxpagesize, filter, countRecords, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetRequestForInformationResourcesNextPageRequest(nextLink, maxCount, skip, maxpagesize, filter, countRecords, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "TeamsRequestsForInformation.GetRequestForInformationResources", "value", "nextLink", context);
        }

        internal HttpMessage CreateGetRequestForInformationResourcesRequest(int? maxCount, int? skip, int? maxpagesize, string filter, bool? countRecords, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/teamsRequestsForInformation", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (maxCount != null)
            {
                uri.AppendQuery("top", maxCount.Value, true);
            }
            if (skip != null)
            {
                uri.AppendQuery("skip", skip.Value, true);
            }
            if (maxpagesize != null)
            {
                uri.AppendQuery("maxpagesize", maxpagesize.Value, true);
            }
            if (filter != null)
            {
                uri.AppendQuery("filter", filter, true);
            }
            if (countRecords != null)
            {
                uri.AppendQuery("countRecords", countRecords.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetRequestForInformationRequest(string tenantId, RequestConditions requestConditions, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/teamsRequestsForInformation/", false);
            uri.AppendPath(tenantId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (requestConditions != null)
            {
                request.Headers.Add(requestConditions, "R");
            }
            return message;
        }

        internal HttpMessage CreateCreateOrUpdateRequestForInformationRequest(string tenantId, RequestContent content, RequestConditions requestConditions, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200201);
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/teamsRequestsForInformation/", false);
            uri.AppendPath(tenantId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Repeatability-Request-ID", Guid.NewGuid());
            request.Headers.Add("Repeatability-First-Sent", DateTimeOffset.Now, "R");
            if (requestConditions != null)
            {
                request.Headers.Add(requestConditions, "R");
            }
            request.Headers.Add("Content-Type", "application/merge-patch+json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetRequestForInformationResourcesNextPageRequest(string nextLink, int? maxCount, int? skip, int? maxpagesize, string filter, bool? countRecords, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier200201;
        private static ResponseClassifier ResponseClassifier200201 => _responseClassifier200201 ??= new StatusCodeClassifier(stackalloc ushort[] { 200, 201 });
    }
}
