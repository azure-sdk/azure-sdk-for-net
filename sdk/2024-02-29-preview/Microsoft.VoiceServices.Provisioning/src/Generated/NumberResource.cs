// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure;

namespace Microsoft.VoiceServices.Provisioning
{
    /// <summary> The configuration for a telephone number provisioned in Azure Communications Gateway. </summary>
    public partial class NumberResource
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="NumberResource"/>. </summary>
        /// <param name="telephoneNumber"> Telephone number in E.164 format. </param>
        /// <param name="accountName"> Name of the account. Can only contain letters, numbers, underscores and dashes, and is case-sensitive. Can be up to 100 characters in length. </param>
        /// <param name="serviceDetails"> Configuration of the individual backend services for this number. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="telephoneNumber"/>, <paramref name="accountName"/> or <paramref name="serviceDetails"/> is null. </exception>
        public NumberResource(string telephoneNumber, string accountName, NumberServiceDetails serviceDetails)
        {
            Argument.AssertNotNull(telephoneNumber, nameof(telephoneNumber));
            Argument.AssertNotNull(accountName, nameof(accountName));
            Argument.AssertNotNull(serviceDetails, nameof(serviceDetails));

            ServiceProvisioningErrors = new ChangeTrackingList<ResponseError>();
            TelephoneNumber = telephoneNumber;
            AccountName = accountName;
            ServiceDetails = serviceDetails;
        }

        /// <summary> Initializes a new instance of <see cref="NumberResource"/>. </summary>
        /// <param name="serviceProvisioningStatus"> The status of the provisioning action associated with this resource. </param>
        /// <param name="serviceProvisioningErrors"> Any errors pertaining to the provisioning of this resource. </param>
        /// <param name="telephoneNumber"> Telephone number in E.164 format. </param>
        /// <param name="accountName"> Name of the account. Can only contain letters, numbers, underscores and dashes, and is case-sensitive. Can be up to 100 characters in length. </param>
        /// <param name="serviceDetails"> Configuration of the individual backend services for this number. </param>
        /// <param name="configuration"> Configuration for this number. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal NumberResource(ServiceProvisioningStatus? serviceProvisioningStatus, IReadOnlyList<ResponseError> serviceProvisioningErrors, string telephoneNumber, string accountName, NumberServiceDetails serviceDetails, NumberConfiguration configuration, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ServiceProvisioningStatus = serviceProvisioningStatus;
            ServiceProvisioningErrors = serviceProvisioningErrors;
            TelephoneNumber = telephoneNumber;
            AccountName = accountName;
            ServiceDetails = serviceDetails;
            Configuration = configuration;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="NumberResource"/> for deserialization. </summary>
        internal NumberResource()
        {
        }

        /// <summary> The status of the provisioning action associated with this resource. </summary>
        public ServiceProvisioningStatus? ServiceProvisioningStatus { get; }
        /// <summary> Any errors pertaining to the provisioning of this resource. </summary>
        public IReadOnlyList<ResponseError> ServiceProvisioningErrors { get; }
        /// <summary> Telephone number in E.164 format. </summary>
        public string TelephoneNumber { get; set; }
        /// <summary> Name of the account. Can only contain letters, numbers, underscores and dashes, and is case-sensitive. Can be up to 100 characters in length. </summary>
        public string AccountName { get; set; }
        /// <summary> Configuration of the individual backend services for this number. </summary>
        public NumberServiceDetails ServiceDetails { get; set; }
        /// <summary> Configuration for this number. </summary>
        public NumberConfiguration Configuration { get; set; }
    }
}
