<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetAccountResourceAsync(string,RequestConditions,CancellationToken)">
      <example>
This sample shows how to call GetAccountResourceAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

Response<AccountResource> response = await client.GetAccountResourceAsync("<accountName>");
]]></code>
This sample shows how to call GetAccountResourceAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

Response<AccountResource> response = await client.GetAccountResourceAsync("<accountName>", requestConditions: null);
]]></code></example>
    </member>
    <member name="GetAccountResource(string,RequestConditions,CancellationToken)">
      <example>
This sample shows how to call GetAccountResource.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

Response<AccountResource> response = client.GetAccountResource("<accountName>");
]]></code>
This sample shows how to call GetAccountResource with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

Response<AccountResource> response = client.GetAccountResource("<accountName>", requestConditions: null);
]]></code></example>
    </member>
    <member name="GetAccountResourceAsync(string,RequestConditions,RequestContext)">
      <example>
This sample shows how to call GetAccountResourceAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

Response response = await client.GetAccountResourceAsync("<accountName>", null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
This sample shows how to call GetAccountResourceAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

Response response = await client.GetAccountResourceAsync("<accountName>", null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("serviceProvisioningStatus").ToString());
Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("correlationId").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsTenantId").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("syncEnabled").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("numberCount").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("syncEnabled").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("numberCount").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("configuration").GetProperty("callScreening").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("configuration").GetProperty("subdomain").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("configuration").GetProperty("subdomainTokens").GetProperty("region1Token").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("configuration").GetProperty("subdomainTokens").GetProperty("region2Token").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("subdomainStatus").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("syncEnabled").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("numberCount").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("zoomPhoneCloudPeering").GetProperty("syncEnabled").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("zoomPhoneCloudPeering").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("zoomPhoneCloudPeering").GetProperty("numberCount").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("azureOperatorCallProtection").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("azureOperatorCallProtection").GetProperty("numberCount").ToString());
]]></code></example>
    </member>
    <member name="GetAccountResource(string,RequestConditions,RequestContext)">
      <example>
This sample shows how to call GetAccountResource and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

Response response = client.GetAccountResource("<accountName>", null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
This sample shows how to call GetAccountResource with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

Response response = client.GetAccountResource("<accountName>", null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("serviceProvisioningStatus").ToString());
Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("correlationId").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsTenantId").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("syncEnabled").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("numberCount").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("syncEnabled").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("numberCount").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("configuration").GetProperty("callScreening").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("configuration").GetProperty("subdomain").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("configuration").GetProperty("subdomainTokens").GetProperty("region1Token").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("configuration").GetProperty("subdomainTokens").GetProperty("region2Token").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("subdomainStatus").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("syncEnabled").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("numberCount").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("zoomPhoneCloudPeering").GetProperty("syncEnabled").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("zoomPhoneCloudPeering").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("zoomPhoneCloudPeering").GetProperty("numberCount").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("azureOperatorCallProtection").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("azureOperatorCallProtection").GetProperty("numberCount").ToString());
]]></code></example>
    </member>
    <member name="CreateOrReplaceAsync(string,AccountResource,RequestConditions,CancellationToken)">
      <example>
This sample shows how to call CreateOrReplaceAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

AccountResource resource = new AccountResource("<name>");
Response<AccountResource> response = await client.CreateOrReplaceAsync("<accountName>", resource);
]]></code>
This sample shows how to call CreateOrReplaceAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

AccountResource resource = new AccountResource("<name>")
{
    CorrelationId = "<correlationId>",
    ServiceDetails = new AccountServiceDetails
    {
        TeamsTenantId = "<teamsTenantId>",
        TeamsOperatorConnect = new TeamsOperatorConnectAccountDetails(true, true),
        TeamsDirectRouting = new TeamsDirectRoutingAccountDetails(true, true)
        {
            Configuration = new TeamsDirectRoutingAccountConfig(true, "<subdomain>", new TeamsDirectRoutingSubdomainTokens("<region1Token>", "<region2Token>")),
        },
        TeamsPhoneMobile = new TeamsPhoneMobileAccountDetails(true, true),
        ZoomPhoneCloudPeering = new ZoomPhoneCloudPeeringAccountDetails(true, true),
        AzureOperatorCallProtection = new AzureOperatorCallProtectionAccountDetails(true),
    },
};
Response<AccountResource> response = await client.CreateOrReplaceAsync("<accountName>", resource, requestConditions: null);
]]></code></example>
    </member>
    <member name="CreateOrReplace(string,AccountResource,RequestConditions,CancellationToken)">
      <example>
This sample shows how to call CreateOrReplace.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

AccountResource resource = new AccountResource("<name>");
Response<AccountResource> response = client.CreateOrReplace("<accountName>", resource);
]]></code>
This sample shows how to call CreateOrReplace with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

AccountResource resource = new AccountResource("<name>")
{
    CorrelationId = "<correlationId>",
    ServiceDetails = new AccountServiceDetails
    {
        TeamsTenantId = "<teamsTenantId>",
        TeamsOperatorConnect = new TeamsOperatorConnectAccountDetails(true, true),
        TeamsDirectRouting = new TeamsDirectRoutingAccountDetails(true, true)
        {
            Configuration = new TeamsDirectRoutingAccountConfig(true, "<subdomain>", new TeamsDirectRoutingSubdomainTokens("<region1Token>", "<region2Token>")),
        },
        TeamsPhoneMobile = new TeamsPhoneMobileAccountDetails(true, true),
        ZoomPhoneCloudPeering = new ZoomPhoneCloudPeeringAccountDetails(true, true),
        AzureOperatorCallProtection = new AzureOperatorCallProtectionAccountDetails(true),
    },
};
Response<AccountResource> response = client.CreateOrReplace("<accountName>", resource, requestConditions: null);
]]></code></example>
    </member>
    <member name="CreateOrReplaceAsync(string,RequestContent,RequestConditions,RequestContext)">
      <example>
This sample shows how to call CreateOrReplaceAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
});
Response response = await client.CreateOrReplaceAsync("<accountName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
This sample shows how to call CreateOrReplaceAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    correlationId = "<correlationId>",
    serviceDetails = new
    {
        teamsTenantId = "<teamsTenantId>",
        teamsOperatorConnect = new
        {
            syncEnabled = true,
            enabled = true,
        },
        teamsDirectRouting = new
        {
            syncEnabled = true,
            enabled = true,
            configuration = new
            {
                callScreening = true,
                subdomain = "<subdomain>",
                subdomainTokens = new
                {
                    region1Token = "<region1Token>",
                    region2Token = "<region2Token>",
                },
            },
        },
        teamsPhoneMobile = new
        {
            syncEnabled = true,
            enabled = true,
        },
        zoomPhoneCloudPeering = new
        {
            syncEnabled = true,
            enabled = true,
        },
        azureOperatorCallProtection = new
        {
            enabled = true,
        },
    },
});
Response response = await client.CreateOrReplaceAsync("<accountName>", content, requestConditions: null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("serviceProvisioningStatus").ToString());
Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("correlationId").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsTenantId").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("syncEnabled").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("numberCount").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("syncEnabled").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("numberCount").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("configuration").GetProperty("callScreening").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("configuration").GetProperty("subdomain").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("configuration").GetProperty("subdomainTokens").GetProperty("region1Token").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("configuration").GetProperty("subdomainTokens").GetProperty("region2Token").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("subdomainStatus").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("syncEnabled").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("numberCount").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("zoomPhoneCloudPeering").GetProperty("syncEnabled").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("zoomPhoneCloudPeering").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("zoomPhoneCloudPeering").GetProperty("numberCount").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("azureOperatorCallProtection").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("azureOperatorCallProtection").GetProperty("numberCount").ToString());
]]></code></example>
    </member>
    <member name="CreateOrReplace(string,RequestContent,RequestConditions,RequestContext)">
      <example>
This sample shows how to call CreateOrReplace and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
});
Response response = client.CreateOrReplace("<accountName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
This sample shows how to call CreateOrReplace with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    correlationId = "<correlationId>",
    serviceDetails = new
    {
        teamsTenantId = "<teamsTenantId>",
        teamsOperatorConnect = new
        {
            syncEnabled = true,
            enabled = true,
        },
        teamsDirectRouting = new
        {
            syncEnabled = true,
            enabled = true,
            configuration = new
            {
                callScreening = true,
                subdomain = "<subdomain>",
                subdomainTokens = new
                {
                    region1Token = "<region1Token>",
                    region2Token = "<region2Token>",
                },
            },
        },
        teamsPhoneMobile = new
        {
            syncEnabled = true,
            enabled = true,
        },
        zoomPhoneCloudPeering = new
        {
            syncEnabled = true,
            enabled = true,
        },
        azureOperatorCallProtection = new
        {
            enabled = true,
        },
    },
});
Response response = client.CreateOrReplace("<accountName>", content, requestConditions: null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("serviceProvisioningStatus").ToString());
Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("correlationId").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsTenantId").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("syncEnabled").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("numberCount").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("syncEnabled").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("numberCount").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("configuration").GetProperty("callScreening").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("configuration").GetProperty("subdomain").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("configuration").GetProperty("subdomainTokens").GetProperty("region1Token").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("configuration").GetProperty("subdomainTokens").GetProperty("region2Token").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("subdomainStatus").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("syncEnabled").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("numberCount").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("zoomPhoneCloudPeering").GetProperty("syncEnabled").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("zoomPhoneCloudPeering").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("zoomPhoneCloudPeering").GetProperty("numberCount").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("azureOperatorCallProtection").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("azureOperatorCallProtection").GetProperty("numberCount").ToString());
]]></code></example>
    </member>
    <member name="DeleteAsync(string,bool?,RequestConditions,RequestContext)">
      <example>
This sample shows how to call DeleteAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

Response response = await client.DeleteAsync("<accountName>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

Response response = await client.DeleteAsync("<accountName>", deleteNumbers: true, requestConditions: null);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="Delete(string,bool?,RequestConditions,RequestContext)">
      <example>
This sample shows how to call Delete.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

Response response = client.Delete("<accountName>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call Delete with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

Response response = client.Delete("<accountName>", deleteNumbers: true, requestConditions: null);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="CreateOrUpdateNumbersAsync(string,BatchNumbers,CancellationToken)">
      <example>
This sample shows how to call CreateOrUpdateNumbersAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

BatchNumbers batchNumbers = new BatchNumbers(new NumberResource[]
{
    new NumberResource("<telephoneNumber>", "<accountName>", new NumberServiceDetails())
});
Response<BatchNumbers> response = await client.CreateOrUpdateNumbersAsync("<accountName>", batchNumbers);
]]></code>
This sample shows how to call CreateOrUpdateNumbersAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

BatchNumbers batchNumbers = new BatchNumbers(new NumberResource[]
{
    new NumberResource("<telephoneNumber>", "<accountName>", new NumberServiceDetails
    {
        TeamsOperatorConnect = new TeamsOperatorConnectNumberDetails(true)
        {
            AssignmentStatus = TelephoneNumberAssignmentStatus.Assigned,
            Configuration = new TeamsOperatorConnectNumberConfig("<usage>", new string[]{"<choosableCapabilities>"})
            {
                AdditionalUsages = {"<additionalUsages>"},
                CivicAddressId = "<civicAddressId>",
                LocationId = "<locationId>",
                AllowTenantAddressUpdate = true,
                DisplayedCountryCode = "<displayedCountryCode>",
            },
        },
        TeamsDirectRouting = new TeamsDirectRoutingNumberDetails(true),
        TeamsPhoneMobile = new TeamsPhoneMobileNumberDetails(true)
        {
            AssignmentStatus = TelephoneNumberAssignmentStatus.Assigned,
            Configuration = new TeamsPhoneMobileNumberConfig("<usage>", new string[]{"<choosableCapabilities>"})
            {
                AdditionalUsages = {"<additionalUsages>"},
                CivicAddressId = "<civicAddressId>",
                LocationId = "<locationId>",
                AllowTenantAddressUpdate = true,
                DisplayedCountryCode = "<displayedCountryCode>",
            },
        },
        ZoomPhoneCloudPeering = new ZoomPhoneCloudPeeringNumberDetails(true),
        AzureOperatorCallProtection = new AzureOperatorCallProtectionNumberDetails(true),
    })
    {
        Configuration = new NumberConfiguration
        {
            CustomSipHeader = "<customSipHeader>",
        },
    }
});
Response<BatchNumbers> response = await client.CreateOrUpdateNumbersAsync("<accountName>", batchNumbers);
]]></code></example>
    </member>
    <member name="CreateOrUpdateNumbers(string,BatchNumbers,CancellationToken)">
      <example>
This sample shows how to call CreateOrUpdateNumbers.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

BatchNumbers batchNumbers = new BatchNumbers(new NumberResource[]
{
    new NumberResource("<telephoneNumber>", "<accountName>", new NumberServiceDetails())
});
Response<BatchNumbers> response = client.CreateOrUpdateNumbers("<accountName>", batchNumbers);
]]></code>
This sample shows how to call CreateOrUpdateNumbers with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

BatchNumbers batchNumbers = new BatchNumbers(new NumberResource[]
{
    new NumberResource("<telephoneNumber>", "<accountName>", new NumberServiceDetails
    {
        TeamsOperatorConnect = new TeamsOperatorConnectNumberDetails(true)
        {
            AssignmentStatus = TelephoneNumberAssignmentStatus.Assigned,
            Configuration = new TeamsOperatorConnectNumberConfig("<usage>", new string[]{"<choosableCapabilities>"})
            {
                AdditionalUsages = {"<additionalUsages>"},
                CivicAddressId = "<civicAddressId>",
                LocationId = "<locationId>",
                AllowTenantAddressUpdate = true,
                DisplayedCountryCode = "<displayedCountryCode>",
            },
        },
        TeamsDirectRouting = new TeamsDirectRoutingNumberDetails(true),
        TeamsPhoneMobile = new TeamsPhoneMobileNumberDetails(true)
        {
            AssignmentStatus = TelephoneNumberAssignmentStatus.Assigned,
            Configuration = new TeamsPhoneMobileNumberConfig("<usage>", new string[]{"<choosableCapabilities>"})
            {
                AdditionalUsages = {"<additionalUsages>"},
                CivicAddressId = "<civicAddressId>",
                LocationId = "<locationId>",
                AllowTenantAddressUpdate = true,
                DisplayedCountryCode = "<displayedCountryCode>",
            },
        },
        ZoomPhoneCloudPeering = new ZoomPhoneCloudPeeringNumberDetails(true),
        AzureOperatorCallProtection = new AzureOperatorCallProtectionNumberDetails(true),
    })
    {
        Configuration = new NumberConfiguration
        {
            CustomSipHeader = "<customSipHeader>",
        },
    }
});
Response<BatchNumbers> response = client.CreateOrUpdateNumbers("<accountName>", batchNumbers);
]]></code></example>
    </member>
    <member name="CreateOrUpdateNumbersAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateOrUpdateNumbersAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

using RequestContent content = RequestContent.Create(new
{
    numbers = new object[]
    {
        new
        {
            telephoneNumber = "<telephoneNumber>",
            accountName = "<accountName>",
            serviceDetails = new object(),
        }
    },
});
Response response = await client.CreateOrUpdateNumbersAsync("<accountName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("telephoneNumber").ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("accountName").ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").ToString());
]]></code>
This sample shows how to call CreateOrUpdateNumbersAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

using RequestContent content = RequestContent.Create(new
{
    numbers = new object[]
    {
        new
        {
            telephoneNumber = "<telephoneNumber>",
            accountName = "<accountName>",
            serviceDetails = new
            {
                teamsOperatorConnect = new
                {
                    enabled = true,
                    assignmentStatus = "assigned",
                    configuration = new
                    {
                        usage = "<usage>",
                        choosableCapabilities = new object[]
                        {
                            "<choosableCapabilities>"
                        },
                        additionalUsages = new object[]
                        {
                            "<additionalUsages>"
                        },
                        civicAddressId = "<civicAddressId>",
                        locationId = "<locationId>",
                        allowTenantAddressUpdate = true,
                        displayedCountryCode = "<displayedCountryCode>",
                    },
                },
                teamsDirectRouting = new
                {
                    enabled = true,
                },
                teamsPhoneMobile = new
                {
                    enabled = true,
                    assignmentStatus = "assigned",
                    configuration = new
                    {
                        usage = "<usage>",
                        choosableCapabilities = new object[]
                        {
                            "<choosableCapabilities>"
                        },
                        additionalUsages = new object[]
                        {
                            "<additionalUsages>"
                        },
                        civicAddressId = "<civicAddressId>",
                        locationId = "<locationId>",
                        allowTenantAddressUpdate = true,
                        displayedCountryCode = "<displayedCountryCode>",
                    },
                },
                zoomPhoneCloudPeering = new
                {
                    enabled = true,
                },
                azureOperatorCallProtection = new
                {
                    enabled = true,
                },
            },
            configuration = new
            {
                customSipHeader = "<customSipHeader>",
            },
        }
    },
});
Response response = await client.CreateOrUpdateNumbersAsync("<accountName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceProvisioningStatus").ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceProvisioningErrors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceProvisioningErrors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceProvisioningErrors")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceProvisioningErrors")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("telephoneNumber").ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("accountName").ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("assignmentStatus").ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("choosableCapabilities")[0].ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("acquiredCapabilities")[0].ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("availableCapabilities")[0].ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("additionalUsages")[0].ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("civicAddressId").ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("locationId").ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("allowTenantAddressUpdate").ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("displayedCountryCode").ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("assignmentStatus").ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("choosableCapabilities")[0].ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("acquiredCapabilities")[0].ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("availableCapabilities")[0].ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("additionalUsages")[0].ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("civicAddressId").ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("locationId").ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("allowTenantAddressUpdate").ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("displayedCountryCode").ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("zoomPhoneCloudPeering").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("azureOperatorCallProtection").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("configuration").GetProperty("customSipHeader").ToString());
]]></code></example>
    </member>
    <member name="CreateOrUpdateNumbers(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateOrUpdateNumbers and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

using RequestContent content = RequestContent.Create(new
{
    numbers = new object[]
    {
        new
        {
            telephoneNumber = "<telephoneNumber>",
            accountName = "<accountName>",
            serviceDetails = new object(),
        }
    },
});
Response response = client.CreateOrUpdateNumbers("<accountName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("telephoneNumber").ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("accountName").ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").ToString());
]]></code>
This sample shows how to call CreateOrUpdateNumbers with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

using RequestContent content = RequestContent.Create(new
{
    numbers = new object[]
    {
        new
        {
            telephoneNumber = "<telephoneNumber>",
            accountName = "<accountName>",
            serviceDetails = new
            {
                teamsOperatorConnect = new
                {
                    enabled = true,
                    assignmentStatus = "assigned",
                    configuration = new
                    {
                        usage = "<usage>",
                        choosableCapabilities = new object[]
                        {
                            "<choosableCapabilities>"
                        },
                        additionalUsages = new object[]
                        {
                            "<additionalUsages>"
                        },
                        civicAddressId = "<civicAddressId>",
                        locationId = "<locationId>",
                        allowTenantAddressUpdate = true,
                        displayedCountryCode = "<displayedCountryCode>",
                    },
                },
                teamsDirectRouting = new
                {
                    enabled = true,
                },
                teamsPhoneMobile = new
                {
                    enabled = true,
                    assignmentStatus = "assigned",
                    configuration = new
                    {
                        usage = "<usage>",
                        choosableCapabilities = new object[]
                        {
                            "<choosableCapabilities>"
                        },
                        additionalUsages = new object[]
                        {
                            "<additionalUsages>"
                        },
                        civicAddressId = "<civicAddressId>",
                        locationId = "<locationId>",
                        allowTenantAddressUpdate = true,
                        displayedCountryCode = "<displayedCountryCode>",
                    },
                },
                zoomPhoneCloudPeering = new
                {
                    enabled = true,
                },
                azureOperatorCallProtection = new
                {
                    enabled = true,
                },
            },
            configuration = new
            {
                customSipHeader = "<customSipHeader>",
            },
        }
    },
});
Response response = client.CreateOrUpdateNumbers("<accountName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceProvisioningStatus").ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceProvisioningErrors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceProvisioningErrors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceProvisioningErrors")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceProvisioningErrors")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("telephoneNumber").ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("accountName").ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("assignmentStatus").ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("choosableCapabilities")[0].ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("acquiredCapabilities")[0].ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("availableCapabilities")[0].ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("additionalUsages")[0].ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("civicAddressId").ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("locationId").ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("allowTenantAddressUpdate").ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("displayedCountryCode").ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("assignmentStatus").ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("choosableCapabilities")[0].ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("acquiredCapabilities")[0].ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("availableCapabilities")[0].ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("additionalUsages")[0].ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("civicAddressId").ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("locationId").ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("allowTenantAddressUpdate").ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("displayedCountryCode").ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("zoomPhoneCloudPeering").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("serviceDetails").GetProperty("azureOperatorCallProtection").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("numbers")[0].GetProperty("configuration").GetProperty("customSipHeader").ToString());
]]></code></example>
    </member>
    <member name="DeleteNumbersAsync(string,BatchNumbersDelete,CancellationToken)">
      <example>
This sample shows how to call DeleteNumbersAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

BatchNumbersDelete batchNumbersDelete = new BatchNumbersDelete(new NumberIdentifier[]
{
    new NumberIdentifier("<telephoneNumber>")
});
Response response = await client.DeleteNumbersAsync("<accountName>", batchNumbersDelete);
]]></code>
This sample shows how to call DeleteNumbersAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

BatchNumbersDelete batchNumbersDelete = new BatchNumbersDelete(new NumberIdentifier[]
{
    new NumberIdentifier("<telephoneNumber>")
});
Response response = await client.DeleteNumbersAsync("<accountName>", batchNumbersDelete);
]]></code></example>
    </member>
    <member name="DeleteNumbers(string,BatchNumbersDelete,CancellationToken)">
      <example>
This sample shows how to call DeleteNumbers.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

BatchNumbersDelete batchNumbersDelete = new BatchNumbersDelete(new NumberIdentifier[]
{
    new NumberIdentifier("<telephoneNumber>")
});
Response response = client.DeleteNumbers("<accountName>", batchNumbersDelete);
]]></code>
This sample shows how to call DeleteNumbers with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

BatchNumbersDelete batchNumbersDelete = new BatchNumbersDelete(new NumberIdentifier[]
{
    new NumberIdentifier("<telephoneNumber>")
});
Response response = client.DeleteNumbers("<accountName>", batchNumbersDelete);
]]></code></example>
    </member>
    <member name="DeleteNumbersAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call DeleteNumbersAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

using RequestContent content = RequestContent.Create(new
{
    numbers = new object[]
    {
        new
        {
            telephoneNumber = "<telephoneNumber>",
        }
    },
});
Response response = await client.DeleteNumbersAsync("<accountName>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteNumbersAsync with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

using RequestContent content = RequestContent.Create(new
{
    numbers = new object[]
    {
        new
        {
            telephoneNumber = "<telephoneNumber>",
        }
    },
});
Response response = await client.DeleteNumbersAsync("<accountName>", content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="DeleteNumbers(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call DeleteNumbers.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

using RequestContent content = RequestContent.Create(new
{
    numbers = new object[]
    {
        new
        {
            telephoneNumber = "<telephoneNumber>",
        }
    },
});
Response response = client.DeleteNumbers("<accountName>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteNumbers with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

using RequestContent content = RequestContent.Create(new
{
    numbers = new object[]
    {
        new
        {
            telephoneNumber = "<telephoneNumber>",
        }
    },
});
Response response = client.DeleteNumbers("<accountName>", content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetNumberAsync(string,string,RequestConditions,CancellationToken)">
      <example>
This sample shows how to call GetNumberAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

Response<NumberResource> response = await client.GetNumberAsync("<accountName>", "<telephoneNumber>");
]]></code>
This sample shows how to call GetNumberAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

Response<NumberResource> response = await client.GetNumberAsync("<accountName>", "<telephoneNumber>", requestConditions: null);
]]></code></example>
    </member>
    <member name="GetNumber(string,string,RequestConditions,CancellationToken)">
      <example>
This sample shows how to call GetNumber.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

Response<NumberResource> response = client.GetNumber("<accountName>", "<telephoneNumber>");
]]></code>
This sample shows how to call GetNumber with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

Response<NumberResource> response = client.GetNumber("<accountName>", "<telephoneNumber>", requestConditions: null);
]]></code></example>
    </member>
    <member name="GetNumberAsync(string,string,RequestConditions,RequestContext)">
      <example>
This sample shows how to call GetNumberAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

Response response = await client.GetNumberAsync("<accountName>", "<telephoneNumber>", null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("telephoneNumber").ToString());
Console.WriteLine(result.GetProperty("accountName").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").ToString());
]]></code>
This sample shows how to call GetNumberAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

Response response = await client.GetNumberAsync("<accountName>", "<telephoneNumber>", null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("serviceProvisioningStatus").ToString());
Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("telephoneNumber").ToString());
Console.WriteLine(result.GetProperty("accountName").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("assignmentStatus").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("choosableCapabilities")[0].ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("acquiredCapabilities")[0].ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("availableCapabilities")[0].ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("additionalUsages")[0].ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("civicAddressId").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("locationId").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("allowTenantAddressUpdate").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("displayedCountryCode").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("assignmentStatus").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("choosableCapabilities")[0].ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("acquiredCapabilities")[0].ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("availableCapabilities")[0].ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("additionalUsages")[0].ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("civicAddressId").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("locationId").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("allowTenantAddressUpdate").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("displayedCountryCode").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("zoomPhoneCloudPeering").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("azureOperatorCallProtection").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("configuration").GetProperty("customSipHeader").ToString());
]]></code></example>
    </member>
    <member name="GetNumber(string,string,RequestConditions,RequestContext)">
      <example>
This sample shows how to call GetNumber and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

Response response = client.GetNumber("<accountName>", "<telephoneNumber>", null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("telephoneNumber").ToString());
Console.WriteLine(result.GetProperty("accountName").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").ToString());
]]></code>
This sample shows how to call GetNumber with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

Response response = client.GetNumber("<accountName>", "<telephoneNumber>", null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("serviceProvisioningStatus").ToString());
Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("telephoneNumber").ToString());
Console.WriteLine(result.GetProperty("accountName").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("assignmentStatus").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("choosableCapabilities")[0].ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("acquiredCapabilities")[0].ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("availableCapabilities")[0].ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("additionalUsages")[0].ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("civicAddressId").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("locationId").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("allowTenantAddressUpdate").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("displayedCountryCode").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("assignmentStatus").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("choosableCapabilities")[0].ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("acquiredCapabilities")[0].ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("availableCapabilities")[0].ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("additionalUsages")[0].ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("civicAddressId").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("locationId").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("allowTenantAddressUpdate").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("displayedCountryCode").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("zoomPhoneCloudPeering").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("azureOperatorCallProtection").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("configuration").GetProperty("customSipHeader").ToString());
]]></code></example>
    </member>
    <member name="CreateOrReplaceNumberAsync(string,string,NumberResource,RequestConditions,CancellationToken)">
      <example>
This sample shows how to call CreateOrReplaceNumberAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

NumberResource resource = new NumberResource("<telephoneNumber>", "<accountName>", new NumberServiceDetails());
Response<NumberResource> response = await client.CreateOrReplaceNumberAsync("<accountName>", "<telephoneNumber>", resource);
]]></code>
This sample shows how to call CreateOrReplaceNumberAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

NumberResource resource = new NumberResource("<telephoneNumber>", "<accountName>", new NumberServiceDetails
{
    TeamsOperatorConnect = new TeamsOperatorConnectNumberDetails(true)
    {
        AssignmentStatus = TelephoneNumberAssignmentStatus.Assigned,
        Configuration = new TeamsOperatorConnectNumberConfig("<usage>", new string[] { "<choosableCapabilities>" })
        {
            AdditionalUsages = { "<additionalUsages>" },
            CivicAddressId = "<civicAddressId>",
            LocationId = "<locationId>",
            AllowTenantAddressUpdate = true,
            DisplayedCountryCode = "<displayedCountryCode>",
        },
    },
    TeamsDirectRouting = new TeamsDirectRoutingNumberDetails(true),
    TeamsPhoneMobile = new TeamsPhoneMobileNumberDetails(true)
    {
        AssignmentStatus = TelephoneNumberAssignmentStatus.Assigned,
        Configuration = new TeamsPhoneMobileNumberConfig("<usage>", new string[] { "<choosableCapabilities>" })
        {
            AdditionalUsages = { "<additionalUsages>" },
            CivicAddressId = "<civicAddressId>",
            LocationId = "<locationId>",
            AllowTenantAddressUpdate = true,
            DisplayedCountryCode = "<displayedCountryCode>",
        },
    },
    ZoomPhoneCloudPeering = new ZoomPhoneCloudPeeringNumberDetails(true),
    AzureOperatorCallProtection = new AzureOperatorCallProtectionNumberDetails(true),
})
{
    Configuration = new NumberConfiguration
    {
        CustomSipHeader = "<customSipHeader>",
    },
};
Response<NumberResource> response = await client.CreateOrReplaceNumberAsync("<accountName>", "<telephoneNumber>", resource, requestConditions: null);
]]></code></example>
    </member>
    <member name="CreateOrReplaceNumber(string,string,NumberResource,RequestConditions,CancellationToken)">
      <example>
This sample shows how to call CreateOrReplaceNumber.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

NumberResource resource = new NumberResource("<telephoneNumber>", "<accountName>", new NumberServiceDetails());
Response<NumberResource> response = client.CreateOrReplaceNumber("<accountName>", "<telephoneNumber>", resource);
]]></code>
This sample shows how to call CreateOrReplaceNumber with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

NumberResource resource = new NumberResource("<telephoneNumber>", "<accountName>", new NumberServiceDetails
{
    TeamsOperatorConnect = new TeamsOperatorConnectNumberDetails(true)
    {
        AssignmentStatus = TelephoneNumberAssignmentStatus.Assigned,
        Configuration = new TeamsOperatorConnectNumberConfig("<usage>", new string[] { "<choosableCapabilities>" })
        {
            AdditionalUsages = { "<additionalUsages>" },
            CivicAddressId = "<civicAddressId>",
            LocationId = "<locationId>",
            AllowTenantAddressUpdate = true,
            DisplayedCountryCode = "<displayedCountryCode>",
        },
    },
    TeamsDirectRouting = new TeamsDirectRoutingNumberDetails(true),
    TeamsPhoneMobile = new TeamsPhoneMobileNumberDetails(true)
    {
        AssignmentStatus = TelephoneNumberAssignmentStatus.Assigned,
        Configuration = new TeamsPhoneMobileNumberConfig("<usage>", new string[] { "<choosableCapabilities>" })
        {
            AdditionalUsages = { "<additionalUsages>" },
            CivicAddressId = "<civicAddressId>",
            LocationId = "<locationId>",
            AllowTenantAddressUpdate = true,
            DisplayedCountryCode = "<displayedCountryCode>",
        },
    },
    ZoomPhoneCloudPeering = new ZoomPhoneCloudPeeringNumberDetails(true),
    AzureOperatorCallProtection = new AzureOperatorCallProtectionNumberDetails(true),
})
{
    Configuration = new NumberConfiguration
    {
        CustomSipHeader = "<customSipHeader>",
    },
};
Response<NumberResource> response = client.CreateOrReplaceNumber("<accountName>", "<telephoneNumber>", resource, requestConditions: null);
]]></code></example>
    </member>
    <member name="CreateOrReplaceNumberAsync(string,string,RequestContent,RequestConditions,RequestContext)">
      <example>
This sample shows how to call CreateOrReplaceNumberAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

using RequestContent content = RequestContent.Create(new
{
    telephoneNumber = "<telephoneNumber>",
    accountName = "<accountName>",
    serviceDetails = new object(),
});
Response response = await client.CreateOrReplaceNumberAsync("<accountName>", "<telephoneNumber>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("telephoneNumber").ToString());
Console.WriteLine(result.GetProperty("accountName").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").ToString());
]]></code>
This sample shows how to call CreateOrReplaceNumberAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

using RequestContent content = RequestContent.Create(new
{
    telephoneNumber = "<telephoneNumber>",
    accountName = "<accountName>",
    serviceDetails = new
    {
        teamsOperatorConnect = new
        {
            enabled = true,
            assignmentStatus = "assigned",
            configuration = new
            {
                usage = "<usage>",
                choosableCapabilities = new object[]
                {
                    "<choosableCapabilities>"
                },
                additionalUsages = new object[]
                {
                    "<additionalUsages>"
                },
                civicAddressId = "<civicAddressId>",
                locationId = "<locationId>",
                allowTenantAddressUpdate = true,
                displayedCountryCode = "<displayedCountryCode>",
            },
        },
        teamsDirectRouting = new
        {
            enabled = true,
        },
        teamsPhoneMobile = new
        {
            enabled = true,
            assignmentStatus = "assigned",
            configuration = new
            {
                usage = "<usage>",
                choosableCapabilities = new object[]
                {
                    "<choosableCapabilities>"
                },
                additionalUsages = new object[]
                {
                    "<additionalUsages>"
                },
                civicAddressId = "<civicAddressId>",
                locationId = "<locationId>",
                allowTenantAddressUpdate = true,
                displayedCountryCode = "<displayedCountryCode>",
            },
        },
        zoomPhoneCloudPeering = new
        {
            enabled = true,
        },
        azureOperatorCallProtection = new
        {
            enabled = true,
        },
    },
    configuration = new
    {
        customSipHeader = "<customSipHeader>",
    },
});
Response response = await client.CreateOrReplaceNumberAsync("<accountName>", "<telephoneNumber>", content, requestConditions: null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("serviceProvisioningStatus").ToString());
Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("telephoneNumber").ToString());
Console.WriteLine(result.GetProperty("accountName").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("assignmentStatus").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("choosableCapabilities")[0].ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("acquiredCapabilities")[0].ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("availableCapabilities")[0].ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("additionalUsages")[0].ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("civicAddressId").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("locationId").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("allowTenantAddressUpdate").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("displayedCountryCode").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("assignmentStatus").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("choosableCapabilities")[0].ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("acquiredCapabilities")[0].ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("availableCapabilities")[0].ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("additionalUsages")[0].ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("civicAddressId").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("locationId").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("allowTenantAddressUpdate").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("displayedCountryCode").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("zoomPhoneCloudPeering").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("azureOperatorCallProtection").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("configuration").GetProperty("customSipHeader").ToString());
]]></code></example>
    </member>
    <member name="CreateOrReplaceNumber(string,string,RequestContent,RequestConditions,RequestContext)">
      <example>
This sample shows how to call CreateOrReplaceNumber and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

using RequestContent content = RequestContent.Create(new
{
    telephoneNumber = "<telephoneNumber>",
    accountName = "<accountName>",
    serviceDetails = new object(),
});
Response response = client.CreateOrReplaceNumber("<accountName>", "<telephoneNumber>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("telephoneNumber").ToString());
Console.WriteLine(result.GetProperty("accountName").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").ToString());
]]></code>
This sample shows how to call CreateOrReplaceNumber with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

using RequestContent content = RequestContent.Create(new
{
    telephoneNumber = "<telephoneNumber>",
    accountName = "<accountName>",
    serviceDetails = new
    {
        teamsOperatorConnect = new
        {
            enabled = true,
            assignmentStatus = "assigned",
            configuration = new
            {
                usage = "<usage>",
                choosableCapabilities = new object[]
                {
                    "<choosableCapabilities>"
                },
                additionalUsages = new object[]
                {
                    "<additionalUsages>"
                },
                civicAddressId = "<civicAddressId>",
                locationId = "<locationId>",
                allowTenantAddressUpdate = true,
                displayedCountryCode = "<displayedCountryCode>",
            },
        },
        teamsDirectRouting = new
        {
            enabled = true,
        },
        teamsPhoneMobile = new
        {
            enabled = true,
            assignmentStatus = "assigned",
            configuration = new
            {
                usage = "<usage>",
                choosableCapabilities = new object[]
                {
                    "<choosableCapabilities>"
                },
                additionalUsages = new object[]
                {
                    "<additionalUsages>"
                },
                civicAddressId = "<civicAddressId>",
                locationId = "<locationId>",
                allowTenantAddressUpdate = true,
                displayedCountryCode = "<displayedCountryCode>",
            },
        },
        zoomPhoneCloudPeering = new
        {
            enabled = true,
        },
        azureOperatorCallProtection = new
        {
            enabled = true,
        },
    },
    configuration = new
    {
        customSipHeader = "<customSipHeader>",
    },
});
Response response = client.CreateOrReplaceNumber("<accountName>", "<telephoneNumber>", content, requestConditions: null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("serviceProvisioningStatus").ToString());
Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("telephoneNumber").ToString());
Console.WriteLine(result.GetProperty("accountName").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("assignmentStatus").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("choosableCapabilities")[0].ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("acquiredCapabilities")[0].ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("availableCapabilities")[0].ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("additionalUsages")[0].ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("civicAddressId").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("locationId").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("allowTenantAddressUpdate").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("displayedCountryCode").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("assignmentStatus").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("choosableCapabilities")[0].ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("acquiredCapabilities")[0].ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("availableCapabilities")[0].ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("additionalUsages")[0].ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("civicAddressId").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("locationId").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("allowTenantAddressUpdate").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("displayedCountryCode").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("zoomPhoneCloudPeering").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("azureOperatorCallProtection").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("configuration").GetProperty("customSipHeader").ToString());
]]></code></example>
    </member>
    <member name="DeleteNumberAsync(string,string,RequestConditions,RequestContext)">
      <example>
This sample shows how to call DeleteNumberAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

Response response = await client.DeleteNumberAsync("<accountName>", "<telephoneNumber>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteNumberAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

Response response = await client.DeleteNumberAsync("<accountName>", "<telephoneNumber>", requestConditions: null);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="DeleteNumber(string,string,RequestConditions,RequestContext)">
      <example>
This sample shows how to call DeleteNumber.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

Response response = client.DeleteNumber("<accountName>", "<telephoneNumber>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteNumber with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

Response response = client.DeleteNumber("<accountName>", "<telephoneNumber>", requestConditions: null);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetTeamsCapabilityPlansAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetTeamsCapabilityPlansAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

Response<TeamsCapabilityPlans> response = await client.GetTeamsCapabilityPlansAsync("<accountName>");
]]></code>
This sample shows how to call GetTeamsCapabilityPlansAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

Response<TeamsCapabilityPlans> response = await client.GetTeamsCapabilityPlansAsync("<accountName>");
]]></code></example>
    </member>
    <member name="GetTeamsCapabilityPlans(string,CancellationToken)">
      <example>
This sample shows how to call GetTeamsCapabilityPlans.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

Response<TeamsCapabilityPlans> response = client.GetTeamsCapabilityPlans("<accountName>");
]]></code>
This sample shows how to call GetTeamsCapabilityPlans with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

Response<TeamsCapabilityPlans> response = client.GetTeamsCapabilityPlans("<accountName>");
]]></code></example>
    </member>
    <member name="GetTeamsCapabilityPlansAsync(string,RequestContext)">
      <example>
This sample shows how to call GetTeamsCapabilityPlansAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

Response response = await client.GetTeamsCapabilityPlansAsync("<accountName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("capabilityPlans")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("capabilityPlans")[0].GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("capabilityPlans")[0].GetProperty("supportsTollFree").ToString());
]]></code>
This sample shows how to call GetTeamsCapabilityPlansAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

Response response = await client.GetTeamsCapabilityPlansAsync("<accountName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("capabilityPlans")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("capabilityPlans")[0].GetProperty("offerTypes")[0].ToString());
Console.WriteLine(result.GetProperty("capabilityPlans")[0].GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("capabilityPlans")[0].GetProperty("mandatoryCapabilities")[0].ToString());
Console.WriteLine(result.GetProperty("capabilityPlans")[0].GetProperty("choosableCapabilities")[0].ToString());
Console.WriteLine(result.GetProperty("capabilityPlans")[0].GetProperty("supportsTollFree").ToString());
]]></code></example>
    </member>
    <member name="GetTeamsCapabilityPlans(string,RequestContext)">
      <example>
This sample shows how to call GetTeamsCapabilityPlans and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

Response response = client.GetTeamsCapabilityPlans("<accountName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("capabilityPlans")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("capabilityPlans")[0].GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("capabilityPlans")[0].GetProperty("supportsTollFree").ToString());
]]></code>
This sample shows how to call GetTeamsCapabilityPlans with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

Response response = client.GetTeamsCapabilityPlans("<accountName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("capabilityPlans")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("capabilityPlans")[0].GetProperty("offerTypes")[0].ToString());
Console.WriteLine(result.GetProperty("capabilityPlans")[0].GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("capabilityPlans")[0].GetProperty("mandatoryCapabilities")[0].ToString());
Console.WriteLine(result.GetProperty("capabilityPlans")[0].GetProperty("choosableCapabilities")[0].ToString());
Console.WriteLine(result.GetProperty("capabilityPlans")[0].GetProperty("supportsTollFree").ToString());
]]></code></example>
    </member>
    <member name="GetTeamsAvailableCapabilitiesAsync(string,NumberIdentifiers,CancellationToken)">
      <example>
This sample shows how to call GetTeamsAvailableCapabilitiesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

NumberIdentifiers numberIdentifiers = new NumberIdentifiers(new NumberIdentifier[]
{
    new NumberIdentifier("<telephoneNumber>")
});
Response<TeamsAvailableCapabilities> response = await client.GetTeamsAvailableCapabilitiesAsync("<accountName>", numberIdentifiers);
]]></code>
This sample shows how to call GetTeamsAvailableCapabilitiesAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

NumberIdentifiers numberIdentifiers = new NumberIdentifiers(new NumberIdentifier[]
{
    new NumberIdentifier("<telephoneNumber>")
});
Response<TeamsAvailableCapabilities> response = await client.GetTeamsAvailableCapabilitiesAsync("<accountName>", numberIdentifiers);
]]></code></example>
    </member>
    <member name="GetTeamsAvailableCapabilities(string,NumberIdentifiers,CancellationToken)">
      <example>
This sample shows how to call GetTeamsAvailableCapabilities.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

NumberIdentifiers numberIdentifiers = new NumberIdentifiers(new NumberIdentifier[]
{
    new NumberIdentifier("<telephoneNumber>")
});
Response<TeamsAvailableCapabilities> response = client.GetTeamsAvailableCapabilities("<accountName>", numberIdentifiers);
]]></code>
This sample shows how to call GetTeamsAvailableCapabilities with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

NumberIdentifiers numberIdentifiers = new NumberIdentifiers(new NumberIdentifier[]
{
    new NumberIdentifier("<telephoneNumber>")
});
Response<TeamsAvailableCapabilities> response = client.GetTeamsAvailableCapabilities("<accountName>", numberIdentifiers);
]]></code></example>
    </member>
    <member name="GetTeamsAvailableCapabilitiesAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call GetTeamsAvailableCapabilitiesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

using RequestContent content = RequestContent.Create(new
{
    numbers = new object[]
    {
        new
        {
            telephoneNumber = "<telephoneNumber>",
        }
    },
});
Response response = await client.GetTeamsAvailableCapabilitiesAsync("<accountName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("availableCapabilities")[0].ToString());
]]></code>
This sample shows how to call GetTeamsAvailableCapabilitiesAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

using RequestContent content = RequestContent.Create(new
{
    numbers = new object[]
    {
        new
        {
            telephoneNumber = "<telephoneNumber>",
        }
    },
});
Response response = await client.GetTeamsAvailableCapabilitiesAsync("<accountName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("availableCapabilities")[0].ToString());
]]></code></example>
    </member>
    <member name="GetTeamsAvailableCapabilities(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call GetTeamsAvailableCapabilities and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

using RequestContent content = RequestContent.Create(new
{
    numbers = new object[]
    {
        new
        {
            telephoneNumber = "<telephoneNumber>",
        }
    },
});
Response response = client.GetTeamsAvailableCapabilities("<accountName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("availableCapabilities")[0].ToString());
]]></code>
This sample shows how to call GetTeamsAvailableCapabilities with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

using RequestContent content = RequestContent.Create(new
{
    numbers = new object[]
    {
        new
        {
            telephoneNumber = "<telephoneNumber>",
        }
    },
});
Response response = client.GetTeamsAvailableCapabilities("<accountName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("availableCapabilities")[0].ToString());
]]></code></example>
    </member>
    <member name="GetTeamsCivicAddressAsync(string,string,RequestConditions,CancellationToken)">
      <example>
This sample shows how to call GetTeamsCivicAddressAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

Response<TeamsCivicAddressResource> response = await client.GetTeamsCivicAddressAsync("<accountName>", "<civicAddressId>");
]]></code>
This sample shows how to call GetTeamsCivicAddressAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

Response<TeamsCivicAddressResource> response = await client.GetTeamsCivicAddressAsync("<accountName>", "<civicAddressId>", requestConditions: null);
]]></code></example>
    </member>
    <member name="GetTeamsCivicAddress(string,string,RequestConditions,CancellationToken)">
      <example>
This sample shows how to call GetTeamsCivicAddress.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

Response<TeamsCivicAddressResource> response = client.GetTeamsCivicAddress("<accountName>", "<civicAddressId>");
]]></code>
This sample shows how to call GetTeamsCivicAddress with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

Response<TeamsCivicAddressResource> response = client.GetTeamsCivicAddress("<accountName>", "<civicAddressId>", requestConditions: null);
]]></code></example>
    </member>
    <member name="GetTeamsCivicAddressAsync(string,string,RequestConditions,RequestContext)">
      <example>
This sample shows how to call GetTeamsCivicAddressAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

Response response = await client.GetTeamsCivicAddressAsync("<accountName>", "<civicAddressId>", null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("defaultLocationId").ToString());
]]></code>
This sample shows how to call GetTeamsCivicAddressAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

Response response = await client.GetTeamsCivicAddressAsync("<accountName>", "<civicAddressId>", null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("country").ToString());
Console.WriteLine(result.GetProperty("houseNumber").ToString());
Console.WriteLine(result.GetProperty("houseNumberSuffix").ToString());
Console.WriteLine(result.GetProperty("preDirectional").ToString());
Console.WriteLine(result.GetProperty("streetName").ToString());
Console.WriteLine(result.GetProperty("streetSuffix").ToString());
Console.WriteLine(result.GetProperty("postDirectional").ToString());
Console.WriteLine(result.GetProperty("stateOrProvince").ToString());
Console.WriteLine(result.GetProperty("countyOrDistrict").ToString());
Console.WriteLine(result.GetProperty("cityOrTown").ToString());
Console.WriteLine(result.GetProperty("cityOrTownAlias").ToString());
Console.WriteLine(result.GetProperty("postalOrZipCode").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("companyName").ToString());
Console.WriteLine(result.GetProperty("companyId").ToString());
Console.WriteLine(result.GetProperty("defaultLocationId").ToString());
Console.WriteLine(result.GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("tenantId").ToString());
Console.WriteLine(result.GetProperty("partnerId").ToString());
Console.WriteLine(result.GetProperty("locations")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("locations")[0].GetProperty("civicAddressId").ToString());
Console.WriteLine(result.GetProperty("locations")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("locations")[0].GetProperty("additionalInfo").ToString());
Console.WriteLine(result.GetProperty("locations")[0].GetProperty("isDefault").ToString());
Console.WriteLine(result.GetProperty("locations")[0].GetProperty("elin").ToString());
Console.WriteLine(result.GetProperty("latitude").ToString());
Console.WriteLine(result.GetProperty("longitude").ToString());
]]></code></example>
    </member>
    <member name="GetTeamsCivicAddress(string,string,RequestConditions,RequestContext)">
      <example>
This sample shows how to call GetTeamsCivicAddress and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

Response response = client.GetTeamsCivicAddress("<accountName>", "<civicAddressId>", null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("defaultLocationId").ToString());
]]></code>
This sample shows how to call GetTeamsCivicAddress with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

Response response = client.GetTeamsCivicAddress("<accountName>", "<civicAddressId>", null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("country").ToString());
Console.WriteLine(result.GetProperty("houseNumber").ToString());
Console.WriteLine(result.GetProperty("houseNumberSuffix").ToString());
Console.WriteLine(result.GetProperty("preDirectional").ToString());
Console.WriteLine(result.GetProperty("streetName").ToString());
Console.WriteLine(result.GetProperty("streetSuffix").ToString());
Console.WriteLine(result.GetProperty("postDirectional").ToString());
Console.WriteLine(result.GetProperty("stateOrProvince").ToString());
Console.WriteLine(result.GetProperty("countyOrDistrict").ToString());
Console.WriteLine(result.GetProperty("cityOrTown").ToString());
Console.WriteLine(result.GetProperty("cityOrTownAlias").ToString());
Console.WriteLine(result.GetProperty("postalOrZipCode").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("companyName").ToString());
Console.WriteLine(result.GetProperty("companyId").ToString());
Console.WriteLine(result.GetProperty("defaultLocationId").ToString());
Console.WriteLine(result.GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("tenantId").ToString());
Console.WriteLine(result.GetProperty("partnerId").ToString());
Console.WriteLine(result.GetProperty("locations")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("locations")[0].GetProperty("civicAddressId").ToString());
Console.WriteLine(result.GetProperty("locations")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("locations")[0].GetProperty("additionalInfo").ToString());
Console.WriteLine(result.GetProperty("locations")[0].GetProperty("isDefault").ToString());
Console.WriteLine(result.GetProperty("locations")[0].GetProperty("elin").ToString());
Console.WriteLine(result.GetProperty("latitude").ToString());
Console.WriteLine(result.GetProperty("longitude").ToString());
]]></code></example>
    </member>
    <member name="GetAccountResourcesAsync(int?,int?,int?,string,bool?,CancellationToken)">
      <example>
This sample shows how to call GetAccountResourcesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

await foreach (AccountResource item in client.GetAccountResourcesAsync())
{
}
]]></code>
This sample shows how to call GetAccountResourcesAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

await foreach (AccountResource item in client.GetAccountResourcesAsync(maxCount: 1234, skip: 1234, maxpagesize: 1234, filter: "<filter>", countRecords: true))
{
}
]]></code></example>
    </member>
    <member name="GetAccountResources(int?,int?,int?,string,bool?,CancellationToken)">
      <example>
This sample shows how to call GetAccountResources.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

foreach (AccountResource item in client.GetAccountResources())
{
}
]]></code>
This sample shows how to call GetAccountResources with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

foreach (AccountResource item in client.GetAccountResources(maxCount: 1234, skip: 1234, maxpagesize: 1234, filter: "<filter>", countRecords: true))
{
}
]]></code></example>
    </member>
    <member name="GetAccountResourcesAsync(int?,int?,int?,string,bool?,RequestContext)">
      <example>
This sample shows how to call GetAccountResourcesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

await foreach (BinaryData item in client.GetAccountResourcesAsync(null, null, null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
}
]]></code>
This sample shows how to call GetAccountResourcesAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

await foreach (BinaryData item in client.GetAccountResourcesAsync(1234, 1234, 1234, "<filter>", true, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("serviceProvisioningStatus").ToString());
    Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("target").ToString());
    Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("innererror").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("correlationId").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsTenantId").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("syncEnabled").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("enabled").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("numberCount").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("syncEnabled").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("enabled").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("numberCount").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("configuration").GetProperty("callScreening").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("configuration").GetProperty("subdomain").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("configuration").GetProperty("subdomainTokens").GetProperty("region1Token").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("configuration").GetProperty("subdomainTokens").GetProperty("region2Token").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("subdomainStatus").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("syncEnabled").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("enabled").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("numberCount").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("zoomPhoneCloudPeering").GetProperty("syncEnabled").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("zoomPhoneCloudPeering").GetProperty("enabled").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("zoomPhoneCloudPeering").GetProperty("numberCount").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("azureOperatorCallProtection").GetProperty("enabled").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("azureOperatorCallProtection").GetProperty("numberCount").ToString());
}
]]></code></example>
    </member>
    <member name="GetAccountResources(int?,int?,int?,string,bool?,RequestContext)">
      <example>
This sample shows how to call GetAccountResources and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

foreach (BinaryData item in client.GetAccountResources(null, null, null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
}
]]></code>
This sample shows how to call GetAccountResources with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

foreach (BinaryData item in client.GetAccountResources(1234, 1234, 1234, "<filter>", true, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("serviceProvisioningStatus").ToString());
    Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("target").ToString());
    Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("innererror").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("correlationId").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsTenantId").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("syncEnabled").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("enabled").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("numberCount").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("syncEnabled").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("enabled").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("numberCount").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("configuration").GetProperty("callScreening").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("configuration").GetProperty("subdomain").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("configuration").GetProperty("subdomainTokens").GetProperty("region1Token").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("configuration").GetProperty("subdomainTokens").GetProperty("region2Token").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("subdomainStatus").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("syncEnabled").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("enabled").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("numberCount").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("zoomPhoneCloudPeering").GetProperty("syncEnabled").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("zoomPhoneCloudPeering").GetProperty("enabled").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("zoomPhoneCloudPeering").GetProperty("numberCount").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("azureOperatorCallProtection").GetProperty("enabled").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("azureOperatorCallProtection").GetProperty("numberCount").ToString());
}
]]></code></example>
    </member>
    <member name="GetNumbersAsync(string,int?,int?,int?,string,bool?,CancellationToken)">
      <example>
This sample shows how to call GetNumbersAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

await foreach (NumberResource item in client.GetNumbersAsync("<accountName>"))
{
}
]]></code>
This sample shows how to call GetNumbersAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

await foreach (NumberResource item in client.GetNumbersAsync("<accountName>", maxCount: 1234, skip: 1234, maxpagesize: 1234, filter: "<filter>", countRecords: true))
{
}
]]></code></example>
    </member>
    <member name="GetNumbers(string,int?,int?,int?,string,bool?,CancellationToken)">
      <example>
This sample shows how to call GetNumbers.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

foreach (NumberResource item in client.GetNumbers("<accountName>"))
{
}
]]></code>
This sample shows how to call GetNumbers with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

foreach (NumberResource item in client.GetNumbers("<accountName>", maxCount: 1234, skip: 1234, maxpagesize: 1234, filter: "<filter>", countRecords: true))
{
}
]]></code></example>
    </member>
    <member name="GetNumbersAsync(string,int?,int?,int?,string,bool?,RequestContext)">
      <example>
This sample shows how to call GetNumbersAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

await foreach (BinaryData item in client.GetNumbersAsync("<accountName>", null, null, null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("telephoneNumber").ToString());
    Console.WriteLine(result.GetProperty("accountName").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").ToString());
}
]]></code>
This sample shows how to call GetNumbersAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

await foreach (BinaryData item in client.GetNumbersAsync("<accountName>", 1234, 1234, 1234, "<filter>", true, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("serviceProvisioningStatus").ToString());
    Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("target").ToString());
    Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("innererror").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("telephoneNumber").ToString());
    Console.WriteLine(result.GetProperty("accountName").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("enabled").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("assignmentStatus").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("usage").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("choosableCapabilities")[0].ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("acquiredCapabilities")[0].ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("availableCapabilities")[0].ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("additionalUsages")[0].ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("civicAddressId").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("locationId").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("allowTenantAddressUpdate").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("displayedCountryCode").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("enabled").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("enabled").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("assignmentStatus").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("usage").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("choosableCapabilities")[0].ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("acquiredCapabilities")[0].ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("availableCapabilities")[0].ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("additionalUsages")[0].ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("civicAddressId").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("locationId").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("allowTenantAddressUpdate").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("displayedCountryCode").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("zoomPhoneCloudPeering").GetProperty("enabled").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("azureOperatorCallProtection").GetProperty("enabled").ToString());
    Console.WriteLine(result.GetProperty("configuration").GetProperty("customSipHeader").ToString());
}
]]></code></example>
    </member>
    <member name="GetNumbers(string,int?,int?,int?,string,bool?,RequestContext)">
      <example>
This sample shows how to call GetNumbers and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

foreach (BinaryData item in client.GetNumbers("<accountName>", null, null, null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("telephoneNumber").ToString());
    Console.WriteLine(result.GetProperty("accountName").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").ToString());
}
]]></code>
This sample shows how to call GetNumbers with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

foreach (BinaryData item in client.GetNumbers("<accountName>", 1234, 1234, 1234, "<filter>", true, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("serviceProvisioningStatus").ToString());
    Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("target").ToString());
    Console.WriteLine(result.GetProperty("serviceProvisioningErrors")[0].GetProperty("innererror").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("telephoneNumber").ToString());
    Console.WriteLine(result.GetProperty("accountName").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("enabled").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("assignmentStatus").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("usage").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("choosableCapabilities")[0].ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("acquiredCapabilities")[0].ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("availableCapabilities")[0].ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("additionalUsages")[0].ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("civicAddressId").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("locationId").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("allowTenantAddressUpdate").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsOperatorConnect").GetProperty("configuration").GetProperty("displayedCountryCode").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsDirectRouting").GetProperty("enabled").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("enabled").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("assignmentStatus").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("usage").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("choosableCapabilities")[0].ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("acquiredCapabilities")[0].ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("availableCapabilities")[0].ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("additionalUsages")[0].ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("civicAddressId").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("locationId").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("allowTenantAddressUpdate").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("teamsPhoneMobile").GetProperty("configuration").GetProperty("displayedCountryCode").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("zoomPhoneCloudPeering").GetProperty("enabled").ToString());
    Console.WriteLine(result.GetProperty("serviceDetails").GetProperty("azureOperatorCallProtection").GetProperty("enabled").ToString());
    Console.WriteLine(result.GetProperty("configuration").GetProperty("customSipHeader").ToString());
}
]]></code></example>
    </member>
    <member name="GetTeamsCivicAddressesAsync(string,int?,int?,int?,string,bool?,CancellationToken)">
      <example>
This sample shows how to call GetTeamsCivicAddressesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

await foreach (TeamsCivicAddressResource item in client.GetTeamsCivicAddressesAsync("<accountName>"))
{
}
]]></code>
This sample shows how to call GetTeamsCivicAddressesAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

await foreach (TeamsCivicAddressResource item in client.GetTeamsCivicAddressesAsync("<accountName>", maxCount: 1234, skip: 1234, maxpagesize: 1234, filter: "<filter>", countRecords: true))
{
}
]]></code></example>
    </member>
    <member name="GetTeamsCivicAddresses(string,int?,int?,int?,string,bool?,CancellationToken)">
      <example>
This sample shows how to call GetTeamsCivicAddresses.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

foreach (TeamsCivicAddressResource item in client.GetTeamsCivicAddresses("<accountName>"))
{
}
]]></code>
This sample shows how to call GetTeamsCivicAddresses with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

foreach (TeamsCivicAddressResource item in client.GetTeamsCivicAddresses("<accountName>", maxCount: 1234, skip: 1234, maxpagesize: 1234, filter: "<filter>", countRecords: true))
{
}
]]></code></example>
    </member>
    <member name="GetTeamsCivicAddressesAsync(string,int?,int?,int?,string,bool?,RequestContext)">
      <example>
This sample shows how to call GetTeamsCivicAddressesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

await foreach (BinaryData item in client.GetTeamsCivicAddressesAsync("<accountName>", null, null, null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("defaultLocationId").ToString());
}
]]></code>
This sample shows how to call GetTeamsCivicAddressesAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

await foreach (BinaryData item in client.GetTeamsCivicAddressesAsync("<accountName>", 1234, 1234, 1234, "<filter>", true, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("country").ToString());
    Console.WriteLine(result.GetProperty("houseNumber").ToString());
    Console.WriteLine(result.GetProperty("houseNumberSuffix").ToString());
    Console.WriteLine(result.GetProperty("preDirectional").ToString());
    Console.WriteLine(result.GetProperty("streetName").ToString());
    Console.WriteLine(result.GetProperty("streetSuffix").ToString());
    Console.WriteLine(result.GetProperty("postDirectional").ToString());
    Console.WriteLine(result.GetProperty("stateOrProvince").ToString());
    Console.WriteLine(result.GetProperty("countyOrDistrict").ToString());
    Console.WriteLine(result.GetProperty("cityOrTown").ToString());
    Console.WriteLine(result.GetProperty("cityOrTownAlias").ToString());
    Console.WriteLine(result.GetProperty("postalOrZipCode").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("companyName").ToString());
    Console.WriteLine(result.GetProperty("companyId").ToString());
    Console.WriteLine(result.GetProperty("defaultLocationId").ToString());
    Console.WriteLine(result.GetProperty("validationStatus").ToString());
    Console.WriteLine(result.GetProperty("tenantId").ToString());
    Console.WriteLine(result.GetProperty("partnerId").ToString());
    Console.WriteLine(result.GetProperty("locations")[0].GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("locations")[0].GetProperty("civicAddressId").ToString());
    Console.WriteLine(result.GetProperty("locations")[0].GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("locations")[0].GetProperty("additionalInfo").ToString());
    Console.WriteLine(result.GetProperty("locations")[0].GetProperty("isDefault").ToString());
    Console.WriteLine(result.GetProperty("locations")[0].GetProperty("elin").ToString());
    Console.WriteLine(result.GetProperty("latitude").ToString());
    Console.WriteLine(result.GetProperty("longitude").ToString());
}
]]></code></example>
    </member>
    <member name="GetTeamsCivicAddresses(string,int?,int?,int?,string,bool?,RequestContext)">
      <example>
This sample shows how to call GetTeamsCivicAddresses and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

foreach (BinaryData item in client.GetTeamsCivicAddresses("<accountName>", null, null, null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("defaultLocationId").ToString());
}
]]></code>
This sample shows how to call GetTeamsCivicAddresses with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Accounts client = new VoiceServicesClient(endpoint, credential).GetAccountsClient();

foreach (BinaryData item in client.GetTeamsCivicAddresses("<accountName>", 1234, 1234, 1234, "<filter>", true, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("country").ToString());
    Console.WriteLine(result.GetProperty("houseNumber").ToString());
    Console.WriteLine(result.GetProperty("houseNumberSuffix").ToString());
    Console.WriteLine(result.GetProperty("preDirectional").ToString());
    Console.WriteLine(result.GetProperty("streetName").ToString());
    Console.WriteLine(result.GetProperty("streetSuffix").ToString());
    Console.WriteLine(result.GetProperty("postDirectional").ToString());
    Console.WriteLine(result.GetProperty("stateOrProvince").ToString());
    Console.WriteLine(result.GetProperty("countyOrDistrict").ToString());
    Console.WriteLine(result.GetProperty("cityOrTown").ToString());
    Console.WriteLine(result.GetProperty("cityOrTownAlias").ToString());
    Console.WriteLine(result.GetProperty("postalOrZipCode").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("companyName").ToString());
    Console.WriteLine(result.GetProperty("companyId").ToString());
    Console.WriteLine(result.GetProperty("defaultLocationId").ToString());
    Console.WriteLine(result.GetProperty("validationStatus").ToString());
    Console.WriteLine(result.GetProperty("tenantId").ToString());
    Console.WriteLine(result.GetProperty("partnerId").ToString());
    Console.WriteLine(result.GetProperty("locations")[0].GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("locations")[0].GetProperty("civicAddressId").ToString());
    Console.WriteLine(result.GetProperty("locations")[0].GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("locations")[0].GetProperty("additionalInfo").ToString());
    Console.WriteLine(result.GetProperty("locations")[0].GetProperty("isDefault").ToString());
    Console.WriteLine(result.GetProperty("locations")[0].GetProperty("elin").ToString());
    Console.WriteLine(result.GetProperty("latitude").ToString());
    Console.WriteLine(result.GetProperty("longitude").ToString());
}
]]></code></example>
    </member>
  </members>
</doc>