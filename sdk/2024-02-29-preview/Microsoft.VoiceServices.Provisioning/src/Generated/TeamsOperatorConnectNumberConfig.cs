// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Microsoft.VoiceServices.Provisioning
{
    /// <summary> Telephone number configuration for Teams Operator Connect telephone numbers. </summary>
    public partial class TeamsOperatorConnectNumberConfig
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="TeamsOperatorConnectNumberConfig"/>. </summary>
        /// <param name="usage"> The usage for this telephone number. </param>
        /// <param name="choosableCapabilities"> The choosable capabilities for this telephone number. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="usage"/> or <paramref name="choosableCapabilities"/> is null. </exception>
        public TeamsOperatorConnectNumberConfig(string usage, IEnumerable<string> choosableCapabilities)
        {
            Argument.AssertNotNull(usage, nameof(usage));
            Argument.AssertNotNull(choosableCapabilities, nameof(choosableCapabilities));

            Usage = usage;
            ChoosableCapabilities = choosableCapabilities.ToList();
            AcquiredCapabilities = new ChangeTrackingList<string>();
            AvailableCapabilities = new ChangeTrackingList<string>();
            AdditionalUsages = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="TeamsOperatorConnectNumberConfig"/>. </summary>
        /// <param name="usage"> The usage for this telephone number. </param>
        /// <param name="choosableCapabilities"> The choosable capabilities for this telephone number. </param>
        /// <param name="acquiredCapabilities"> The acquired capabilities for this telephone number. </param>
        /// <param name="availableCapabilities"> The available capabilities for this telephone number. </param>
        /// <param name="additionalUsages"> The additional usages for this telephone number. </param>
        /// <param name="civicAddressId"> The ID of the civic address to be used as the emergency address for this telephone number. </param>
        /// <param name="locationId"> The ID of the location to be used as the emergency address for this telephone number. </param>
        /// <param name="allowTenantAddressUpdate"> If the enterprise is allowed to update the address for this telephone number. </param>
        /// <param name="displayedCountryCode"> The country code to be displayed with this telephone number. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal TeamsOperatorConnectNumberConfig(string usage, IList<string> choosableCapabilities, IReadOnlyList<string> acquiredCapabilities, IReadOnlyList<string> availableCapabilities, IList<string> additionalUsages, string civicAddressId, string locationId, bool? allowTenantAddressUpdate, string displayedCountryCode, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Usage = usage;
            ChoosableCapabilities = choosableCapabilities;
            AcquiredCapabilities = acquiredCapabilities;
            AvailableCapabilities = availableCapabilities;
            AdditionalUsages = additionalUsages;
            CivicAddressId = civicAddressId;
            LocationId = locationId;
            AllowTenantAddressUpdate = allowTenantAddressUpdate;
            DisplayedCountryCode = displayedCountryCode;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="TeamsOperatorConnectNumberConfig"/> for deserialization. </summary>
        internal TeamsOperatorConnectNumberConfig()
        {
        }

        /// <summary> The usage for this telephone number. </summary>
        public string Usage { get; set; }
        /// <summary> The choosable capabilities for this telephone number. </summary>
        public IList<string> ChoosableCapabilities { get; }
        /// <summary> The acquired capabilities for this telephone number. </summary>
        public IReadOnlyList<string> AcquiredCapabilities { get; }
        /// <summary> The available capabilities for this telephone number. </summary>
        public IReadOnlyList<string> AvailableCapabilities { get; }
        /// <summary> The additional usages for this telephone number. </summary>
        public IList<string> AdditionalUsages { get; }
        /// <summary> The ID of the civic address to be used as the emergency address for this telephone number. </summary>
        public string CivicAddressId { get; set; }
        /// <summary> The ID of the location to be used as the emergency address for this telephone number. </summary>
        public string LocationId { get; set; }
        /// <summary> If the enterprise is allowed to update the address for this telephone number. </summary>
        public bool? AllowTenantAddressUpdate { get; set; }
        /// <summary> The country code to be displayed with this telephone number. </summary>
        public string DisplayedCountryCode { get; set; }
    }
}
