// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure;

namespace Microsoft.VoiceServices.Provisioning
{
    /// <summary> Model factory for models. </summary>
    public static partial class MicrosoftVoiceServicesProvisioningModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Provisioning.PagedNumberList"/>. </summary>
        /// <param name="value"> The NumberResource items on this page. </param>
        /// <param name="nextLink"> The link to the next page of items. </param>
        /// <returns> A new <see cref="Provisioning.PagedNumberList"/> instance for mocking. </returns>
        public static PagedNumberList PagedNumberList(IEnumerable<NumberResource> value = null, Uri nextLink = null)
        {
            value ??= new List<NumberResource>();

            return new PagedNumberList(value?.ToList(), nextLink, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Provisioning.NumberResource"/>. </summary>
        /// <param name="serviceProvisioningStatus"> The status of the provisioning action associated with this resource. </param>
        /// <param name="serviceProvisioningErrors"> Any errors pertaining to the provisioning of this resource. </param>
        /// <param name="telephoneNumber"> Telephone number in E.164 format. </param>
        /// <param name="accountName"> Name of the account. Can only contain letters, numbers, underscores and dashes, and is case-sensitive. Can be up to 100 characters in length. </param>
        /// <param name="serviceDetails"> Configuration of the individual backend services for this number. </param>
        /// <param name="configuration"> Configuration for this number. </param>
        /// <returns> A new <see cref="Provisioning.NumberResource"/> instance for mocking. </returns>
        public static NumberResource NumberResource(ServiceProvisioningStatus? serviceProvisioningStatus = null, IEnumerable<ResponseError> serviceProvisioningErrors = null, string telephoneNumber = null, string accountName = null, NumberServiceDetails serviceDetails = null, NumberConfiguration configuration = null)
        {
            serviceProvisioningErrors ??= new List<ResponseError>();

            return new NumberResource(
                serviceProvisioningStatus,
                serviceProvisioningErrors?.ToList(),
                telephoneNumber,
                accountName,
                serviceDetails,
                configuration,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Provisioning.TeamsOperatorConnectNumberConfig"/>. </summary>
        /// <param name="usage"> The usage for this telephone number. </param>
        /// <param name="choosableCapabilities"> The choosable capabilities for this telephone number. </param>
        /// <param name="acquiredCapabilities"> The acquired capabilities for this telephone number. </param>
        /// <param name="availableCapabilities"> The available capabilities for this telephone number. </param>
        /// <param name="additionalUsages"> The additional usages for this telephone number. </param>
        /// <param name="civicAddressId"> The ID of the civic address to be used as the emergency address for this telephone number. </param>
        /// <param name="locationId"> The ID of the location to be used as the emergency address for this telephone number. </param>
        /// <param name="allowTenantAddressUpdate"> If the enterprise is allowed to update the address for this telephone number. </param>
        /// <param name="displayedCountryCode"> The country code to be displayed with this telephone number. </param>
        /// <returns> A new <see cref="Provisioning.TeamsOperatorConnectNumberConfig"/> instance for mocking. </returns>
        public static TeamsOperatorConnectNumberConfig TeamsOperatorConnectNumberConfig(string usage = null, IEnumerable<string> choosableCapabilities = null, IEnumerable<string> acquiredCapabilities = null, IEnumerable<string> availableCapabilities = null, IEnumerable<string> additionalUsages = null, string civicAddressId = null, string locationId = null, bool? allowTenantAddressUpdate = null, string displayedCountryCode = null)
        {
            choosableCapabilities ??= new List<string>();
            acquiredCapabilities ??= new List<string>();
            availableCapabilities ??= new List<string>();
            additionalUsages ??= new List<string>();

            return new TeamsOperatorConnectNumberConfig(
                usage,
                choosableCapabilities?.ToList(),
                acquiredCapabilities?.ToList(),
                availableCapabilities?.ToList(),
                additionalUsages?.ToList(),
                civicAddressId,
                locationId,
                allowTenantAddressUpdate,
                displayedCountryCode,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Provisioning.TeamsPhoneMobileNumberConfig"/>. </summary>
        /// <param name="usage"> The usage for this telephone number. </param>
        /// <param name="choosableCapabilities"> The choosable capabilities for this telephone number. </param>
        /// <param name="acquiredCapabilities"> The acquired capabilities for this telephone number. </param>
        /// <param name="availableCapabilities"> The available capabilities for this telephone number. </param>
        /// <param name="additionalUsages"> The additional usages for this telephone number. </param>
        /// <param name="civicAddressId"> The ID of the civic address to be used as the emergency address for this telephone number. </param>
        /// <param name="locationId"> The ID of the location to be used as the emergency address for this telephone number. </param>
        /// <param name="allowTenantAddressUpdate"> If the enterprise is allowed to update the address for this telephone number. </param>
        /// <param name="displayedCountryCode"> The country code to be displayed with this telephone number. </param>
        /// <returns> A new <see cref="Provisioning.TeamsPhoneMobileNumberConfig"/> instance for mocking. </returns>
        public static TeamsPhoneMobileNumberConfig TeamsPhoneMobileNumberConfig(string usage = null, IEnumerable<string> choosableCapabilities = null, IEnumerable<string> acquiredCapabilities = null, IEnumerable<string> availableCapabilities = null, IEnumerable<string> additionalUsages = null, string civicAddressId = null, string locationId = null, bool? allowTenantAddressUpdate = null, string displayedCountryCode = null)
        {
            choosableCapabilities ??= new List<string>();
            acquiredCapabilities ??= new List<string>();
            availableCapabilities ??= new List<string>();
            additionalUsages ??= new List<string>();

            return new TeamsPhoneMobileNumberConfig(
                usage,
                choosableCapabilities?.ToList(),
                acquiredCapabilities?.ToList(),
                availableCapabilities?.ToList(),
                additionalUsages?.ToList(),
                civicAddressId,
                locationId,
                allowTenantAddressUpdate,
                displayedCountryCode,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Provisioning.RequestForInformationResource"/>. </summary>
        /// <param name="serviceProvisioningStatus"> The status of the provisioning action associated with this resource. </param>
        /// <param name="serviceProvisioningErrors"> Any errors pertaining to the provisioning of this resource. </param>
        /// <param name="id"> The ID of the Request for Information. </param>
        /// <param name="tenantId"> The Teams tenant ID which generated this Request for Information. </param>
        /// <param name="accountName"> The name of the account associated with this Request for Information. </param>
        /// <param name="productContext"> Will always be 'teams'. </param>
        /// <param name="operatorId"> The operator ID of the operator consent. </param>
        /// <param name="status"> The status of the operator consent. </param>
        /// <param name="consentedOn"> The time (ISO8601 format) when the operator consent is created. </param>
        /// <param name="lastModifiedOn"> The time (ISO8601 format) when the operator consent is last modified. </param>
        /// <param name="consentedCountries"> The list of consented countries. </param>
        /// <param name="contacts"> The list of tenant contacts. </param>
        /// <param name="customerRelationship"> The customer relationship of the operator consent. </param>
        /// <returns> A new <see cref="Provisioning.RequestForInformationResource"/> instance for mocking. </returns>
        public static RequestForInformationResource RequestForInformationResource(ServiceProvisioningStatus? serviceProvisioningStatus = null, IEnumerable<ResponseError> serviceProvisioningErrors = null, string id = null, string tenantId = null, string accountName = null, string productContext = null, string operatorId = null, TeamsConsentStatus? status = null, DateTimeOffset? consentedOn = null, DateTimeOffset? lastModifiedOn = null, IEnumerable<string> consentedCountries = null, IEnumerable<ContactDetails> contacts = null, CustomerRelationship customerRelationship = null)
        {
            serviceProvisioningErrors ??= new List<ResponseError>();
            consentedCountries ??= new List<string>();
            contacts ??= new List<ContactDetails>();

            return new RequestForInformationResource(
                serviceProvisioningStatus,
                serviceProvisioningErrors?.ToList(),
                id,
                tenantId,
                accountName,
                productContext,
                operatorId,
                status,
                consentedOn,
                lastModifiedOn,
                consentedCountries?.ToList(),
                contacts?.ToList(),
                customerRelationship,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Provisioning.ContactDetails"/>. </summary>
        /// <param name="fullName"> The full name of the contact detail. </param>
        /// <param name="email"> The email of the contact detail. </param>
        /// <param name="telephoneNumber"> The telephone number of the contact detail. </param>
        /// <param name="companyName"> The company name of the contact detail. </param>
        /// <param name="companySize"> The company size of the contact detail. </param>
        /// <returns> A new <see cref="Provisioning.ContactDetails"/> instance for mocking. </returns>
        public static ContactDetails ContactDetails(string fullName = null, string email = null, string telephoneNumber = null, string companyName = null, string companySize = null)
        {
            return new ContactDetails(
                fullName,
                email,
                telephoneNumber,
                companyName,
                companySize,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Provisioning.CustomerRelationship"/>. </summary>
        /// <param name="status"> The status of the customer relationship. </param>
        /// <param name="lastModifiedOn"> The time (ISO8601 format) when the customer relationship is last modified. </param>
        /// <param name="comment"> The comment of the customer relationship. </param>
        /// <returns> A new <see cref="Provisioning.CustomerRelationship"/> instance for mocking. </returns>
        public static CustomerRelationship CustomerRelationship(string status = null, DateTimeOffset? lastModifiedOn = null, string comment = null)
        {
            return new CustomerRelationship(status, lastModifiedOn, comment, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Provisioning.AccountResource"/>. </summary>
        /// <param name="serviceProvisioningStatus"> The status of the provisioning action associated with this resource. </param>
        /// <param name="serviceProvisioningErrors"> Any errors pertaining to the provisioning of this resource. </param>
        /// <param name="name"> Name of the account. </param>
        /// <param name="correlationId"> A user defined identifier used for correlating with external systems. </param>
        /// <param name="serviceDetails"> The details of the account. </param>
        /// <returns> A new <see cref="Provisioning.AccountResource"/> instance for mocking. </returns>
        public static AccountResource AccountResource(ServiceProvisioningStatus? serviceProvisioningStatus = null, IEnumerable<ResponseError> serviceProvisioningErrors = null, string name = null, string correlationId = null, AccountServiceDetails serviceDetails = null)
        {
            serviceProvisioningErrors ??= new List<ResponseError>();

            return new AccountResource(
                serviceProvisioningStatus,
                serviceProvisioningErrors?.ToList(),
                name,
                correlationId,
                serviceDetails,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Provisioning.TeamsOperatorConnectAccountDetails"/>. </summary>
        /// <param name="syncEnabled"> Boolean indicating if data is being provisioned through the backend service. </param>
        /// <param name="enabled"> Boolean indicating if the service is enabled on this Account. </param>
        /// <param name="numberCount"> The count of telephone numbers associated with this account that have this backend service enabled. </param>
        /// <returns> A new <see cref="Provisioning.TeamsOperatorConnectAccountDetails"/> instance for mocking. </returns>
        public static TeamsOperatorConnectAccountDetails TeamsOperatorConnectAccountDetails(bool syncEnabled = default, bool enabled = default, long? numberCount = null)
        {
            return new TeamsOperatorConnectAccountDetails(syncEnabled, enabled, numberCount, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Provisioning.TeamsDirectRoutingAccountDetails"/>. </summary>
        /// <param name="syncEnabled"> Boolean indicating if data is being provisioned through the backend service. </param>
        /// <param name="enabled"> Boolean indicating if the service is enabled on this Account. </param>
        /// <param name="numberCount"> The count of telephone numbers associated with this account that have this backend service enabled. </param>
        /// <param name="configuration"> The configuration for Teams Direct Routing on this account. </param>
        /// <param name="subdomainStatus"> The provisioning status of the domains. </param>
        /// <returns> A new <see cref="Provisioning.TeamsDirectRoutingAccountDetails"/> instance for mocking. </returns>
        public static TeamsDirectRoutingAccountDetails TeamsDirectRoutingAccountDetails(bool syncEnabled = default, bool enabled = default, long? numberCount = null, TeamsDirectRoutingAccountConfig configuration = null, TeamsDirectRoutingSubdomainProvisioningStatus subdomainStatus = default)
        {
            return new TeamsDirectRoutingAccountDetails(
                syncEnabled,
                enabled,
                numberCount,
                configuration,
                subdomainStatus,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Provisioning.TeamsPhoneMobileAccountDetails"/>. </summary>
        /// <param name="syncEnabled"> Boolean indicating if data is being provisioned through the backend service. </param>
        /// <param name="enabled"> Boolean indicating if the service is enabled on this Account. </param>
        /// <param name="numberCount"> The count of telephone numbers associated with this account that have this backend service enabled. </param>
        /// <returns> A new <see cref="Provisioning.TeamsPhoneMobileAccountDetails"/> instance for mocking. </returns>
        public static TeamsPhoneMobileAccountDetails TeamsPhoneMobileAccountDetails(bool syncEnabled = default, bool enabled = default, long? numberCount = null)
        {
            return new TeamsPhoneMobileAccountDetails(syncEnabled, enabled, numberCount, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Provisioning.ZoomPhoneCloudPeeringAccountDetails"/>. </summary>
        /// <param name="syncEnabled"> Boolean indicating if data is being provisioned through the backend service. </param>
        /// <param name="enabled"> Boolean indicating if the service is enabled on this Account. </param>
        /// <param name="numberCount"> The count of telephone numbers associated with this account that have this backend service enabled. </param>
        /// <returns> A new <see cref="Provisioning.ZoomPhoneCloudPeeringAccountDetails"/> instance for mocking. </returns>
        public static ZoomPhoneCloudPeeringAccountDetails ZoomPhoneCloudPeeringAccountDetails(bool syncEnabled = default, bool enabled = default, long? numberCount = null)
        {
            return new ZoomPhoneCloudPeeringAccountDetails(syncEnabled, enabled, numberCount, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Provisioning.AzureOperatorCallProtectionAccountDetails"/>. </summary>
        /// <param name="enabled"> Boolean indicating if the service is enabled on this Account. </param>
        /// <param name="numberCount"> The count of telephone numbers associated with this account that have this backend service enabled. </param>
        /// <returns> A new <see cref="Provisioning.AzureOperatorCallProtectionAccountDetails"/> instance for mocking. </returns>
        public static AzureOperatorCallProtectionAccountDetails AzureOperatorCallProtectionAccountDetails(bool enabled = default, long? numberCount = null)
        {
            return new AzureOperatorCallProtectionAccountDetails(enabled, numberCount, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Provisioning.TeamsCapabilityPlans"/>. </summary>
        /// <param name="capabilityPlans"> A list of telephone number upload usages. </param>
        /// <returns> A new <see cref="Provisioning.TeamsCapabilityPlans"/> instance for mocking. </returns>
        public static TeamsCapabilityPlans TeamsCapabilityPlans(IEnumerable<TeamsCapabilityPlan> capabilityPlans = null)
        {
            capabilityPlans ??= new List<TeamsCapabilityPlan>();

            return new TeamsCapabilityPlans(capabilityPlans?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Provisioning.TeamsCapabilityPlan"/>. </summary>
        /// <param name="name"> The capability plan name. </param>
        /// <param name="offerTypes"> The offer types available. </param>
        /// <param name="usage"> The telephone number usage. </param>
        /// <param name="mandatoryCapabilities"> Mandatory capabilities for telephone numbers. </param>
        /// <param name="choosableCapabilities"> Choosable capabilities for telephone numbers. </param>
        /// <param name="supportsTollFree"> Boolean indicating if Toll free is supported. </param>
        /// <returns> A new <see cref="Provisioning.TeamsCapabilityPlan"/> instance for mocking. </returns>
        public static TeamsCapabilityPlan TeamsCapabilityPlan(string name = null, IEnumerable<string> offerTypes = null, string usage = null, IEnumerable<string> mandatoryCapabilities = null, IEnumerable<string> choosableCapabilities = null, bool supportsTollFree = default)
        {
            offerTypes ??= new List<string>();
            mandatoryCapabilities ??= new List<string>();
            choosableCapabilities ??= new List<string>();

            return new TeamsCapabilityPlan(
                name,
                offerTypes?.ToList(),
                usage,
                mandatoryCapabilities?.ToList(),
                choosableCapabilities?.ToList(),
                supportsTollFree,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Provisioning.TeamsAvailableCapabilities"/>. </summary>
        /// <param name="availableCapabilities"> The available capabilities for the numbers specified with Operator Connect or Teams Phone Mobile services enabled. </param>
        /// <returns> A new <see cref="Provisioning.TeamsAvailableCapabilities"/> instance for mocking. </returns>
        public static TeamsAvailableCapabilities TeamsAvailableCapabilities(IEnumerable<string> availableCapabilities = null)
        {
            availableCapabilities ??= new List<string>();

            return new TeamsAvailableCapabilities(availableCapabilities?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Provisioning.TeamsCivicAddressResource"/>. </summary>
        /// <param name="id"> The ID of the civic address. </param>
        /// <param name="country"> The country of the civic address. </param>
        /// <param name="houseNumber"> The house number of the civic address. </param>
        /// <param name="houseNumberSuffix"> The house number suffix of the civic address. </param>
        /// <param name="preDirectional"> The pre directional of the civic address. </param>
        /// <param name="streetName"> The street name of the civic address. </param>
        /// <param name="streetSuffix"> The street suffix of the civic address. </param>
        /// <param name="postDirectional"> The post directional of the civic address. </param>
        /// <param name="stateOrProvince"> The state or province of the civic address. </param>
        /// <param name="countyOrDistrict"> The county or district of the civic address. </param>
        /// <param name="cityOrTown"> The city or town of the civic address. </param>
        /// <param name="cityOrTownAlias"> The city or town alias of the civic address. </param>
        /// <param name="postalOrZipCode"> The postal or zip code of the civic address. </param>
        /// <param name="description"> The description of the civic address. </param>
        /// <param name="companyName"> The company name of the civic address. </param>
        /// <param name="companyId"> The company ID of the civic address. </param>
        /// <param name="defaultLocationId"> The default location ID of the civic address. </param>
        /// <param name="validationStatus"> The validation status of the civic address. </param>
        /// <param name="tenantId"> The customer tenant ID of the civic address. </param>
        /// <param name="partnerId"> The partner ID of the civic address. </param>
        /// <param name="locations"> The list of locations associated with the civic address. </param>
        /// <param name="latitude"> The latitude of the civic address. </param>
        /// <param name="longitude"> The longitude of the civic address. </param>
        /// <returns> A new <see cref="Provisioning.TeamsCivicAddressResource"/> instance for mocking. </returns>
        public static TeamsCivicAddressResource TeamsCivicAddressResource(string id = null, string country = null, string houseNumber = null, string houseNumberSuffix = null, string preDirectional = null, string streetName = null, string streetSuffix = null, string postDirectional = null, string stateOrProvince = null, string countyOrDistrict = null, string cityOrTown = null, string cityOrTownAlias = null, string postalOrZipCode = null, string description = null, string companyName = null, string companyId = null, string defaultLocationId = null, ValidationStatus? validationStatus = null, string tenantId = null, string partnerId = null, IEnumerable<Location> locations = null, string latitude = null, string longitude = null)
        {
            locations ??= new List<Location>();

            return new TeamsCivicAddressResource(
                id,
                country,
                houseNumber,
                houseNumberSuffix,
                preDirectional,
                streetName,
                streetSuffix,
                postDirectional,
                stateOrProvince,
                countyOrDistrict,
                cityOrTown,
                cityOrTownAlias,
                postalOrZipCode,
                description,
                companyName,
                companyId,
                defaultLocationId,
                validationStatus,
                tenantId,
                partnerId,
                locations?.ToList(),
                latitude,
                longitude,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Provisioning.Location"/>. </summary>
        /// <param name="id"> The ID of the location. </param>
        /// <param name="civicAddressId"> The civic address ID of the location. </param>
        /// <param name="description"> The description of the location. </param>
        /// <param name="additionalInfo"> The additional information of the location. </param>
        /// <param name="isDefault"> Flag indicating whether the location is default or not. </param>
        /// <param name="elin"> The elin (Emergency Location Identification Number) of the location. </param>
        /// <returns> A new <see cref="Provisioning.Location"/> instance for mocking. </returns>
        public static Location Location(string id = null, string civicAddressId = null, string description = null, string additionalInfo = null, bool? isDefault = null, string elin = null)
        {
            return new Location(
                id,
                civicAddressId,
                description,
                additionalInfo,
                isDefault,
                elin,
                serializedAdditionalRawData: null);
        }
    }
}
