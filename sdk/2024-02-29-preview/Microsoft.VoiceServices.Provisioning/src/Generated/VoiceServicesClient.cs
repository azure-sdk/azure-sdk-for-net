// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Internal;
using System.ClientModel.Primitives;
using System.ClientModel.Primitives.Pipeline;
using System.Threading;
using Autorest.CSharp.Core;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Microsoft.VoiceServices.Provisioning
{
    // Data plane generated client.
    /// <summary> The VoiceServices service client. </summary>
    public partial class VoiceServicesClient
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://func-voiceservice-rp-prod-eastuseuap.azurewebsites.net/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly MessagePipeline _pipeline;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal TelemetrySource ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual MessagePipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of VoiceServicesClient for mocking. </summary>
        protected VoiceServicesClient()
        {
        }

        /// <summary> Initializes a new instance of VoiceServicesClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="credential"/> is null. </exception>
        public VoiceServicesClient(TokenCredential credential) : this(credential, new VoiceServicesClientOptions())
        {
        }

        /// <summary> Initializes a new instance of VoiceServicesClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="credential"/> is null. </exception>
        public VoiceServicesClient(TokenCredential credential, VoiceServicesClientOptions options)
        {
            Argument.AssertNotNull(credential, nameof(credential));
            options ??= new VoiceServicesClientOptions();

            ClientDiagnostics = new TelemetrySource(options, true);
            _tokenCredential = credential;
            _pipeline = MessagePipeline.Create(options, new IPipelinePolicy<PipelineMessage>[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) }, Array.Empty<IPipelinePolicy<PipelineMessage>>());
            _apiVersion = options.Version;
        }

        /// <summary> List all the Numbers associated with this Communications Gateway. </summary>
        /// <param name="maxCount"> The number of result items to return. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="filter"> Filter the result list using the given expression. </param>
        /// <param name="countRecords"> Whether to return a count of the total number of records available for this request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<NumberResource> GetNumbersAsync(int? maxCount = null, int? skip = null, int? maxpagesize = null, string filter = null, bool? countRecords = null, CancellationToken cancellationToken = default)
        {
            RequestOptions context = cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null;
            PipelineMessage FirstPageRequest(int? pageSizeHint) => CreateGetNumbersRequest(maxCount, skip, maxpagesize, filter, countRecords, context);
            PipelineMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetNumbersNextPageRequest(nextLink, maxCount, skip, maxpagesize, filter, countRecords, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => NumberResource.DeserializeNumberResource(e), ClientDiagnostics, _pipeline, "VoiceServicesClient.GetNumbers", "value", "nextLink", context);
        }

        /// <summary> List all the Numbers associated with this Communications Gateway. </summary>
        /// <param name="maxCount"> The number of result items to return. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="filter"> Filter the result list using the given expression. </param>
        /// <param name="countRecords"> Whether to return a count of the total number of records available for this request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<NumberResource> GetNumbers(int? maxCount = null, int? skip = null, int? maxpagesize = null, string filter = null, bool? countRecords = null, CancellationToken cancellationToken = default)
        {
            RequestOptions context = cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null;
            PipelineMessage FirstPageRequest(int? pageSizeHint) => CreateGetNumbersRequest(maxCount, skip, maxpagesize, filter, countRecords, context);
            PipelineMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetNumbersNextPageRequest(nextLink, maxCount, skip, maxpagesize, filter, countRecords, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => NumberResource.DeserializeNumberResource(e), ClientDiagnostics, _pipeline, "VoiceServicesClient.GetNumbers", "value", "nextLink", context);
        }

        /// <summary>
        /// [Protocol Method] List all the Numbers associated with this Communications Gateway.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetNumbersAsync(int?,int?,int?,string,bool?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="maxCount"> The number of result items to return. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="filter"> Filter the result list using the given expression. </param>
        /// <param name="countRecords"> Whether to return a count of the total number of records available for this request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        public virtual AsyncPageable<BinaryData> GetNumbersAsync(int? maxCount, int? skip, int? maxpagesize, string filter, bool? countRecords, RequestOptions context)
        {
            PipelineMessage FirstPageRequest(int? pageSizeHint) => CreateGetNumbersRequest(maxCount, skip, maxpagesize, filter, countRecords, context);
            PipelineMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetNumbersNextPageRequest(nextLink, maxCount, skip, maxpagesize, filter, countRecords, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "VoiceServicesClient.GetNumbers", "value", "nextLink", context);
        }

        /// <summary>
        /// [Protocol Method] List all the Numbers associated with this Communications Gateway.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetNumbers(int?,int?,int?,string,bool?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="maxCount"> The number of result items to return. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="filter"> Filter the result list using the given expression. </param>
        /// <param name="countRecords"> Whether to return a count of the total number of records available for this request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        public virtual Pageable<BinaryData> GetNumbers(int? maxCount, int? skip, int? maxpagesize, string filter, bool? countRecords, RequestOptions context)
        {
            PipelineMessage FirstPageRequest(int? pageSizeHint) => CreateGetNumbersRequest(maxCount, skip, maxpagesize, filter, countRecords, context);
            PipelineMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetNumbersNextPageRequest(nextLink, maxCount, skip, maxpagesize, filter, countRecords, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "VoiceServicesClient.GetNumbers", "value", "nextLink", context);
        }

        private Accounts _cachedAccounts;
        private TeamsRequestsForInformation _cachedTeamsRequestsForInformation;

        /// <summary> Initializes a new instance of Accounts. </summary>
        public virtual Accounts GetAccountsClient()
        {
            return Volatile.Read(ref _cachedAccounts) ?? Interlocked.CompareExchange(ref _cachedAccounts, new Accounts(ClientDiagnostics, _pipeline, _tokenCredential, _apiVersion), null) ?? _cachedAccounts;
        }

        /// <summary> Initializes a new instance of TeamsRequestsForInformation. </summary>
        public virtual TeamsRequestsForInformation GetTeamsRequestsForInformationClient()
        {
            return Volatile.Read(ref _cachedTeamsRequestsForInformation) ?? Interlocked.CompareExchange(ref _cachedTeamsRequestsForInformation, new TeamsRequestsForInformation(ClientDiagnostics, _pipeline, _tokenCredential, _apiVersion), null) ?? _cachedTeamsRequestsForInformation;
        }

        internal PipelineMessage CreateGetNumbersRequest(int? maxCount, int? skip, int? maxpagesize, string filter, bool? countRecords, RequestOptions context)
        {
            var message = _pipeline.CreateMessage(context, ResponseErrorClassifier200);
            var request = message.Request;
            request.SetMethod("GET");
            var uri = new RequestUri();
            uri.AppendPath("/numbers", false);
            if (maxCount != null)
            {
                uri.AppendQuery("top", maxCount.Value, true);
            }
            if (skip != null)
            {
                uri.AppendQuery("skip", skip.Value, true);
            }
            if (maxpagesize != null)
            {
                uri.AppendQuery("maxpagesize", maxpagesize.Value, true);
            }
            if (filter != null)
            {
                uri.AppendQuery("filter", filter, true);
            }
            if (countRecords != null)
            {
                uri.AppendQuery("countRecords", countRecords.Value, true);
            }
            request.Uri = uri.ToUri();
            request.SetHeaderValue("Accept", "application/json");
            return message;
        }

        internal PipelineMessage CreateGetNumbersNextPageRequest(string nextLink, int? maxCount, int? skip, int? maxpagesize, string filter, bool? countRecords, RequestOptions context)
        {
            var message = _pipeline.CreateMessage(context, ResponseErrorClassifier200);
            var request = message.Request;
            request.SetMethod("GET");
            var uri = new RequestUri();
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri.ToUri();
            request.SetHeaderValue("Accept", "application/json");
            return message;
        }

        private static RequestOptions DefaultRequestContext = new RequestOptions();
        internal static RequestOptions FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestOptions() { CancellationToken = cancellationToken };
        }

        private static ResponseErrorClassifier _responseErrorClassifier200;
        private static ResponseErrorClassifier ResponseErrorClassifier200 => _responseErrorClassifier200 ??= new StatusResponseClassifier(stackalloc ushort[] { 200 });
    }
}
