// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Microsoft.VoiceServices.Provisioning
{
    /// <summary> A civic address available for Teams Operator Connect or Teams Phone Mobile users. </summary>
    public partial class TeamsCivicAddressResource
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="TeamsCivicAddressResource"/>. </summary>
        internal TeamsCivicAddressResource()
        {
            Locations = new ChangeTrackingList<Location>();
        }

        /// <summary> Initializes a new instance of <see cref="TeamsCivicAddressResource"/>. </summary>
        /// <param name="id"> The ID of the civic address. </param>
        /// <param name="country"> The country of the civic address. </param>
        /// <param name="houseNumber"> The house number of the civic address. </param>
        /// <param name="houseNumberSuffix"> The house number suffix of the civic address. </param>
        /// <param name="preDirectional"> The pre directional of the civic address. </param>
        /// <param name="streetName"> The street name of the civic address. </param>
        /// <param name="streetSuffix"> The street suffix of the civic address. </param>
        /// <param name="postDirectional"> The post directional of the civic address. </param>
        /// <param name="stateOrProvince"> The state or province of the civic address. </param>
        /// <param name="countyOrDistrict"> The county or district of the civic address. </param>
        /// <param name="cityOrTown"> The city or town of the civic address. </param>
        /// <param name="cityOrTownAlias"> The city or town alias of the civic address. </param>
        /// <param name="postalOrZipCode"> The postal or zip code of the civic address. </param>
        /// <param name="description"> The description of the civic address. </param>
        /// <param name="companyName"> The company name of the civic address. </param>
        /// <param name="companyId"> The company ID of the civic address. </param>
        /// <param name="defaultLocationId"> The default location ID of the civic address. </param>
        /// <param name="validationStatus"> The validation status of the civic address. </param>
        /// <param name="tenantId"> The customer tenant ID of the civic address. </param>
        /// <param name="partnerId"> The partner ID of the civic address. </param>
        /// <param name="locations"> The list of locations associated with the civic address. </param>
        /// <param name="latitude"> The latitude of the civic address. </param>
        /// <param name="longitude"> The longitude of the civic address. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal TeamsCivicAddressResource(string id, string country, string houseNumber, string houseNumberSuffix, string preDirectional, string streetName, string streetSuffix, string postDirectional, string stateOrProvince, string countyOrDistrict, string cityOrTown, string cityOrTownAlias, string postalOrZipCode, string description, string companyName, string companyId, string defaultLocationId, ValidationStatus? validationStatus, string tenantId, string partnerId, IReadOnlyList<Location> locations, string latitude, string longitude, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Id = id;
            Country = country;
            HouseNumber = houseNumber;
            HouseNumberSuffix = houseNumberSuffix;
            PreDirectional = preDirectional;
            StreetName = streetName;
            StreetSuffix = streetSuffix;
            PostDirectional = postDirectional;
            StateOrProvince = stateOrProvince;
            CountyOrDistrict = countyOrDistrict;
            CityOrTown = cityOrTown;
            CityOrTownAlias = cityOrTownAlias;
            PostalOrZipCode = postalOrZipCode;
            Description = description;
            CompanyName = companyName;
            CompanyId = companyId;
            DefaultLocationId = defaultLocationId;
            ValidationStatus = validationStatus;
            TenantId = tenantId;
            PartnerId = partnerId;
            Locations = locations;
            Latitude = latitude;
            Longitude = longitude;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The ID of the civic address. </summary>
        public string Id { get; }
        /// <summary> The country of the civic address. </summary>
        public string Country { get; }
        /// <summary> The house number of the civic address. </summary>
        public string HouseNumber { get; }
        /// <summary> The house number suffix of the civic address. </summary>
        public string HouseNumberSuffix { get; }
        /// <summary> The pre directional of the civic address. </summary>
        public string PreDirectional { get; }
        /// <summary> The street name of the civic address. </summary>
        public string StreetName { get; }
        /// <summary> The street suffix of the civic address. </summary>
        public string StreetSuffix { get; }
        /// <summary> The post directional of the civic address. </summary>
        public string PostDirectional { get; }
        /// <summary> The state or province of the civic address. </summary>
        public string StateOrProvince { get; }
        /// <summary> The county or district of the civic address. </summary>
        public string CountyOrDistrict { get; }
        /// <summary> The city or town of the civic address. </summary>
        public string CityOrTown { get; }
        /// <summary> The city or town alias of the civic address. </summary>
        public string CityOrTownAlias { get; }
        /// <summary> The postal or zip code of the civic address. </summary>
        public string PostalOrZipCode { get; }
        /// <summary> The description of the civic address. </summary>
        public string Description { get; }
        /// <summary> The company name of the civic address. </summary>
        public string CompanyName { get; }
        /// <summary> The company ID of the civic address. </summary>
        public string CompanyId { get; }
        /// <summary> The default location ID of the civic address. </summary>
        public string DefaultLocationId { get; }
        /// <summary> The validation status of the civic address. </summary>
        public ValidationStatus? ValidationStatus { get; }
        /// <summary> The customer tenant ID of the civic address. </summary>
        public string TenantId { get; }
        /// <summary> The partner ID of the civic address. </summary>
        public string PartnerId { get; }
        /// <summary> The list of locations associated with the civic address. </summary>
        public IReadOnlyList<Location> Locations { get; }
        /// <summary> The latitude of the civic address. </summary>
        public string Latitude { get; }
        /// <summary> The longitude of the civic address. </summary>
        public string Longitude { get; }
    }
}
