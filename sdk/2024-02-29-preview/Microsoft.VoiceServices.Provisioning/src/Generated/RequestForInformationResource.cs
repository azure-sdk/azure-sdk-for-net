// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure;

namespace Microsoft.VoiceServices.Provisioning
{
    /// <summary> The configuration for a telephone number provisioned in ACG. </summary>
    public partial class RequestForInformationResource
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="RequestForInformationResource"/>. </summary>
        public RequestForInformationResource()
        {
            ServiceProvisioningErrors = new ChangeTrackingList<ResponseError>();
            ConsentedCountries = new ChangeTrackingList<string>();
            Contacts = new ChangeTrackingList<ContactDetails>();
        }

        /// <summary> Initializes a new instance of <see cref="RequestForInformationResource"/>. </summary>
        /// <param name="serviceProvisioningStatus"> The status of the provisioning action associated with this resource. </param>
        /// <param name="serviceProvisioningErrors"> Any errors pertaining to the provisioning of this resource. </param>
        /// <param name="id"> The ID of the Request for Information. </param>
        /// <param name="tenantId"> The Teams tenant ID which generated this Request for Information. </param>
        /// <param name="accountName"> The name of the account associated with this Request for Information. </param>
        /// <param name="productContext"> Will always be 'teams'. </param>
        /// <param name="operatorId"> The operator ID of the operator consent. </param>
        /// <param name="status"> The status of the operator consent. </param>
        /// <param name="consentedOn"> The time (ISO8601 format) when the operator consent is created. </param>
        /// <param name="lastModifiedOn"> The time (ISO8601 format) when the operator consent is last modified. </param>
        /// <param name="consentedCountries"> The list of consented countries. </param>
        /// <param name="contacts"> The list of tenant contacts. </param>
        /// <param name="customerRelationship"> The customer relationship of the operator consent. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal RequestForInformationResource(ServiceProvisioningStatus? serviceProvisioningStatus, IReadOnlyList<ResponseError> serviceProvisioningErrors, string id, string tenantId, string accountName, string productContext, string operatorId, TeamsConsentStatus? status, DateTimeOffset? consentedOn, DateTimeOffset? lastModifiedOn, IReadOnlyList<string> consentedCountries, IReadOnlyList<ContactDetails> contacts, CustomerRelationship customerRelationship, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ServiceProvisioningStatus = serviceProvisioningStatus;
            ServiceProvisioningErrors = serviceProvisioningErrors;
            Id = id;
            TenantId = tenantId;
            AccountName = accountName;
            ProductContext = productContext;
            OperatorId = operatorId;
            Status = status;
            ConsentedOn = consentedOn;
            LastModifiedOn = lastModifiedOn;
            ConsentedCountries = consentedCountries;
            Contacts = contacts;
            CustomerRelationship = customerRelationship;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The status of the provisioning action associated with this resource. </summary>
        public ServiceProvisioningStatus? ServiceProvisioningStatus { get; }
        /// <summary> Any errors pertaining to the provisioning of this resource. </summary>
        public IReadOnlyList<ResponseError> ServiceProvisioningErrors { get; }
        /// <summary> The ID of the Request for Information. </summary>
        public string Id { get; }
        /// <summary> The Teams tenant ID which generated this Request for Information. </summary>
        public string TenantId { get; }
        /// <summary> The name of the account associated with this Request for Information. </summary>
        public string AccountName { get; }
        /// <summary> Will always be 'teams'. </summary>
        public string ProductContext { get; }
        /// <summary> The operator ID of the operator consent. </summary>
        public string OperatorId { get; }
        /// <summary> The status of the operator consent. </summary>
        public TeamsConsentStatus? Status { get; }
        /// <summary> The time (ISO8601 format) when the operator consent is created. </summary>
        public DateTimeOffset? ConsentedOn { get; }
        /// <summary> The time (ISO8601 format) when the operator consent is last modified. </summary>
        public DateTimeOffset? LastModifiedOn { get; }
        /// <summary> The list of consented countries. </summary>
        public IReadOnlyList<string> ConsentedCountries { get; }
        /// <summary> The list of tenant contacts. </summary>
        public IReadOnlyList<ContactDetails> Contacts { get; }
        /// <summary> The customer relationship of the operator consent. </summary>
        public CustomerRelationship CustomerRelationship { get; set; }
    }
}
