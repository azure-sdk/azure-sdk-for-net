// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Compute.Batch
{
    /// <summary> The paths which will be mounted to container task's container. </summary>
    public readonly partial struct ContainerHostDataPath : IEquatable<ContainerHostDataPath>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ContainerHostDataPath"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ContainerHostDataPath(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string RegionalValue = "regional";
        private const string ZonalValue = "zonal";

        /// <summary> All nodes in the pool will be allocated in the same region. </summary>
        public static ContainerHostDataPath Regional { get; } = new ContainerHostDataPath(RegionalValue);
        /// <summary> Nodes in the pool will be spread across different availability zones with best effort balancing. </summary>
        public static ContainerHostDataPath Zonal { get; } = new ContainerHostDataPath(ZonalValue);
        /// <summary> Determines if two <see cref="ContainerHostDataPath"/> values are the same. </summary>
        public static bool operator ==(ContainerHostDataPath left, ContainerHostDataPath right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ContainerHostDataPath"/> values are not the same. </summary>
        public static bool operator !=(ContainerHostDataPath left, ContainerHostDataPath right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ContainerHostDataPath"/>. </summary>
        public static implicit operator ContainerHostDataPath(string value) => new ContainerHostDataPath(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ContainerHostDataPath other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ContainerHostDataPath other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
