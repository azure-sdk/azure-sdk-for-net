// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Confluent.Models
{
    public partial class ClusterSpecEntity
    {
        internal static ClusterSpecEntity DeserializeClusterSpecEntity(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> displayName = default;
            Optional<string> availability = default;
            Optional<string> cloud = default;
            Optional<string> zone = default;
            Optional<string> region = default;
            Optional<string> kafkaBootstrapEndpoint = default;
            Optional<string> httpEndpoint = default;
            Optional<string> apiEndpoint = default;
            Optional<ClusterConfigEntity> config = default;
            Optional<ClusterEnvironmentEntity> environment = default;
            Optional<ClusterNetworkEntity> network = default;
            Optional<ClusterByokEntity> byok = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("display_name"u8))
                {
                    displayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("availability"u8))
                {
                    availability = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("cloud"u8))
                {
                    cloud = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("zone"u8))
                {
                    zone = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("region"u8))
                {
                    region = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("kafka_bootstrap_endpoint"u8))
                {
                    kafkaBootstrapEndpoint = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("http_endpoint"u8))
                {
                    httpEndpoint = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("api_endpoint"u8))
                {
                    apiEndpoint = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("config"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    config = ClusterConfigEntity.DeserializeClusterConfigEntity(property.Value);
                    continue;
                }
                if (property.NameEquals("environment"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    environment = ClusterEnvironmentEntity.DeserializeClusterEnvironmentEntity(property.Value);
                    continue;
                }
                if (property.NameEquals("network"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    network = ClusterNetworkEntity.DeserializeClusterNetworkEntity(property.Value);
                    continue;
                }
                if (property.NameEquals("byok"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    byok = ClusterByokEntity.DeserializeClusterByokEntity(property.Value);
                    continue;
                }
            }
            return new ClusterSpecEntity(displayName.Value, availability.Value, cloud.Value, zone.Value, region.Value, kafkaBootstrapEndpoint.Value, httpEndpoint.Value, apiEndpoint.Value, config.Value, environment.Value, network.Value, byok.Value);
        }
    }
}
