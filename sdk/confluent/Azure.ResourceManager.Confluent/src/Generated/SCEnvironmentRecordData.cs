// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.ResourceManager.Confluent.Models;

namespace Azure.ResourceManager.Confluent
{
    /// <summary>
    /// A class representing the SCEnvironmentRecord data model.
    /// Details about environment name, metadata and environment id of an environment
    /// </summary>
    public partial class SCEnvironmentRecordData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="SCEnvironmentRecordData"/>. </summary>
        public SCEnvironmentRecordData()
        {
        }

        /// <summary> Initializes a new instance of <see cref="SCEnvironmentRecordData"/>. </summary>
        /// <param name="kind"> Type of environment. </param>
        /// <param name="id"> Id of the environment. </param>
        /// <param name="resourceType"> Type of the resource. </param>
        /// <param name="name"> Display name of the environment. </param>
        /// <param name="streamGovernanceConfig"> Stream governance configuration. </param>
        /// <param name="metadata"> Metadata of the record. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal SCEnvironmentRecordData(string kind, string id, string resourceType, string name, StreamGovernanceConfig streamGovernanceConfig, SCMetadataEntity metadata, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Kind = kind;
            Id = id;
            ResourceType = resourceType;
            Name = name;
            StreamGovernanceConfig = streamGovernanceConfig;
            Metadata = metadata;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Type of environment. </summary>
        public string Kind { get; set; }
        /// <summary> Id of the environment. </summary>
        public string Id { get; set; }
        /// <summary> Type of the resource. </summary>
        public string ResourceType { get; set; }
        /// <summary> Display name of the environment. </summary>
        public string Name { get; set; }
        /// <summary> Stream governance configuration. </summary>
        internal StreamGovernanceConfig StreamGovernanceConfig { get; set; }
        /// <summary> Stream governance configuration. </summary>
        public Package? StreamGovernanceConfigPackage
        {
            get => StreamGovernanceConfig is null ? default : StreamGovernanceConfig.Package;
            set
            {
                if (StreamGovernanceConfig is null)
                    StreamGovernanceConfig = new StreamGovernanceConfig();
                StreamGovernanceConfig.Package = value;
            }
        }

        /// <summary> Metadata of the record. </summary>
        public SCMetadataEntity Metadata { get; set; }
    }
}
