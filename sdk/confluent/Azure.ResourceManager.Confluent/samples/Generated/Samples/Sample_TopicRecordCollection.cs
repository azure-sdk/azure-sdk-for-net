// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Confluent.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.Confluent.Samples
{
    public partial class Sample_TopicRecordCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_TopicsCreate()
        {
            // Generated from example definition: specification/confluent/resource-manager/Microsoft.Confluent/stable/2024-07-01/examples/Topics_Create.json
            // this example is just showing the usage of "Topics_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SCClusterRecordResource created on azure
            // for more information of creating SCClusterRecordResource, please refer to the document of SCClusterRecordResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string organizationName = "myOrganization";
            string environmentId = "env-12132";
            string clusterId = "dlz-f3a90de";
            ResourceIdentifier scClusterRecordResourceId = SCClusterRecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, organizationName, environmentId, clusterId);
            SCClusterRecordResource scClusterRecord = client.GetSCClusterRecordResource(scClusterRecordResourceId);

            // get the collection of this TopicRecordResource
            TopicRecordCollection collection = scClusterRecord.GetTopicRecords();

            // invoke the operation
            string topicName = "topic-1";
            TopicRecordData data = new TopicRecordData
            {
                InputConfigs = {new TopicsInputConfig
{
Name = "cleanup.policy",
Value = "compact",
}, new TopicsInputConfig
{
Name = "retention.ms",
Value = "86400000",
}},
                PartitionsCount = "1",
                ReplicationFactor = "3",
            };
            ArmOperation<TopicRecordResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, topicName, data);
            TopicRecordResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            TopicRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_TopicsGet()
        {
            // Generated from example definition: specification/confluent/resource-manager/Microsoft.Confluent/stable/2024-07-01/examples/Topics_Get.json
            // this example is just showing the usage of "Topics_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SCClusterRecordResource created on azure
            // for more information of creating SCClusterRecordResource, please refer to the document of SCClusterRecordResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string organizationName = "myOrganization";
            string environmentId = "env-12132";
            string clusterId = "dlz-f3a90de";
            ResourceIdentifier scClusterRecordResourceId = SCClusterRecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, organizationName, environmentId, clusterId);
            SCClusterRecordResource scClusterRecord = client.GetSCClusterRecordResource(scClusterRecordResourceId);

            // get the collection of this TopicRecordResource
            TopicRecordCollection collection = scClusterRecord.GetTopicRecords();

            // invoke the operation
            string topicName = "topic-1";
            TopicRecordResource result = await collection.GetAsync(topicName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            TopicRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_OrganizationListTopics()
        {
            // Generated from example definition: specification/confluent/resource-manager/Microsoft.Confluent/stable/2024-07-01/examples/Organization_TopicList.json
            // this example is just showing the usage of "Topics_List" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SCClusterRecordResource created on azure
            // for more information of creating SCClusterRecordResource, please refer to the document of SCClusterRecordResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string organizationName = "myOrganization";
            string environmentId = "env-12132";
            string clusterId = "dlz-f3a90de";
            ResourceIdentifier scClusterRecordResourceId = SCClusterRecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, organizationName, environmentId, clusterId);
            SCClusterRecordResource scClusterRecord = client.GetSCClusterRecordResource(scClusterRecordResourceId);

            // get the collection of this TopicRecordResource
            TopicRecordCollection collection = scClusterRecord.GetTopicRecords();

            // invoke the operation and iterate over the result
            int? pageSize = 10;
            await foreach (TopicRecordResource item in collection.GetAllAsync(pageSize: pageSize))
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                TopicRecordData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_TopicsGet()
        {
            // Generated from example definition: specification/confluent/resource-manager/Microsoft.Confluent/stable/2024-07-01/examples/Topics_Get.json
            // this example is just showing the usage of "Topics_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SCClusterRecordResource created on azure
            // for more information of creating SCClusterRecordResource, please refer to the document of SCClusterRecordResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string organizationName = "myOrganization";
            string environmentId = "env-12132";
            string clusterId = "dlz-f3a90de";
            ResourceIdentifier scClusterRecordResourceId = SCClusterRecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, organizationName, environmentId, clusterId);
            SCClusterRecordResource scClusterRecord = client.GetSCClusterRecordResource(scClusterRecordResourceId);

            // get the collection of this TopicRecordResource
            TopicRecordCollection collection = scClusterRecord.GetTopicRecords();

            // invoke the operation
            string topicName = "topic-1";
            bool result = await collection.ExistsAsync(topicName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_TopicsGet()
        {
            // Generated from example definition: specification/confluent/resource-manager/Microsoft.Confluent/stable/2024-07-01/examples/Topics_Get.json
            // this example is just showing the usage of "Topics_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SCClusterRecordResource created on azure
            // for more information of creating SCClusterRecordResource, please refer to the document of SCClusterRecordResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string organizationName = "myOrganization";
            string environmentId = "env-12132";
            string clusterId = "dlz-f3a90de";
            ResourceIdentifier scClusterRecordResourceId = SCClusterRecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, organizationName, environmentId, clusterId);
            SCClusterRecordResource scClusterRecord = client.GetSCClusterRecordResource(scClusterRecordResourceId);

            // get the collection of this TopicRecordResource
            TopicRecordCollection collection = scClusterRecord.GetTopicRecords();

            // invoke the operation
            string topicName = "topic-1";
            NullableResponse<TopicRecordResource> response = await collection.GetIfExistsAsync(topicName);
            TopicRecordResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                TopicRecordData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
