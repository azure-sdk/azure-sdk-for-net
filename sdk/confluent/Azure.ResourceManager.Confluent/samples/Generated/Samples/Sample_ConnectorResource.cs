// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Confluent.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.Confluent.Samples
{
    public partial class Sample_ConnectorResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_ConnectorGet()
        {
            // Generated from example definition: specification/confluent/resource-manager/Microsoft.Confluent/stable/2024-07-01/examples/Organization_GetConnectorByName.json
            // this example is just showing the usage of "Connector_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ConnectorResource created on azure
            // for more information of creating ConnectorResource, please refer to the document of ConnectorResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string organizationName = "myOrganization";
            string environmentId = "env-12132";
            string clusterId = "dlz-f3a90de";
            string connectorName = "connector-1";
            ResourceIdentifier connectorResourceId = ConnectorResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, organizationName, environmentId, clusterId, connectorName);
            ConnectorResource connectorResource = client.GetConnectorResource(connectorResourceId);

            // invoke the operation
            ConnectorResource result = await connectorResource.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ConnectorResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_ConnectorDelete()
        {
            // Generated from example definition: specification/confluent/resource-manager/Microsoft.Confluent/stable/2024-07-01/examples/Organization_DeleteConnectorByName.json
            // this example is just showing the usage of "Connector_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ConnectorResource created on azure
            // for more information of creating ConnectorResource, please refer to the document of ConnectorResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string organizationName = "myOrganization";
            string environmentId = "env-12132";
            string clusterId = "dlz-f3a90de";
            string connectorName = "connector-1";
            ResourceIdentifier connectorResourceId = ConnectorResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, organizationName, environmentId, clusterId, connectorName);
            ConnectorResource connectorResource = client.GetConnectorResource(connectorResourceId);

            // invoke the operation
            await connectorResource.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_ConnectorCreateOrUpdate()
        {
            // Generated from example definition: specification/confluent/resource-manager/Microsoft.Confluent/stable/2024-07-01/examples/Organization_CreateConnectorByName.json
            // this example is just showing the usage of "Connector_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ConnectorResource created on azure
            // for more information of creating ConnectorResource, please refer to the document of ConnectorResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string organizationName = "myOrganization";
            string environmentId = "env-12132";
            string clusterId = "dlz-f3a90de";
            string connectorName = "connector-1";
            ResourceIdentifier connectorResourceId = ConnectorResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, organizationName, environmentId, clusterId, connectorName);
            ConnectorResource connectorResource = client.GetConnectorResource(connectorResourceId);

            // invoke the operation
            ConnectorResourceData data = new ConnectorResourceData
            {
                ConnectorBasicInfo = new ConnectorInfoBase
                {
                    ConnectorType = ConnectorType.Sink,
                    ConnectorClass = new ConnectorClass("AZUREBLOBSTORAGESINK"),
                    ConnectorName = "connector-1",
                },
                ConnectorServiceTypeInfo = new AzureBlobStorageSinkConnectorServiceInfo
                {
                    StorageAccountName = "stcfaccount-1",
                    StorageAccountKey = "*******",
                    StorageContainerName = "continer-1",
                },
                PartnerConnectorInfo = new KafkaAzureBlobStorageSinkConnectorInfo
                {
                    AuthType = AuthType.KafkaApiKEY,
                    InputFormat = DataFormatType.Json,
                    OutputFormat = DataFormatType.Json,
                    ApiKey = "xxxxxxx",
                    ApiSecret = "*******",
                    Topics = { "topic-1" },
                    TopicsDir = "topicsDir",
                    FlushSize = "1000",
                    MaxTasks = "2",
                    TimeInterval = "DAILY",
                },
            };
            ArmOperation<ConnectorResource> lro = await connectorResource.UpdateAsync(WaitUntil.Completed, data);
            ConnectorResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ConnectorResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
