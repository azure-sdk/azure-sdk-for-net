// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Confluent.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.Confluent.Samples
{
    public partial class Sample_SCClusterRecordCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_ClusterCreateOrUpdate()
        {
            // Generated from example definition: specification/confluent/resource-manager/Microsoft.Confluent/stable/2024-07-01/examples/Cluster_Create.json
            // this example is just showing the usage of "Cluster_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SCEnvironmentRecordResource created on azure
            // for more information of creating SCEnvironmentRecordResource, please refer to the document of SCEnvironmentRecordResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string organizationName = "myOrganization";
            string environmentId = "env-1";
            ResourceIdentifier scEnvironmentRecordResourceId = SCEnvironmentRecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, organizationName, environmentId);
            SCEnvironmentRecordResource scEnvironmentRecord = client.GetSCEnvironmentRecordResource(scEnvironmentRecordResourceId);

            // get the collection of this SCClusterRecordResource
            SCClusterRecordCollection collection = scEnvironmentRecord.GetSCClusterRecords();

            // invoke the operation
            string clusterId = "cluster-1";
            SCClusterRecordData data = new SCClusterRecordData
            {
                Spec = new SCClusterSpecEntity
                {
                    Package = Package.Essentials,
                    Region = "us-east4",
                    Environment = new SCClusterNetworkEnvironmentEntity
                    {
                        Id = "env-1",
                    },
                },
            };
            ArmOperation<SCClusterRecordResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, clusterId, data);
            SCClusterRecordResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SCClusterRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_OrganizationGetClusterById()
        {
            // Generated from example definition: specification/confluent/resource-manager/Microsoft.Confluent/stable/2024-07-01/examples/Organization_GetClusterById.json
            // this example is just showing the usage of "Organization_GetClusterById" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SCEnvironmentRecordResource created on azure
            // for more information of creating SCEnvironmentRecordResource, please refer to the document of SCEnvironmentRecordResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string organizationName = "myOrganization";
            string environmentId = "env-12132";
            ResourceIdentifier scEnvironmentRecordResourceId = SCEnvironmentRecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, organizationName, environmentId);
            SCEnvironmentRecordResource scEnvironmentRecord = client.GetSCEnvironmentRecordResource(scEnvironmentRecordResourceId);

            // get the collection of this SCClusterRecordResource
            SCClusterRecordCollection collection = scEnvironmentRecord.GetSCClusterRecords();

            // invoke the operation
            string clusterId = "dlz-f3a90de";
            SCClusterRecordResource result = await collection.GetAsync(clusterId);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SCClusterRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_OrganizationListClusters()
        {
            // Generated from example definition: specification/confluent/resource-manager/Microsoft.Confluent/stable/2024-07-01/examples/Organization_ClusterList.json
            // this example is just showing the usage of "Organization_ListClusters" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SCEnvironmentRecordResource created on azure
            // for more information of creating SCEnvironmentRecordResource, please refer to the document of SCEnvironmentRecordResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string organizationName = "myOrganization";
            string environmentId = "env-12132";
            ResourceIdentifier scEnvironmentRecordResourceId = SCEnvironmentRecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, organizationName, environmentId);
            SCEnvironmentRecordResource scEnvironmentRecord = client.GetSCEnvironmentRecordResource(scEnvironmentRecordResourceId);

            // get the collection of this SCClusterRecordResource
            SCClusterRecordCollection collection = scEnvironmentRecord.GetSCClusterRecords();

            // invoke the operation and iterate over the result
            int? pageSize = 10;
            await foreach (SCClusterRecordResource item in collection.GetAllAsync(pageSize: pageSize))
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                SCClusterRecordData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_OrganizationGetClusterById()
        {
            // Generated from example definition: specification/confluent/resource-manager/Microsoft.Confluent/stable/2024-07-01/examples/Organization_GetClusterById.json
            // this example is just showing the usage of "Organization_GetClusterById" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SCEnvironmentRecordResource created on azure
            // for more information of creating SCEnvironmentRecordResource, please refer to the document of SCEnvironmentRecordResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string organizationName = "myOrganization";
            string environmentId = "env-12132";
            ResourceIdentifier scEnvironmentRecordResourceId = SCEnvironmentRecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, organizationName, environmentId);
            SCEnvironmentRecordResource scEnvironmentRecord = client.GetSCEnvironmentRecordResource(scEnvironmentRecordResourceId);

            // get the collection of this SCClusterRecordResource
            SCClusterRecordCollection collection = scEnvironmentRecord.GetSCClusterRecords();

            // invoke the operation
            string clusterId = "dlz-f3a90de";
            bool result = await collection.ExistsAsync(clusterId);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_OrganizationGetClusterById()
        {
            // Generated from example definition: specification/confluent/resource-manager/Microsoft.Confluent/stable/2024-07-01/examples/Organization_GetClusterById.json
            // this example is just showing the usage of "Organization_GetClusterById" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SCEnvironmentRecordResource created on azure
            // for more information of creating SCEnvironmentRecordResource, please refer to the document of SCEnvironmentRecordResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string organizationName = "myOrganization";
            string environmentId = "env-12132";
            ResourceIdentifier scEnvironmentRecordResourceId = SCEnvironmentRecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, organizationName, environmentId);
            SCEnvironmentRecordResource scEnvironmentRecord = client.GetSCEnvironmentRecordResource(scEnvironmentRecordResourceId);

            // get the collection of this SCClusterRecordResource
            SCClusterRecordCollection collection = scEnvironmentRecord.GetSCClusterRecords();

            // invoke the operation
            string clusterId = "dlz-f3a90de";
            NullableResponse<SCClusterRecordResource> response = await collection.GetIfExistsAsync(clusterId);
            SCClusterRecordResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                SCClusterRecordData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
