// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Confluent.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.Confluent.Samples
{
    public partial class Sample_SCEnvironmentRecordResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_OrganizationGetEnvironmentById()
        {
            // Generated from example definition: specification/confluent/resource-manager/Microsoft.Confluent/stable/2024-07-01/examples/Organization_GetEnvironmentById.json
            // this example is just showing the usage of "Organization_GetEnvironmentById" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SCEnvironmentRecordResource created on azure
            // for more information of creating SCEnvironmentRecordResource, please refer to the document of SCEnvironmentRecordResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string organizationName = "myOrganization";
            string environmentId = "dlz-f3a90de";
            ResourceIdentifier scEnvironmentRecordResourceId = SCEnvironmentRecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, organizationName, environmentId);
            SCEnvironmentRecordResource scEnvironmentRecord = client.GetSCEnvironmentRecordResource(scEnvironmentRecordResourceId);

            // invoke the operation
            SCEnvironmentRecordResource result = await scEnvironmentRecord.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SCEnvironmentRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_EnvironmentDelete()
        {
            // Generated from example definition: specification/confluent/resource-manager/Microsoft.Confluent/stable/2024-07-01/examples/Environment_Delete.json
            // this example is just showing the usage of "Environment_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SCEnvironmentRecordResource created on azure
            // for more information of creating SCEnvironmentRecordResource, please refer to the document of SCEnvironmentRecordResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string organizationName = "myOrganization";
            string environmentId = "env-12132";
            ResourceIdentifier scEnvironmentRecordResourceId = SCEnvironmentRecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, organizationName, environmentId);
            SCEnvironmentRecordResource scEnvironmentRecord = client.GetSCEnvironmentRecordResource(scEnvironmentRecordResourceId);

            // invoke the operation
            await scEnvironmentRecord.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_EnvironmentCreateOrUpdate()
        {
            // Generated from example definition: specification/confluent/resource-manager/Microsoft.Confluent/stable/2024-07-01/examples/Environment_Create.json
            // this example is just showing the usage of "Environment_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SCEnvironmentRecordResource created on azure
            // for more information of creating SCEnvironmentRecordResource, please refer to the document of SCEnvironmentRecordResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string organizationName = "myOrganization";
            string environmentId = "env-1";
            ResourceIdentifier scEnvironmentRecordResourceId = SCEnvironmentRecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, organizationName, environmentId);
            SCEnvironmentRecordResource scEnvironmentRecord = client.GetSCEnvironmentRecordResource(scEnvironmentRecordResourceId);

            // invoke the operation
            SCEnvironmentRecordData data = new SCEnvironmentRecordData
            {
                StreamGovernanceConfigPackage = Package.Essentials,
            };
            ArmOperation<SCEnvironmentRecordResource> lro = await scEnvironmentRecord.UpdateAsync(WaitUntil.Completed, data);
            SCEnvironmentRecordResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SCEnvironmentRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetSchemaRegistryClusters_OrganizationListSchemaRegistryClusters()
        {
            // Generated from example definition: specification/confluent/resource-manager/Microsoft.Confluent/stable/2024-07-01/examples/Organization_ListSchemaRegistryClusters.json
            // this example is just showing the usage of "Organization_ListSchemaRegistryClusters" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SCEnvironmentRecordResource created on azure
            // for more information of creating SCEnvironmentRecordResource, please refer to the document of SCEnvironmentRecordResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string organizationName = "myOrganization";
            string environmentId = "env-stgcczjp2j3";
            ResourceIdentifier scEnvironmentRecordResourceId = SCEnvironmentRecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, organizationName, environmentId);
            SCEnvironmentRecordResource scEnvironmentRecord = client.GetSCEnvironmentRecordResource(scEnvironmentRecordResourceId);

            // invoke the operation and iterate over the result
            await foreach (SchemaRegistryClusterRecord item in scEnvironmentRecord.GetSchemaRegistryClustersAsync())
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetSchemaRegistryCluster_OrganizationGetSchemaRegistryClusterById()
        {
            // Generated from example definition: specification/confluent/resource-manager/Microsoft.Confluent/stable/2024-07-01/examples/Organization_GetSchemaRegistryClusterById.json
            // this example is just showing the usage of "Organization_GetSchemaRegistryClusterById" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SCEnvironmentRecordResource created on azure
            // for more information of creating SCEnvironmentRecordResource, please refer to the document of SCEnvironmentRecordResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string organizationName = "myOrganization";
            string environmentId = "env-stgcczjp2j3";
            ResourceIdentifier scEnvironmentRecordResourceId = SCEnvironmentRecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, organizationName, environmentId);
            SCEnvironmentRecordResource scEnvironmentRecord = client.GetSCEnvironmentRecordResource(scEnvironmentRecordResourceId);

            // invoke the operation
            string clusterId = "lsrc-stgczkq22z";
            SchemaRegistryClusterRecord result = await scEnvironmentRecord.GetSchemaRegistryClusterAsync(clusterId);

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
