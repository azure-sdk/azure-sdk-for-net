// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.ResourceManager.Help.Samples
{
    public partial class Sample_TroubleshooterResourceCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_TroubleshootersCreate()
        {
            // Generated from example definition: 2024-03-01-preview/Troubleshooter_Create.json
            // this example is just showing the usage of "TroubleshooterResource_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // get the collection of this TroubleshooterResource
            string scope = "subscriptions/mySubscription/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-rp";
            TroubleshooterResourceCollection collection = client.GetTroubleshooterResources(new ResourceIdentifier(scope));

            // invoke the operation
            string troubleshooterName = "abf168ed-1b54-454a-86f6-e4b62253d3b1";
            TroubleshooterResourceData data = new TroubleshooterResourceData();
            ArmOperation<TroubleshooterResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, troubleshooterName, data);
            TroubleshooterResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            TroubleshooterResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_TroubleshootersGet()
        {
            // Generated from example definition: 2024-03-01-preview/Troubleshooter_Get.json
            // this example is just showing the usage of "TroubleshooterResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // get the collection of this TroubleshooterResource
            string scope = "subscriptions/mySubscription/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-rp";
            TroubleshooterResourceCollection collection = client.GetTroubleshooterResources(new ResourceIdentifier(scope));

            // invoke the operation
            string troubleshooterName = "abf168ed-1b54-454a-86f6-e4b62253d3b1";
            TroubleshooterResource result = await collection.GetAsync(troubleshooterName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            TroubleshooterResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_TroubleshootersGet()
        {
            // Generated from example definition: 2024-03-01-preview/Troubleshooter_Get.json
            // this example is just showing the usage of "TroubleshooterResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // get the collection of this TroubleshooterResource
            string scope = "subscriptions/mySubscription/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-rp";
            TroubleshooterResourceCollection collection = client.GetTroubleshooterResources(new ResourceIdentifier(scope));

            // invoke the operation
            string troubleshooterName = "abf168ed-1b54-454a-86f6-e4b62253d3b1";
            bool result = await collection.ExistsAsync(troubleshooterName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_TroubleshootersGet()
        {
            // Generated from example definition: 2024-03-01-preview/Troubleshooter_Get.json
            // this example is just showing the usage of "TroubleshooterResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // get the collection of this TroubleshooterResource
            string scope = "subscriptions/mySubscription/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-rp";
            TroubleshooterResourceCollection collection = client.GetTroubleshooterResources(new ResourceIdentifier(scope));

            // invoke the operation
            string troubleshooterName = "abf168ed-1b54-454a-86f6-e4b62253d3b1";
            NullableResponse<TroubleshooterResource> response = await collection.GetIfExistsAsync(troubleshooterName);
            TroubleshooterResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                TroubleshooterResourceData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
