// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.ResourceManager.Help.Samples
{
    public partial class Sample_DiagnosticResourceCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_CreatesADiagnosticForAKeyVaultResource()
        {
            // Generated from example definition: 2024-03-01-preview/CreateDiagnosticForKeyVaultResource.json
            // this example is just showing the usage of "DiagnosticResource_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // get the collection of this DiagnosticResource
            string scope = "subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourceGroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read";
            DiagnosticResourceCollection collection = client.GetDiagnosticResources(new ResourceIdentifier(scope));

            // invoke the operation
            string diagnosticsResourceName = "VMNotWorkingInsight";
            DiagnosticResourceData data = new DiagnosticResourceData();
            ArmOperation<DiagnosticResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, diagnosticsResourceName, data);
            DiagnosticResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DiagnosticResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_GetsADiagnosticForAKeyVaultResource()
        {
            // Generated from example definition: 2024-03-01-preview/GetDiagnosticForKeyVaultResource.json
            // this example is just showing the usage of "DiagnosticResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // get the collection of this DiagnosticResource
            string scope = "subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourceGroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read";
            DiagnosticResourceCollection collection = client.GetDiagnosticResources(new ResourceIdentifier(scope));

            // invoke the operation
            string diagnosticsResourceName = "VMNotWorkingInsight";
            DiagnosticResource result = await collection.GetAsync(diagnosticsResourceName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DiagnosticResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_GetsADiagnosticForAKeyVaultResource()
        {
            // Generated from example definition: 2024-03-01-preview/GetDiagnosticForKeyVaultResource.json
            // this example is just showing the usage of "DiagnosticResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // get the collection of this DiagnosticResource
            string scope = "subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourceGroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read";
            DiagnosticResourceCollection collection = client.GetDiagnosticResources(new ResourceIdentifier(scope));

            // invoke the operation
            string diagnosticsResourceName = "VMNotWorkingInsight";
            bool result = await collection.ExistsAsync(diagnosticsResourceName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_GetsADiagnosticForAKeyVaultResource()
        {
            // Generated from example definition: 2024-03-01-preview/GetDiagnosticForKeyVaultResource.json
            // this example is just showing the usage of "DiagnosticResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // get the collection of this DiagnosticResource
            string scope = "subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourceGroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read";
            DiagnosticResourceCollection collection = client.GetDiagnosticResources(new ResourceIdentifier(scope));

            // invoke the operation
            string diagnosticsResourceName = "VMNotWorkingInsight";
            NullableResponse<DiagnosticResource> response = await collection.GetIfExistsAsync(diagnosticsResourceName);
            DiagnosticResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                DiagnosticResourceData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
