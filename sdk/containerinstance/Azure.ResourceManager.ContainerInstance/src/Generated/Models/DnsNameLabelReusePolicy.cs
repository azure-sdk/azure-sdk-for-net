// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ContainerInstance.Models
{
    /// <summary> The value representing the security enum. </summary>
    public readonly partial struct DnsNameLabelReusePolicy : IEquatable<DnsNameLabelReusePolicy>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DnsNameLabelReusePolicy"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DnsNameLabelReusePolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DefaultValueIfNotSelectedAndMeansTheObjectSDomainNameLabelIsNotSecuredAgainstSubdomainTakeoverValue = "Default value if not selected and means the object's domain name label is not secured against subdomain takeover.";
        private const string DefaultValueIfSelectedAndMeansTheObjectSDomainNameLabelCanBeReusedWithinTheSameTenantValue = "Default value if selected and means the object's domain name label can be reused within the same tenant.";
        private const string ObjectSDomainNameLabelCanBeReusedWithinTheSameSubscriptionValue = "Object's domain name label can be reused within the same subscription.";
        private const string ObjectSDomainNameLabelCanBeReusedWithinTheSameResourceGroupValue = "Object's domain name label can be reused within the same resource group.";
        private const string ObjectSDomainNameLabelCannotBeReusedWithinTheSameResourceGroupSubscriptionOrTenantValue = "Object's domain name label cannot be reused within the same resource group, subscription, or tenant.";

        /// <summary> Unsecure. </summary>
        public static DnsNameLabelReusePolicy DefaultValueIfNotSelectedAndMeansTheObjectSDomainNameLabelIsNotSecuredAgainstSubdomainTakeover { get; } = new DnsNameLabelReusePolicy(DefaultValueIfNotSelectedAndMeansTheObjectSDomainNameLabelIsNotSecuredAgainstSubdomainTakeoverValue);
        /// <summary> TenantReuse. </summary>
        public static DnsNameLabelReusePolicy DefaultValueIfSelectedAndMeansTheObjectSDomainNameLabelCanBeReusedWithinTheSameTenant { get; } = new DnsNameLabelReusePolicy(DefaultValueIfSelectedAndMeansTheObjectSDomainNameLabelCanBeReusedWithinTheSameTenantValue);
        /// <summary> SubscriptionReuse. </summary>
        public static DnsNameLabelReusePolicy ObjectSDomainNameLabelCanBeReusedWithinTheSameSubscription { get; } = new DnsNameLabelReusePolicy(ObjectSDomainNameLabelCanBeReusedWithinTheSameSubscriptionValue);
        /// <summary> ResourceGroupReuse. </summary>
        public static DnsNameLabelReusePolicy ObjectSDomainNameLabelCanBeReusedWithinTheSameResourceGroup { get; } = new DnsNameLabelReusePolicy(ObjectSDomainNameLabelCanBeReusedWithinTheSameResourceGroupValue);
        /// <summary> NoReuse. </summary>
        public static DnsNameLabelReusePolicy ObjectSDomainNameLabelCannotBeReusedWithinTheSameResourceGroupSubscriptionOrTenant { get; } = new DnsNameLabelReusePolicy(ObjectSDomainNameLabelCannotBeReusedWithinTheSameResourceGroupSubscriptionOrTenantValue);
        /// <summary> Determines if two <see cref="DnsNameLabelReusePolicy"/> values are the same. </summary>
        public static bool operator ==(DnsNameLabelReusePolicy left, DnsNameLabelReusePolicy right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DnsNameLabelReusePolicy"/> values are not the same. </summary>
        public static bool operator !=(DnsNameLabelReusePolicy left, DnsNameLabelReusePolicy right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DnsNameLabelReusePolicy"/>. </summary>
        public static implicit operator DnsNameLabelReusePolicy(string value) => new DnsNameLabelReusePolicy(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DnsNameLabelReusePolicy other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DnsNameLabelReusePolicy other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
