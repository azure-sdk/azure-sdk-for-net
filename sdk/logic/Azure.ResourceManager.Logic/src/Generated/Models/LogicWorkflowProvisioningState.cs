// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Logic.Models
{
    /// <summary> The workflow provisioning state. </summary>
    public readonly partial struct LogicWorkflowProvisioningState : IEquatable<LogicWorkflowProvisioningState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="LogicWorkflowProvisioningState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public LogicWorkflowProvisioningState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotSpecifiedValue = "NotSpecified";
        private const string AcceptedValue = "Accepted";
        private const string RunningValue = "Running";
        private const string ReadyValue = "Ready";
        private const string CreatingValue = "Creating";
        private const string CreatedValue = "Created";
        private const string DeletingValue = "Deleting";
        private const string DeletedValue = "Deleted";
        private const string CanceledValue = "Canceled";
        private const string FailedValue = "Failed";
        private const string SucceededValue = "Succeeded";
        private const string MovingValue = "Moving";
        private const string UpdatingValue = "Updating";
        private const string RegisteringValue = "Registering";
        private const string RegisteredValue = "Registered";
        private const string UnregisteringValue = "Unregistering";
        private const string UnregisteredValue = "Unregistered";
        private const string CompletedValue = "Completed";
        private const string RenewingValue = "Renewing";
        private const string PendingValue = "Pending";
        private const string WaitingValue = "Waiting";
        private const string InProgressValue = "InProgress";

        /// <summary> Represents a state where the value is not specified. </summary>
        public static LogicWorkflowProvisioningState NotSpecified { get; } = new LogicWorkflowProvisioningState(NotSpecifiedValue);
        /// <summary> Represents a state where the workflow is accepted. </summary>
        public static LogicWorkflowProvisioningState Accepted { get; } = new LogicWorkflowProvisioningState(AcceptedValue);
        /// <summary> Represents a state where the workflow is running. </summary>
        public static LogicWorkflowProvisioningState Running { get; } = new LogicWorkflowProvisioningState(RunningValue);
        /// <summary> Represents a state where the workflow is ready. </summary>
        public static LogicWorkflowProvisioningState Ready { get; } = new LogicWorkflowProvisioningState(ReadyValue);
        /// <summary> Represents a state where the workflow is creating. </summary>
        public static LogicWorkflowProvisioningState Creating { get; } = new LogicWorkflowProvisioningState(CreatingValue);
        /// <summary> Represents a state where the workflow is created. </summary>
        public static LogicWorkflowProvisioningState Created { get; } = new LogicWorkflowProvisioningState(CreatedValue);
        /// <summary> Represents a state where the workflow is deleting. </summary>
        public static LogicWorkflowProvisioningState Deleting { get; } = new LogicWorkflowProvisioningState(DeletingValue);
        /// <summary> Represents a state where the workflow is deleted. </summary>
        public static LogicWorkflowProvisioningState Deleted { get; } = new LogicWorkflowProvisioningState(DeletedValue);
        /// <summary> Represents a state where the workflow is canceled. </summary>
        public static LogicWorkflowProvisioningState Canceled { get; } = new LogicWorkflowProvisioningState(CanceledValue);
        /// <summary> Represents a state where the workflow is failed. </summary>
        public static LogicWorkflowProvisioningState Failed { get; } = new LogicWorkflowProvisioningState(FailedValue);
        /// <summary> Represents a state where the workflow is succeeded. </summary>
        public static LogicWorkflowProvisioningState Succeeded { get; } = new LogicWorkflowProvisioningState(SucceededValue);
        /// <summary> Represents a state where the workflow is moving. </summary>
        public static LogicWorkflowProvisioningState Moving { get; } = new LogicWorkflowProvisioningState(MovingValue);
        /// <summary> Represents a state where the workflow is updating. </summary>
        public static LogicWorkflowProvisioningState Updating { get; } = new LogicWorkflowProvisioningState(UpdatingValue);
        /// <summary> Represents a state where the workflow is registering. </summary>
        public static LogicWorkflowProvisioningState Registering { get; } = new LogicWorkflowProvisioningState(RegisteringValue);
        /// <summary> Represents a state where the workflow is registered. </summary>
        public static LogicWorkflowProvisioningState Registered { get; } = new LogicWorkflowProvisioningState(RegisteredValue);
        /// <summary> Represents a state where the workflow is unregistering. </summary>
        public static LogicWorkflowProvisioningState Unregistering { get; } = new LogicWorkflowProvisioningState(UnregisteringValue);
        /// <summary> Represents a state where the workflow is unregistered. </summary>
        public static LogicWorkflowProvisioningState Unregistered { get; } = new LogicWorkflowProvisioningState(UnregisteredValue);
        /// <summary> Represents a state where the workflow is completed. </summary>
        public static LogicWorkflowProvisioningState Completed { get; } = new LogicWorkflowProvisioningState(CompletedValue);
        /// <summary> Represents a state where the workflow is renewing. </summary>
        public static LogicWorkflowProvisioningState Renewing { get; } = new LogicWorkflowProvisioningState(RenewingValue);
        /// <summary> Represents a state where the workflow is pending. </summary>
        public static LogicWorkflowProvisioningState Pending { get; } = new LogicWorkflowProvisioningState(PendingValue);
        /// <summary> Represents a state where the workflow is waiting. </summary>
        public static LogicWorkflowProvisioningState Waiting { get; } = new LogicWorkflowProvisioningState(WaitingValue);
        /// <summary> Represents a state where the workflow is in progress. </summary>
        public static LogicWorkflowProvisioningState InProgress { get; } = new LogicWorkflowProvisioningState(InProgressValue);
        /// <summary> Determines if two <see cref="LogicWorkflowProvisioningState"/> values are the same. </summary>
        public static bool operator ==(LogicWorkflowProvisioningState left, LogicWorkflowProvisioningState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="LogicWorkflowProvisioningState"/> values are not the same. </summary>
        public static bool operator !=(LogicWorkflowProvisioningState left, LogicWorkflowProvisioningState right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="LogicWorkflowProvisioningState"/>. </summary>
        public static implicit operator LogicWorkflowProvisioningState(string value) => new LogicWorkflowProvisioningState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is LogicWorkflowProvisioningState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(LogicWorkflowProvisioningState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
