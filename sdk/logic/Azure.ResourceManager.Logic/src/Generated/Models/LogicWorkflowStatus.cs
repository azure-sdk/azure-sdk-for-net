// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Logic.Models
{
    /// <summary> The workflow status. </summary>
    public readonly partial struct LogicWorkflowStatus : IEquatable<LogicWorkflowStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="LogicWorkflowStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public LogicWorkflowStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotSpecifiedValue = "NotSpecified";
        private const string PausedValue = "Paused";
        private const string RunningValue = "Running";
        private const string WaitingValue = "Waiting";
        private const string SucceededValue = "Succeeded";
        private const string SkippedValue = "Skipped";
        private const string SuspendedValue = "Suspended";
        private const string CancelledValue = "Cancelled";
        private const string FailedValue = "Failed";
        private const string FaultedValue = "Faulted";
        private const string TimedOutValue = "TimedOut";
        private const string AbortedValue = "Aborted";
        private const string IgnoredValue = "Ignored";

        /// <summary> Represents a state where the value is not specified. </summary>
        public static LogicWorkflowStatus NotSpecified { get; } = new LogicWorkflowStatus(NotSpecifiedValue);
        /// <summary> Represents a paused workflow status. </summary>
        public static LogicWorkflowStatus Paused { get; } = new LogicWorkflowStatus(PausedValue);
        /// <summary> Represents a running workflow status. </summary>
        public static LogicWorkflowStatus Running { get; } = new LogicWorkflowStatus(RunningValue);
        /// <summary> Represents a waiting workflow status. </summary>
        public static LogicWorkflowStatus Waiting { get; } = new LogicWorkflowStatus(WaitingValue);
        /// <summary> Represents a succeeded workflow status. </summary>
        public static LogicWorkflowStatus Succeeded { get; } = new LogicWorkflowStatus(SucceededValue);
        /// <summary> Represents a skipped workflow status. </summary>
        public static LogicWorkflowStatus Skipped { get; } = new LogicWorkflowStatus(SkippedValue);
        /// <summary> Represents a suspended workflow status. </summary>
        public static LogicWorkflowStatus Suspended { get; } = new LogicWorkflowStatus(SuspendedValue);
        /// <summary> Represents a cancelled workflow status. </summary>
        public static LogicWorkflowStatus Cancelled { get; } = new LogicWorkflowStatus(CancelledValue);
        /// <summary> Represents a failed workflow status. </summary>
        public static LogicWorkflowStatus Failed { get; } = new LogicWorkflowStatus(FailedValue);
        /// <summary> Represents a faulted workflow status. </summary>
        public static LogicWorkflowStatus Faulted { get; } = new LogicWorkflowStatus(FaultedValue);
        /// <summary> Represents a timed out workflow status. </summary>
        public static LogicWorkflowStatus TimedOut { get; } = new LogicWorkflowStatus(TimedOutValue);
        /// <summary> Represents an aborted workflow status. </summary>
        public static LogicWorkflowStatus Aborted { get; } = new LogicWorkflowStatus(AbortedValue);
        /// <summary> Represents an ignored workflow status. </summary>
        public static LogicWorkflowStatus Ignored { get; } = new LogicWorkflowStatus(IgnoredValue);
        /// <summary> Determines if two <see cref="LogicWorkflowStatus"/> values are the same. </summary>
        public static bool operator ==(LogicWorkflowStatus left, LogicWorkflowStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="LogicWorkflowStatus"/> values are not the same. </summary>
        public static bool operator !=(LogicWorkflowStatus left, LogicWorkflowStatus right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="LogicWorkflowStatus"/>. </summary>
        public static implicit operator LogicWorkflowStatus(string value) => new LogicWorkflowStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is LogicWorkflowStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(LogicWorkflowStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
