// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Logic.Models
{
    public partial class WorkflowExportValidity
    {
        internal static WorkflowExportValidity DeserializeWorkflowExportValidity(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<ValidationState> validationState = default;
            Optional<IReadOnlyDictionary<string, ResourceExportValidity>> workflowOperations = default;
            Optional<IReadOnlyDictionary<string, ConnectionExportValidity>> connections = default;
            Optional<IReadOnlyDictionary<string, ResourceExportValidity>> parameters = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("validationState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    validationState = new ValidationState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("workflowOperations"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, ResourceExportValidity> dictionary = new Dictionary<string, ResourceExportValidity>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, ResourceExportValidity.DeserializeResourceExportValidity(property0.Value));
                    }
                    workflowOperations = dictionary;
                    continue;
                }
                if (property.NameEquals("connections"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, ConnectionExportValidity> dictionary = new Dictionary<string, ConnectionExportValidity>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, ConnectionExportValidity.DeserializeConnectionExportValidity(property0.Value));
                    }
                    connections = dictionary;
                    continue;
                }
                if (property.NameEquals("parameters"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, ResourceExportValidity> dictionary = new Dictionary<string, ResourceExportValidity>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, ResourceExportValidity.DeserializeResourceExportValidity(property0.Value));
                    }
                    parameters = dictionary;
                    continue;
                }
            }
            return new WorkflowExportValidity(Optional.ToNullable(validationState), Optional.ToDictionary(workflowOperations), Optional.ToDictionary(connections), Optional.ToDictionary(parameters));
        }
    }
}
