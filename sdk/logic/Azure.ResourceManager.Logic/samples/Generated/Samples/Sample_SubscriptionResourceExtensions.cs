// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.Logic;
using Azure.ResourceManager.Logic.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Logic.Samples
{
    public partial class Sample_SubscriptionResourceExtensions
    {
        // Validates a workflow export
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task ValidateWorkflowExportLocation_ValidatesAWorkflowExport()
        {
            // Generated from example definition: specification/logic/resource-manager/Microsoft.Logic/preview/2022-09-01-preview/examples/Locations_ValidateWorkflowExport.json
            // this example is just showing the usage of "Locations_ValidateWorkflowExport" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // invoke the operation
            AzureLocation location = new AzureLocation("brazilsouth");
            WorkflowExportRequest workflowExportRequest = new WorkflowExportRequest(new LogicResourceReference[]
            {
new LogicResourceReference()
{
Id = new ResourceIdentifier("subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/existing/ResourceGroup/providers/Microsoft.Logic/workflows/existingWorkflow"),
}
            }, WorkflowExportOption.CloneConnections);
            WorkflowExportValidityResult result = await subscriptionResource.ValidateWorkflowExportLocationAsync(location, workflowExportRequest);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Export workflows
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task WorkflowExportLocation_ExportWorkflows()
        {
            // Generated from example definition: specification/logic/resource-manager/Microsoft.Logic/preview/2022-09-01-preview/examples/Locations_WorkflowExport.json
            // this example is just showing the usage of "Locations_WorkflowExport" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // invoke the operation
            AzureLocation location = new AzureLocation("brazilsouth");
            WorkflowExportRequest workflowExportRequest = new WorkflowExportRequest(new LogicResourceReference[]
            {
new LogicResourceReference()
{
Id = new ResourceIdentifier("subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/existing/ResourceGroup/providers/Microsoft.Logic/workflows/existingWorkflow"),
}
            }, WorkflowExportOption.CloneConnections);
            WorkflowExportResult result = await subscriptionResource.WorkflowExportLocationAsync(location, workflowExportRequest);

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
