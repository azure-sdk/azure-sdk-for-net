// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.IoTOperations.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.IoTOperations.Samples
{
    public partial class Sample_BrokerResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_BrokerGet()
        {
            // Generated from example definition: 2024-11-01/Broker_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "BrokerResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this BrokerResource created on azure
            // for more information of creating BrokerResource, please refer to the document of BrokerResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            string brokerName = "resource-name123";
            ResourceIdentifier brokerResourceId = BrokerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName, brokerName);
            BrokerResource brokerResource = client.GetBrokerResource(brokerResourceId);

            // invoke the operation
            BrokerResource result = await brokerResource.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            BrokerResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_BrokerDelete()
        {
            // Generated from example definition: 2024-11-01/Broker_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "BrokerResource_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this BrokerResource created on azure
            // for more information of creating BrokerResource, please refer to the document of BrokerResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            string brokerName = "resource-name123";
            ResourceIdentifier brokerResourceId = BrokerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName, brokerName);
            BrokerResource brokerResource = client.GetBrokerResource(brokerResourceId);

            // invoke the operation
            await brokerResource.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_BrokerCreateOrUpdateComplex()
        {
            // Generated from example definition: 2024-11-01/Broker_CreateOrUpdate_Complex.json
            // this example is just showing the usage of "BrokerResource_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this BrokerResource created on azure
            // for more information of creating BrokerResource, please refer to the document of BrokerResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            string brokerName = "resource-name123";
            ResourceIdentifier brokerResourceId = BrokerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName, brokerName);
            BrokerResource brokerResource = client.GetBrokerResource(brokerResourceId);

            // invoke the operation
            BrokerResourceData data = new BrokerResourceData(new ExtendedLocation("qmbrfwcpwwhggszhrdjv", ExtendedLocationType.CustomLocation))
            {
                Properties = new BrokerProperties
                {
                    Cardinality = new Cardinality(new BackendChain(2, 2)
                    {
                        Workers = 2,
                    }, new Frontend(2)
                    {
                        Workers = 2,
                    }),
                    DiskBackedMessageBuffer = new DiskBackedMessageBuffer("50M"),
                    GenerateResourceLimitsCpu = OperationalMode.Enabled,
                    MemoryProfile = BrokerMemoryProfile.Medium,
                },
            };
            ArmOperation<BrokerResource> lro = await brokerResource.UpdateAsync(WaitUntil.Completed, data);
            BrokerResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            BrokerResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_BrokerCreateOrUpdate()
        {
            // Generated from example definition: 2024-11-01/Broker_CreateOrUpdate_MaximumSet_Gen.json
            // this example is just showing the usage of "BrokerResource_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this BrokerResource created on azure
            // for more information of creating BrokerResource, please refer to the document of BrokerResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            string brokerName = "resource-name123";
            ResourceIdentifier brokerResourceId = BrokerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName, brokerName);
            BrokerResource brokerResource = client.GetBrokerResource(brokerResourceId);

            // invoke the operation
            BrokerResourceData data = new BrokerResourceData(new ExtendedLocation("qmbrfwcpwwhggszhrdjv", ExtendedLocationType.CustomLocation))
            {
                Properties = new BrokerProperties
                {
                    Advanced = new AdvancedSettings
                    {
                        Clients = new ClientConfig
                        {
                            MaxSessionExpirySeconds = 3859,
                            MaxMessageExpirySeconds = 3263,
                            MaxPacketSizeBytes = 3029,
                            SubscriberQueueLimit = new SubscriberQueueLimit
                            {
                                Length = 6L,
                                Strategy = SubscriberMessageDropStrategy.None,
                            },
                            MaxReceiveMaximum = 2365,
                            MaxKeepAliveSeconds = 3744,
                        },
                        EncryptInternalTraffic = OperationalMode.Enabled,
                        InternalCerts = new CertManagerCertOptions("bchrc", "xkafmpgjfifkwwrhkswtopdnne", new CertManagerPrivateKey(PrivateKeyAlgorithm.Ec256, PrivateKeyRotationPolicy.Always)),
                    },
                    Cardinality = new Cardinality(new BackendChain(11, 5)
                    {
                        Workers = 15,
                    }, new Frontend(2)
                    {
                        Workers = 6,
                    }),
                    Diagnostics = new BrokerDiagnostics
                    {
                        LogsLevel = "rnmwokumdmebpmfxxxzvvjfdywotav",
                        MetricsPrometheusPort = 7581,
                        SelfCheck = new SelfCheck
                        {
                            Mode = OperationalMode.Enabled,
                            IntervalSeconds = 158,
                            TimeoutSeconds = 14,
                        },
                        Traces = new Traces
                        {
                            Mode = OperationalMode.Enabled,
                            CacheSizeMegabytes = 28,
                            SelfTracing = new SelfTracing
                            {
                                Mode = OperationalMode.Enabled,
                                IntervalSeconds = 22,
                            },
                            SpanChannelCapacity = 1000,
                        },
                    },
                    DiskBackedMessageBuffer = new DiskBackedMessageBuffer("500M")
                    {
                        EphemeralVolumeClaimSpec = new VolumeClaimSpec
                        {
                            VolumeName = "c",
                            VolumeMode = "rxvpksjuuugqnqzeiprocknbn",
                            StorageClassName = "sseyhrjptkhrqvpdpjmornkqvon",
                            AccessModes = { "nuluhigrbb" },
                            DataSource = new LocalKubernetesReference("wazgyb", "cwhsgxxcxsyppoefm")
                            {
                                ApiGroup = "npqapyksvvpkohujx",
                            },
                            DataSourceRef = new KubernetesReference("odynqzekfzsnawrctaxg", "envszivbbmixbyddzg")
                            {
                                ApiGroup = "mnfnykznjjsoqpfsgdqioupt",
                                Namespace = "etcfzvxqd",
                            },
                            Resources = new VolumeClaimResourceRequirements
                            {
                                Limits =
{
["key2719"] = "hmphcrgctu"
},
                                Requests =
{
["key2909"] = "txocprnyrsgvhfrg"
},
                            },
                            Selector = new VolumeClaimSpecSelector
                            {
                                MatchExpressions = {new VolumeClaimSpecSelectorMatchExpressions("e", OperatorValue.In)
{
Values = {"slmpajlywqvuyknipgztsonqyybt"},
}},
                                MatchLabels =
{
["key6673"] = "wlngfalznwxnurzpgxomcxhbqefpr"
},
                            },
                        },
                        PersistentVolumeClaimSpec = new VolumeClaimSpec
                        {
                            VolumeName = "c",
                            VolumeMode = "rxvpksjuuugqnqzeiprocknbn",
                            StorageClassName = "sseyhrjptkhrqvpdpjmornkqvon",
                            AccessModes = { "nuluhigrbb" },
                            DataSource = new LocalKubernetesReference("wazgyb", "cwhsgxxcxsyppoefm")
                            {
                                ApiGroup = "npqapyksvvpkohujx",
                            },
                            DataSourceRef = new KubernetesReference("odynqzekfzsnawrctaxg", "envszivbbmixbyddzg")
                            {
                                ApiGroup = "mnfnykznjjsoqpfsgdqioupt",
                                Namespace = "etcfzvxqd",
                            },
                            Resources = new VolumeClaimResourceRequirements
                            {
                                Limits =
{
["key2719"] = "hmphcrgctu"
},
                                Requests =
{
["key2909"] = "txocprnyrsgvhfrg"
},
                            },
                            Selector = new VolumeClaimSpecSelector
                            {
                                MatchExpressions = {new VolumeClaimSpecSelectorMatchExpressions("e", OperatorValue.In)
{
Values = {"slmpajlywqvuyknipgztsonqyybt"},
}},
                                MatchLabels =
{
["key6673"] = "wlngfalznwxnurzpgxomcxhbqefpr"
},
                            },
                        },
                    },
                    GenerateResourceLimitsCpu = OperationalMode.Enabled,
                    MemoryProfile = BrokerMemoryProfile.Tiny,
                },
            };
            ArmOperation<BrokerResource> lro = await brokerResource.UpdateAsync(WaitUntil.Completed, data);
            BrokerResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            BrokerResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_BrokerCreateOrUpdateMinimal()
        {
            // Generated from example definition: 2024-11-01/Broker_CreateOrUpdate_Minimal.json
            // this example is just showing the usage of "BrokerResource_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this BrokerResource created on azure
            // for more information of creating BrokerResource, please refer to the document of BrokerResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            string brokerName = "resource-name123";
            ResourceIdentifier brokerResourceId = BrokerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName, brokerName);
            BrokerResource brokerResource = client.GetBrokerResource(brokerResourceId);

            // invoke the operation
            BrokerResourceData data = new BrokerResourceData(new ExtendedLocation("qmbrfwcpwwhggszhrdjv", ExtendedLocationType.CustomLocation))
            {
                Properties = new BrokerProperties
                {
                    MemoryProfile = BrokerMemoryProfile.Tiny,
                },
            };
            ArmOperation<BrokerResource> lro = await brokerResource.UpdateAsync(WaitUntil.Completed, data);
            BrokerResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            BrokerResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_BrokerCreateOrUpdateSimple()
        {
            // Generated from example definition: 2024-11-01/Broker_CreateOrUpdate_Simple.json
            // this example is just showing the usage of "BrokerResource_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this BrokerResource created on azure
            // for more information of creating BrokerResource, please refer to the document of BrokerResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            string brokerName = "resource-name123";
            ResourceIdentifier brokerResourceId = BrokerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName, brokerName);
            BrokerResource brokerResource = client.GetBrokerResource(brokerResourceId);

            // invoke the operation
            BrokerResourceData data = new BrokerResourceData(new ExtendedLocation("qmbrfwcpwwhggszhrdjv", ExtendedLocationType.CustomLocation))
            {
                Properties = new BrokerProperties
                {
                    Cardinality = new Cardinality(new BackendChain(2, 2)
                    {
                        Workers = 2,
                    }, new Frontend(2)
                    {
                        Workers = 2,
                    }),
                    GenerateResourceLimitsCpu = OperationalMode.Enabled,
                    MemoryProfile = BrokerMemoryProfile.Low,
                },
            };
            ArmOperation<BrokerResource> lro = await brokerResource.UpdateAsync(WaitUntil.Completed, data);
            BrokerResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            BrokerResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
