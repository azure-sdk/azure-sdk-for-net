// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.IoTOperations.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.IoTOperations.Samples
{
    public partial class Sample_BrokerListenerResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_BrokerListenerGet()
        {
            // Generated from example definition: 2024-11-01/BrokerListener_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "BrokerListenerResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this BrokerListenerResource created on azure
            // for more information of creating BrokerListenerResource, please refer to the document of BrokerListenerResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            string brokerName = "resource-name123";
            string listenerName = "resource-name123";
            ResourceIdentifier brokerListenerResourceId = BrokerListenerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName, brokerName, listenerName);
            BrokerListenerResource brokerListenerResource = client.GetBrokerListenerResource(brokerListenerResourceId);

            // invoke the operation
            BrokerListenerResource result = await brokerListenerResource.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            BrokerListenerResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_BrokerListenerDelete()
        {
            // Generated from example definition: 2024-11-01/BrokerListener_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "BrokerListenerResource_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this BrokerListenerResource created on azure
            // for more information of creating BrokerListenerResource, please refer to the document of BrokerListenerResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            string brokerName = "resource-name123";
            string listenerName = "resource-name123";
            ResourceIdentifier brokerListenerResourceId = BrokerListenerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName, brokerName, listenerName);
            BrokerListenerResource brokerListenerResource = client.GetBrokerListenerResource(brokerListenerResourceId);

            // invoke the operation
            await brokerListenerResource.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_BrokerListenerCreateOrUpdateComplex()
        {
            // Generated from example definition: 2024-11-01/BrokerListener_CreateOrUpdate_Complex.json
            // this example is just showing the usage of "BrokerListenerResource_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this BrokerListenerResource created on azure
            // for more information of creating BrokerListenerResource, please refer to the document of BrokerListenerResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            string brokerName = "resource-name123";
            string listenerName = "resource-name123";
            ResourceIdentifier brokerListenerResourceId = BrokerListenerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName, brokerName, listenerName);
            BrokerListenerResource brokerListenerResource = client.GetBrokerListenerResource(brokerListenerResourceId);

            // invoke the operation
            BrokerListenerResourceData data = new BrokerListenerResourceData(new ExtendedLocation("qmbrfwcpwwhggszhrdjv", ExtendedLocationType.CustomLocation))
            {
                Properties = new BrokerListenerProperties(new ListenerPort[]
            {
new ListenerPort(8080)
{
AuthenticationRef = "example-authentication",
Protocol = BrokerProtocolType.WebSockets,
},
new ListenerPort(8443)
{
AuthenticationRef = "example-authentication",
Protocol = BrokerProtocolType.WebSockets,
Tls = new TlsCertMethod(TlsCertMethodMode.Automatic)
{
CertManagerCertificateSpec = new CertManagerCertificateSpec(new CertManagerIssuerRef("jtmuladdkpasfpoyvewekmiy", CertManagerIssuerKind.Issuer, "example-issuer")),
},
},
new ListenerPort(1883)
{
AuthenticationRef = "example-authentication",
},
new ListenerPort(8883)
{
AuthenticationRef = "example-authentication",
Tls = new TlsCertMethod(TlsCertMethodMode.Manual)
{
ManualSecretRef = "example-secret",
},
}
            })
                {
                    ServiceType = ServiceType.LoadBalancer,
                },
            };
            ArmOperation<BrokerListenerResource> lro = await brokerListenerResource.UpdateAsync(WaitUntil.Completed, data);
            BrokerListenerResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            BrokerListenerResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_BrokerListenerCreateOrUpdate()
        {
            // Generated from example definition: 2024-11-01/BrokerListener_CreateOrUpdate_MaximumSet_Gen.json
            // this example is just showing the usage of "BrokerListenerResource_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this BrokerListenerResource created on azure
            // for more information of creating BrokerListenerResource, please refer to the document of BrokerListenerResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            string brokerName = "resource-name123";
            string listenerName = "resource-name123";
            ResourceIdentifier brokerListenerResourceId = BrokerListenerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName, brokerName, listenerName);
            BrokerListenerResource brokerListenerResource = client.GetBrokerListenerResource(brokerListenerResourceId);

            // invoke the operation
            BrokerListenerResourceData data = new BrokerListenerResourceData(new ExtendedLocation("qmbrfwcpwwhggszhrdjv", ExtendedLocationType.CustomLocation))
            {
                Properties = new BrokerListenerProperties(new ListenerPort[]
            {
new ListenerPort(1268)
{
AuthenticationRef = "tjvdroaqqy",
AuthorizationRef = "inxhvxnwswyrvt",
NodePort = 7281,
Protocol = BrokerProtocolType.Mqtt,
Tls = new TlsCertMethod(TlsCertMethodMode.Automatic)
{
CertManagerCertificateSpec = new CertManagerCertificateSpec(new CertManagerIssuerRef("jtmuladdkpasfpoyvewekmiy", CertManagerIssuerKind.Issuer, "ocwoqpgucvjrsuudtjhb"))
{
Duration = "qmpeffoksron",
SecretName = "oagi",
RenewBefore = "hutno",
PrivateKey = new CertManagerPrivateKey(PrivateKeyAlgorithm.Ec256, PrivateKeyRotationPolicy.Always),
San = new SanForCert(new string[]{"xhvmhrrhgfsapocjeebqtnzarlj"}, new string[]{"zbgugfzcgsmegevzktsnibyuyp"}),
},
ManualSecretRef = "secret-name",
},
}
            })
                {
                    ServiceName = "tpfiszlapdpxktx",
                    ServiceType = ServiceType.ClusterIP,
                },
            };
            ArmOperation<BrokerListenerResource> lro = await brokerListenerResource.UpdateAsync(WaitUntil.Completed, data);
            BrokerListenerResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            BrokerListenerResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_BrokerListenerCreateOrUpdateSimple()
        {
            // Generated from example definition: 2024-11-01/BrokerListener_CreateOrUpdate_Simple.json
            // this example is just showing the usage of "BrokerListenerResource_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this BrokerListenerResource created on azure
            // for more information of creating BrokerListenerResource, please refer to the document of BrokerListenerResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            string brokerName = "resource-name123";
            string listenerName = "resource-name123";
            ResourceIdentifier brokerListenerResourceId = BrokerListenerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName, brokerName, listenerName);
            BrokerListenerResource brokerListenerResource = client.GetBrokerListenerResource(brokerListenerResourceId);

            // invoke the operation
            BrokerListenerResourceData data = new BrokerListenerResourceData(new ExtendedLocation("qmbrfwcpwwhggszhrdjv", ExtendedLocationType.CustomLocation))
            {
                Properties = new BrokerListenerProperties(new ListenerPort[]
            {
new ListenerPort(1883)
            }),
            };
            ArmOperation<BrokerListenerResource> lro = await brokerListenerResource.UpdateAsync(WaitUntil.Completed, data);
            BrokerListenerResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            BrokerListenerResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
