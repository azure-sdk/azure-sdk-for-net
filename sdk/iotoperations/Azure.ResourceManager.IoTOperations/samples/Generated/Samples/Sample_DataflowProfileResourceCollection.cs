// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.IoTOperations.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.IoTOperations.Samples
{
    public partial class Sample_DataflowProfileResourceCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_DataflowProfileCreateOrUpdate()
        {
            // Generated from example definition: 2024-11-01/DataflowProfile_CreateOrUpdate_MaximumSet_Gen.json
            // this example is just showing the usage of "DataflowProfileResource_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this InstanceResource created on azure
            // for more information of creating InstanceResource, please refer to the document of InstanceResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            ResourceIdentifier instanceResourceId = InstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName);
            InstanceResource instanceResource = client.GetInstanceResource(instanceResourceId);

            // get the collection of this DataflowProfileResource
            DataflowProfileResourceCollection collection = instanceResource.GetDataflowProfileResources();

            // invoke the operation
            string dataflowProfileName = "resource-name123";
            DataflowProfileResourceData data = new DataflowProfileResourceData(new ExtendedLocation("qmbrfwcpwwhggszhrdjv", ExtendedLocationType.CustomLocation))
            {
                Properties = new DataflowProfileProperties
                {
                    Diagnostics = new ProfileDiagnostics
                    {
                        LogsLevel = "rnmwokumdmebpmfxxxzvvjfdywotav",
                        MetricsPrometheusPort = 7581,
                    },
                    InstanceCount = 14,
                },
            };
            ArmOperation<DataflowProfileResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, dataflowProfileName, data);
            DataflowProfileResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DataflowProfileResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_DataflowProfileCreateOrUpdateMinimal()
        {
            // Generated from example definition: 2024-11-01/DataflowProfile_CreateOrUpdate_Minimal.json
            // this example is just showing the usage of "DataflowProfileResource_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this InstanceResource created on azure
            // for more information of creating InstanceResource, please refer to the document of InstanceResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            ResourceIdentifier instanceResourceId = InstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName);
            InstanceResource instanceResource = client.GetInstanceResource(instanceResourceId);

            // get the collection of this DataflowProfileResource
            DataflowProfileResourceCollection collection = instanceResource.GetDataflowProfileResources();

            // invoke the operation
            string dataflowProfileName = "aio-dataflowprofile";
            DataflowProfileResourceData data = new DataflowProfileResourceData(new ExtendedLocation("qmbrfwcpwwhggszhrdjv", ExtendedLocationType.CustomLocation))
            {
                Properties = new DataflowProfileProperties
                {
                    InstanceCount = 1,
                },
            };
            ArmOperation<DataflowProfileResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, dataflowProfileName, data);
            DataflowProfileResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DataflowProfileResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_DataflowProfileCreateOrUpdateMulti()
        {
            // Generated from example definition: 2024-11-01/DataflowProfile_CreateOrUpdate_Multi.json
            // this example is just showing the usage of "DataflowProfileResource_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this InstanceResource created on azure
            // for more information of creating InstanceResource, please refer to the document of InstanceResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            ResourceIdentifier instanceResourceId = InstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName);
            InstanceResource instanceResource = client.GetInstanceResource(instanceResourceId);

            // get the collection of this DataflowProfileResource
            DataflowProfileResourceCollection collection = instanceResource.GetDataflowProfileResources();

            // invoke the operation
            string dataflowProfileName = "aio-dataflowprofile";
            DataflowProfileResourceData data = new DataflowProfileResourceData(new ExtendedLocation("qmbrfwcpwwhggszhrdjv", ExtendedLocationType.CustomLocation))
            {
                Properties = new DataflowProfileProperties
                {
                    InstanceCount = 3,
                },
            };
            ArmOperation<DataflowProfileResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, dataflowProfileName, data);
            DataflowProfileResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DataflowProfileResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_DataflowProfileGet()
        {
            // Generated from example definition: 2024-11-01/DataflowProfile_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "DataflowProfileResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this InstanceResource created on azure
            // for more information of creating InstanceResource, please refer to the document of InstanceResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            ResourceIdentifier instanceResourceId = InstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName);
            InstanceResource instanceResource = client.GetInstanceResource(instanceResourceId);

            // get the collection of this DataflowProfileResource
            DataflowProfileResourceCollection collection = instanceResource.GetDataflowProfileResources();

            // invoke the operation
            string dataflowProfileName = "resource-name123";
            DataflowProfileResource result = await collection.GetAsync(dataflowProfileName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DataflowProfileResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_DataflowProfileListByResourceGroup()
        {
            // Generated from example definition: 2024-11-01/DataflowProfile_ListByResourceGroup_MaximumSet_Gen.json
            // this example is just showing the usage of "DataflowProfileResource_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this InstanceResource created on azure
            // for more information of creating InstanceResource, please refer to the document of InstanceResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            ResourceIdentifier instanceResourceId = InstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName);
            InstanceResource instanceResource = client.GetInstanceResource(instanceResourceId);

            // get the collection of this DataflowProfileResource
            DataflowProfileResourceCollection collection = instanceResource.GetDataflowProfileResources();

            // invoke the operation and iterate over the result
            await foreach (DataflowProfileResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                DataflowProfileResourceData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_DataflowProfileGet()
        {
            // Generated from example definition: 2024-11-01/DataflowProfile_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "DataflowProfileResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this InstanceResource created on azure
            // for more information of creating InstanceResource, please refer to the document of InstanceResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            ResourceIdentifier instanceResourceId = InstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName);
            InstanceResource instanceResource = client.GetInstanceResource(instanceResourceId);

            // get the collection of this DataflowProfileResource
            DataflowProfileResourceCollection collection = instanceResource.GetDataflowProfileResources();

            // invoke the operation
            string dataflowProfileName = "resource-name123";
            bool result = await collection.ExistsAsync(dataflowProfileName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_DataflowProfileGet()
        {
            // Generated from example definition: 2024-11-01/DataflowProfile_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "DataflowProfileResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this InstanceResource created on azure
            // for more information of creating InstanceResource, please refer to the document of InstanceResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            ResourceIdentifier instanceResourceId = InstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName);
            InstanceResource instanceResource = client.GetInstanceResource(instanceResourceId);

            // get the collection of this DataflowProfileResource
            DataflowProfileResourceCollection collection = instanceResource.GetDataflowProfileResources();

            // invoke the operation
            string dataflowProfileName = "resource-name123";
            NullableResponse<DataflowProfileResource> response = await collection.GetIfExistsAsync(dataflowProfileName);
            DataflowProfileResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                DataflowProfileResourceData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
