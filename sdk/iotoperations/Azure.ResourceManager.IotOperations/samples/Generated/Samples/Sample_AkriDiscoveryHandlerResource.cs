// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.IotOperations.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.IotOperations.Samples
{
    public partial class Sample_AkriDiscoveryHandlerResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_AkriDiscoveryHandlerGetMaximumSet()
        {
            // Generated from example definition: 2025-07-01-preview/AkriDiscoveryHandler_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "AkriDiscoveryHandlerResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AkriDiscoveryHandlerResource created on azure
            // for more information of creating AkriDiscoveryHandlerResource, please refer to the document of AkriDiscoveryHandlerResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            string akriDiscoveryHandlerName = "resource-name123";
            ResourceIdentifier akriDiscoveryHandlerResourceId = AkriDiscoveryHandlerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName, akriDiscoveryHandlerName);
            AkriDiscoveryHandlerResource akriDiscoveryHandlerResource = client.GetAkriDiscoveryHandlerResource(akriDiscoveryHandlerResourceId);

            // invoke the operation
            AkriDiscoveryHandlerResource result = await akriDiscoveryHandlerResource.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AkriDiscoveryHandlerResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_AkriDiscoveryHandlerDeleteMaximumSet()
        {
            // Generated from example definition: 2025-07-01-preview/AkriDiscoveryHandler_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "AkriDiscoveryHandlerResource_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AkriDiscoveryHandlerResource created on azure
            // for more information of creating AkriDiscoveryHandlerResource, please refer to the document of AkriDiscoveryHandlerResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            string akriDiscoveryHandlerName = "resource-name123";
            ResourceIdentifier akriDiscoveryHandlerResourceId = AkriDiscoveryHandlerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName, akriDiscoveryHandlerName);
            AkriDiscoveryHandlerResource akriDiscoveryHandlerResource = client.GetAkriDiscoveryHandlerResource(akriDiscoveryHandlerResourceId);

            // invoke the operation
            await akriDiscoveryHandlerResource.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_AkriDiscoveryHandlerCreateOrUpdateMaximumSet()
        {
            // Generated from example definition: 2025-07-01-preview/AkriDiscoveryHandler_CreateOrUpdate_MaximumSet_Gen.json
            // this example is just showing the usage of "AkriDiscoveryHandlerResource_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AkriDiscoveryHandlerResource created on azure
            // for more information of creating AkriDiscoveryHandlerResource, please refer to the document of AkriDiscoveryHandlerResource
            string subscriptionId = "F8C729F9-DF9C-4743-848F-96EE433D8E53";
            string resourceGroupName = "rgiotoperations";
            string instanceName = "resource-name123";
            string akriDiscoveryHandlerName = "resource-name123";
            ResourceIdentifier akriDiscoveryHandlerResourceId = AkriDiscoveryHandlerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, instanceName, akriDiscoveryHandlerName);
            AkriDiscoveryHandlerResource akriDiscoveryHandlerResource = client.GetAkriDiscoveryHandlerResource(akriDiscoveryHandlerResourceId);

            // invoke the operation
            AkriDiscoveryHandlerResourceData data = new AkriDiscoveryHandlerResourceData
            {
                Properties = new AkriDiscoveryHandlerProperties(new AkriDiscoveryHandlerDiscoverableDeviceEndpointType[]
            {
new AkriDiscoveryHandlerDiscoverableDeviceEndpointType("chkkpymxhp", "chkkpymxhp")
            }, new AkriDiscoveryHandlerImageConfiguration("vrglpcosiuiulgwqkjbrdxnyjphp")
            {
                ImagePullPolicy = AkriConnectorsImagePullPolicy.Always,
                Replicas = 4,
            }, null)
                {
                    AioMetadata = new AkriDiscoveryHandlerAioMetadata
                    {
                        AioMinVersion = "nxusafsppaikld",
                        AioMaxVersion = "yrmlixhxsnrgialgwruyk",
                    },
                    AdditionalConfiguration =
{
["key2206"] = "ysosuqsgtnwlyq"
},
                    Mode = IotOperationsOperationalMode.Enabled,
                    MqttConnectionConfiguration = new AkriConnectorsMqttConnectionConfiguration
                    {
                        Host = "mfxhevl",
                        Protocol = AkriConnectorsMqttProtocolType.Mqtt,
                        KeepAliveSeconds = 0,
                        MaxInflightMessages = 0,
                        SessionExpirySeconds = 0,
                        Tls = new IotOperationsTlsProperties
                        {
                            Mode = IotOperationsOperationalMode.Enabled,
                            TrustedCaCertificateConfigMapRef = "tectjjvukvelsreihwadh",
                        },
                    },
                    Secrets = { new AkriConnectorsSecret("qblyfotyqcojcchpji", "daizzyhqznrvmmrg", "vqxrhffxxfwqagwjcjimkmzjoxu") },
                },
                ExtendedLocation = new IotOperationsExtendedLocation("qmbrfwcpwwhggszhrdjv", IotOperationsExtendedLocationType.CustomLocation),
            };
            ArmOperation<AkriDiscoveryHandlerResource> lro = await akriDiscoveryHandlerResource.UpdateAsync(WaitUntil.Completed, data);
            AkriDiscoveryHandlerResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AkriDiscoveryHandlerResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
