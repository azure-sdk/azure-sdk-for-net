// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.ResourceManager.IotOperations.Models
{
    /// <summary> AkriDiscoveryHandler properties. </summary>
    public partial class AkriDiscoveryHandlerProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="AkriDiscoveryHandlerProperties"/>. </summary>
        /// <param name="discoverableDeviceEndpointTypes"> Device inbound endpoint types. </param>
        /// <param name="imageConfiguration"> The image configuration for the AkriDiscoveryHandler. </param>
        /// <param name="schedule">
        /// Schedule for the AkriDiscoveryHandler.
        /// Please note <see cref="AkriDiscoveryHandlerSchedule"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AkriDiscoveryHandlerScheduleContinuous"/>, <see cref="AkriDiscoveryHandlerScheduleCron"/> and <see cref="AkriDiscoveryHandlerScheduleRunOnce"/>.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="discoverableDeviceEndpointTypes"/>, <paramref name="imageConfiguration"/> or <paramref name="schedule"/> is null. </exception>
        public AkriDiscoveryHandlerProperties(IEnumerable<AkriDiscoveryHandlerDiscoverableDeviceEndpointType> discoverableDeviceEndpointTypes, AkriDiscoveryHandlerImageConfiguration imageConfiguration, AkriDiscoveryHandlerSchedule schedule)
        {
            Argument.AssertNotNull(discoverableDeviceEndpointTypes, nameof(discoverableDeviceEndpointTypes));
            Argument.AssertNotNull(imageConfiguration, nameof(imageConfiguration));
            Argument.AssertNotNull(schedule, nameof(schedule));

            AdditionalConfiguration = new ChangeTrackingDictionary<string, string>();
            DiscoverableDeviceEndpointTypes = discoverableDeviceEndpointTypes.ToList();
            ImageConfiguration = imageConfiguration;
            Schedule = schedule;
            Secrets = new ChangeTrackingList<AkriConnectorsSecret>();
        }

        /// <summary> Initializes a new instance of <see cref="AkriDiscoveryHandlerProperties"/>. </summary>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="aioMetadata"> Metadata about AIO. </param>
        /// <param name="additionalConfiguration"> Additional configuration for the AkriDiscoveryHandler. </param>
        /// <param name="diagnostics"> Diagnostics settings for the AkriDiscoveryHandler. </param>
        /// <param name="mode"> Mode of the AkriDiscoveryHandler. </param>
        /// <param name="discoverableDeviceEndpointTypes"> Device inbound endpoint types. </param>
        /// <param name="mqttConnectionConfiguration"> Mqtt connection configuration settings. </param>
        /// <param name="imageConfiguration"> The image configuration for the AkriDiscoveryHandler. </param>
        /// <param name="schedule">
        /// Schedule for the AkriDiscoveryHandler.
        /// Please note <see cref="AkriDiscoveryHandlerSchedule"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AkriDiscoveryHandlerScheduleContinuous"/>, <see cref="AkriDiscoveryHandlerScheduleCron"/> and <see cref="AkriDiscoveryHandlerScheduleRunOnce"/>.
        /// </param>
        /// <param name="secrets"> Secrets that will be mounted onto discovery handler. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal AkriDiscoveryHandlerProperties(IotOperationsProvisioningState? provisioningState, AkriDiscoveryHandlerAioMetadata aioMetadata, IDictionary<string, string> additionalConfiguration, AkriDiscoveryHandlerDiagnostics diagnostics, IotOperationsOperationalMode? mode, IList<AkriDiscoveryHandlerDiscoverableDeviceEndpointType> discoverableDeviceEndpointTypes, AkriConnectorsMqttConnectionConfiguration mqttConnectionConfiguration, AkriDiscoveryHandlerImageConfiguration imageConfiguration, AkriDiscoveryHandlerSchedule schedule, IList<AkriConnectorsSecret> secrets, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ProvisioningState = provisioningState;
            AioMetadata = aioMetadata;
            AdditionalConfiguration = additionalConfiguration;
            Diagnostics = diagnostics;
            Mode = mode;
            DiscoverableDeviceEndpointTypes = discoverableDeviceEndpointTypes;
            MqttConnectionConfiguration = mqttConnectionConfiguration;
            ImageConfiguration = imageConfiguration;
            Schedule = schedule;
            Secrets = secrets;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="AkriDiscoveryHandlerProperties"/> for deserialization. </summary>
        internal AkriDiscoveryHandlerProperties()
        {
        }

        /// <summary> The status of the last operation. </summary>
        public IotOperationsProvisioningState? ProvisioningState { get; }
        /// <summary> Metadata about AIO. </summary>
        public AkriDiscoveryHandlerAioMetadata AioMetadata { get; set; }
        /// <summary> Additional configuration for the AkriDiscoveryHandler. </summary>
        public IDictionary<string, string> AdditionalConfiguration { get; }
        /// <summary> Diagnostics settings for the AkriDiscoveryHandler. </summary>
        internal AkriDiscoveryHandlerDiagnostics Diagnostics { get; set; }
        /// <summary> The log level. Examples - 'debug', 'info', 'warn', 'error', 'trace'. </summary>
        public string DiagnosticsLevel
        {
            get => Diagnostics is null ? default : Diagnostics.Level;
            set
            {
                if (Diagnostics is null)
                    Diagnostics = new AkriDiscoveryHandlerDiagnostics();
                Diagnostics.Level = value;
            }
        }

        /// <summary> Mode of the AkriDiscoveryHandler. </summary>
        public IotOperationsOperationalMode? Mode { get; set; }
        /// <summary> Device inbound endpoint types. </summary>
        public IList<AkriDiscoveryHandlerDiscoverableDeviceEndpointType> DiscoverableDeviceEndpointTypes { get; }
        /// <summary> Mqtt connection configuration settings. </summary>
        public AkriConnectorsMqttConnectionConfiguration MqttConnectionConfiguration { get; set; }
        /// <summary> The image configuration for the AkriDiscoveryHandler. </summary>
        public AkriDiscoveryHandlerImageConfiguration ImageConfiguration { get; set; }
        /// <summary>
        /// Schedule for the AkriDiscoveryHandler.
        /// Please note <see cref="AkriDiscoveryHandlerSchedule"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AkriDiscoveryHandlerScheduleContinuous"/>, <see cref="AkriDiscoveryHandlerScheduleCron"/> and <see cref="AkriDiscoveryHandlerScheduleRunOnce"/>.
        /// </summary>
        public AkriDiscoveryHandlerSchedule Schedule { get; set; }
        /// <summary> Secrets that will be mounted onto discovery handler. </summary>
        public IList<AkriConnectorsSecret> Secrets { get; }
    }
}
