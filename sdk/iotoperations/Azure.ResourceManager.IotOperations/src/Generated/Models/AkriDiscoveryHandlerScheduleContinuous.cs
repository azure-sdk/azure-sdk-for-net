// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.IotOperations.Models
{
    /// <summary> AkriDiscoveryHandlerScheduleContinuous properties. </summary>
    public partial class AkriDiscoveryHandlerScheduleContinuous : AkriDiscoveryHandlerSchedule
    {
        /// <summary> Initializes a new instance of <see cref="AkriDiscoveryHandlerScheduleContinuous"/>. </summary>
        /// <param name="continuous"> The time to run the discovery handler. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="continuous"/> is null. </exception>
        public AkriDiscoveryHandlerScheduleContinuous(string continuous)
        {
            Argument.AssertNotNull(continuous, nameof(continuous));

            Continuous = continuous;
            ScheduleType = AkriDiscoveryHandlerScheduleType.Continuous;
        }

        /// <summary> Initializes a new instance of <see cref="AkriDiscoveryHandlerScheduleContinuous"/>. </summary>
        /// <param name="scheduleType"> Schedule type. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="continuous"> The time to run the discovery handler. </param>
        internal AkriDiscoveryHandlerScheduleContinuous(AkriDiscoveryHandlerScheduleType scheduleType, IDictionary<string, BinaryData> serializedAdditionalRawData, string continuous) : base(scheduleType, serializedAdditionalRawData)
        {
            Continuous = continuous;
            ScheduleType = scheduleType;
        }

        /// <summary> Initializes a new instance of <see cref="AkriDiscoveryHandlerScheduleContinuous"/> for deserialization. </summary>
        internal AkriDiscoveryHandlerScheduleContinuous()
        {
        }

        /// <summary> The time to run the discovery handler. </summary>
        public string Continuous { get; set; }
    }
}
