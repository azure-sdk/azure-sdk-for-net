// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Language.AnalyzeText
{
    /// <summary> Enum for sentiment in SentenceAssessment. </summary>
    public readonly partial struct SentenceAssessmentSentiment : IEquatable<SentenceAssessmentSentiment>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SentenceAssessmentSentiment"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SentenceAssessmentSentiment(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PositiveValue = "positive";
        private const string MixedValue = "mixed";
        private const string NegativeValue = "negative";

        /// <summary> positive. </summary>
        public static SentenceAssessmentSentiment Positive { get; } = new SentenceAssessmentSentiment(PositiveValue);
        /// <summary> mixed. </summary>
        public static SentenceAssessmentSentiment Mixed { get; } = new SentenceAssessmentSentiment(MixedValue);
        /// <summary> negative. </summary>
        public static SentenceAssessmentSentiment Negative { get; } = new SentenceAssessmentSentiment(NegativeValue);
        /// <summary> Determines if two <see cref="SentenceAssessmentSentiment"/> values are the same. </summary>
        public static bool operator ==(SentenceAssessmentSentiment left, SentenceAssessmentSentiment right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SentenceAssessmentSentiment"/> values are not the same. </summary>
        public static bool operator !=(SentenceAssessmentSentiment left, SentenceAssessmentSentiment right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SentenceAssessmentSentiment"/>. </summary>
        public static implicit operator SentenceAssessmentSentiment(string value) => new SentenceAssessmentSentiment(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SentenceAssessmentSentiment other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SentenceAssessmentSentiment other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
