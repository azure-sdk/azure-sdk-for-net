// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Language.AnalyzeText
{
    /// <summary> Enum for sentiment in SentenceTarget. </summary>
    public readonly partial struct SentenceTargetSentiment : IEquatable<SentenceTargetSentiment>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SentenceTargetSentiment"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SentenceTargetSentiment(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PositiveValue = "positive";
        private const string MixedValue = "mixed";
        private const string NegativeValue = "negative";

        /// <summary> positive. </summary>
        public static SentenceTargetSentiment Positive { get; } = new SentenceTargetSentiment(PositiveValue);
        /// <summary> mixed. </summary>
        public static SentenceTargetSentiment Mixed { get; } = new SentenceTargetSentiment(MixedValue);
        /// <summary> negative. </summary>
        public static SentenceTargetSentiment Negative { get; } = new SentenceTargetSentiment(NegativeValue);
        /// <summary> Determines if two <see cref="SentenceTargetSentiment"/> values are the same. </summary>
        public static bool operator ==(SentenceTargetSentiment left, SentenceTargetSentiment right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SentenceTargetSentiment"/> values are not the same. </summary>
        public static bool operator !=(SentenceTargetSentiment left, SentenceTargetSentiment right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SentenceTargetSentiment"/>. </summary>
        public static implicit operator SentenceTargetSentiment(string value) => new SentenceTargetSentiment(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SentenceTargetSentiment other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SentenceTargetSentiment other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
