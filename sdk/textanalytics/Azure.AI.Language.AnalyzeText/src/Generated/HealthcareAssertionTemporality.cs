// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Language.AnalyzeText
{
    /// <summary> Enum for temporality in HealthcareAssertion. </summary>
    public readonly partial struct HealthcareAssertionTemporality : IEquatable<HealthcareAssertionTemporality>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="HealthcareAssertionTemporality"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public HealthcareAssertionTemporality(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CurrentValue = "current";
        private const string PastValue = "past";
        private const string FutureValue = "future";

        /// <summary> current. </summary>
        public static HealthcareAssertionTemporality Current { get; } = new HealthcareAssertionTemporality(CurrentValue);
        /// <summary> past. </summary>
        public static HealthcareAssertionTemporality Past { get; } = new HealthcareAssertionTemporality(PastValue);
        /// <summary> future. </summary>
        public static HealthcareAssertionTemporality Future { get; } = new HealthcareAssertionTemporality(FutureValue);
        /// <summary> Determines if two <see cref="HealthcareAssertionTemporality"/> values are the same. </summary>
        public static bool operator ==(HealthcareAssertionTemporality left, HealthcareAssertionTemporality right) => left.Equals(right);
        /// <summary> Determines if two <see cref="HealthcareAssertionTemporality"/> values are not the same. </summary>
        public static bool operator !=(HealthcareAssertionTemporality left, HealthcareAssertionTemporality right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="HealthcareAssertionTemporality"/>. </summary>
        public static implicit operator HealthcareAssertionTemporality(string value) => new HealthcareAssertionTemporality(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is HealthcareAssertionTemporality other && Equals(other);
        /// <inheritdoc />
        public bool Equals(HealthcareAssertionTemporality other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
