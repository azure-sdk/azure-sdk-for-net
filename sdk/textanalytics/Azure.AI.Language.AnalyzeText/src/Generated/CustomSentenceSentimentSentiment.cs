// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Language.AnalyzeText
{
    /// <summary> Enum for sentiment in CustomSentenceSentiment. </summary>
    public readonly partial struct CustomSentenceSentimentSentiment : IEquatable<CustomSentenceSentimentSentiment>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="CustomSentenceSentimentSentiment"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public CustomSentenceSentimentSentiment(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PositiveValue = "positive";
        private const string NeutralValue = "neutral";
        private const string NegativeValue = "negative";

        /// <summary> positive. </summary>
        public static CustomSentenceSentimentSentiment Positive { get; } = new CustomSentenceSentimentSentiment(PositiveValue);
        /// <summary> neutral. </summary>
        public static CustomSentenceSentimentSentiment Neutral { get; } = new CustomSentenceSentimentSentiment(NeutralValue);
        /// <summary> negative. </summary>
        public static CustomSentenceSentimentSentiment Negative { get; } = new CustomSentenceSentimentSentiment(NegativeValue);
        /// <summary> Determines if two <see cref="CustomSentenceSentimentSentiment"/> values are the same. </summary>
        public static bool operator ==(CustomSentenceSentimentSentiment left, CustomSentenceSentimentSentiment right) => left.Equals(right);
        /// <summary> Determines if two <see cref="CustomSentenceSentimentSentiment"/> values are not the same. </summary>
        public static bool operator !=(CustomSentenceSentimentSentiment left, CustomSentenceSentimentSentiment right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="CustomSentenceSentimentSentiment"/>. </summary>
        public static implicit operator CustomSentenceSentimentSentiment(string value) => new CustomSentenceSentimentSentiment(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is CustomSentenceSentimentSentiment other && Equals(other);
        /// <inheritdoc />
        public bool Equals(CustomSentenceSentimentSentiment other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
