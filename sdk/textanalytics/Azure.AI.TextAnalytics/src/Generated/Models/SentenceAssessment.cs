// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.AI.TextAnalytics.Models
{
    /// <summary> Represents a sentence assessment and the assessments or target objects related to it. </summary>
    internal partial class SentenceAssessment
    {
        /// <summary> Initializes a new instance of <see cref="SentenceAssessment"/>. </summary>
        /// <param name="sentiment"> The sentiment of the sentence. </param>
        /// <param name="confidenceScores"> Represents the confidence scores across all sentiment classes: positive and negative. </param>
        /// <param name="offset"> The target offset from the start of the sentence. </param>
        /// <param name="length"> The length of the target. </param>
        /// <param name="text"> The target text detected. </param>
        /// <param name="isNegated"> The indicator representing if the assessment is negated. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sentiment"/>, <paramref name="confidenceScores"/> or <paramref name="text"/> is null. </exception>
        internal SentenceAssessment(string sentiment, TargetConfidenceScoreLabel confidenceScores, int offset, int length, string text, bool isNegated)
        {
            Argument.AssertNotNull(sentiment, nameof(sentiment));
            Argument.AssertNotNull(confidenceScores, nameof(confidenceScores));
            Argument.AssertNotNull(text, nameof(text));

            Sentiment = sentiment;
            ConfidenceScores = confidenceScores;
            Offset = offset;
            Length = length;
            Text = text;
            IsNegated = isNegated;
        }
        /// <summary> Represents the confidence scores across all sentiment classes: positive and negative. </summary>
        public TargetConfidenceScoreLabel ConfidenceScores { get; }
        /// <summary> The target offset from the start of the sentence. </summary>
        public int Offset { get; }
        /// <summary> The length of the target. </summary>
        public int Length { get; }
        /// <summary> The target text detected. </summary>
        public string Text { get; }
        /// <summary> The indicator representing if the assessment is negated. </summary>
        public bool IsNegated { get; }
    }
}
