// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Nginx.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The capacity parameters of the profile.
    /// </summary>
    public partial class ScaleProfileCapacity
    {
        /// <summary>
        /// Initializes a new instance of the ScaleProfileCapacity class.
        /// </summary>
        public ScaleProfileCapacity()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ScaleProfileCapacity class.
        /// </summary>
        /// <param name="min">The minimum number of NCUs the deployment can be
        /// autoscaled to.</param>
        /// <param name="max">The maximum number of NCUs the deployment can be
        /// autoscaled to.</param>
        public ScaleProfileCapacity(int min, int max)
        {
            Min = min;
            Max = max;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the minimum number of NCUs the deployment can be
        /// autoscaled to.
        /// </summary>
        [JsonProperty(PropertyName = "min")]
        public int Min { get; set; }

        /// <summary>
        /// Gets or sets the maximum number of NCUs the deployment can be
        /// autoscaled to.
        /// </summary>
        [JsonProperty(PropertyName = "max")]
        public int Max { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Min < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Min", 0);
            }
            if (Max < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Max", 0);
            }
        }
    }
}
