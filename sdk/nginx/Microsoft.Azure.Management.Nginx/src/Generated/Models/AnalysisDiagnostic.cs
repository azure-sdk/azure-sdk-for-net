// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Nginx.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// An error object found during the analysis of an NGINX configuration.
    /// </summary>
    public partial class AnalysisDiagnostic
    {
        /// <summary>
        /// Initializes a new instance of the AnalysisDiagnostic class.
        /// </summary>
        public AnalysisDiagnostic()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AnalysisDiagnostic class.
        /// </summary>
        /// <param name="file">the filepath of the most relevant config
        /// file</param>
        /// <param name="id">Unique identifier for the error</param>
        public AnalysisDiagnostic(string directive, string description, string file, double line, string message, string rule, string id = default(string))
        {
            Id = id;
            Directive = directive;
            Description = description;
            File = file;
            Line = line;
            Message = message;
            Rule = rule;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets unique identifier for the error
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "directive")]
        public string Directive { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the filepath of the most relevant config file
        /// </summary>
        [JsonProperty(PropertyName = "file")]
        public string File { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "line")]
        public double Line { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "message")]
        public string Message { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "rule")]
        public string Rule { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Directive == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Directive");
            }
            if (Description == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Description");
            }
            if (File == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "File");
            }
            if (Message == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Message");
            }
            if (Rule == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Rule");
            }
        }
    }
}
