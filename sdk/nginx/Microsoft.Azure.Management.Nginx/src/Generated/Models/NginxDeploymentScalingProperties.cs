// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Nginx.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Information on how the deployment will be scaled.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class NginxDeploymentScalingProperties
    {
        /// <summary>
        /// Initializes a new instance of the NginxDeploymentScalingProperties
        /// class.
        /// </summary>
        public NginxDeploymentScalingProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NginxDeploymentScalingProperties
        /// class.
        /// </summary>
        public NginxDeploymentScalingProperties(IList<ScaleProfile> profiles, int? capacity = default(int?))
        {
            Capacity = capacity;
            Profiles = profiles;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "capacity")]
        public int? Capacity { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "autoScaleSettings.profiles")]
        public IList<ScaleProfile> Profiles { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Profiles == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Profiles");
            }
            if (Profiles != null)
            {
                foreach (var element in Profiles)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
