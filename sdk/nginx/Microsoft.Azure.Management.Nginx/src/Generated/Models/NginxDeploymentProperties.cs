// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Nginx.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class NginxDeploymentProperties
    {
        /// <summary>
        /// Initializes a new instance of the NginxDeploymentProperties class.
        /// </summary>
        public NginxDeploymentProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NginxDeploymentProperties class.
        /// </summary>
        /// <param name="provisioningState">Possible values include:
        /// 'Accepted', 'Creating', 'Updating', 'Deleting', 'Succeeded',
        /// 'Failed', 'Canceled', 'Deleted', 'NotSpecified'</param>
        /// <param name="ipAddress">The IP address of the deployment.</param>
        /// <param name="nginxAppProtect">Settings for NGINX App Protect
        /// (NAP)</param>
        /// <param name="dataplaneApiEndpoint">Dataplane API endpoint for the
        /// caller to update the NGINX state of the deployment.</param>
        public NginxDeploymentProperties(string provisioningState = default(string), string nginxVersion = default(string), NginxNetworkProfile networkProfile = default(NginxNetworkProfile), string ipAddress = default(string), bool? enableDiagnosticsSupport = default(bool?), NginxLogging logging = default(NginxLogging), NginxDeploymentScalingProperties scalingProperties = default(NginxDeploymentScalingProperties), AutoUpgradeProfile autoUpgradeProfile = default(AutoUpgradeProfile), NginxDeploymentUserProfile userProfile = default(NginxDeploymentUserProfile), NginxDeploymentPropertiesNginxAppProtect nginxAppProtect = default(NginxDeploymentPropertiesNginxAppProtect), string dataplaneApiEndpoint = default(string))
        {
            ProvisioningState = provisioningState;
            NginxVersion = nginxVersion;
            NetworkProfile = networkProfile;
            IpAddress = ipAddress;
            EnableDiagnosticsSupport = enableDiagnosticsSupport;
            Logging = logging;
            ScalingProperties = scalingProperties;
            AutoUpgradeProfile = autoUpgradeProfile;
            UserProfile = userProfile;
            NginxAppProtect = nginxAppProtect;
            DataplaneApiEndpoint = dataplaneApiEndpoint;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets possible values include: 'Accepted', 'Creating',
        /// 'Updating', 'Deleting', 'Succeeded', 'Failed', 'Canceled',
        /// 'Deleted', 'NotSpecified'
        /// </summary>
        [JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "nginxVersion")]
        public string NginxVersion { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "networkProfile")]
        public NginxNetworkProfile NetworkProfile { get; set; }

        /// <summary>
        /// Gets the IP address of the deployment.
        /// </summary>
        [JsonProperty(PropertyName = "ipAddress")]
        public string IpAddress { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "enableDiagnosticsSupport")]
        public bool? EnableDiagnosticsSupport { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "logging")]
        public NginxLogging Logging { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "scalingProperties")]
        public NginxDeploymentScalingProperties ScalingProperties { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "autoUpgradeProfile")]
        public AutoUpgradeProfile AutoUpgradeProfile { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "userProfile")]
        public NginxDeploymentUserProfile UserProfile { get; set; }

        /// <summary>
        /// Gets or sets settings for NGINX App Protect (NAP)
        /// </summary>
        [JsonProperty(PropertyName = "nginxAppProtect")]
        public NginxDeploymentPropertiesNginxAppProtect NginxAppProtect { get; set; }

        /// <summary>
        /// Gets dataplane API endpoint for the caller to update the NGINX
        /// state of the deployment.
        /// </summary>
        [JsonProperty(PropertyName = "dataplaneApiEndpoint")]
        public string DataplaneApiEndpoint { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ScalingProperties != null)
            {
                ScalingProperties.Validate();
            }
            if (AutoUpgradeProfile != null)
            {
                AutoUpgradeProfile.Validate();
            }
            if (UserProfile != null)
            {
                UserProfile.Validate();
            }
            if (NginxAppProtect != null)
            {
                NginxAppProtect.Validate();
            }
        }
    }
}
