// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Nginx
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ApiKeysOperations.
    /// </summary>
    public static partial class ApiKeysOperationsExtensions
    {
            /// <summary>
            /// Create or update an API Key for the Nginx deployment in order to access the
            /// dataplane API endpoint
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='deploymentName'>
            /// The name of targeted NGINX deployment
            /// </param>
            /// <param name='properties'>
            /// </param>
            public static NginxDeploymentApiKeyResponse CreateOrUpdate(this IApiKeysOperations operations, string resourceGroupName, string deploymentName, NginxDeploymentApiKeyRequestProperties properties = default(NginxDeploymentApiKeyRequestProperties))
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, deploymentName, properties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update an API Key for the Nginx deployment in order to access the
            /// dataplane API endpoint
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='deploymentName'>
            /// The name of targeted NGINX deployment
            /// </param>
            /// <param name='properties'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NginxDeploymentApiKeyResponse> CreateOrUpdateAsync(this IApiKeysOperations operations, string resourceGroupName, string deploymentName, NginxDeploymentApiKeyRequestProperties properties = default(NginxDeploymentApiKeyRequestProperties), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, deploymentName, properties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete API key for Nginx deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='deploymentName'>
            /// The name of targeted NGINX deployment
            /// </param>
            public static void Delete(this IApiKeysOperations operations, string resourceGroupName, string deploymentName)
            {
                operations.DeleteAsync(resourceGroupName, deploymentName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete API key for Nginx deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='deploymentName'>
            /// The name of targeted NGINX deployment
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IApiKeysOperations operations, string resourceGroupName, string deploymentName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, deploymentName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get the specified API Key of the given Nginx deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='deploymentName'>
            /// The name of targeted NGINX deployment
            /// </param>
            public static NginxDeploymentApiKeyResponse Get(this IApiKeysOperations operations, string resourceGroupName, string deploymentName)
            {
                return operations.GetAsync(resourceGroupName, deploymentName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the specified API Key of the given Nginx deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='deploymentName'>
            /// The name of targeted NGINX deployment
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NginxDeploymentApiKeyResponse> GetAsync(this IApiKeysOperations operations, string resourceGroupName, string deploymentName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, deploymentName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all API Keys of the given Nginx deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='deploymentName'>
            /// The name of targeted NGINX deployment
            /// </param>
            public static IPage<NginxDeploymentApiKeyResponse> List(this IApiKeysOperations operations, string resourceGroupName, string deploymentName)
            {
                return operations.ListAsync(resourceGroupName, deploymentName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all API Keys of the given Nginx deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='deploymentName'>
            /// The name of targeted NGINX deployment
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<NginxDeploymentApiKeyResponse>> ListAsync(this IApiKeysOperations operations, string resourceGroupName, string deploymentName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, deploymentName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all API Keys of the given Nginx deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<NginxDeploymentApiKeyResponse> ListNext(this IApiKeysOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all API Keys of the given Nginx deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<NginxDeploymentApiKeyResponse>> ListNextAsync(this IApiKeysOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
