// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.PolicyInsights
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ComponentPolicyStatesOperations.
    /// </summary>
    public static partial class ComponentPolicyStatesOperationsExtensions
    {
            /// <summary>
            /// Queries component policy states under subscription scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='top'>
            /// Maximum number of records to return.
            /// </param>
            /// <param name='orderBy'>
            /// Ordering expression using OData notation. One or more comma-separated
            /// column names with an optional "desc" (the default) or "asc", e.g.
            /// "$orderby=PolicyAssignmentId, ResourceId asc".
            /// </param>
            /// <param name='select'>
            /// Select expression using OData notation. Limits the columns on each record
            /// to just those requested, e.g. "$select=PolicyAssignmentId, ResourceId".
            /// </param>
            /// <param name='fromParameter'>
            /// ISO 8601 formatted timestamp specifying the start time of the interval to
            /// query. When not specified, the service uses ($to - 1-day).
            /// </param>
            /// <param name='to'>
            /// ISO 8601 formatted timestamp specifying the end time of the interval to
            /// query. When not specified, the service uses request time.
            /// </param>
            /// <param name='filter'>
            /// OData filter expression.
            /// </param>
            /// <param name='apply'>
            /// OData apply expression for aggregations.
            /// </param>
            public static ComponentPolicyStatesQueryResults ListQueryResultsForSubscription(this IComponentPolicyStatesOperations operations, string subscriptionId, int? top = default(int?), string orderBy = default(string), string select = default(string), System.DateTime? fromParameter = default(System.DateTime?), System.DateTime? to = default(System.DateTime?), string filter = default(string), string apply = default(string))
            {
                return operations.ListQueryResultsForSubscriptionAsync(subscriptionId, top, orderBy, select, fromParameter, to, filter, apply).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Queries component policy states under subscription scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='top'>
            /// Maximum number of records to return.
            /// </param>
            /// <param name='orderBy'>
            /// Ordering expression using OData notation. One or more comma-separated
            /// column names with an optional "desc" (the default) or "asc", e.g.
            /// "$orderby=PolicyAssignmentId, ResourceId asc".
            /// </param>
            /// <param name='select'>
            /// Select expression using OData notation. Limits the columns on each record
            /// to just those requested, e.g. "$select=PolicyAssignmentId, ResourceId".
            /// </param>
            /// <param name='fromParameter'>
            /// ISO 8601 formatted timestamp specifying the start time of the interval to
            /// query. When not specified, the service uses ($to - 1-day).
            /// </param>
            /// <param name='to'>
            /// ISO 8601 formatted timestamp specifying the end time of the interval to
            /// query. When not specified, the service uses request time.
            /// </param>
            /// <param name='filter'>
            /// OData filter expression.
            /// </param>
            /// <param name='apply'>
            /// OData apply expression for aggregations.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ComponentPolicyStatesQueryResults> ListQueryResultsForSubscriptionAsync(this IComponentPolicyStatesOperations operations, string subscriptionId, int? top = default(int?), string orderBy = default(string), string select = default(string), System.DateTime? fromParameter = default(System.DateTime?), System.DateTime? to = default(System.DateTime?), string filter = default(string), string apply = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListQueryResultsForSubscriptionWithHttpMessagesAsync(subscriptionId, top, orderBy, select, fromParameter, to, filter, apply, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Queries component policy states under resource group scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group name.
            /// </param>
            /// <param name='top'>
            /// Maximum number of records to return.
            /// </param>
            /// <param name='orderBy'>
            /// Ordering expression using OData notation. One or more comma-separated
            /// column names with an optional "desc" (the default) or "asc", e.g.
            /// "$orderby=PolicyAssignmentId, ResourceId asc".
            /// </param>
            /// <param name='select'>
            /// Select expression using OData notation. Limits the columns on each record
            /// to just those requested, e.g. "$select=PolicyAssignmentId, ResourceId".
            /// </param>
            /// <param name='fromParameter'>
            /// ISO 8601 formatted timestamp specifying the start time of the interval to
            /// query. When not specified, the service uses ($to - 1-day).
            /// </param>
            /// <param name='to'>
            /// ISO 8601 formatted timestamp specifying the end time of the interval to
            /// query. When not specified, the service uses request time.
            /// </param>
            /// <param name='filter'>
            /// OData filter expression.
            /// </param>
            /// <param name='apply'>
            /// OData apply expression for aggregations.
            /// </param>
            public static ComponentPolicyStatesQueryResults ListQueryResultsForResourceGroup(this IComponentPolicyStatesOperations operations, string subscriptionId, string resourceGroupName, int? top = default(int?), string orderBy = default(string), string select = default(string), System.DateTime? fromParameter = default(System.DateTime?), System.DateTime? to = default(System.DateTime?), string filter = default(string), string apply = default(string))
            {
                return operations.ListQueryResultsForResourceGroupAsync(subscriptionId, resourceGroupName, top, orderBy, select, fromParameter, to, filter, apply).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Queries component policy states under resource group scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group name.
            /// </param>
            /// <param name='top'>
            /// Maximum number of records to return.
            /// </param>
            /// <param name='orderBy'>
            /// Ordering expression using OData notation. One or more comma-separated
            /// column names with an optional "desc" (the default) or "asc", e.g.
            /// "$orderby=PolicyAssignmentId, ResourceId asc".
            /// </param>
            /// <param name='select'>
            /// Select expression using OData notation. Limits the columns on each record
            /// to just those requested, e.g. "$select=PolicyAssignmentId, ResourceId".
            /// </param>
            /// <param name='fromParameter'>
            /// ISO 8601 formatted timestamp specifying the start time of the interval to
            /// query. When not specified, the service uses ($to - 1-day).
            /// </param>
            /// <param name='to'>
            /// ISO 8601 formatted timestamp specifying the end time of the interval to
            /// query. When not specified, the service uses request time.
            /// </param>
            /// <param name='filter'>
            /// OData filter expression.
            /// </param>
            /// <param name='apply'>
            /// OData apply expression for aggregations.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ComponentPolicyStatesQueryResults> ListQueryResultsForResourceGroupAsync(this IComponentPolicyStatesOperations operations, string subscriptionId, string resourceGroupName, int? top = default(int?), string orderBy = default(string), string select = default(string), System.DateTime? fromParameter = default(System.DateTime?), System.DateTime? to = default(System.DateTime?), string filter = default(string), string apply = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListQueryResultsForResourceGroupWithHttpMessagesAsync(subscriptionId, resourceGroupName, top, orderBy, select, fromParameter, to, filter, apply, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Queries component policy states for the resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// Resource ID.
            /// </param>
            /// <param name='top'>
            /// Maximum number of records to return.
            /// </param>
            /// <param name='orderBy'>
            /// Ordering expression using OData notation. One or more comma-separated
            /// column names with an optional "desc" (the default) or "asc", e.g.
            /// "$orderby=PolicyAssignmentId, ResourceId asc".
            /// </param>
            /// <param name='select'>
            /// Select expression using OData notation. Limits the columns on each record
            /// to just those requested, e.g. "$select=PolicyAssignmentId, ResourceId".
            /// </param>
            /// <param name='fromParameter'>
            /// ISO 8601 formatted timestamp specifying the start time of the interval to
            /// query. When not specified, the service uses ($to - 1-day).
            /// </param>
            /// <param name='to'>
            /// ISO 8601 formatted timestamp specifying the end time of the interval to
            /// query. When not specified, the service uses request time.
            /// </param>
            /// <param name='filter'>
            /// OData filter expression.
            /// </param>
            /// <param name='apply'>
            /// OData apply expression for aggregations.
            /// </param>
            /// <param name='expand'>
            /// The $expand query parameter.
            /// </param>
            public static ComponentPolicyStatesQueryResults ListQueryResultsForResource(this IComponentPolicyStatesOperations operations, string resourceId, int? top = default(int?), string orderBy = default(string), string select = default(string), System.DateTime? fromParameter = default(System.DateTime?), System.DateTime? to = default(System.DateTime?), string filter = default(string), string apply = default(string), string expand = default(string))
            {
                return operations.ListQueryResultsForResourceAsync(resourceId, top, orderBy, select, fromParameter, to, filter, apply, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Queries component policy states for the resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// Resource ID.
            /// </param>
            /// <param name='top'>
            /// Maximum number of records to return.
            /// </param>
            /// <param name='orderBy'>
            /// Ordering expression using OData notation. One or more comma-separated
            /// column names with an optional "desc" (the default) or "asc", e.g.
            /// "$orderby=PolicyAssignmentId, ResourceId asc".
            /// </param>
            /// <param name='select'>
            /// Select expression using OData notation. Limits the columns on each record
            /// to just those requested, e.g. "$select=PolicyAssignmentId, ResourceId".
            /// </param>
            /// <param name='fromParameter'>
            /// ISO 8601 formatted timestamp specifying the start time of the interval to
            /// query. When not specified, the service uses ($to - 1-day).
            /// </param>
            /// <param name='to'>
            /// ISO 8601 formatted timestamp specifying the end time of the interval to
            /// query. When not specified, the service uses request time.
            /// </param>
            /// <param name='filter'>
            /// OData filter expression.
            /// </param>
            /// <param name='apply'>
            /// OData apply expression for aggregations.
            /// </param>
            /// <param name='expand'>
            /// The $expand query parameter.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ComponentPolicyStatesQueryResults> ListQueryResultsForResourceAsync(this IComponentPolicyStatesOperations operations, string resourceId, int? top = default(int?), string orderBy = default(string), string select = default(string), System.DateTime? fromParameter = default(System.DateTime?), System.DateTime? to = default(System.DateTime?), string filter = default(string), string apply = default(string), string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListQueryResultsForResourceWithHttpMessagesAsync(resourceId, top, orderBy, select, fromParameter, to, filter, apply, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Queries component policy states for the subscription level policy
            /// definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='policyDefinitionName'>
            /// Policy definition name.
            /// </param>
            /// <param name='top'>
            /// Maximum number of records to return.
            /// </param>
            /// <param name='orderBy'>
            /// Ordering expression using OData notation. One or more comma-separated
            /// column names with an optional "desc" (the default) or "asc", e.g.
            /// "$orderby=PolicyAssignmentId, ResourceId asc".
            /// </param>
            /// <param name='select'>
            /// Select expression using OData notation. Limits the columns on each record
            /// to just those requested, e.g. "$select=PolicyAssignmentId, ResourceId".
            /// </param>
            /// <param name='fromParameter'>
            /// ISO 8601 formatted timestamp specifying the start time of the interval to
            /// query. When not specified, the service uses ($to - 1-day).
            /// </param>
            /// <param name='to'>
            /// ISO 8601 formatted timestamp specifying the end time of the interval to
            /// query. When not specified, the service uses request time.
            /// </param>
            /// <param name='filter'>
            /// OData filter expression.
            /// </param>
            /// <param name='apply'>
            /// OData apply expression for aggregations.
            /// </param>
            public static ComponentPolicyStatesQueryResults ListQueryResultsForPolicyDefinition(this IComponentPolicyStatesOperations operations, string subscriptionId, string policyDefinitionName, int? top = default(int?), string orderBy = default(string), string select = default(string), System.DateTime? fromParameter = default(System.DateTime?), System.DateTime? to = default(System.DateTime?), string filter = default(string), string apply = default(string))
            {
                return operations.ListQueryResultsForPolicyDefinitionAsync(subscriptionId, policyDefinitionName, top, orderBy, select, fromParameter, to, filter, apply).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Queries component policy states for the subscription level policy
            /// definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='policyDefinitionName'>
            /// Policy definition name.
            /// </param>
            /// <param name='top'>
            /// Maximum number of records to return.
            /// </param>
            /// <param name='orderBy'>
            /// Ordering expression using OData notation. One or more comma-separated
            /// column names with an optional "desc" (the default) or "asc", e.g.
            /// "$orderby=PolicyAssignmentId, ResourceId asc".
            /// </param>
            /// <param name='select'>
            /// Select expression using OData notation. Limits the columns on each record
            /// to just those requested, e.g. "$select=PolicyAssignmentId, ResourceId".
            /// </param>
            /// <param name='fromParameter'>
            /// ISO 8601 formatted timestamp specifying the start time of the interval to
            /// query. When not specified, the service uses ($to - 1-day).
            /// </param>
            /// <param name='to'>
            /// ISO 8601 formatted timestamp specifying the end time of the interval to
            /// query. When not specified, the service uses request time.
            /// </param>
            /// <param name='filter'>
            /// OData filter expression.
            /// </param>
            /// <param name='apply'>
            /// OData apply expression for aggregations.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ComponentPolicyStatesQueryResults> ListQueryResultsForPolicyDefinitionAsync(this IComponentPolicyStatesOperations operations, string subscriptionId, string policyDefinitionName, int? top = default(int?), string orderBy = default(string), string select = default(string), System.DateTime? fromParameter = default(System.DateTime?), System.DateTime? to = default(System.DateTime?), string filter = default(string), string apply = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListQueryResultsForPolicyDefinitionWithHttpMessagesAsync(subscriptionId, policyDefinitionName, top, orderBy, select, fromParameter, to, filter, apply, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Queries component policy states for the subscription level policy
            /// assignment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='policyAssignmentName'>
            /// Policy assignment name.
            /// </param>
            /// <param name='top'>
            /// Maximum number of records to return.
            /// </param>
            /// <param name='orderBy'>
            /// Ordering expression using OData notation. One or more comma-separated
            /// column names with an optional "desc" (the default) or "asc", e.g.
            /// "$orderby=PolicyAssignmentId, ResourceId asc".
            /// </param>
            /// <param name='select'>
            /// Select expression using OData notation. Limits the columns on each record
            /// to just those requested, e.g. "$select=PolicyAssignmentId, ResourceId".
            /// </param>
            /// <param name='fromParameter'>
            /// ISO 8601 formatted timestamp specifying the start time of the interval to
            /// query. When not specified, the service uses ($to - 1-day).
            /// </param>
            /// <param name='to'>
            /// ISO 8601 formatted timestamp specifying the end time of the interval to
            /// query. When not specified, the service uses request time.
            /// </param>
            /// <param name='filter'>
            /// OData filter expression.
            /// </param>
            /// <param name='apply'>
            /// OData apply expression for aggregations.
            /// </param>
            public static ComponentPolicyStatesQueryResults ListQueryResultsForSubscriptionLevelPolicyAssignment(this IComponentPolicyStatesOperations operations, string subscriptionId, string policyAssignmentName, int? top = default(int?), string orderBy = default(string), string select = default(string), System.DateTime? fromParameter = default(System.DateTime?), System.DateTime? to = default(System.DateTime?), string filter = default(string), string apply = default(string))
            {
                return operations.ListQueryResultsForSubscriptionLevelPolicyAssignmentAsync(subscriptionId, policyAssignmentName, top, orderBy, select, fromParameter, to, filter, apply).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Queries component policy states for the subscription level policy
            /// assignment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='policyAssignmentName'>
            /// Policy assignment name.
            /// </param>
            /// <param name='top'>
            /// Maximum number of records to return.
            /// </param>
            /// <param name='orderBy'>
            /// Ordering expression using OData notation. One or more comma-separated
            /// column names with an optional "desc" (the default) or "asc", e.g.
            /// "$orderby=PolicyAssignmentId, ResourceId asc".
            /// </param>
            /// <param name='select'>
            /// Select expression using OData notation. Limits the columns on each record
            /// to just those requested, e.g. "$select=PolicyAssignmentId, ResourceId".
            /// </param>
            /// <param name='fromParameter'>
            /// ISO 8601 formatted timestamp specifying the start time of the interval to
            /// query. When not specified, the service uses ($to - 1-day).
            /// </param>
            /// <param name='to'>
            /// ISO 8601 formatted timestamp specifying the end time of the interval to
            /// query. When not specified, the service uses request time.
            /// </param>
            /// <param name='filter'>
            /// OData filter expression.
            /// </param>
            /// <param name='apply'>
            /// OData apply expression for aggregations.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ComponentPolicyStatesQueryResults> ListQueryResultsForSubscriptionLevelPolicyAssignmentAsync(this IComponentPolicyStatesOperations operations, string subscriptionId, string policyAssignmentName, int? top = default(int?), string orderBy = default(string), string select = default(string), System.DateTime? fromParameter = default(System.DateTime?), System.DateTime? to = default(System.DateTime?), string filter = default(string), string apply = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListQueryResultsForSubscriptionLevelPolicyAssignmentWithHttpMessagesAsync(subscriptionId, policyAssignmentName, top, orderBy, select, fromParameter, to, filter, apply, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Queries component policy states for the resource group level policy
            /// assignment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group name.
            /// </param>
            /// <param name='policyAssignmentName'>
            /// Policy assignment name.
            /// </param>
            /// <param name='top'>
            /// Maximum number of records to return.
            /// </param>
            /// <param name='orderBy'>
            /// Ordering expression using OData notation. One or more comma-separated
            /// column names with an optional "desc" (the default) or "asc", e.g.
            /// "$orderby=PolicyAssignmentId, ResourceId asc".
            /// </param>
            /// <param name='select'>
            /// Select expression using OData notation. Limits the columns on each record
            /// to just those requested, e.g. "$select=PolicyAssignmentId, ResourceId".
            /// </param>
            /// <param name='fromParameter'>
            /// ISO 8601 formatted timestamp specifying the start time of the interval to
            /// query. When not specified, the service uses ($to - 1-day).
            /// </param>
            /// <param name='to'>
            /// ISO 8601 formatted timestamp specifying the end time of the interval to
            /// query. When not specified, the service uses request time.
            /// </param>
            /// <param name='filter'>
            /// OData filter expression.
            /// </param>
            /// <param name='apply'>
            /// OData apply expression for aggregations.
            /// </param>
            public static ComponentPolicyStatesQueryResults ListQueryResultsForResourceGroupLevelPolicyAssignment(this IComponentPolicyStatesOperations operations, string subscriptionId, string resourceGroupName, string policyAssignmentName, int? top = default(int?), string orderBy = default(string), string select = default(string), System.DateTime? fromParameter = default(System.DateTime?), System.DateTime? to = default(System.DateTime?), string filter = default(string), string apply = default(string))
            {
                return operations.ListQueryResultsForResourceGroupLevelPolicyAssignmentAsync(subscriptionId, resourceGroupName, policyAssignmentName, top, orderBy, select, fromParameter, to, filter, apply).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Queries component policy states for the resource group level policy
            /// assignment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Microsoft Azure subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group name.
            /// </param>
            /// <param name='policyAssignmentName'>
            /// Policy assignment name.
            /// </param>
            /// <param name='top'>
            /// Maximum number of records to return.
            /// </param>
            /// <param name='orderBy'>
            /// Ordering expression using OData notation. One or more comma-separated
            /// column names with an optional "desc" (the default) or "asc", e.g.
            /// "$orderby=PolicyAssignmentId, ResourceId asc".
            /// </param>
            /// <param name='select'>
            /// Select expression using OData notation. Limits the columns on each record
            /// to just those requested, e.g. "$select=PolicyAssignmentId, ResourceId".
            /// </param>
            /// <param name='fromParameter'>
            /// ISO 8601 formatted timestamp specifying the start time of the interval to
            /// query. When not specified, the service uses ($to - 1-day).
            /// </param>
            /// <param name='to'>
            /// ISO 8601 formatted timestamp specifying the end time of the interval to
            /// query. When not specified, the service uses request time.
            /// </param>
            /// <param name='filter'>
            /// OData filter expression.
            /// </param>
            /// <param name='apply'>
            /// OData apply expression for aggregations.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ComponentPolicyStatesQueryResults> ListQueryResultsForResourceGroupLevelPolicyAssignmentAsync(this IComponentPolicyStatesOperations operations, string subscriptionId, string resourceGroupName, string policyAssignmentName, int? top = default(int?), string orderBy = default(string), string select = default(string), System.DateTime? fromParameter = default(System.DateTime?), System.DateTime? to = default(System.DateTime?), string filter = default(string), string apply = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListQueryResultsForResourceGroupLevelPolicyAssignmentWithHttpMessagesAsync(subscriptionId, resourceGroupName, policyAssignmentName, top, orderBy, select, fromParameter, to, filter, apply, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
