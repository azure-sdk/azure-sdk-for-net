// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.NetApp;
using Azure.ResourceManager.NetApp.Models;

namespace Azure.ResourceManager.NetApp.Samples
{
    public partial class Sample_NetAppAccountBackupVaultBackupResource
    {
        // BackupsUnderBackupVault_Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_BackupsUnderBackupVaultGet()
        {
            // Generated from example definition: specification/netapp/resource-manager/Microsoft.NetApp/preview/2023-05-01-preview/examples/BackupsUnderBackupVault_Get.json
            // this example is just showing the usage of "Backups_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NetAppAccountBackupVaultBackupResource created on azure
            // for more information of creating NetAppAccountBackupVaultBackupResource, please refer to the document of NetAppAccountBackupVaultBackupResource
            string subscriptionId = "D633CC2E-722B-4AE1-B636-BBD9E4C60ED9";
            string resourceGroupName = "myRG";
            string accountName = "account1";
            string backupVaultName = "backupVault1";
            string backupName = "backup1";
            ResourceIdentifier netAppAccountBackupVaultBackupResourceId = NetAppAccountBackupVaultBackupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, accountName, backupVaultName, backupName);
            NetAppAccountBackupVaultBackupResource netAppAccountBackupVaultBackup = client.GetNetAppAccountBackupVaultBackupResource(netAppAccountBackupVaultBackupResourceId);

            // invoke the operation
            NetAppAccountBackupVaultBackupResource result = await netAppAccountBackupVaultBackup.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            NetAppBackupData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // BackupsUnderBackupVault_Update
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_BackupsUnderBackupVaultUpdate()
        {
            // Generated from example definition: specification/netapp/resource-manager/Microsoft.NetApp/preview/2023-05-01-preview/examples/BackupsUnderBackupVault_Update.json
            // this example is just showing the usage of "Backups_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NetAppAccountBackupVaultBackupResource created on azure
            // for more information of creating NetAppAccountBackupVaultBackupResource, please refer to the document of NetAppAccountBackupVaultBackupResource
            string subscriptionId = "D633CC2E-722B-4AE1-B636-BBD9E4C60ED9";
            string resourceGroupName = "myRG";
            string accountName = "account1";
            string backupVaultName = "backupVault1";
            string backupName = "backup1";
            ResourceIdentifier netAppAccountBackupVaultBackupResourceId = NetAppAccountBackupVaultBackupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, accountName, backupVaultName, backupName);
            NetAppAccountBackupVaultBackupResource netAppAccountBackupVaultBackup = client.GetNetAppAccountBackupVaultBackupResource(netAppAccountBackupVaultBackupResourceId);

            // invoke the operation
            NetAppAccountBackupVaultBackupPatch patch = new NetAppAccountBackupVaultBackupPatch();
            ArmOperation<NetAppAccountBackupVaultBackupResource> lro = await netAppAccountBackupVaultBackup.UpdateAsync(WaitUntil.Completed, patch);
            NetAppAccountBackupVaultBackupResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            NetAppBackupData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // BackupsUnderBackupVault_Delete
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_BackupsUnderBackupVaultDelete()
        {
            // Generated from example definition: specification/netapp/resource-manager/Microsoft.NetApp/preview/2023-05-01-preview/examples/BackupsUnderBackupVault_Delete.json
            // this example is just showing the usage of "Backups_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NetAppAccountBackupVaultBackupResource created on azure
            // for more information of creating NetAppAccountBackupVaultBackupResource, please refer to the document of NetAppAccountBackupVaultBackupResource
            string subscriptionId = "D633CC2E-722B-4AE1-B636-BBD9E4C60ED9";
            string resourceGroupName = "resourceGroup";
            string accountName = "account1";
            string backupVaultName = "backupVault1";
            string backupName = "backup1";
            ResourceIdentifier netAppAccountBackupVaultBackupResourceId = NetAppAccountBackupVaultBackupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, accountName, backupVaultName, backupName);
            NetAppAccountBackupVaultBackupResource netAppAccountBackupVaultBackup = client.GetNetAppAccountBackupVaultBackupResource(netAppAccountBackupVaultBackupResourceId);

            // invoke the operation
            await netAppAccountBackupVaultBackup.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // Backups_SingleFileRestore
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task RestoreFilesBackupsUnderBackupVault_BackupsSingleFileRestore()
        {
            // Generated from example definition: specification/netapp/resource-manager/Microsoft.NetApp/preview/2023-05-01-preview/examples/BackupsUnderBackupVault_SingleFileRestore.json
            // this example is just showing the usage of "BackupsUnderBackupVault_RestoreFiles" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NetAppAccountBackupVaultBackupResource created on azure
            // for more information of creating NetAppAccountBackupVaultBackupResource, please refer to the document of NetAppAccountBackupVaultBackupResource
            string subscriptionId = "D633CC2E-722B-4AE1-B636-BBD9E4C60ED9";
            string resourceGroupName = "myRG";
            string accountName = "account1";
            string backupVaultName = "backupVault1";
            string backupName = "backup1";
            ResourceIdentifier netAppAccountBackupVaultBackupResourceId = NetAppAccountBackupVaultBackupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, accountName, backupVaultName, backupName);
            NetAppAccountBackupVaultBackupResource netAppAccountBackupVaultBackup = client.GetNetAppAccountBackupVaultBackupResource(netAppAccountBackupVaultBackupResourceId);

            // invoke the operation
            NetAppVolumeBackupBackupRestoreFilesContent content = new NetAppVolumeBackupBackupRestoreFilesContent(new string[]
            {
"/dir1/customer1.db","/dir1/customer2.db"
            }, new ResourceIdentifier("/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1/capacityPools/pool1/volumes/volume1"));
            await netAppAccountBackupVaultBackup.RestoreFilesBackupsUnderBackupVaultAsync(WaitUntil.Completed, content);

            Console.WriteLine($"Succeeded");
        }
    }
}
