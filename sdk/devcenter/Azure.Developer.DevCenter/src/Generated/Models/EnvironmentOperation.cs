// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Developer.DevCenter.Models
{
    /// <summary>
    /// Information about an operation on an environment.
    /// Please note <see cref="EnvironmentOperation"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
    /// The available derived classes include <see cref="EnvironmentDeleteOperation"/> and <see cref="EnvironmentDeployOperation"/>.
    /// </summary>
    internal abstract partial class EnvironmentOperation
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private protected IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EnvironmentOperation"/>. </summary>
        /// <param name="uri"> The unique URI for the environment operation. </param>
        /// <param name="status"> The operation status. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="uri"/> is null. </exception>
        protected EnvironmentOperation(Uri uri, DevCenterOperationStatus status)
        {
            Argument.AssertNotNull(uri, nameof(uri));

            Uri = uri;
            Status = status;
            EnvironmentParameters = new ChangeTrackingDictionary<string, BinaryData>();
        }

        /// <summary> Initializes a new instance of <see cref="EnvironmentOperation"/>. </summary>
        /// <param name="uri"> The unique URI for the environment operation. </param>
        /// <param name="operationId"> Unique identifier for the environment operation. </param>
        /// <param name="kind"> The kind of operation that occurred. </param>
        /// <param name="status"> The operation status. </param>
        /// <param name="createdByObjectId"> The object ID of the actor which initiated the operation. </param>
        /// <param name="startTime"> The time the operation started. </param>
        /// <param name="endTime"> The time the operation finished. </param>
        /// <param name="environmentParameters"> Parameters object for the environment at the time of the operation. </param>
        /// <param name="error"> Provisioning or operation error details. Populated only for error states. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EnvironmentOperation(Uri uri, Guid operationId, string kind, DevCenterOperationStatus status, Guid? createdByObjectId, DateTimeOffset? startTime, DateTimeOffset? endTime, IReadOnlyDictionary<string, BinaryData> environmentParameters, ResponseError error, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Uri = uri;
            OperationId = operationId;
            Kind = kind;
            Status = status;
            CreatedByObjectId = createdByObjectId;
            StartTime = startTime;
            EndTime = endTime;
            EnvironmentParameters = environmentParameters;
            Error = error;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="EnvironmentOperation"/> for deserialization. </summary>
        internal EnvironmentOperation()
        {
        }

        /// <summary> The unique URI for the environment operation. </summary>
        public Uri Uri { get; }
        /// <summary> Unique identifier for the environment operation. </summary>
        public Guid OperationId { get; }
        /// <summary> The kind of operation that occurred. </summary>
        internal string Kind { get; set; }
        /// <summary> The operation status. </summary>
        public DevCenterOperationStatus Status { get; }
        /// <summary> The object ID of the actor which initiated the operation. </summary>
        public Guid? CreatedByObjectId { get; }
        /// <summary> The time the operation started. </summary>
        public DateTimeOffset? StartTime { get; }
        /// <summary> The time the operation finished. </summary>
        public DateTimeOffset? EndTime { get; }
        /// <summary>
        /// Parameters object for the environment at the time of the operation.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IReadOnlyDictionary<string, BinaryData> EnvironmentParameters { get; }
        /// <summary> Provisioning or operation error details. Populated only for error states. </summary>
        public ResponseError Error { get; }
    }
}
