// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ContainerRegistry.Models
{
    /// <summary> The storage access mode used for the customer storage account. </summary>
    public readonly partial struct StorageAccessMode : IEquatable<StorageAccessMode>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="StorageAccessMode"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public StorageAccessMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ManagedIdentityValue = "ManagedIdentity";
        private const string SasTokenValue = "SasToken";

        /// <summary> ManagedIdentity. </summary>
        public static StorageAccessMode ManagedIdentity { get; } = new StorageAccessMode(ManagedIdentityValue);
        /// <summary> SasToken. </summary>
        public static StorageAccessMode SasToken { get; } = new StorageAccessMode(SasTokenValue);
        /// <summary> Determines if two <see cref="StorageAccessMode"/> values are the same. </summary>
        public static bool operator ==(StorageAccessMode left, StorageAccessMode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="StorageAccessMode"/> values are not the same. </summary>
        public static bool operator !=(StorageAccessMode left, StorageAccessMode right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="StorageAccessMode"/>. </summary>
        public static implicit operator StorageAccessMode(string value) => new StorageAccessMode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is StorageAccessMode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(StorageAccessMode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
