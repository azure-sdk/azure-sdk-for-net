// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Automation.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.Automation.Samples
{
    public partial class Sample_PackageResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_GetAPackage()
        {
            // Generated from example definition: specification/automation/resource-manager/Microsoft.Automation/stable/2024-10-23/examples/package/getPackage.json
            // this example is just showing the usage of "Package_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PackageResource created on azure
            // for more information of creating PackageResource, please refer to the document of PackageResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg";
            string automationAccountName = "myAutomationAccount33";
            string runtimeEnvironmentName = "runtimeEnvironmentName";
            string packageName = "OmsCompositeResources";
            ResourceIdentifier packageResourceId = PackageResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, automationAccountName, runtimeEnvironmentName, packageName);
            PackageResource package = client.GetPackageResource(packageResourceId);

            // invoke the operation
            PackageResource result = await package.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            PackageData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_DeleteAPackage()
        {
            // Generated from example definition: specification/automation/resource-manager/Microsoft.Automation/stable/2024-10-23/examples/package/deletePackage.json
            // this example is just showing the usage of "Package_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PackageResource created on azure
            // for more information of creating PackageResource, please refer to the document of PackageResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg";
            string automationAccountName = "myAutomationAccount33";
            string runtimeEnvironmentName = "runtimeEnvironmentName";
            string packageName = "OmsCompositeResources";
            ResourceIdentifier packageResourceId = PackageResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, automationAccountName, runtimeEnvironmentName, packageName);
            PackageResource package = client.GetPackageResource(packageResourceId);

            // invoke the operation
            await package.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_UpdateAPackage()
        {
            // Generated from example definition: specification/automation/resource-manager/Microsoft.Automation/stable/2024-10-23/examples/package/updatePackage.json
            // this example is just showing the usage of "Package_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PackageResource created on azure
            // for more information of creating PackageResource, please refer to the document of PackageResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg";
            string automationAccountName = "MyAutomationAccount";
            string runtimeEnvironmentName = "runtimeEnvironmentName";
            string packageName = "OmsCompositeResources";
            ResourceIdentifier packageResourceId = PackageResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, automationAccountName, runtimeEnvironmentName, packageName);
            PackageResource package = client.GetPackageResource(packageResourceId);

            // invoke the operation
            PackagePatch patch = new PackagePatch
            {
                ContentLink = new AutomationContentLink
                {
                    Uri = new Uri("https://teststorage.blob.core.windows.net/mycontainer/MyModule.zip"),
                    ContentHash = new AutomationContentHash("sha265", "07E108A962B81DD9C9BAA89BB47C0F6EE52B29E83758B07795E408D258B2B87A"),
                },
            };
            PackageResource result = await package.UpdateAsync(patch);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            PackageData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
