// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.Automation;
using Azure.ResourceManager.Automation.Models;

namespace Azure.ResourceManager.Automation.Samples
{
    public partial class Sample_RuntimeEnvironmentResource
    {
        // Update an automation account
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_UpdateAnAutomationAccount()
        {
            // Generated from example definition: specification/automation/resource-manager/Microsoft.Automation/preview/2023-05-15-preview/examples/runtimeEnvironment/updateRuntimeEnvironment.json
            // this example is just showing the usage of "RuntimeEnvironments_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this RuntimeEnvironmentResource created on azure
            // for more information of creating RuntimeEnvironmentResource, please refer to the document of RuntimeEnvironmentResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg";
            string automationAccountName = "myAutomationAccount9";
            string runtimeEnvironmentName = "myRuntimeEnvironmentName";
            ResourceIdentifier runtimeEnvironmentResourceId = RuntimeEnvironmentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, automationAccountName, runtimeEnvironmentName);
            RuntimeEnvironmentResource runtimeEnvironment = client.GetRuntimeEnvironmentResource(runtimeEnvironmentResourceId);

            // invoke the operation
            RuntimeEnvironmentPatch patch = new RuntimeEnvironmentPatch()
            {
                DefaultPackages =
{
["Az"] = "6.*",
},
            };
            RuntimeEnvironmentResource result = await runtimeEnvironment.UpdateAsync(patch);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            RuntimeEnvironmentData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Delete Runtime Environment
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DeleteRuntimeEnvironment()
        {
            // Generated from example definition: specification/automation/resource-manager/Microsoft.Automation/preview/2023-05-15-preview/examples/runtimeEnvironment/deleteRuntimeEnvironment.json
            // this example is just showing the usage of "RuntimeEnvironments_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this RuntimeEnvironmentResource created on azure
            // for more information of creating RuntimeEnvironmentResource, please refer to the document of RuntimeEnvironmentResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg";
            string automationAccountName = "myAutomationAccount9";
            string runtimeEnvironmentName = "myRuntimeEnvironmentName";
            ResourceIdentifier runtimeEnvironmentResourceId = RuntimeEnvironmentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, automationAccountName, runtimeEnvironmentName);
            RuntimeEnvironmentResource runtimeEnvironment = client.GetRuntimeEnvironmentResource(runtimeEnvironmentResourceId);

            // invoke the operation
            await runtimeEnvironment.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // Get automation account
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetAutomationAccount()
        {
            // Generated from example definition: specification/automation/resource-manager/Microsoft.Automation/preview/2023-05-15-preview/examples/runtimeEnvironment/getRuntimeEnvironment.json
            // this example is just showing the usage of "RuntimeEnvironments_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this RuntimeEnvironmentResource created on azure
            // for more information of creating RuntimeEnvironmentResource, please refer to the document of RuntimeEnvironmentResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg";
            string automationAccountName = "myAutomationAccount9";
            string runtimeEnvironmentName = "myRuntimeEnvironmentName";
            ResourceIdentifier runtimeEnvironmentResourceId = RuntimeEnvironmentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, automationAccountName, runtimeEnvironmentName);
            RuntimeEnvironmentResource runtimeEnvironment = client.GetRuntimeEnvironmentResource(runtimeEnvironmentResourceId);

            // invoke the operation
            RuntimeEnvironmentResource result = await runtimeEnvironment.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            RuntimeEnvironmentData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
