// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Automation.Models
{
    /// <summary> Gets or sets the provisioning state of the Package. </summary>
    public readonly partial struct PackageProvisioningState : IEquatable<PackageProvisioningState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="PackageProvisioningState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PackageProvisioningState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CreatedValue = "Created";
        private const string CreatingValue = "Creating";
        private const string StartingImportModuleRunbookValue = "StartingImportModuleRunbook";
        private const string RunningImportModuleRunbookValue = "RunningImportModuleRunbook";
        private const string ContentRetrievedValue = "ContentRetrieved";
        private const string ContentDownloadedValue = "ContentDownloaded";
        private const string ContentValidatedValue = "ContentValidated";
        private const string ConnectionTypeImportedValue = "ConnectionTypeImported";
        private const string ContentStoredValue = "ContentStored";
        private const string ModuleDataStoredValue = "ModuleDataStored";
        private const string ActivitiesStoredValue = "ActivitiesStored";
        private const string ModuleImportRunbookCompleteValue = "ModuleImportRunbookComplete";
        private const string SucceededValue = "Succeeded";
        private const string FailedValue = "Failed";
        private const string CanceledValue = "Canceled";
        private const string UpdatingValue = "Updating";

        /// <summary> Created. </summary>
        public static PackageProvisioningState Created { get; } = new PackageProvisioningState(CreatedValue);
        /// <summary> Creating. </summary>
        public static PackageProvisioningState Creating { get; } = new PackageProvisioningState(CreatingValue);
        /// <summary> StartingImportModuleRunbook. </summary>
        public static PackageProvisioningState StartingImportModuleRunbook { get; } = new PackageProvisioningState(StartingImportModuleRunbookValue);
        /// <summary> RunningImportModuleRunbook. </summary>
        public static PackageProvisioningState RunningImportModuleRunbook { get; } = new PackageProvisioningState(RunningImportModuleRunbookValue);
        /// <summary> ContentRetrieved. </summary>
        public static PackageProvisioningState ContentRetrieved { get; } = new PackageProvisioningState(ContentRetrievedValue);
        /// <summary> ContentDownloaded. </summary>
        public static PackageProvisioningState ContentDownloaded { get; } = new PackageProvisioningState(ContentDownloadedValue);
        /// <summary> ContentValidated. </summary>
        public static PackageProvisioningState ContentValidated { get; } = new PackageProvisioningState(ContentValidatedValue);
        /// <summary> ConnectionTypeImported. </summary>
        public static PackageProvisioningState ConnectionTypeImported { get; } = new PackageProvisioningState(ConnectionTypeImportedValue);
        /// <summary> ContentStored. </summary>
        public static PackageProvisioningState ContentStored { get; } = new PackageProvisioningState(ContentStoredValue);
        /// <summary> ModuleDataStored. </summary>
        public static PackageProvisioningState ModuleDataStored { get; } = new PackageProvisioningState(ModuleDataStoredValue);
        /// <summary> ActivitiesStored. </summary>
        public static PackageProvisioningState ActivitiesStored { get; } = new PackageProvisioningState(ActivitiesStoredValue);
        /// <summary> ModuleImportRunbookComplete. </summary>
        public static PackageProvisioningState ModuleImportRunbookComplete { get; } = new PackageProvisioningState(ModuleImportRunbookCompleteValue);
        /// <summary> Succeeded. </summary>
        public static PackageProvisioningState Succeeded { get; } = new PackageProvisioningState(SucceededValue);
        /// <summary> Failed. </summary>
        public static PackageProvisioningState Failed { get; } = new PackageProvisioningState(FailedValue);
        /// <summary> Canceled. </summary>
        public static PackageProvisioningState Canceled { get; } = new PackageProvisioningState(CanceledValue);
        /// <summary> Updating. </summary>
        public static PackageProvisioningState Updating { get; } = new PackageProvisioningState(UpdatingValue);
        /// <summary> Determines if two <see cref="PackageProvisioningState"/> values are the same. </summary>
        public static bool operator ==(PackageProvisioningState left, PackageProvisioningState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="PackageProvisioningState"/> values are not the same. </summary>
        public static bool operator !=(PackageProvisioningState left, PackageProvisioningState right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="PackageProvisioningState"/>. </summary>
        public static implicit operator PackageProvisioningState(string value) => new PackageProvisioningState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PackageProvisioningState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(PackageProvisioningState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
