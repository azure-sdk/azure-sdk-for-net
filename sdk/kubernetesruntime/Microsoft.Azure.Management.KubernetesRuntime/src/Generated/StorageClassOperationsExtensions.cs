// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.KubernetesRuntime
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for StorageClassOperations.
    /// </summary>
    public static partial class StorageClassOperationsExtensions
    {
            /// <summary>
            /// List StorageClassResource resources by parent
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceUri'>
            /// The fully qualified Azure Resource manager identifier of the resource.
            /// </param>
            public static IPage<StorageClassResource> List(this IStorageClassOperations operations, string resourceUri)
            {
                return operations.ListAsync(resourceUri).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List StorageClassResource resources by parent
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceUri'>
            /// The fully qualified Azure Resource manager identifier of the resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<StorageClassResource>> ListAsync(this IStorageClassOperations operations, string resourceUri, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceUri, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a StorageClassResource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceUri'>
            /// The fully qualified Azure Resource manager identifier of the resource.
            /// </param>
            /// <param name='storageClassName'>
            /// The name of the the storage class
            /// </param>
            public static StorageClassResource Get(this IStorageClassOperations operations, string resourceUri, string storageClassName)
            {
                return operations.GetAsync(resourceUri, storageClassName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a StorageClassResource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceUri'>
            /// The fully qualified Azure Resource manager identifier of the resource.
            /// </param>
            /// <param name='storageClassName'>
            /// The name of the the storage class
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StorageClassResource> GetAsync(this IStorageClassOperations operations, string resourceUri, string storageClassName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceUri, storageClassName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a StorageClassResource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceUri'>
            /// The fully qualified Azure Resource manager identifier of the resource.
            /// </param>
            /// <param name='storageClassName'>
            /// The name of the the storage class
            /// </param>
            /// <param name='resource'>
            /// Resource create parameters.
            /// </param>
            public static StorageClassResource CreateOrUpdate(this IStorageClassOperations operations, string resourceUri, string storageClassName, StorageClassResource resource)
            {
                return operations.CreateOrUpdateAsync(resourceUri, storageClassName, resource).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a StorageClassResource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceUri'>
            /// The fully qualified Azure Resource manager identifier of the resource.
            /// </param>
            /// <param name='storageClassName'>
            /// The name of the the storage class
            /// </param>
            /// <param name='resource'>
            /// Resource create parameters.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StorageClassResource> CreateOrUpdateAsync(this IStorageClassOperations operations, string resourceUri, string storageClassName, StorageClassResource resource, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceUri, storageClassName, resource, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a StorageClassResource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceUri'>
            /// The fully qualified Azure Resource manager identifier of the resource.
            /// </param>
            /// <param name='storageClassName'>
            /// The name of the the storage class
            /// </param>
            /// <param name='properties'>
            /// The properties of StorageClass
            /// </param>
            public static StorageClassResource Update(this IStorageClassOperations operations, string resourceUri, string storageClassName, StorageClassPropertiesUpdate properties = default(StorageClassPropertiesUpdate))
            {
                return operations.UpdateAsync(resourceUri, storageClassName, properties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a StorageClassResource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceUri'>
            /// The fully qualified Azure Resource manager identifier of the resource.
            /// </param>
            /// <param name='storageClassName'>
            /// The name of the the storage class
            /// </param>
            /// <param name='properties'>
            /// The properties of StorageClass
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StorageClassResource> UpdateAsync(this IStorageClassOperations operations, string resourceUri, string storageClassName, StorageClassPropertiesUpdate properties = default(StorageClassPropertiesUpdate), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceUri, storageClassName, properties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a StorageClassResource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceUri'>
            /// The fully qualified Azure Resource manager identifier of the resource.
            /// </param>
            /// <param name='storageClassName'>
            /// The name of the the storage class
            /// </param>
            public static StorageClassDeleteHeaders Delete(this IStorageClassOperations operations, string resourceUri, string storageClassName)
            {
                return operations.DeleteAsync(resourceUri, storageClassName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a StorageClassResource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceUri'>
            /// The fully qualified Azure Resource manager identifier of the resource.
            /// </param>
            /// <param name='storageClassName'>
            /// The name of the the storage class
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StorageClassDeleteHeaders> DeleteAsync(this IStorageClassOperations operations, string resourceUri, string storageClassName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceUri, storageClassName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Create a StorageClassResource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceUri'>
            /// The fully qualified Azure Resource manager identifier of the resource.
            /// </param>
            /// <param name='storageClassName'>
            /// The name of the the storage class
            /// </param>
            /// <param name='resource'>
            /// Resource create parameters.
            /// </param>
            public static StorageClassResource BeginCreateOrUpdate(this IStorageClassOperations operations, string resourceUri, string storageClassName, StorageClassResource resource)
            {
                return operations.BeginCreateOrUpdateAsync(resourceUri, storageClassName, resource).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a StorageClassResource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceUri'>
            /// The fully qualified Azure Resource manager identifier of the resource.
            /// </param>
            /// <param name='storageClassName'>
            /// The name of the the storage class
            /// </param>
            /// <param name='resource'>
            /// Resource create parameters.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StorageClassResource> BeginCreateOrUpdateAsync(this IStorageClassOperations operations, string resourceUri, string storageClassName, StorageClassResource resource, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceUri, storageClassName, resource, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a StorageClassResource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceUri'>
            /// The fully qualified Azure Resource manager identifier of the resource.
            /// </param>
            /// <param name='storageClassName'>
            /// The name of the the storage class
            /// </param>
            /// <param name='properties'>
            /// The properties of StorageClass
            /// </param>
            public static StorageClassResource BeginUpdate(this IStorageClassOperations operations, string resourceUri, string storageClassName, StorageClassPropertiesUpdate properties = default(StorageClassPropertiesUpdate))
            {
                return operations.BeginUpdateAsync(resourceUri, storageClassName, properties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a StorageClassResource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceUri'>
            /// The fully qualified Azure Resource manager identifier of the resource.
            /// </param>
            /// <param name='storageClassName'>
            /// The name of the the storage class
            /// </param>
            /// <param name='properties'>
            /// The properties of StorageClass
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StorageClassResource> BeginUpdateAsync(this IStorageClassOperations operations, string resourceUri, string storageClassName, StorageClassPropertiesUpdate properties = default(StorageClassPropertiesUpdate), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceUri, storageClassName, properties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a StorageClassResource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceUri'>
            /// The fully qualified Azure Resource manager identifier of the resource.
            /// </param>
            /// <param name='storageClassName'>
            /// The name of the the storage class
            /// </param>
            public static StorageClassDeleteHeaders BeginDelete(this IStorageClassOperations operations, string resourceUri, string storageClassName)
            {
                return operations.BeginDeleteAsync(resourceUri, storageClassName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a StorageClassResource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceUri'>
            /// The fully qualified Azure Resource manager identifier of the resource.
            /// </param>
            /// <param name='storageClassName'>
            /// The name of the the storage class
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StorageClassDeleteHeaders> BeginDeleteAsync(this IStorageClassOperations operations, string resourceUri, string storageClassName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceUri, storageClassName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// List StorageClassResource resources by parent
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<StorageClassResource> ListNext(this IStorageClassOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List StorageClassResource resources by parent
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<StorageClassResource>> ListNextAsync(this IStorageClassOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
