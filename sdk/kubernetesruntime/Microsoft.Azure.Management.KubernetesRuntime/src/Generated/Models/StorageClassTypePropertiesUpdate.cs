// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.KubernetesRuntime.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The model for update a storageClass
    /// </summary>
    public partial class StorageClassTypePropertiesUpdate
    {
        /// <summary>
        /// Initializes a new instance of the StorageClassTypePropertiesUpdate
        /// class.
        /// </summary>
        public StorageClassTypePropertiesUpdate()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the StorageClassTypePropertiesUpdate
        /// class.
        /// </summary>
        /// <param name="backingStorageClassName">The backing storageclass used
        /// to create new storageclass</param>
        /// <param name="azureStorageAccountName">Azure Storage Account
        /// Name</param>
        /// <param name="azureStorageAccountKey">Azure Storage Account
        /// Key</param>
        /// <param name="server">NFS Server</param>
        /// <param name="share">NFS share</param>
        /// <param name="subDir">Sub directory under share. If the sub
        /// directory doesn't exist, driver will create it</param>
        /// <param name="mountPermissions">Mounted folder permissions. Default
        /// is 0. If set as non-zero, driver will perform `chmod` after
        /// mount</param>
        /// <param name="onDelete">The action to take when a NFS volume is
        /// deleted. Default is Delete. Possible values include: 'Delete',
        /// 'Retain'</param>
        /// <param name="source">SMB Source</param>
        /// <param name="username">Server username</param>
        /// <param name="password">Server password</param>
        /// <param name="domain">Server domain</param>
        public StorageClassTypePropertiesUpdate(string backingStorageClassName = default(string), string azureStorageAccountName = default(string), string azureStorageAccountKey = default(string), string server = default(string), string share = default(string), string subDir = default(string), string mountPermissions = default(string), string onDelete = default(string), string source = default(string), string username = default(string), string password = default(string), string domain = default(string))
        {
            BackingStorageClassName = backingStorageClassName;
            AzureStorageAccountName = azureStorageAccountName;
            AzureStorageAccountKey = azureStorageAccountKey;
            Server = server;
            Share = share;
            SubDir = subDir;
            MountPermissions = mountPermissions;
            OnDelete = onDelete;
            Source = source;
            Username = username;
            Password = password;
            Domain = domain;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the backing storageclass used to create new
        /// storageclass
        /// </summary>
        [JsonProperty(PropertyName = "backingStorageClassName")]
        public string BackingStorageClassName { get; set; }

        /// <summary>
        /// Gets or sets azure Storage Account Name
        /// </summary>
        [JsonProperty(PropertyName = "azureStorageAccountName")]
        public string AzureStorageAccountName { get; set; }

        /// <summary>
        /// Gets or sets azure Storage Account Key
        /// </summary>
        [JsonProperty(PropertyName = "azureStorageAccountKey")]
        public string AzureStorageAccountKey { get; set; }

        /// <summary>
        /// Gets or sets NFS Server
        /// </summary>
        [JsonProperty(PropertyName = "server")]
        public string Server { get; set; }

        /// <summary>
        /// Gets or sets NFS share
        /// </summary>
        [JsonProperty(PropertyName = "share")]
        public string Share { get; set; }

        /// <summary>
        /// Gets or sets sub directory under share. If the sub directory
        /// doesn't exist, driver will create it
        /// </summary>
        [JsonProperty(PropertyName = "subDir")]
        public string SubDir { get; set; }

        /// <summary>
        /// Gets or sets mounted folder permissions. Default is 0. If set as
        /// non-zero, driver will perform `chmod` after mount
        /// </summary>
        [JsonProperty(PropertyName = "mountPermissions")]
        public string MountPermissions { get; set; }

        /// <summary>
        /// Gets or sets the action to take when a NFS volume is deleted.
        /// Default is Delete. Possible values include: 'Delete', 'Retain'
        /// </summary>
        [JsonProperty(PropertyName = "onDelete")]
        public string OnDelete { get; set; }

        /// <summary>
        /// Gets or sets SMB Source
        /// </summary>
        [JsonProperty(PropertyName = "source")]
        public string Source { get; set; }

        /// <summary>
        /// Gets or sets server username
        /// </summary>
        [JsonProperty(PropertyName = "username")]
        public string Username { get; set; }

        /// <summary>
        /// Gets or sets server password
        /// </summary>
        [JsonProperty(PropertyName = "password")]
        public string Password { get; set; }

        /// <summary>
        /// Gets or sets server domain
        /// </summary>
        [JsonProperty(PropertyName = "domain")]
        public string Domain { get; set; }

    }
}
