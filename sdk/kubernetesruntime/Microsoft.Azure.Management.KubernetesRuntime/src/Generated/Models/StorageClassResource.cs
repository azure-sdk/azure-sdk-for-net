// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.KubernetesRuntime.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A StorageClass resource for an Arc connected cluster
    /// (Microsoft.Kubernetes/connectedClusters)
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class StorageClassResource : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the StorageClassResource class.
        /// </summary>
        public StorageClassResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the StorageClassResource class.
        /// </summary>
        /// <param name="typeProperties">Properties of the StorageClass</param>
        /// <param name="id">Fully qualified resource ID for the resource. E.g.
        /// "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. E.g.
        /// "Microsoft.Compute/virtualMachines" or
        /// "Microsoft.Storage/storageAccounts"</param>
        /// <param name="systemData">Azure Resource Manager metadata containing
        /// createdBy and modifiedBy information.</param>
        /// <param name="allowVolumeExpansion">Volume can be expanded or not.
        /// Possible values include: 'Allow', 'Disallow'</param>
        /// <param name="mountOptions">Additional mount options</param>
        /// <param name="provisioner">Provisioner name</param>
        /// <param name="volumeBindingMode">Binding mode of volumes: Immediate,
        /// WaitForFirstConsumer. Possible values include: 'Immediate',
        /// 'WaitForFirstConsumer'</param>
        /// <param name="accessModes">The access mode: [ReadWriteOnce,
        /// ReadWriteMany] or [ReadWriteOnce]</param>
        /// <param name="dataResilience">Allow single data node failure.
        /// Possible values include: 'NotDataResilient',
        /// 'DataResilient'</param>
        /// <param name="failoverSpeed">Failover speed: NA, Slow, Fast.
        /// Possible values include: 'NotAvailable', 'Slow', 'Fast',
        /// 'Super'</param>
        /// <param name="limitations">Limitations of the storage class</param>
        /// <param name="performance">Performance tier. Possible values
        /// include: 'Undefined', 'Basic', 'Standard', 'Premium',
        /// 'Ultra'</param>
        /// <param name="priority">Selection priority when multiple storage
        /// classes meet the criteria. 0: Highest, -1: Never use</param>
        /// <param name="provisioningState">Resource provision state. Possible
        /// values include: 'Succeeded', 'Failed', 'Canceled', 'Provisioning',
        /// 'Updating', 'Deleting', 'Accepted'</param>
        public StorageClassResource(StorageClassTypeProperties typeProperties, string id = default(string), string name = default(string), string type = default(string), SystemData systemData = default(SystemData), string allowVolumeExpansion = default(string), IList<string> mountOptions = default(IList<string>), string provisioner = default(string), string volumeBindingMode = default(string), IList<string> accessModes = default(IList<string>), string dataResilience = default(string), string failoverSpeed = default(string), IList<string> limitations = default(IList<string>), string performance = default(string), long? priority = default(long?), string provisioningState = default(string))
            : base(id, name, type, systemData)
        {
            AllowVolumeExpansion = allowVolumeExpansion;
            MountOptions = mountOptions;
            Provisioner = provisioner;
            VolumeBindingMode = volumeBindingMode;
            AccessModes = accessModes;
            DataResilience = dataResilience;
            FailoverSpeed = failoverSpeed;
            Limitations = limitations;
            Performance = performance;
            Priority = priority;
            TypeProperties = typeProperties;
            ProvisioningState = provisioningState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets volume can be expanded or not. Possible values
        /// include: 'Allow', 'Disallow'
        /// </summary>
        [JsonProperty(PropertyName = "properties.allowVolumeExpansion")]
        public string AllowVolumeExpansion { get; set; }

        /// <summary>
        /// Gets or sets additional mount options
        /// </summary>
        [JsonProperty(PropertyName = "properties.mountOptions")]
        public IList<string> MountOptions { get; set; }

        /// <summary>
        /// Gets or sets provisioner name
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioner")]
        public string Provisioner { get; set; }

        /// <summary>
        /// Gets or sets binding mode of volumes: Immediate,
        /// WaitForFirstConsumer. Possible values include: 'Immediate',
        /// 'WaitForFirstConsumer'
        /// </summary>
        [JsonProperty(PropertyName = "properties.volumeBindingMode")]
        public string VolumeBindingMode { get; set; }

        /// <summary>
        /// Gets or sets the access mode: [ReadWriteOnce, ReadWriteMany] or
        /// [ReadWriteOnce]
        /// </summary>
        [JsonProperty(PropertyName = "properties.accessModes")]
        public IList<string> AccessModes { get; set; }

        /// <summary>
        /// Gets or sets allow single data node failure. Possible values
        /// include: 'NotDataResilient', 'DataResilient'
        /// </summary>
        [JsonProperty(PropertyName = "properties.dataResilience")]
        public string DataResilience { get; set; }

        /// <summary>
        /// Gets or sets failover speed: NA, Slow, Fast. Possible values
        /// include: 'NotAvailable', 'Slow', 'Fast', 'Super'
        /// </summary>
        [JsonProperty(PropertyName = "properties.failoverSpeed")]
        public string FailoverSpeed { get; set; }

        /// <summary>
        /// Gets or sets limitations of the storage class
        /// </summary>
        [JsonProperty(PropertyName = "properties.limitations")]
        public IList<string> Limitations { get; set; }

        /// <summary>
        /// Gets or sets performance tier. Possible values include:
        /// 'Undefined', 'Basic', 'Standard', 'Premium', 'Ultra'
        /// </summary>
        [JsonProperty(PropertyName = "properties.performance")]
        public string Performance { get; set; }

        /// <summary>
        /// Gets or sets selection priority when multiple storage classes meet
        /// the criteria. 0: Highest, -1: Never use
        /// </summary>
        [JsonProperty(PropertyName = "properties.priority")]
        public long? Priority { get; set; }

        /// <summary>
        /// Gets or sets properties of the StorageClass
        /// </summary>
        [JsonProperty(PropertyName = "properties.typeProperties")]
        public StorageClassTypeProperties TypeProperties { get; set; }

        /// <summary>
        /// Gets resource provision state. Possible values include:
        /// 'Succeeded', 'Failed', 'Canceled', 'Provisioning', 'Updating',
        /// 'Deleting', 'Accepted'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

    }
}
