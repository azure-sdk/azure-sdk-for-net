// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.EdgeOrder.Models
{
    public partial class ProvisioningDetails : IUtf8JsonSerializable, IJsonModel<ProvisioningDetails>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ProvisioningDetails>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<ProvisioningDetails>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ProvisioningDetails>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ProvisioningDetails)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsDefined(Quantity))
            {
                writer.WritePropertyName("quantity"u8);
                writer.WriteNumberValue(Quantity.Value);
            }
            if (Optional.IsDefined(ProvisioningArmId))
            {
                writer.WritePropertyName("provisioningArmId"u8);
                writer.WriteStringValue(ProvisioningArmId);
            }
            if (Optional.IsDefined(ProvisioningEndPoint))
            {
                writer.WritePropertyName("provisioningEndPoint"u8);
                writer.WriteStringValue(ProvisioningEndPoint);
            }
            if (Optional.IsDefined(SerialNumber))
            {
                writer.WritePropertyName("serialNumber"u8);
                writer.WriteStringValue(SerialNumber);
            }
            if (Optional.IsDefined(VendorName))
            {
                writer.WritePropertyName("vendorName"u8);
                writer.WriteStringValue(VendorName);
            }
            if (Optional.IsDefined(ReadyToConnectArmId))
            {
                writer.WritePropertyName("readyToConnectArmId"u8);
                writer.WriteStringValue(ReadyToConnectArmId);
            }
            if (Optional.IsDefined(ManagementResourceArmId))
            {
                writer.WritePropertyName("managementResourceArmId"u8);
                writer.WriteStringValue(ManagementResourceArmId);
            }
            if (options.Format != "W" && Optional.IsDefined(UniqueDeviceIdentifier))
            {
                writer.WritePropertyName("uniqueDeviceIdentifier"u8);
                writer.WriteStringValue(UniqueDeviceIdentifier);
            }
            if (Optional.IsDefined(AutoProvisioningStatus))
            {
                writer.WritePropertyName("autoProvisioningStatus"u8);
                writer.WriteStringValue(AutoProvisioningStatus.Value.ToString());
            }
            if (Optional.IsDefined(DevicePresenceVerification))
            {
                writer.WritePropertyName("devicePresenceVerification"u8);
                writer.WriteObjectValue(DevicePresenceVerification);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        ProvisioningDetails IJsonModel<ProvisioningDetails>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ProvisioningDetails>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ProvisioningDetails)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeProvisioningDetails(document.RootElement, options);
        }

        internal static ProvisioningDetails DeserializeProvisioningDetails(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<int> quantity = default;
            Optional<ResourceIdentifier> provisioningArmId = default;
            Optional<string> provisioningEndPoint = default;
            Optional<string> serialNumber = default;
            Optional<string> vendorName = default;
            Optional<ResourceIdentifier> readyToConnectArmId = default;
            Optional<ResourceIdentifier> managementResourceArmId = default;
            Optional<string> uniqueDeviceIdentifier = default;
            Optional<AutoProvisioningStatus> autoProvisioningStatus = default;
            Optional<DevicePresenceVerificationDetails> devicePresenceVerification = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("quantity"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    quantity = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("provisioningArmId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningArmId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("provisioningEndPoint"u8))
                {
                    provisioningEndPoint = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("serialNumber"u8))
                {
                    serialNumber = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("vendorName"u8))
                {
                    vendorName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("readyToConnectArmId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    readyToConnectArmId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("managementResourceArmId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    managementResourceArmId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("uniqueDeviceIdentifier"u8))
                {
                    uniqueDeviceIdentifier = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("autoProvisioningStatus"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    autoProvisioningStatus = new AutoProvisioningStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("devicePresenceVerification"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    devicePresenceVerification = DevicePresenceVerificationDetails.DeserializeDevicePresenceVerificationDetails(property.Value);
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new ProvisioningDetails(Optional.ToNullable(quantity), provisioningArmId.Value, provisioningEndPoint.Value, serialNumber.Value, vendorName.Value, readyToConnectArmId.Value, managementResourceArmId.Value, uniqueDeviceIdentifier.Value, Optional.ToNullable(autoProvisioningStatus), devicePresenceVerification.Value, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<ProvisioningDetails>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ProvisioningDetails>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(ProvisioningDetails)} does not support '{options.Format}' format.");
            }
        }

        ProvisioningDetails IPersistableModel<ProvisioningDetails>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ProvisioningDetails>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeProvisioningDetails(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ProvisioningDetails)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<ProvisioningDetails>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
