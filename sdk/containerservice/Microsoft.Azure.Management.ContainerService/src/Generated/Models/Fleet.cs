// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ContainerService.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The Fleet resource which contains multiple Kubernetes clusters as its
    /// members.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class Fleet : TrackedResource
    {
        /// <summary>
        /// Initializes a new instance of the Fleet class.
        /// </summary>
        public Fleet()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Fleet class.
        /// </summary>
        /// <param name="location">The geo-location where the resource
        /// lives</param>
        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. E.g.
        /// "Microsoft.Compute/virtualMachines" or
        /// "Microsoft.Storage/storageAccounts"</param>
        /// <param name="systemData">Azure Resource Manager metadata containing
        /// createdBy and modifiedBy information.</param>
        /// <param name="tags">Resource tags.</param>
        /// <param name="etag">Resource Etag.</param>
        /// <param name="hubProfile">The FleetHubProfile configures the Fleet's
        /// hub.</param>
        /// <param name="provisioningState">The provisioning state of the last
        /// accepted operation. Possible values include: 'Succeeded', 'Failed',
        /// 'Canceled', 'Creating', 'Deleting', 'Updating'</param>
        public Fleet(string location, string id = default(string), string name = default(string), string type = default(string), SystemData systemData = default(SystemData), IDictionary<string, string> tags = default(IDictionary<string, string>), string etag = default(string), FleetHubProfile hubProfile = default(FleetHubProfile), string provisioningState = default(string))
            : base(location, id, name, type, systemData, tags)
        {
            Etag = etag;
            HubProfile = hubProfile;
            ProvisioningState = provisioningState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets resource Etag.
        /// </summary>
        [JsonProperty(PropertyName = "etag")]
        public string Etag { get; private set; }

        /// <summary>
        /// Gets or sets the FleetHubProfile configures the Fleet's hub.
        /// </summary>
        [JsonProperty(PropertyName = "properties.hubProfile")]
        public FleetHubProfile HubProfile { get; set; }

        /// <summary>
        /// Gets the provisioning state of the last accepted operation.
        /// Possible values include: 'Succeeded', 'Failed', 'Canceled',
        /// 'Creating', 'Deleting', 'Updating'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (HubProfile != null)
            {
                HubProfile.Validate();
            }
        }
    }
}
