// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ContainerService.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Defines binding between a resource and role
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class TrustedAccessRoleBinding : Resource
    {
        /// <summary>
        /// Initializes a new instance of the TrustedAccessRoleBinding class.
        /// </summary>
        public TrustedAccessRoleBinding()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TrustedAccessRoleBinding class.
        /// </summary>
        /// <param name="sourceResourceId">The ARM resource ID of source
        /// resource that trusted access is configured for.</param>
        /// <param name="roles">A list of roles to bind, each item is a
        /// resource type qualified role name. For example:
        /// 'Microsoft.MachineLearningServices/workspaces/reader'.</param>
        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. E.g.
        /// "Microsoft.Compute/virtualMachines" or
        /// "Microsoft.Storage/storageAccounts"</param>
        /// <param name="systemData">Azure Resource Manager metadata containing
        /// createdBy and modifiedBy information.</param>
        /// <param name="provisioningState">The current provisioning state of
        /// trusted access role binding. Possible values include: 'Succeeded',
        /// 'Failed', 'Updating', 'Deleting'</param>
        public TrustedAccessRoleBinding(string sourceResourceId, IList<string> roles, string id = default(string), string name = default(string), string type = default(string), SystemData systemData = default(SystemData), string provisioningState = default(string))
            : base(id, name, type, systemData)
        {
            ProvisioningState = provisioningState;
            SourceResourceId = sourceResourceId;
            Roles = roles;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the current provisioning state of trusted access role binding.
        /// Possible values include: 'Succeeded', 'Failed', 'Updating',
        /// 'Deleting'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets the ARM resource ID of source resource that trusted
        /// access is configured for.
        /// </summary>
        [JsonProperty(PropertyName = "properties.sourceResourceId")]
        public string SourceResourceId { get; set; }

        /// <summary>
        /// Gets or sets a list of roles to bind, each item is a resource type
        /// qualified role name. For example:
        /// 'Microsoft.MachineLearningServices/workspaces/reader'.
        /// </summary>
        [JsonProperty(PropertyName = "properties.roles")]
        public IList<string> Roles { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (SourceResourceId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SourceResourceId");
            }
            if (Roles == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Roles");
            }
        }
    }
}
