// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ContainerService
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for FleetMembersOperations.
    /// </summary>
    public static partial class FleetMembersOperationsExtensions
    {
            /// <summary>
            /// Creates or updates a fleet member.
            /// </summary>
            /// <remarks>
            /// A member contains a reference to an existing Kubernetes cluster. Creating a
            /// member makes the referenced cluster join the Fleet.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='fleetName'>
            /// The name of the Fleet resource.
            /// </param>
            /// <param name='fleetMemberName'>
            /// The name of the Fleet member resource.
            /// </param>
            /// <param name='ifMatch'>
            /// Omit this value to always overwrite the current resource. Specify the
            /// last-seen ETag value to prevent accidentally overwriting concurrent
            /// changes.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// Set to '*' to allow a new resource to be created and prevent updating an
            /// existing resource. Other values will result in a 412 Pre-condition Failed
            /// response.
            /// </param>
            /// <param name='clusterResourceId'>
            /// The ARM resource id of the cluster that joins the Fleet. Must be a valid
            /// Azure resource id. e.g.:
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{clusterName}'.
            /// </param>
            public static FleetMember CreateOrUpdate(this IFleetMembersOperations operations, string resourceGroupName, string fleetName, string fleetMemberName, string ifMatch = default(string), string ifNoneMatch = default(string), string clusterResourceId = default(string))
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, fleetName, fleetMemberName, ifMatch, ifNoneMatch, clusterResourceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a fleet member.
            /// </summary>
            /// <remarks>
            /// A member contains a reference to an existing Kubernetes cluster. Creating a
            /// member makes the referenced cluster join the Fleet.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='fleetName'>
            /// The name of the Fleet resource.
            /// </param>
            /// <param name='fleetMemberName'>
            /// The name of the Fleet member resource.
            /// </param>
            /// <param name='ifMatch'>
            /// Omit this value to always overwrite the current resource. Specify the
            /// last-seen ETag value to prevent accidentally overwriting concurrent
            /// changes.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// Set to '*' to allow a new resource to be created and prevent updating an
            /// existing resource. Other values will result in a 412 Pre-condition Failed
            /// response.
            /// </param>
            /// <param name='clusterResourceId'>
            /// The ARM resource id of the cluster that joins the Fleet. Must be a valid
            /// Azure resource id. e.g.:
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{clusterName}'.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FleetMember> CreateOrUpdateAsync(this IFleetMembersOperations operations, string resourceGroupName, string fleetName, string fleetMemberName, string ifMatch = default(string), string ifNoneMatch = default(string), string clusterResourceId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, fleetName, fleetMemberName, ifMatch, ifNoneMatch, clusterResourceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a Fleet member.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='fleetName'>
            /// The name of the Fleet resource.
            /// </param>
            /// <param name='fleetMemberName'>
            /// The name of the Fleet member resource.
            /// </param>
            public static FleetMember Get(this IFleetMembersOperations operations, string resourceGroupName, string fleetName, string fleetMemberName)
            {
                return operations.GetAsync(resourceGroupName, fleetName, fleetMemberName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a Fleet member.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='fleetName'>
            /// The name of the Fleet resource.
            /// </param>
            /// <param name='fleetMemberName'>
            /// The name of the Fleet member resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FleetMember> GetAsync(this IFleetMembersOperations operations, string resourceGroupName, string fleetName, string fleetMemberName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, fleetName, fleetMemberName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a fleet member.
            /// </summary>
            /// <remarks>
            /// Deleting a Fleet member results in the member cluster leaving fleet. The
            /// Member azure resource is deleted upon success. The underlying cluster is
            /// not deleted.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='fleetName'>
            /// The name of the Fleet resource.
            /// </param>
            /// <param name='fleetMemberName'>
            /// The name of the Fleet member resource.
            /// </param>
            /// <param name='ifMatch'>
            /// Omit this value to always overwrite the current resource. Specify the
            /// last-seen ETag value to prevent accidentally overwriting concurrent
            /// changes.
            /// </param>
            public static FleetMembersDeleteHeaders Delete(this IFleetMembersOperations operations, string resourceGroupName, string fleetName, string fleetMemberName, string ifMatch = default(string))
            {
                return operations.DeleteAsync(resourceGroupName, fleetName, fleetMemberName, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a fleet member.
            /// </summary>
            /// <remarks>
            /// Deleting a Fleet member results in the member cluster leaving fleet. The
            /// Member azure resource is deleted upon success. The underlying cluster is
            /// not deleted.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='fleetName'>
            /// The name of the Fleet resource.
            /// </param>
            /// <param name='fleetMemberName'>
            /// The name of the Fleet member resource.
            /// </param>
            /// <param name='ifMatch'>
            /// Omit this value to always overwrite the current resource. Specify the
            /// last-seen ETag value to prevent accidentally overwriting concurrent
            /// changes.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FleetMembersDeleteHeaders> DeleteAsync(this IFleetMembersOperations operations, string resourceGroupName, string fleetName, string fleetMemberName, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, fleetName, fleetMemberName, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Lists the members of a fleet.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='fleetName'>
            /// The name of the Fleet resource.
            /// </param>
            public static IPage<FleetMember> ListByFleet(this IFleetMembersOperations operations, string resourceGroupName, string fleetName)
            {
                return operations.ListByFleetAsync(resourceGroupName, fleetName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the members of a fleet.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='fleetName'>
            /// The name of the Fleet resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<FleetMember>> ListByFleetAsync(this IFleetMembersOperations operations, string resourceGroupName, string fleetName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByFleetWithHttpMessagesAsync(resourceGroupName, fleetName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a fleet member.
            /// </summary>
            /// <remarks>
            /// A member contains a reference to an existing Kubernetes cluster. Creating a
            /// member makes the referenced cluster join the Fleet.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='fleetName'>
            /// The name of the Fleet resource.
            /// </param>
            /// <param name='fleetMemberName'>
            /// The name of the Fleet member resource.
            /// </param>
            /// <param name='ifMatch'>
            /// Omit this value to always overwrite the current resource. Specify the
            /// last-seen ETag value to prevent accidentally overwriting concurrent
            /// changes.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// Set to '*' to allow a new resource to be created and prevent updating an
            /// existing resource. Other values will result in a 412 Pre-condition Failed
            /// response.
            /// </param>
            /// <param name='clusterResourceId'>
            /// The ARM resource id of the cluster that joins the Fleet. Must be a valid
            /// Azure resource id. e.g.:
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{clusterName}'.
            /// </param>
            public static FleetMember BeginCreateOrUpdate(this IFleetMembersOperations operations, string resourceGroupName, string fleetName, string fleetMemberName, string ifMatch = default(string), string ifNoneMatch = default(string), string clusterResourceId = default(string))
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, fleetName, fleetMemberName, ifMatch, ifNoneMatch, clusterResourceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a fleet member.
            /// </summary>
            /// <remarks>
            /// A member contains a reference to an existing Kubernetes cluster. Creating a
            /// member makes the referenced cluster join the Fleet.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='fleetName'>
            /// The name of the Fleet resource.
            /// </param>
            /// <param name='fleetMemberName'>
            /// The name of the Fleet member resource.
            /// </param>
            /// <param name='ifMatch'>
            /// Omit this value to always overwrite the current resource. Specify the
            /// last-seen ETag value to prevent accidentally overwriting concurrent
            /// changes.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// Set to '*' to allow a new resource to be created and prevent updating an
            /// existing resource. Other values will result in a 412 Pre-condition Failed
            /// response.
            /// </param>
            /// <param name='clusterResourceId'>
            /// The ARM resource id of the cluster that joins the Fleet. Must be a valid
            /// Azure resource id. e.g.:
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{clusterName}'.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FleetMember> BeginCreateOrUpdateAsync(this IFleetMembersOperations operations, string resourceGroupName, string fleetName, string fleetMemberName, string ifMatch = default(string), string ifNoneMatch = default(string), string clusterResourceId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, fleetName, fleetMemberName, ifMatch, ifNoneMatch, clusterResourceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a fleet member.
            /// </summary>
            /// <remarks>
            /// Deleting a Fleet member results in the member cluster leaving fleet. The
            /// Member azure resource is deleted upon success. The underlying cluster is
            /// not deleted.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='fleetName'>
            /// The name of the Fleet resource.
            /// </param>
            /// <param name='fleetMemberName'>
            /// The name of the Fleet member resource.
            /// </param>
            /// <param name='ifMatch'>
            /// Omit this value to always overwrite the current resource. Specify the
            /// last-seen ETag value to prevent accidentally overwriting concurrent
            /// changes.
            /// </param>
            public static FleetMembersDeleteHeaders BeginDelete(this IFleetMembersOperations operations, string resourceGroupName, string fleetName, string fleetMemberName, string ifMatch = default(string))
            {
                return operations.BeginDeleteAsync(resourceGroupName, fleetName, fleetMemberName, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a fleet member.
            /// </summary>
            /// <remarks>
            /// Deleting a Fleet member results in the member cluster leaving fleet. The
            /// Member azure resource is deleted upon success. The underlying cluster is
            /// not deleted.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='fleetName'>
            /// The name of the Fleet resource.
            /// </param>
            /// <param name='fleetMemberName'>
            /// The name of the Fleet member resource.
            /// </param>
            /// <param name='ifMatch'>
            /// Omit this value to always overwrite the current resource. Specify the
            /// last-seen ETag value to prevent accidentally overwriting concurrent
            /// changes.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FleetMembersDeleteHeaders> BeginDeleteAsync(this IFleetMembersOperations operations, string resourceGroupName, string fleetName, string fleetMemberName, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, fleetName, fleetMemberName, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Lists the members of a fleet.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<FleetMember> ListByFleetNext(this IFleetMembersOperations operations, string nextPageLink)
            {
                return operations.ListByFleetNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the members of a fleet.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<FleetMember>> ListByFleetNextAsync(this IFleetMembersOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByFleetNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
