// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ContainerService
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for FleetsOperations.
    /// </summary>
    public static partial class FleetsOperationsExtensions
    {
            /// <summary>
            /// Creates or updates a Fleet.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='fleetName'>
            /// The name of the Fleet resource.
            /// </param>
            /// <param name='parameters'>
            /// The Fleet to create or update.
            /// </param>
            /// <param name='ifMatch'>
            /// Omit this value to always overwrite the current resource. Specify the
            /// last-seen ETag value to prevent accidentally overwriting concurrent
            /// changes.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// Set to '*' to allow a new resource to be created and prevent updating an
            /// existing resource. Other values will result in a 412 Pre-condition Failed
            /// response.
            /// </param>
            public static Fleet CreateOrUpdate(this IFleetsOperations operations, string resourceGroupName, string fleetName, Fleet parameters, string ifMatch = default(string), string ifNoneMatch = default(string))
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, fleetName, parameters, ifMatch, ifNoneMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a Fleet.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='fleetName'>
            /// The name of the Fleet resource.
            /// </param>
            /// <param name='parameters'>
            /// The Fleet to create or update.
            /// </param>
            /// <param name='ifMatch'>
            /// Omit this value to always overwrite the current resource. Specify the
            /// last-seen ETag value to prevent accidentally overwriting concurrent
            /// changes.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// Set to '*' to allow a new resource to be created and prevent updating an
            /// existing resource. Other values will result in a 412 Pre-condition Failed
            /// response.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Fleet> CreateOrUpdateAsync(this IFleetsOperations operations, string resourceGroupName, string fleetName, Fleet parameters, string ifMatch = default(string), string ifNoneMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, fleetName, parameters, ifMatch, ifNoneMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Patches a fleet resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='fleetName'>
            /// The name of the Fleet resource.
            /// </param>
            /// <param name='ifMatch'>
            /// Omit this value to always overwrite the current resource. Specify the
            /// last-seen ETag value to prevent accidentally overwriting concurrent
            /// changes.
            /// </param>
            /// <param name='tags'>
            /// Resource tags.
            /// </param>
            public static Fleet Update(this IFleetsOperations operations, string resourceGroupName, string fleetName, string ifMatch = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>))
            {
                return operations.UpdateAsync(resourceGroupName, fleetName, ifMatch, tags).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Patches a fleet resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='fleetName'>
            /// The name of the Fleet resource.
            /// </param>
            /// <param name='ifMatch'>
            /// Omit this value to always overwrite the current resource. Specify the
            /// last-seen ETag value to prevent accidentally overwriting concurrent
            /// changes.
            /// </param>
            /// <param name='tags'>
            /// Resource tags.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Fleet> UpdateAsync(this IFleetsOperations operations, string resourceGroupName, string fleetName, string ifMatch = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, fleetName, ifMatch, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a Fleet.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='fleetName'>
            /// The name of the Fleet resource.
            /// </param>
            public static Fleet Get(this IFleetsOperations operations, string resourceGroupName, string fleetName)
            {
                return operations.GetAsync(resourceGroupName, fleetName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a Fleet.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='fleetName'>
            /// The name of the Fleet resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Fleet> GetAsync(this IFleetsOperations operations, string resourceGroupName, string fleetName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, fleetName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a Fleet.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='fleetName'>
            /// The name of the Fleet resource.
            /// </param>
            /// <param name='ifMatch'>
            /// Omit this value to always overwrite the current resource. Specify the
            /// last-seen ETag value to prevent accidentally overwriting concurrent
            /// changes.
            /// </param>
            public static FleetsDeleteHeaders Delete(this IFleetsOperations operations, string resourceGroupName, string fleetName, string ifMatch = default(string))
            {
                return operations.DeleteAsync(resourceGroupName, fleetName, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a Fleet.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='fleetName'>
            /// The name of the Fleet resource.
            /// </param>
            /// <param name='ifMatch'>
            /// Omit this value to always overwrite the current resource. Specify the
            /// last-seen ETag value to prevent accidentally overwriting concurrent
            /// changes.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FleetsDeleteHeaders> DeleteAsync(this IFleetsOperations operations, string resourceGroupName, string fleetName, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, fleetName, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Lists fleets in the specified subscription and resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            public static IPage<Fleet> ListByResourceGroup(this IFleetsOperations operations, string resourceGroupName)
            {
                return operations.ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists fleets in the specified subscription and resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Fleet>> ListByResourceGroupAsync(this IFleetsOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists fleets in the specified subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<Fleet> List(this IFleetsOperations operations)
            {
                return operations.ListAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists fleets in the specified subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Fleet>> ListAsync(this IFleetsOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists the user credentials of a Fleet.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='fleetName'>
            /// The name of the Fleet resource.
            /// </param>
            public static FleetCredentialResults ListCredentials(this IFleetsOperations operations, string resourceGroupName, string fleetName)
            {
                return operations.ListCredentialsAsync(resourceGroupName, fleetName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the user credentials of a Fleet.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='fleetName'>
            /// The name of the Fleet resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FleetCredentialResults> ListCredentialsAsync(this IFleetsOperations operations, string resourceGroupName, string fleetName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCredentialsWithHttpMessagesAsync(resourceGroupName, fleetName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a Fleet.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='fleetName'>
            /// The name of the Fleet resource.
            /// </param>
            /// <param name='parameters'>
            /// The Fleet to create or update.
            /// </param>
            /// <param name='ifMatch'>
            /// Omit this value to always overwrite the current resource. Specify the
            /// last-seen ETag value to prevent accidentally overwriting concurrent
            /// changes.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// Set to '*' to allow a new resource to be created and prevent updating an
            /// existing resource. Other values will result in a 412 Pre-condition Failed
            /// response.
            /// </param>
            public static Fleet BeginCreateOrUpdate(this IFleetsOperations operations, string resourceGroupName, string fleetName, Fleet parameters, string ifMatch = default(string), string ifNoneMatch = default(string))
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, fleetName, parameters, ifMatch, ifNoneMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a Fleet.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='fleetName'>
            /// The name of the Fleet resource.
            /// </param>
            /// <param name='parameters'>
            /// The Fleet to create or update.
            /// </param>
            /// <param name='ifMatch'>
            /// Omit this value to always overwrite the current resource. Specify the
            /// last-seen ETag value to prevent accidentally overwriting concurrent
            /// changes.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// Set to '*' to allow a new resource to be created and prevent updating an
            /// existing resource. Other values will result in a 412 Pre-condition Failed
            /// response.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Fleet> BeginCreateOrUpdateAsync(this IFleetsOperations operations, string resourceGroupName, string fleetName, Fleet parameters, string ifMatch = default(string), string ifNoneMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, fleetName, parameters, ifMatch, ifNoneMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a Fleet.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='fleetName'>
            /// The name of the Fleet resource.
            /// </param>
            /// <param name='ifMatch'>
            /// Omit this value to always overwrite the current resource. Specify the
            /// last-seen ETag value to prevent accidentally overwriting concurrent
            /// changes.
            /// </param>
            public static FleetsDeleteHeaders BeginDelete(this IFleetsOperations operations, string resourceGroupName, string fleetName, string ifMatch = default(string))
            {
                return operations.BeginDeleteAsync(resourceGroupName, fleetName, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a Fleet.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='fleetName'>
            /// The name of the Fleet resource.
            /// </param>
            /// <param name='ifMatch'>
            /// Omit this value to always overwrite the current resource. Specify the
            /// last-seen ETag value to prevent accidentally overwriting concurrent
            /// changes.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FleetsDeleteHeaders> BeginDeleteAsync(this IFleetsOperations operations, string resourceGroupName, string fleetName, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, fleetName, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Lists fleets in the specified subscription and resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Fleet> ListByResourceGroupNext(this IFleetsOperations operations, string nextPageLink)
            {
                return operations.ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists fleets in the specified subscription and resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Fleet>> ListByResourceGroupNextAsync(this IFleetsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists fleets in the specified subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Fleet> ListNext(this IFleetsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists fleets in the specified subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Fleet>> ListNextAsync(this IFleetsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
