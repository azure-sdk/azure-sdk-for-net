// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ContainerService
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for TrustedAccessRoleBindingsOperations.
    /// </summary>
    public static partial class TrustedAccessRoleBindingsOperationsExtensions
    {
            /// <summary>
            /// List trusted access role bindings.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the managed cluster resource.
            /// </param>
            public static IPage<TrustedAccessRoleBinding> List(this ITrustedAccessRoleBindingsOperations operations, string resourceGroupName, string resourceName)
            {
                return operations.ListAsync(resourceGroupName, resourceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List trusted access role bindings.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the managed cluster resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<TrustedAccessRoleBinding>> ListAsync(this ITrustedAccessRoleBindingsOperations operations, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, resourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a trusted access role binding.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the managed cluster resource.
            /// </param>
            /// <param name='trustedAccessRoleBindingName'>
            /// The name of trusted access role binding.
            /// </param>
            public static TrustedAccessRoleBinding Get(this ITrustedAccessRoleBindingsOperations operations, string resourceGroupName, string resourceName, string trustedAccessRoleBindingName)
            {
                return operations.GetAsync(resourceGroupName, resourceName, trustedAccessRoleBindingName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a trusted access role binding.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the managed cluster resource.
            /// </param>
            /// <param name='trustedAccessRoleBindingName'>
            /// The name of trusted access role binding.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TrustedAccessRoleBinding> GetAsync(this ITrustedAccessRoleBindingsOperations operations, string resourceGroupName, string resourceName, string trustedAccessRoleBindingName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, resourceName, trustedAccessRoleBindingName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a trusted access role binding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the managed cluster resource.
            /// </param>
            /// <param name='trustedAccessRoleBindingName'>
            /// The name of trusted access role binding.
            /// </param>
            /// <param name='trustedAccessRoleBinding'>
            /// A trusted access role binding
            /// </param>
            public static TrustedAccessRoleBinding CreateOrUpdate(this ITrustedAccessRoleBindingsOperations operations, string resourceGroupName, string resourceName, string trustedAccessRoleBindingName, TrustedAccessRoleBinding trustedAccessRoleBinding)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, resourceName, trustedAccessRoleBindingName, trustedAccessRoleBinding).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a trusted access role binding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the managed cluster resource.
            /// </param>
            /// <param name='trustedAccessRoleBindingName'>
            /// The name of trusted access role binding.
            /// </param>
            /// <param name='trustedAccessRoleBinding'>
            /// A trusted access role binding
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TrustedAccessRoleBinding> CreateOrUpdateAsync(this ITrustedAccessRoleBindingsOperations operations, string resourceGroupName, string resourceName, string trustedAccessRoleBindingName, TrustedAccessRoleBinding trustedAccessRoleBinding, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, resourceName, trustedAccessRoleBindingName, trustedAccessRoleBinding, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a trusted access role binding.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the managed cluster resource.
            /// </param>
            /// <param name='trustedAccessRoleBindingName'>
            /// The name of trusted access role binding.
            /// </param>
            public static void Delete(this ITrustedAccessRoleBindingsOperations operations, string resourceGroupName, string resourceName, string trustedAccessRoleBindingName)
            {
                operations.DeleteAsync(resourceGroupName, resourceName, trustedAccessRoleBindingName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a trusted access role binding.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the managed cluster resource.
            /// </param>
            /// <param name='trustedAccessRoleBindingName'>
            /// The name of trusted access role binding.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this ITrustedAccessRoleBindingsOperations operations, string resourceGroupName, string resourceName, string trustedAccessRoleBindingName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, resourceName, trustedAccessRoleBindingName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List trusted access role bindings.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<TrustedAccessRoleBinding> ListNext(this ITrustedAccessRoleBindingsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List trusted access role bindings.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<TrustedAccessRoleBinding>> ListNextAsync(this ITrustedAccessRoleBindingsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
