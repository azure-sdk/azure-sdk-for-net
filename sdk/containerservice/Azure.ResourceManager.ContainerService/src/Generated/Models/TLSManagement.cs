// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ContainerService.Models
{
    /// <summary> Management of TLS certificates for querying network flow logs via the flow log endpoint for Advanced Networking observability clusters. If not specified, the default is Managed. For more information see aka.ms/acnstls. </summary>
    public readonly partial struct TLSManagement : IEquatable<TLSManagement>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="TLSManagement"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TLSManagement(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoneValue = "None";
        private const string ManagedValue = "Managed";

        /// <summary> Disable TLS management of certificates. This leaves the flow log endpoint unencrypted. It is strongly recommended when using this option that you configure your own encryption on top, for example by putting the flow logs endpoint behind an ingress controller. </summary>
        public static TLSManagement None { get; } = new TLSManagement(NoneValue);
        /// <summary> Enable TLS and cert rotation is managed by Azure. </summary>
        public static TLSManagement Managed { get; } = new TLSManagement(ManagedValue);
        /// <summary> Determines if two <see cref="TLSManagement"/> values are the same. </summary>
        public static bool operator ==(TLSManagement left, TLSManagement right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TLSManagement"/> values are not the same. </summary>
        public static bool operator !=(TLSManagement left, TLSManagement right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="TLSManagement"/>. </summary>
        public static implicit operator TLSManagement(string value) => new TLSManagement(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TLSManagement other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TLSManagement other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
