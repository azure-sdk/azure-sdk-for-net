// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.ContainerService.Models
{
    /// <summary> Properties of a namespace managed by ARM. </summary>
    public partial class NamespaceProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="NamespaceProperties"/>. </summary>
        public NamespaceProperties()
        {
            Labels = new ChangeTrackingDictionary<string, string>();
            Annotations = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of <see cref="NamespaceProperties"/>. </summary>
        /// <param name="provisioningState"> The current provisioning state of the namespace. </param>
        /// <param name="labels"> The labels of managed namespace. </param>
        /// <param name="annotations"> The annotations of managed namespace. </param>
        /// <param name="defaultResourceQuota"> The default resource quota enforced upon the namespace. Customers can have other Kubernetes resource quota objects under the namespace. All the resource quotas will be enforced. </param>
        /// <param name="defaultNetworkPolicy"> The default network policy enforced upon the namespace. Customers can have other Kubernetes network policy objects under the namespace. All the network policies will be enforced. </param>
        /// <param name="adoptionPolicy"> Action if Kubernetes namespace with same name already exists. </param>
        /// <param name="deletePolicy"> Delete options of a namespace. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal NamespaceProperties(NamespaceProvisioningState? provisioningState, IDictionary<string, string> labels, IDictionary<string, string> annotations, ResourceQuota defaultResourceQuota, NetworkPolicies defaultNetworkPolicy, AdoptionPolicy? adoptionPolicy, DeletePolicy? deletePolicy, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ProvisioningState = provisioningState;
            Labels = labels;
            Annotations = annotations;
            DefaultResourceQuota = defaultResourceQuota;
            DefaultNetworkPolicy = defaultNetworkPolicy;
            AdoptionPolicy = adoptionPolicy;
            DeletePolicy = deletePolicy;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The current provisioning state of the namespace. </summary>
        [WirePath("provisioningState")]
        public NamespaceProvisioningState? ProvisioningState { get; }
        /// <summary> The labels of managed namespace. </summary>
        [WirePath("labels")]
        public IDictionary<string, string> Labels { get; }
        /// <summary> The annotations of managed namespace. </summary>
        [WirePath("annotations")]
        public IDictionary<string, string> Annotations { get; }
        /// <summary> The default resource quota enforced upon the namespace. Customers can have other Kubernetes resource quota objects under the namespace. All the resource quotas will be enforced. </summary>
        [WirePath("defaultResourceQuota")]
        public ResourceQuota DefaultResourceQuota { get; set; }
        /// <summary> The default network policy enforced upon the namespace. Customers can have other Kubernetes network policy objects under the namespace. All the network policies will be enforced. </summary>
        [WirePath("defaultNetworkPolicy")]
        public NetworkPolicies DefaultNetworkPolicy { get; set; }
        /// <summary> Action if Kubernetes namespace with same name already exists. </summary>
        [WirePath("adoptionPolicy")]
        public AdoptionPolicy? AdoptionPolicy { get; set; }
        /// <summary> Delete options of a namespace. </summary>
        [WirePath("deletePolicy")]
        public DeletePolicy? DeletePolicy { get; set; }
    }
}
