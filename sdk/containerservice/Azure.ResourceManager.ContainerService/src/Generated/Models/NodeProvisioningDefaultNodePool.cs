// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ContainerService.Models
{
    /// <summary> This field has no effect unless mode is 'Auto'. Warning: Changing this from Auto to None on an existing cluster will cause the default Karpenter NodePools to be deleted, which will in turn drain and delete the nodes associated with those pools. It is strongly recommended to not do this unless there are idle nodes ready to take the pods evicted by that action. If not specified, the default is Auto. For more information see aka.ms/something. </summary>
    public readonly partial struct NodeProvisioningDefaultNodePool : IEquatable<NodeProvisioningDefaultNodePool>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="NodeProvisioningDefaultNodePool"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public NodeProvisioningDefaultNodePool(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoneValue = "None";
        private const string AutoValue = "Auto";

        /// <summary> No Karpenter NodePools are provisioned automatically. Automatic scaling will not happen unless the user creates one or more NodePool instances. </summary>
        public static NodeProvisioningDefaultNodePool None { get; } = new NodeProvisioningDefaultNodePool(NoneValue);
        /// <summary> A standard set of Karpenter NodePools are provisioned. </summary>
        public static NodeProvisioningDefaultNodePool Auto { get; } = new NodeProvisioningDefaultNodePool(AutoValue);
        /// <summary> Determines if two <see cref="NodeProvisioningDefaultNodePool"/> values are the same. </summary>
        public static bool operator ==(NodeProvisioningDefaultNodePool left, NodeProvisioningDefaultNodePool right) => left.Equals(right);
        /// <summary> Determines if two <see cref="NodeProvisioningDefaultNodePool"/> values are not the same. </summary>
        public static bool operator !=(NodeProvisioningDefaultNodePool left, NodeProvisioningDefaultNodePool right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="NodeProvisioningDefaultNodePool"/>. </summary>
        public static implicit operator NodeProvisioningDefaultNodePool(string value) => new NodeProvisioningDefaultNodePool(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is NodeProvisioningDefaultNodePool other && Equals(other);
        /// <inheritdoc />
        public bool Equals(NodeProvisioningDefaultNodePool other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
