// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.ContainerService.Models
{
    /// <summary> Overrides for localDNS profile. </summary>
    public partial class LocalDnsOverrides
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="LocalDnsOverrides"/>. </summary>
        public LocalDnsOverrides()
        {
        }

        /// <summary> Initializes a new instance of <see cref="LocalDnsOverrides"/>. </summary>
        /// <param name="queryLogging"> Log level for DNS queries in localDNS. </param>
        /// <param name="protocol"> Enforce TCP or prefer UDP protocol for connections from localDNS to upstream DNS server. </param>
        /// <param name="forwardDestination"> Destination server for DNS queries to be forwarded from localDNS. </param>
        /// <param name="forwardPolicy"> Forward policy for selecting upstream DNS server. See [forward plugin](https://coredns.io/plugins/forward) for more information. </param>
        /// <param name="maxConcurrent"> Maximum number of concurrent queries. See [forward plugin](https://coredns.io/plugins/forward) for more information. </param>
        /// <param name="cacheDurationInSeconds"> Cache max TTL in seconds. See [cache plugin](https://coredns.io/plugins/cache) for more information. </param>
        /// <param name="serveStaleDurationInSeconds"> Serve stale duration in seconds. See [cache plugin](https://coredns.io/plugins/cache) for more information. </param>
        /// <param name="serveStale"> Policy for serving stale data. See [cache plugin](https://coredns.io/plugins/cache) for more information. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal LocalDnsOverrides(LocalDnsQueryLogging? queryLogging, LocalDnsProtocol? protocol, LocalDnsForwardDestination? forwardDestination, LocalDnsForwardPolicy? forwardPolicy, int? maxConcurrent, int? cacheDurationInSeconds, int? serveStaleDurationInSeconds, LocalDnsServeStale? serveStale, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            QueryLogging = queryLogging;
            Protocol = protocol;
            ForwardDestination = forwardDestination;
            ForwardPolicy = forwardPolicy;
            MaxConcurrent = maxConcurrent;
            CacheDurationInSeconds = cacheDurationInSeconds;
            ServeStaleDurationInSeconds = serveStaleDurationInSeconds;
            ServeStale = serveStale;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Log level for DNS queries in localDNS. </summary>
        [WirePath("queryLogging")]
        public LocalDnsQueryLogging? QueryLogging { get; set; }
        /// <summary> Enforce TCP or prefer UDP protocol for connections from localDNS to upstream DNS server. </summary>
        [WirePath("protocol")]
        public LocalDnsProtocol? Protocol { get; set; }
        /// <summary> Destination server for DNS queries to be forwarded from localDNS. </summary>
        [WirePath("forwardDestination")]
        public LocalDnsForwardDestination? ForwardDestination { get; set; }
        /// <summary> Forward policy for selecting upstream DNS server. See [forward plugin](https://coredns.io/plugins/forward) for more information. </summary>
        [WirePath("forwardPolicy")]
        public LocalDnsForwardPolicy? ForwardPolicy { get; set; }
        /// <summary> Maximum number of concurrent queries. See [forward plugin](https://coredns.io/plugins/forward) for more information. </summary>
        [WirePath("maxConcurrent")]
        public int? MaxConcurrent { get; set; }
        /// <summary> Cache max TTL in seconds. See [cache plugin](https://coredns.io/plugins/cache) for more information. </summary>
        [WirePath("cacheDurationInSeconds")]
        public int? CacheDurationInSeconds { get; set; }
        /// <summary> Serve stale duration in seconds. See [cache plugin](https://coredns.io/plugins/cache) for more information. </summary>
        [WirePath("serveStaleDurationInSeconds")]
        public int? ServeStaleDurationInSeconds { get; set; }
        /// <summary> Policy for serving stale data. See [cache plugin](https://coredns.io/plugins/cache) for more information. </summary>
        [WirePath("serveStale")]
        public LocalDnsServeStale? ServeStale { get; set; }
    }
}
