// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ContainerService.Models
{
    /// <summary> Delete options of a namespace. </summary>
    public readonly partial struct DeletePolicy : IEquatable<DeletePolicy>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DeletePolicy"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DeletePolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string KeepValue = "Keep";
        private const string DeleteValue = "Delete";

        /// <summary> Only delete the ARM resource, keep the Kubernetes namespace. Also delete the ManagedByARM label. </summary>
        public static DeletePolicy Keep { get; } = new DeletePolicy(KeepValue);
        /// <summary> Delete both the ARM resource and the Kubernetes namespace together. </summary>
        public static DeletePolicy Delete { get; } = new DeletePolicy(DeleteValue);
        /// <summary> Determines if two <see cref="DeletePolicy"/> values are the same. </summary>
        public static bool operator ==(DeletePolicy left, DeletePolicy right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DeletePolicy"/> values are not the same. </summary>
        public static bool operator !=(DeletePolicy left, DeletePolicy right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="DeletePolicy"/>. </summary>
        public static implicit operator DeletePolicy(string value) => new DeletePolicy(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DeletePolicy other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DeletePolicy other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
