// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ContainerService.Models
{
    /// <summary> Forward policy for selecting upstream DNS server. See [forward plugin](https://coredns.io/plugins/forward) for more information. </summary>
    public readonly partial struct LocalDnsForwardPolicy : IEquatable<LocalDnsForwardPolicy>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="LocalDnsForwardPolicy"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public LocalDnsForwardPolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SequentialValue = "Sequential";
        private const string RoundRobinValue = "RoundRobin";
        private const string RandomValue = "Random";

        /// <summary> Implements sequential upstream DNS server selection. See [forward plugin](https://coredns.io/plugins/forward) for more information. </summary>
        public static LocalDnsForwardPolicy Sequential { get; } = new LocalDnsForwardPolicy(SequentialValue);
        /// <summary> Implements round robin upstream DNS server selection. See [forward plugin](https://coredns.io/plugins/forward) for more information. </summary>
        public static LocalDnsForwardPolicy RoundRobin { get; } = new LocalDnsForwardPolicy(RoundRobinValue);
        /// <summary> Implements random upstream DNS server selection. See [forward plugin](https://coredns.io/plugins/forward) for more information. </summary>
        public static LocalDnsForwardPolicy Random { get; } = new LocalDnsForwardPolicy(RandomValue);
        /// <summary> Determines if two <see cref="LocalDnsForwardPolicy"/> values are the same. </summary>
        public static bool operator ==(LocalDnsForwardPolicy left, LocalDnsForwardPolicy right) => left.Equals(right);
        /// <summary> Determines if two <see cref="LocalDnsForwardPolicy"/> values are not the same. </summary>
        public static bool operator !=(LocalDnsForwardPolicy left, LocalDnsForwardPolicy right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="LocalDnsForwardPolicy"/>. </summary>
        public static implicit operator LocalDnsForwardPolicy(string value) => new LocalDnsForwardPolicy(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is LocalDnsForwardPolicy other && Equals(other);
        /// <inheritdoc />
        public bool Equals(LocalDnsForwardPolicy other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
