// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ContainerService.Models
{
    /// <summary> Policy for serving stale data. See [cache plugin](https://coredns.io/plugins/cache) for more information. </summary>
    public readonly partial struct LocalDnsServeStale : IEquatable<LocalDnsServeStale>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="LocalDnsServeStale"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public LocalDnsServeStale(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string VerifyValue = "Verify";
        private const string ImmediateValue = "Immediate";
        private const string DisableValue = "Disable";

        /// <summary> Serve stale data with verification. First verify that an entry is still unavailable from the source before sending the expired entry to the client. See [cache plugin](https://coredns.io/plugins/cache) for more information. </summary>
        public static LocalDnsServeStale Verify { get; } = new LocalDnsServeStale(VerifyValue);
        /// <summary> Serve stale data immediately. Send the expired entry to the client before checking to see if the entry is available from the source. See [cache plugin](https://coredns.io/plugins/cache) for more information. </summary>
        public static LocalDnsServeStale Immediate { get; } = new LocalDnsServeStale(ImmediateValue);
        /// <summary> Disable serving stale data. </summary>
        public static LocalDnsServeStale Disable { get; } = new LocalDnsServeStale(DisableValue);
        /// <summary> Determines if two <see cref="LocalDnsServeStale"/> values are the same. </summary>
        public static bool operator ==(LocalDnsServeStale left, LocalDnsServeStale right) => left.Equals(right);
        /// <summary> Determines if two <see cref="LocalDnsServeStale"/> values are not the same. </summary>
        public static bool operator !=(LocalDnsServeStale left, LocalDnsServeStale right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="LocalDnsServeStale"/>. </summary>
        public static implicit operator LocalDnsServeStale(string value) => new LocalDnsServeStale(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is LocalDnsServeStale other && Equals(other);
        /// <inheritdoc />
        public bool Equals(LocalDnsServeStale other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
