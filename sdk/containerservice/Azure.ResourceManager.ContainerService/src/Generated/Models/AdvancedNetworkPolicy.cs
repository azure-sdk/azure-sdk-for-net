// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ContainerService.Models
{
    /// <summary> This allows users to configure Layer 7 network policies (FQDN, HTTP, Kafka). Policies themselves must be configured via the Cilium Network Policy resources, see https://docs.cilium.io/en/latest/security/policy/index.html. This can be enabled only on cilium-based clusters. If not specified, the default value is FQDN if security.enabled is set to true. </summary>
    public readonly partial struct AdvancedNetworkPolicy : IEquatable<AdvancedNetworkPolicy>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AdvancedNetworkPolicy"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AdvancedNetworkPolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string L7Value = "L7";
        private const string FqdnValue = "FQDN";
        private const string NoneValue = "None";

        /// <summary> Enable Layer7 network policies (FQDN, HTTP/S, Kafka). This option is a superset of the FQDN option. </summary>
        public static AdvancedNetworkPolicy L7 { get; } = new AdvancedNetworkPolicy(L7Value);
        /// <summary> Enable FQDN based network policies. </summary>
        public static AdvancedNetworkPolicy Fqdn { get; } = new AdvancedNetworkPolicy(FqdnValue);
        /// <summary> Disable Layer 7 network policies (FQDN, HTTP/S, Kafka). </summary>
        public static AdvancedNetworkPolicy None { get; } = new AdvancedNetworkPolicy(NoneValue);
        /// <summary> Determines if two <see cref="AdvancedNetworkPolicy"/> values are the same. </summary>
        public static bool operator ==(AdvancedNetworkPolicy left, AdvancedNetworkPolicy right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AdvancedNetworkPolicy"/> values are not the same. </summary>
        public static bool operator !=(AdvancedNetworkPolicy left, AdvancedNetworkPolicy right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="AdvancedNetworkPolicy"/>. </summary>
        public static implicit operator AdvancedNetworkPolicy(string value) => new AdvancedNetworkPolicy(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AdvancedNetworkPolicy other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AdvancedNetworkPolicy other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
