// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ContainerService.Models
{
    /// <summary> Action if Kubernetes namespace with same name already exists. </summary>
    public readonly partial struct AdoptionPolicy : IEquatable<AdoptionPolicy>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AdoptionPolicy"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AdoptionPolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NeverValue = "Never";
        private const string IfIdenticalValue = "IfIdentical";
        private const string AlwaysValue = "Always";

        /// <summary> If the namespace already exists in Kubernetes, attempts to create that same namespace in ARM will fail. </summary>
        public static AdoptionPolicy Never { get; } = new AdoptionPolicy(NeverValue);
        /// <summary> Take over the existing namespace to be managed by ARM, if there is no difference. </summary>
        public static AdoptionPolicy IfIdentical { get; } = new AdoptionPolicy(IfIdenticalValue);
        /// <summary> Always take over the existing namespace to be managed by ARM, some fields might be overwritten. </summary>
        public static AdoptionPolicy Always { get; } = new AdoptionPolicy(AlwaysValue);
        /// <summary> Determines if two <see cref="AdoptionPolicy"/> values are the same. </summary>
        public static bool operator ==(AdoptionPolicy left, AdoptionPolicy right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AdoptionPolicy"/> values are not the same. </summary>
        public static bool operator !=(AdoptionPolicy left, AdoptionPolicy right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="AdoptionPolicy"/>. </summary>
        public static implicit operator AdoptionPolicy(string value) => new AdoptionPolicy(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AdoptionPolicy other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AdoptionPolicy other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
