// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ContainerService.Models
{
    /// <summary> The config customization mode for this scheduler instance. </summary>
    public readonly partial struct SchedulerConfigMode : IEquatable<SchedulerConfigMode>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SchedulerConfigMode"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SchedulerConfigMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoneValue = "None";
        private const string ManagedByCRDValue = "ManagedByCRD";

        /// <summary> No config customization. Use default configuration. </summary>
        public static SchedulerConfigMode None { get; } = new SchedulerConfigMode(NoneValue);
        /// <summary> Enable config customization. Customer can specify scheduler configuration via a CRD. See aka.ms/aks/scheduler-crd for details. </summary>
        public static SchedulerConfigMode ManagedByCRD { get; } = new SchedulerConfigMode(ManagedByCRDValue);
        /// <summary> Determines if two <see cref="SchedulerConfigMode"/> values are the same. </summary>
        public static bool operator ==(SchedulerConfigMode left, SchedulerConfigMode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SchedulerConfigMode"/> values are not the same. </summary>
        public static bool operator !=(SchedulerConfigMode left, SchedulerConfigMode right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="SchedulerConfigMode"/>. </summary>
        public static implicit operator SchedulerConfigMode(string value) => new SchedulerConfigMode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SchedulerConfigMode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SchedulerConfigMode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
