// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ContainerService.Models
{
    /// <summary> Enum representing different network policy rules. </summary>
    public readonly partial struct PolicyRule : IEquatable<PolicyRule>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="PolicyRule"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PolicyRule(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DenyAllValue = "DenyAll";
        private const string AllowAllValue = "AllowAll";
        private const string AllowSameNamespaceValue = "AllowSameNamespace";

        /// <summary> Deny all network traffic. </summary>
        public static PolicyRule DenyAll { get; } = new PolicyRule(DenyAllValue);
        /// <summary> Allow all network traffic. </summary>
        public static PolicyRule AllowAll { get; } = new PolicyRule(AllowAllValue);
        /// <summary> Allow traffic within the same namespace. </summary>
        public static PolicyRule AllowSameNamespace { get; } = new PolicyRule(AllowSameNamespaceValue);
        /// <summary> Determines if two <see cref="PolicyRule"/> values are the same. </summary>
        public static bool operator ==(PolicyRule left, PolicyRule right) => left.Equals(right);
        /// <summary> Determines if two <see cref="PolicyRule"/> values are not the same. </summary>
        public static bool operator !=(PolicyRule left, PolicyRule right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="PolicyRule"/>. </summary>
        public static implicit operator PolicyRule(string value) => new PolicyRule(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PolicyRule other && Equals(other);
        /// <inheritdoc />
        public bool Equals(PolicyRule other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
