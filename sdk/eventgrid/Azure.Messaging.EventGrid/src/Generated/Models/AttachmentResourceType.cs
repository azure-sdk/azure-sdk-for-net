// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Messaging.EventGrid.SystemEvents
{
    /// <summary> Attachment resource type. </summary>
    public readonly partial struct AttachmentResourceType : IEquatable<AttachmentResourceType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AttachmentResourceType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AttachmentResourceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PartyValue = "Party";
        private const string FarmValue = "Farm";
        private const string FieldValue = "Field";
        private const string SeasonalFieldValue = "SeasonalField";
        private const string BoundaryValue = "Boundary";
        private const string ApplicationDataValue = "ApplicationData";
        private const string HarvestDataValue = "HarvestData";
        private const string TillageDataValue = "TillageData";
        private const string PlantingDataValue = "PlantingData";
        private const string PlantTissueAnalysisValue = "PlantTissueAnalysis";

        /// <summary> Party. </summary>
        public static AttachmentResourceType Party { get; } = new AttachmentResourceType(PartyValue);
        /// <summary> Farm. </summary>
        public static AttachmentResourceType Farm { get; } = new AttachmentResourceType(FarmValue);
        /// <summary> Field. </summary>
        public static AttachmentResourceType Field { get; } = new AttachmentResourceType(FieldValue);
        /// <summary> SeasonalField. </summary>
        public static AttachmentResourceType SeasonalField { get; } = new AttachmentResourceType(SeasonalFieldValue);
        /// <summary> Boundary. </summary>
        public static AttachmentResourceType Boundary { get; } = new AttachmentResourceType(BoundaryValue);
        /// <summary> ApplicationData. </summary>
        public static AttachmentResourceType ApplicationData { get; } = new AttachmentResourceType(ApplicationDataValue);
        /// <summary> HarvestData. </summary>
        public static AttachmentResourceType HarvestData { get; } = new AttachmentResourceType(HarvestDataValue);
        /// <summary> TillageData. </summary>
        public static AttachmentResourceType TillageData { get; } = new AttachmentResourceType(TillageDataValue);
        /// <summary> PlantingData. </summary>
        public static AttachmentResourceType PlantingData { get; } = new AttachmentResourceType(PlantingDataValue);
        /// <summary> PlantTissueAnalysis. </summary>
        public static AttachmentResourceType PlantTissueAnalysis { get; } = new AttachmentResourceType(PlantTissueAnalysisValue);
        /// <summary> Determines if two <see cref="AttachmentResourceType"/> values are the same. </summary>
        public static bool operator ==(AttachmentResourceType left, AttachmentResourceType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AttachmentResourceType"/> values are not the same. </summary>
        public static bool operator !=(AttachmentResourceType left, AttachmentResourceType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AttachmentResourceType"/>. </summary>
        public static implicit operator AttachmentResourceType(string value) => new AttachmentResourceType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AttachmentResourceType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AttachmentResourceType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
