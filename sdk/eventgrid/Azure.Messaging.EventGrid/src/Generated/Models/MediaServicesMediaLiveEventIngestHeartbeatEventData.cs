// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

namespace Azure.Messaging.EventGrid.Models
{
    /// <summary> Ingest heartbeat event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.LiveEventIngestHeartbeat event. </summary>
    internal partial class MediaServicesMediaLiveEventIngestHeartbeatEventData
    {
        /// <summary> Initializes a new instance of MediaServicesMediaLiveEventIngestHeartbeatEventData. </summary>
        internal MediaServicesMediaLiveEventIngestHeartbeatEventData()
        {
        }

        /// <summary> Gets the type of the track (Audio / Video). </summary>
        public string TrackType { get; }
        /// <summary> Gets the track name. </summary>
        public string TrackName { get; }
        /// <summary> Gets the Live Transcription language. </summary>
        public string TranscriptionLanguage { get; }
        /// <summary> Gets the Live Transcription state. </summary>
        public string TranscriptionState { get; }
        /// <summary> Gets the bitrate of the track. </summary>
        public long? Bitrate { get; }
        /// <summary> Gets the incoming bitrate. </summary>
        public long? IncomingBitrate { get; }
        /// <summary> Gets the track ingest drift value. </summary>
        public string IngestDriftValue { get; }
        /// <summary> Gets the arrival UTC time of the last fragment. </summary>
        public string LastFragmentArrivalTime { get; }
        /// <summary> Gets the last timestamp. </summary>
        public string LastTimestamp { get; }
        /// <summary> Gets the timescale of the last timestamp. </summary>
        public string Timescale { get; }
        /// <summary> Gets the fragment Overlap count. </summary>
        public long? OverlapCount { get; }
        /// <summary> Gets the fragment Discontinuity count. </summary>
        public long? DiscontinuityCount { get; }
        /// <summary> Gets Non increasing count. </summary>
        public long? NonincreasingCount { get; }
        /// <summary> Gets a value indicating whether unexpected bitrate is present or not. </summary>
        public bool? UnexpectedBitrate { get; }
        /// <summary> Gets the state of the live event. </summary>
        public string State { get; }
        /// <summary> Gets a value indicating whether preview is healthy or not. </summary>
        public bool? Healthy { get; }
    }
}
