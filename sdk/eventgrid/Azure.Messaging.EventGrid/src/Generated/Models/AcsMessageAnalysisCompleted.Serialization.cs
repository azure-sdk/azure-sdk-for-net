// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;

namespace Azure.Messaging.EventGrid.SystemEvents
{
    public partial class AcsMessageAnalysisCompleted
    {
        internal static AcsMessageAnalysisCompleted DeserializeAcsMessageAnalysisCompleted(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string originalMessage = default;
            AcsMessageChannelKind? channelType = default;
            string intentAnalysis = default;
            IReadOnlyList<string> keyPhraseExtraction = default;
            AcsMessageLanguageDetection languageDetection = default;
            AcsMessageSentiment sentiments = default;
            string @from = default;
            string to = default;
            DateTimeOffset? receivedTimestamp = default;
            AcsMessageChannelEventError error = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("originalMessage"u8))
                {
                    originalMessage = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("channelType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    channelType = new AcsMessageChannelKind(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("intentAnalysis"u8))
                {
                    intentAnalysis = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("keyPhraseExtraction"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    keyPhraseExtraction = array;
                    continue;
                }
                if (property.NameEquals("languageDetection"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    languageDetection = AcsMessageLanguageDetection.DeserializeAcsMessageLanguageDetection(property.Value);
                    continue;
                }
                if (property.NameEquals("sentiments"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sentiments = AcsMessageSentiment.DeserializeAcsMessageSentiment(property.Value);
                    continue;
                }
                if (property.NameEquals("from"u8))
                {
                    @from = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("to"u8))
                {
                    to = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("receivedTimestamp"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    receivedTimestamp = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("error"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    error = AcsMessageChannelEventError.DeserializeAcsMessageChannelEventError(property.Value);
                    continue;
                }
            }
            return new AcsMessageAnalysisCompleted(
                @from,
                to,
                receivedTimestamp,
                error,
                originalMessage,
                channelType,
                intentAnalysis,
                keyPhraseExtraction ?? new ChangeTrackingList<string>(),
                languageDetection,
                sentiments);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static new AcsMessageAnalysisCompleted FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeAcsMessageAnalysisCompleted(document.RootElement);
        }
    }
}
