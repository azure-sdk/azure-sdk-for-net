// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Messaging.EventGrid.Namespaces
{
    /// <summary> Supported delays for release operation. </summary>
    public readonly partial struct ReleaseDelay : IEquatable<ReleaseDelay>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ReleaseDelay"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ReleaseDelay(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string By0SecondsValue = "0";
        private const string By10SecondsValue = "10";
        private const string By60SecondsValue = "60";
        private const string By600SecondsValue = "600";
        private const string By3600SecondsValue = "3600";

        /// <summary> Release the event after 0 seconds. </summary>
        public static ReleaseDelay By0Seconds { get; } = new ReleaseDelay(By0SecondsValue);
        /// <summary> Release the event after 10 seconds. </summary>
        public static ReleaseDelay By10Seconds { get; } = new ReleaseDelay(By10SecondsValue);
        /// <summary> Release the event after 60 seconds. </summary>
        public static ReleaseDelay By60Seconds { get; } = new ReleaseDelay(By60SecondsValue);
        /// <summary> Release the event after 600 seconds. </summary>
        public static ReleaseDelay By600Seconds { get; } = new ReleaseDelay(By600SecondsValue);
        /// <summary> Release the event after 3600 seconds. </summary>
        public static ReleaseDelay By3600Seconds { get; } = new ReleaseDelay(By3600SecondsValue);
        /// <summary> Determines if two <see cref="ReleaseDelay"/> values are the same. </summary>
        public static bool operator ==(ReleaseDelay left, ReleaseDelay right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ReleaseDelay"/> values are not the same. </summary>
        public static bool operator !=(ReleaseDelay left, ReleaseDelay right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ReleaseDelay"/>. </summary>
        public static implicit operator ReleaseDelay(string value) => new ReleaseDelay(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ReleaseDelay other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ReleaseDelay other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
